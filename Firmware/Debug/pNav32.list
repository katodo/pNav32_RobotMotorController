
pNav32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800d948  0800d948  0001d948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da98  0800da98  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800da98  0800da98  0001da98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800daa0  0800daa0  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800daa0  0800daa0  0001daa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800daa4  0800daa4  0001daa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800daa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00006a84  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006be8  20006be8  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d0e4  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006652  00000000  00000000  0004d278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023a8  00000000  00000000  000538d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002108  00000000  00000000  00055c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ae7e  00000000  00000000  00057d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e4a7  00000000  00000000  00082bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb8c3  00000000  00000000  000b10a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019c968  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097c4  00000000  00000000  0019c9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d930 	.word	0x0800d930

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800d930 	.word	0x0800d930

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004da:	463b      	mov	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004e6:	4b21      	ldr	r3, [pc, #132]	; (800056c <MX_ADC1_Init+0x98>)
 80004e8:	4a21      	ldr	r2, [pc, #132]	; (8000570 <MX_ADC1_Init+0x9c>)
 80004ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004ec:	4b1f      	ldr	r3, [pc, #124]	; (800056c <MX_ADC1_Init+0x98>)
 80004ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f4:	4b1d      	ldr	r3, [pc, #116]	; (800056c <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004fa:	4b1c      	ldr	r3, [pc, #112]	; (800056c <MX_ADC1_Init+0x98>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000500:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_ADC1_Init+0x98>)
 8000502:	2200      	movs	r2, #0
 8000504:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000506:	4b19      	ldr	r3, [pc, #100]	; (800056c <MX_ADC1_Init+0x98>)
 8000508:	2200      	movs	r2, #0
 800050a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_ADC1_Init+0x98>)
 8000516:	4a17      	ldr	r2, [pc, #92]	; (8000574 <MX_ADC1_Init+0xa0>)
 8000518:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_ADC1_Init+0x98>)
 8000522:	2201      	movs	r2, #1
 8000524:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_ADC1_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_ADC1_Init+0x98>)
 8000530:	2201      	movs	r2, #1
 8000532:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000534:	480d      	ldr	r0, [pc, #52]	; (800056c <MX_ADC1_Init+0x98>)
 8000536:	f001 fb59 	bl	8001bec <HAL_ADC_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000540:	f000 fc4a 	bl	8000dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000544:	2302      	movs	r3, #2
 8000546:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000548:	2301      	movs	r3, #1
 800054a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	4619      	mov	r1, r3
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_ADC1_Init+0x98>)
 8000556:	f001 fb8d 	bl	8001c74 <HAL_ADC_ConfigChannel>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000560:	f000 fc3a 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000564:	bf00      	nop
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000180 	.word	0x20000180
 8000570:	40012000 	.word	0x40012000
 8000574:	0f000001 	.word	0x0f000001

08000578 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	463b      	mov	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800058a:	4b64      	ldr	r3, [pc, #400]	; (800071c <MX_ADC3_Init+0x1a4>)
 800058c:	4a64      	ldr	r2, [pc, #400]	; (8000720 <MX_ADC3_Init+0x1a8>)
 800058e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000590:	4b62      	ldr	r3, [pc, #392]	; (800071c <MX_ADC3_Init+0x1a4>)
 8000592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000596:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000598:	4b60      	ldr	r3, [pc, #384]	; (800071c <MX_ADC3_Init+0x1a4>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800059e:	4b5f      	ldr	r3, [pc, #380]	; (800071c <MX_ADC3_Init+0x1a4>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005a4:	4b5d      	ldr	r3, [pc, #372]	; (800071c <MX_ADC3_Init+0x1a4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005aa:	4b5c      	ldr	r3, [pc, #368]	; (800071c <MX_ADC3_Init+0x1a4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005b2:	4b5a      	ldr	r3, [pc, #360]	; (800071c <MX_ADC3_Init+0x1a4>)
 80005b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 80005ba:	4b58      	ldr	r3, [pc, #352]	; (800071c <MX_ADC3_Init+0x1a4>)
 80005bc:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c2:	4b56      	ldr	r3, [pc, #344]	; (800071c <MX_ADC3_Init+0x1a4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 12;
 80005c8:	4b54      	ldr	r3, [pc, #336]	; (800071c <MX_ADC3_Init+0x1a4>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80005ce:	4b53      	ldr	r3, [pc, #332]	; (800071c <MX_ADC3_Init+0x1a4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d6:	4b51      	ldr	r3, [pc, #324]	; (800071c <MX_ADC3_Init+0x1a4>)
 80005d8:	2201      	movs	r2, #1
 80005da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80005dc:	484f      	ldr	r0, [pc, #316]	; (800071c <MX_ADC3_Init+0x1a4>)
 80005de:	f001 fb05 	bl	8001bec <HAL_ADC_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 80005e8:	f000 fbf6 	bl	8000dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005ec:	230a      	movs	r3, #10
 80005ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	4619      	mov	r1, r3
 80005fc:	4847      	ldr	r0, [pc, #284]	; (800071c <MX_ADC3_Init+0x1a4>)
 80005fe:	f001 fb39 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000608:	f000 fbe6 	bl	8000dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	4841      	ldr	r0, [pc, #260]	; (800071c <MX_ADC3_Init+0x1a4>)
 8000616:	f001 fb2d 	bl	8001c74 <HAL_ADC_ConfigChannel>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000620:	f000 fbda 	bl	8000dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000624:	2303      	movs	r3, #3
 8000626:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	4619      	mov	r1, r3
 800062c:	483b      	ldr	r0, [pc, #236]	; (800071c <MX_ADC3_Init+0x1a4>)
 800062e:	f001 fb21 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 8000638:	f000 fbce 	bl	8000dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000640:	463b      	mov	r3, r7
 8000642:	4619      	mov	r1, r3
 8000644:	4835      	ldr	r0, [pc, #212]	; (800071c <MX_ADC3_Init+0x1a4>)
 8000646:	f001 fb15 	bl	8001c74 <HAL_ADC_ConfigChannel>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000650:	f000 fbc2 	bl	8000dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8000654:	2305      	movs	r3, #5
 8000656:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	482f      	ldr	r0, [pc, #188]	; (800071c <MX_ADC3_Init+0x1a4>)
 800065e:	f001 fb09 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8000668:	f000 fbb6 	bl	8000dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 800066c:	2306      	movs	r3, #6
 800066e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4829      	ldr	r0, [pc, #164]	; (800071c <MX_ADC3_Init+0x1a4>)
 8000676:	f001 fafd 	bl	8001c74 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC3_Init+0x10c>
  {
    Error_Handler();
 8000680:	f000 fbaa 	bl	8000dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8000684:	2307      	movs	r3, #7
 8000686:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4823      	ldr	r0, [pc, #140]	; (800071c <MX_ADC3_Init+0x1a4>)
 800068e:	f001 faf1 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC3_Init+0x124>
  {
    Error_Handler();
 8000698:	f000 fb9e 	bl	8000dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	481d      	ldr	r0, [pc, #116]	; (800071c <MX_ADC3_Init+0x1a4>)
 80006a6:	f001 fae5 	bl	8001c74 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC3_Init+0x13c>
  {
    Error_Handler();
 80006b0:	f000 fb92 	bl	8000dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 9;
 80006b4:	2309      	movs	r3, #9
 80006b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	4817      	ldr	r0, [pc, #92]	; (800071c <MX_ADC3_Init+0x1a4>)
 80006be:	f001 fad9 	bl	8001c74 <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC3_Init+0x154>
  {
    Error_Handler();
 80006c8:	f000 fb86 	bl	8000dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 10;
 80006cc:	230a      	movs	r3, #10
 80006ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4619      	mov	r1, r3
 80006d4:	4811      	ldr	r0, [pc, #68]	; (800071c <MX_ADC3_Init+0x1a4>)
 80006d6:	f001 facd 	bl	8001c74 <HAL_ADC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC3_Init+0x16c>
  {
    Error_Handler();
 80006e0:	f000 fb7a 	bl	8000dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 11;
 80006e4:	230b      	movs	r3, #11
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	480b      	ldr	r0, [pc, #44]	; (800071c <MX_ADC3_Init+0x1a4>)
 80006ee:	f001 fac1 	bl	8001c74 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC3_Init+0x184>
  {
    Error_Handler();
 80006f8:	f000 fb6e 	bl	8000dd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 12;
 80006fc:	230c      	movs	r3, #12
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_ADC3_Init+0x1a4>)
 8000706:	f001 fab5 	bl	8001c74 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC3_Init+0x19c>
  {
    Error_Handler();
 8000710:	f000 fb62 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200001c8 	.word	0x200001c8
 8000720:	40012200 	.word	0x40012200

08000724 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a53      	ldr	r2, [pc, #332]	; (8000890 <HAL_ADC_MspInit+0x16c>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d142      	bne.n	80007cc <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4b52      	ldr	r3, [pc, #328]	; (8000894 <HAL_ADC_MspInit+0x170>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	4a51      	ldr	r2, [pc, #324]	; (8000894 <HAL_ADC_MspInit+0x170>)
 8000750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000754:	6453      	str	r3, [r2, #68]	; 0x44
 8000756:	4b4f      	ldr	r3, [pc, #316]	; (8000894 <HAL_ADC_MspInit+0x170>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b4b      	ldr	r3, [pc, #300]	; (8000894 <HAL_ADC_MspInit+0x170>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a4a      	ldr	r2, [pc, #296]	; (8000894 <HAL_ADC_MspInit+0x170>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b48      	ldr	r3, [pc, #288]	; (8000894 <HAL_ADC_MspInit+0x170>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b44      	ldr	r3, [pc, #272]	; (8000894 <HAL_ADC_MspInit+0x170>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a43      	ldr	r2, [pc, #268]	; (8000894 <HAL_ADC_MspInit+0x170>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b41      	ldr	r3, [pc, #260]	; (8000894 <HAL_ADC_MspInit+0x170>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC_VREF_Pin;
 800079a:	2304      	movs	r3, #4
 800079c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079e:	2303      	movs	r3, #3
 80007a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_VREF_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	4619      	mov	r1, r3
 80007ac:	483a      	ldr	r0, [pc, #232]	; (8000898 <HAL_ADC_MspInit+0x174>)
 80007ae:	f002 f867 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_TEMP_Pin;
 80007b2:	2304      	movs	r3, #4
 80007b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b6:	2303      	movs	r3, #3
 80007b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_TEMP_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4835      	ldr	r0, [pc, #212]	; (800089c <HAL_ADC_MspInit+0x178>)
 80007c6:	f002 f85b 	bl	8002880 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80007ca:	e05d      	b.n	8000888 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC3)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a33      	ldr	r2, [pc, #204]	; (80008a0 <HAL_ADC_MspInit+0x17c>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d158      	bne.n	8000888 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <HAL_ADC_MspInit+0x170>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	4a2d      	ldr	r2, [pc, #180]	; (8000894 <HAL_ADC_MspInit+0x170>)
 80007e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e4:	6453      	str	r3, [r2, #68]	; 0x44
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <HAL_ADC_MspInit+0x170>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <HAL_ADC_MspInit+0x170>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a26      	ldr	r2, [pc, #152]	; (8000894 <HAL_ADC_MspInit+0x170>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b24      	ldr	r3, [pc, #144]	; (8000894 <HAL_ADC_MspInit+0x170>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_MOT1_CUR_Pin|ADC_MOT2_CUR_Pin|ADC_VREF_Pin;
 800080e:	2307      	movs	r3, #7
 8000810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000812:	2303      	movs	r3, #3
 8000814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	481d      	ldr	r0, [pc, #116]	; (8000898 <HAL_ADC_MspInit+0x174>)
 8000822:	f002 f82d 	bl	8002880 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <HAL_ADC_MspInit+0x180>)
 8000828:	4a1f      	ldr	r2, [pc, #124]	; (80008a8 <HAL_ADC_MspInit+0x184>)
 800082a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <HAL_ADC_MspInit+0x180>)
 800082e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000832:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <HAL_ADC_MspInit+0x180>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <HAL_ADC_MspInit+0x180>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_ADC_MspInit+0x180>)
 8000842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000846:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <HAL_ADC_MspInit+0x180>)
 800084a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800084e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_ADC_MspInit+0x180>)
 8000852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000856:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_ADC_MspInit+0x180>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_ADC_MspInit+0x180>)
 8000860:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000864:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_ADC_MspInit+0x180>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <HAL_ADC_MspInit+0x180>)
 800086e:	f001 fd1d 	bl	80022ac <HAL_DMA_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_ADC_MspInit+0x158>
      Error_Handler();
 8000878:	f000 faae 	bl	8000dd8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <HAL_ADC_MspInit+0x180>)
 8000880:	639a      	str	r2, [r3, #56]	; 0x38
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_ADC_MspInit+0x180>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000888:	bf00      	nop
 800088a:	3730      	adds	r7, #48	; 0x30
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40012000 	.word	0x40012000
 8000894:	40023800 	.word	0x40023800
 8000898:	40020800 	.word	0x40020800
 800089c:	40020000 	.word	0x40020000
 80008a0:	40012200 	.word	0x40012200
 80008a4:	20000210 	.word	0x20000210
 80008a8:	40026410 	.word	0x40026410

080008ac <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_CRC_Init+0x20>)
 80008b2:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <MX_CRC_Init+0x24>)
 80008b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_CRC_Init+0x20>)
 80008b8:	f001 fcdc 	bl	8002274 <HAL_CRC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008c2:	f000 fa89 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000270 	.word	0x20000270
 80008d0:	40023000 	.word	0x40023000

080008d4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <HAL_CRC_MspInit+0x3c>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d10d      	bne.n	8000902 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <HAL_CRC_MspInit+0x40>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a09      	ldr	r2, [pc, #36]	; (8000914 <HAL_CRC_MspInit+0x40>)
 80008f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <HAL_CRC_MspInit+0x40>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40023000 	.word	0x40023000
 8000914:	40023800 	.word	0x40023800

08000918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_DMA_Init+0x3c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <MX_DMA_Init+0x3c>)
 8000928:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_DMA_Init+0x3c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2105      	movs	r1, #5
 800093e:	2038      	movs	r0, #56	; 0x38
 8000940:	f001 fc6e 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000944:	2038      	movs	r0, #56	; 0x38
 8000946:	f001 fc87 	bl	8002258 <HAL_NVIC_EnableIRQ>

}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <MX_FREERTOS_Init+0x38>)
 800095e:	2100      	movs	r1, #0
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_FREERTOS_Init+0x3c>)
 8000962:	f009 fcc1 	bl	800a2e8 <osThreadNew>
 8000966:	4603      	mov	r3, r0
 8000968:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <MX_FREERTOS_Init+0x40>)
 800096a:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <MX_FREERTOS_Init+0x44>)
 800096e:	2100      	movs	r1, #0
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <MX_FREERTOS_Init+0x48>)
 8000972:	f009 fcb9 	bl	800a2e8 <osThreadNew>
 8000976:	4603      	mov	r3, r0
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <MX_FREERTOS_Init+0x4c>)
 800097a:	6013      	str	r3, [r2, #0]

  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800097c:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <MX_FREERTOS_Init+0x50>)
 800097e:	2100      	movs	r1, #0
 8000980:	480a      	ldr	r0, [pc, #40]	; (80009ac <MX_FREERTOS_Init+0x54>)
 8000982:	f009 fcb1 	bl	800a2e8 <osThreadNew>
 8000986:	4603      	mov	r3, r0
 8000988:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <MX_FREERTOS_Init+0x58>)
 800098a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	0800d9ac 	.word	0x0800d9ac
 8000994:	080009b5 	.word	0x080009b5
 8000998:	20000278 	.word	0x20000278
 800099c:	0800d9d0 	.word	0x0800d9d0
 80009a0:	080009d5 	.word	0x080009d5
 80009a4:	2000027c 	.word	0x2000027c
 80009a8:	0800d9f4 	.word	0x0800d9f4
 80009ac:	080009f5 	.word	0x080009f5
 80009b0:	20000280 	.word	0x20000280

080009b4 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80009bc:	f00c f9c6 	bl	800cd4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartBlink01 */
  /* Infinite loop */
  for(;;)
  {   HAL_GPIO_TogglePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin);
 80009c0:	2140      	movs	r1, #64	; 0x40
 80009c2:	4803      	ldr	r0, [pc, #12]	; (80009d0 <StartBlink01+0x1c>)
 80009c4:	f002 f911 	bl	8002bea <HAL_GPIO_TogglePin>
  	  osDelay(100);
 80009c8:	2064      	movs	r0, #100	; 0x64
 80009ca:	f009 fd1f 	bl	800a40c <osDelay>
  {   HAL_GPIO_TogglePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin);
 80009ce:	e7f7      	b.n	80009c0 <StartBlink01+0xc>
 80009d0:	40020000 	.word	0x40020000

080009d4 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_TogglePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin);
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <StartBlink02+0x1c>)
 80009e0:	f002 f903 	bl	8002bea <HAL_GPIO_TogglePin>
	    osDelay(600);
 80009e4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80009e8:	f009 fd10 	bl	800a40c <osDelay>
	    HAL_GPIO_TogglePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin);
 80009ec:	e7f6      	b.n	80009dc <StartBlink02+0x8>
 80009ee:	bf00      	nop
 80009f0:	40020000 	.word	0x40020000

080009f4 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009fc:	2001      	movs	r0, #1
 80009fe:	f009 fd05 	bl	800a40c <osDelay>
 8000a02:	e7fb      	b.n	80009fc <StartDefaultTask+0x8>

08000a04 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> S_TIM11_CH1
*/
void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
 8000a1e:	4b59      	ldr	r3, [pc, #356]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a58      	ldr	r2, [pc, #352]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a24:	f043 0310 	orr.w	r3, r3, #16
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b56      	ldr	r3, [pc, #344]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0310 	and.w	r3, r3, #16
 8000a32:	61bb      	str	r3, [r7, #24]
 8000a34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	4b52      	ldr	r3, [pc, #328]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a51      	ldr	r2, [pc, #324]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b4f      	ldr	r3, [pc, #316]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b4b      	ldr	r3, [pc, #300]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a4a      	ldr	r2, [pc, #296]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b44      	ldr	r3, [pc, #272]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a43      	ldr	r2, [pc, #268]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a3c      	ldr	r2, [pc, #240]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a35      	ldr	r2, [pc, #212]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <MX_GPIO_Init+0x180>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8000ac8:	482f      	ldr	r0, [pc, #188]	; (8000b88 <MX_GPIO_Init+0x184>)
 8000aca:	f002 f875 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_MOT_ENABLE_Pin|O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 6164 	mov.w	r1, #3648	; 0xe40
 8000ad4:	482d      	ldr	r0, [pc, #180]	; (8000b8c <MX_GPIO_Init+0x188>)
 8000ad6:	f002 f86f 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_PWR_REG_EN_GPIO_Port, O_PWR_REG_EN_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae0:	482b      	ldr	r0, [pc, #172]	; (8000b90 <MX_GPIO_Init+0x18c>)
 8000ae2:	f002 f869 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = I_KEY1_Pin|I_KEY0_Pin;
 8000ae6:	2318      	movs	r3, #24
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4826      	ldr	r0, [pc, #152]	; (8000b94 <MX_GPIO_Init+0x190>)
 8000afa:	f001 fec1 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin;
 8000afe:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	481c      	ldr	r0, [pc, #112]	; (8000b88 <MX_GPIO_Init+0x184>)
 8000b18:	f001 feb2 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = O_MOT_ENABLE_Pin|O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin;
 8000b1c:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4815      	ldr	r0, [pc, #84]	; (8000b8c <MX_GPIO_Init+0x188>)
 8000b36:	f001 fea3 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_PWR_REG_EN_Pin;
 8000b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(O_PWR_REG_EN_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	480f      	ldr	r0, [pc, #60]	; (8000b90 <MX_GPIO_Init+0x18c>)
 8000b54:	f001 fe94 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TIM_AUX2_PWM_Pin;
 8000b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TIM_AUX2_PWM_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4806      	ldr	r0, [pc, #24]	; (8000b90 <MX_GPIO_Init+0x18c>)
 8000b76:	f001 fe83 	bl	8002880 <HAL_GPIO_Init>

}
 8000b7a:	bf00      	nop
 8000b7c:	3730      	adds	r7, #48	; 0x30
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40021000 	.word	0x40021000

08000b98 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000b9e:	4a13      	ldr	r2, [pc, #76]	; (8000bec <MX_I2C2_Init+0x54>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_I2C2_Init+0x58>)
 8000ba6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_I2C2_Init+0x50>)
 8000bd6:	f002 f823 	bl	8002c20 <HAL_I2C_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000be0:	f000 f8fa 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000284 	.word	0x20000284
 8000bec:	40005800 	.word	0x40005800
 8000bf0:	000186a0 	.word	0x000186a0

08000bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <HAL_I2C_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12c      	bne.n	8000c70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000c32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c38:	2312      	movs	r3, #18
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c44:	2304      	movs	r3, #4
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480c      	ldr	r0, [pc, #48]	; (8000c80 <HAL_I2C_MspInit+0x8c>)
 8000c50:	f001 fe16 	bl	8002880 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a07      	ldr	r2, [pc, #28]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_I2C_MspInit+0x88>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40005800 	.word	0x40005800
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020400 	.word	0x40020400

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c88:	f000 ff4a 	bl	8001b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8c:	f000 f828 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c90:	f7ff feb8 	bl	8000a04 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c94:	f000 fa2a 	bl	80010ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c98:	f000 fa80 	bl	800119c <MX_TIM2_Init>
  MX_TIM8_Init();
 8000c9c:	f000 fbac 	bl	80013f8 <MX_TIM8_Init>
  MX_I2C2_Init();
 8000ca0:	f7ff ff7a 	bl	8000b98 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000ca4:	f000 f8d4 	bl	8000e50 <MX_SPI1_Init>
  MX_DMA_Init();
 8000ca8:	f7ff fe36 	bl	8000918 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000cac:	f000 fe46 	bl	800193c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000cb0:	f7ff fc10 	bl	80004d4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000cb4:	f7ff fc60 	bl	8000578 <MX_ADC3_Init>
  MX_TIM3_Init();
 8000cb8:	f000 fac4 	bl	8001244 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cbc:	f000 fb3e 	bl	800133c <MX_TIM4_Init>
  MX_UART5_Init();
 8000cc0:	f000 fe12 	bl	80018e8 <MX_UART5_Init>
  MX_CRC_Init();
 8000cc4:	f7ff fdf2 	bl	80008ac <MX_CRC_Init>
  MX_RNG_Init();
 8000cc8:	f000 f88c 	bl	8000de4 <MX_RNG_Init>
  MX_TIM14_Init();
 8000ccc:	f000 fc42 	bl	8001554 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000cd0:	f009 fac0 	bl	800a254 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000cd4:	f7ff fe40 	bl	8000958 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000cd8:	f009 fae0 	bl	800a29c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <main+0x58>
	...

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	; 0x50
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	2230      	movs	r2, #48	; 0x30
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f00c fd54 	bl	800d79c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	4b28      	ldr	r3, [pc, #160]	; (8000dac <SystemClock_Config+0xcc>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a27      	ldr	r2, [pc, #156]	; (8000dac <SystemClock_Config+0xcc>)
 8000d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <SystemClock_Config+0xcc>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <SystemClock_Config+0xd0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <SystemClock_Config+0xd0>)
 8000d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <SystemClock_Config+0xd0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d46:	2302      	movs	r3, #2
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d50:	2304      	movs	r3, #4
 8000d52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d54:	23a8      	movs	r3, #168	; 0xa8
 8000d56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d60:	f107 0320 	add.w	r3, r7, #32
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 fb1d 	bl	80043a4 <HAL_RCC_OscConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d70:	f000 f832 	bl	8000dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d74:	230f      	movs	r3, #15
 8000d76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2105      	movs	r1, #5
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fd7e 	bl	8004894 <HAL_RCC_ClockConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d9e:	f000 f81b 	bl	8000dd8 <Error_Handler>
  }
}
 8000da2:	bf00      	nop
 8000da4:	3750      	adds	r7, #80	; 0x50
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40007000 	.word	0x40007000

08000db4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d101      	bne.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dc6:	f000 fecd 	bl	8001b64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40014400 	.word	0x40014400

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>
	...

08000de4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_RNG_Init+0x20>)
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <MX_RNG_Init+0x24>)
 8000dec:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_RNG_Init+0x20>)
 8000df0:	f003 ffa2 	bl	8004d38 <HAL_RNG_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000dfa:	f7ff ffed 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200002d8 	.word	0x200002d8
 8000e08:	50060800 	.word	0x50060800

08000e0c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <HAL_RNG_MspInit+0x3c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d10d      	bne.n	8000e3a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_RNG_MspInit+0x40>)
 8000e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e26:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <HAL_RNG_MspInit+0x40>)
 8000e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e2c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_RNG_MspInit+0x40>)
 8000e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	50060800 	.word	0x50060800
 8000e4c:	40023800 	.word	0x40023800

08000e50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <MX_SPI1_Init+0x64>)
 8000e56:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <MX_SPI1_Init+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <MX_SPI1_Init+0x64>)
 8000e5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_SPI1_Init+0x64>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <MX_SPI1_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_SPI1_Init+0x64>)
 8000e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_SPI1_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <MX_SPI1_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_SPI1_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <MX_SPI1_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_SPI1_Init+0x64>)
 8000e9c:	220a      	movs	r2, #10
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <MX_SPI1_Init+0x64>)
 8000ea2:	f003 ff73 	bl	8004d8c <HAL_SPI_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000eac:	f7ff ff94 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200002e8 	.word	0x200002e8
 8000eb8:	40013000 	.word	0x40013000

08000ebc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a19      	ldr	r2, [pc, #100]	; (8000f40 <HAL_SPI_MspInit+0x84>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d12b      	bne.n	8000f36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_SPI_MspInit+0x88>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <HAL_SPI_MspInit+0x88>)
 8000ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_SPI_MspInit+0x88>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_SPI_MspInit+0x88>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_SPI_MspInit+0x88>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_SPI_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f16:	2338      	movs	r3, #56	; 0x38
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f26:	2305      	movs	r3, #5
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <HAL_SPI_MspInit+0x8c>)
 8000f32:	f001 fca5 	bl	8002880 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40013000 	.word	0x40013000
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020400 	.word	0x40020400

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_MspInit+0x54>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <HAL_MspInit+0x54>)
 8000f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f60:	6453      	str	r3, [r2, #68]	; 0x44
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_MspInit+0x54>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_MspInit+0x54>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_MspInit+0x54>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_MspInit+0x54>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	210f      	movs	r1, #15
 8000f8e:	f06f 0001 	mvn.w	r0, #1
 8000f92:	f001 f945 	bl	8002220 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	; 0x30
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	2019      	movs	r0, #25
 8000fba:	f001 f931 	bl	8002220 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fbe:	2019      	movs	r0, #25
 8000fc0:	f001 f94a 	bl	8002258 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <HAL_InitTick+0xa4>)
 8000fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fcc:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <HAL_InitTick+0xa4>)
 8000fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_InitTick+0xa4>)
 8000fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe0:	f107 0210 	add.w	r2, r7, #16
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 fe72 	bl	8004cd4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ff0:	f003 fe5c 	bl	8004cac <HAL_RCC_GetPCLK2Freq>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_InitTick+0xa8>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0c9b      	lsrs	r3, r3, #18
 8001004:	3b01      	subs	r3, #1
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_InitTick+0xac>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <HAL_InitTick+0xb0>)
 800100c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_InitTick+0xac>)
 8001010:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001014:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_InitTick+0xac>)
 8001018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_InitTick+0xac>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_InitTick+0xac>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <HAL_InitTick+0xac>)
 800102a:	f003 ff38 	bl	8004e9e <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d104      	bne.n	800103e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <HAL_InitTick+0xac>)
 8001036:	f003 ff81 	bl	8004f3c <HAL_TIM_Base_Start_IT>
 800103a:	4603      	mov	r3, r0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40023800 	.word	0x40023800
 800104c:	431bde83 	.word	0x431bde83
 8001050:	20000340 	.word	0x20000340
 8001054:	40014400 	.word	0x40014400

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800108a:	f004 f964 	bl	8005356 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001090:	f004 f961 	bl	8005356 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000388 	.word	0x20000388
 800109c:	20000340 	.word	0x20000340

080010a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <DMA2_Stream0_IRQHandler+0x10>)
 80010a6:	f001 f9af 	bl	8002408 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000210 	.word	0x20000210

080010b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <OTG_FS_IRQHandler+0x10>)
 80010ba:	f002 f845 	bl	8003148 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200064b4 	.word	0x200064b4

080010c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <SystemInit+0x20>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <SystemInit+0x20>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	; 0x30
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	2224      	movs	r2, #36	; 0x24
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00c fb4e 	bl	800d79c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <MX_TIM1_Init+0xa8>)
 800110a:	4a23      	ldr	r2, [pc, #140]	; (8001198 <MX_TIM1_Init+0xac>)
 800110c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_TIM1_Init+0xa8>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_TIM1_Init+0xa8>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_TIM1_Init+0xa8>)
 800111c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001120:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_TIM1_Init+0xa8>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_TIM1_Init+0xa8>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_TIM1_Init+0xa8>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001134:	2303      	movs	r3, #3
 8001136:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800114c:	2301      	movs	r3, #1
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_TIM1_Init+0xa8>)
 8001160:	f004 f853 	bl	800520a <HAL_TIM_Encoder_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800116a:	f7ff fe35 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4806      	ldr	r0, [pc, #24]	; (8001194 <MX_TIM1_Init+0xa8>)
 800117c:	f005 f8b2 	bl	80062e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001186:	f7ff fe27 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	3730      	adds	r7, #48	; 0x30
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000388 	.word	0x20000388
 8001198:	40010000 	.word	0x40010000

0800119c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	; 0x30
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2224      	movs	r2, #36	; 0x24
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00c faf6 	bl	800d79c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_TIM2_Init+0xa4>)
 80011ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <MX_TIM2_Init+0xa4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <MX_TIM2_Init+0xa4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_TIM2_Init+0xa4>)
 80011ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_TIM2_Init+0xa4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_TIM2_Init+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011e0:	2303      	movs	r3, #3
 80011e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011e8:	2301      	movs	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011f8:	2301      	movs	r3, #1
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_TIM2_Init+0xa4>)
 800120c:	f003 fffd 	bl	800520a <HAL_TIM_Encoder_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001216:	f7ff fddf 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_TIM2_Init+0xa4>)
 8001228:	f005 f85c 	bl	80062e4 <HAL_TIMEx_MasterConfigSynchronization>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001232:	f7ff fdd1 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	3730      	adds	r7, #48	; 0x30
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200003d0 	.word	0x200003d0

08001244 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	; 0x38
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
 8001266:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <MX_TIM3_Init+0xf0>)
 8001276:	4a30      	ldr	r2, [pc, #192]	; (8001338 <MX_TIM3_Init+0xf4>)
 8001278:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <MX_TIM3_Init+0xf0>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <MX_TIM3_Init+0xf0>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <MX_TIM3_Init+0xf0>)
 8001288:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <MX_TIM3_Init+0xf0>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b27      	ldr	r3, [pc, #156]	; (8001334 <MX_TIM3_Init+0xf0>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800129a:	4826      	ldr	r0, [pc, #152]	; (8001334 <MX_TIM3_Init+0xf0>)
 800129c:	f003 ff0d 	bl	80050ba <HAL_TIM_PWM_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012a6:	f7ff fd97 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012aa:	4822      	ldr	r0, [pc, #136]	; (8001334 <MX_TIM3_Init+0xf0>)
 80012ac:	f003 ff54 	bl	8005158 <HAL_TIM_IC_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80012b6:	f7ff fd8f 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012c6:	4619      	mov	r1, r3
 80012c8:	481a      	ldr	r0, [pc, #104]	; (8001334 <MX_TIM3_Init+0xf0>)
 80012ca:	f005 f80b 	bl	80062e4 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012d4:	f7ff fd80 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d8:	2360      	movs	r3, #96	; 0x60
 80012da:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2208      	movs	r2, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	4810      	ldr	r0, [pc, #64]	; (8001334 <MX_TIM3_Init+0xf0>)
 80012f2:	f004 fa31 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 80012fc:	f7ff fd6c 	bl	8000dd8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001304:	2301      	movs	r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	220c      	movs	r2, #12
 8001314:	4619      	mov	r1, r3
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <MX_TIM3_Init+0xf0>)
 8001318:	f004 f982 	bl	8005620 <HAL_TIM_IC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8001322:	f7ff fd59 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001326:	4803      	ldr	r0, [pc, #12]	; (8001334 <MX_TIM3_Init+0xf0>)
 8001328:	f000 fa5c 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 800132c:	bf00      	nop
 800132e:	3738      	adds	r7, #56	; 0x38
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000418 	.word	0x20000418
 8001338:	40000400 	.word	0x40000400

0800133c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800135e:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <MX_TIM4_Init+0xb4>)
 8001360:	4a24      	ldr	r2, [pc, #144]	; (80013f4 <MX_TIM4_Init+0xb8>)
 8001362:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <MX_TIM4_Init+0xb4>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <MX_TIM4_Init+0xb4>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <MX_TIM4_Init+0xb4>)
 8001372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001376:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_TIM4_Init+0xb4>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_TIM4_Init+0xb4>)
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001384:	481a      	ldr	r0, [pc, #104]	; (80013f0 <MX_TIM4_Init+0xb4>)
 8001386:	f003 fe49 	bl	800501c <HAL_TIM_OC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001390:	f7ff fd22 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	4619      	mov	r1, r3
 80013a2:	4813      	ldr	r0, [pc, #76]	; (80013f0 <MX_TIM4_Init+0xb4>)
 80013a4:	f004 ff9e 	bl	80062e4 <HAL_TIMEx_MasterConfigSynchronization>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80013ae:	f7ff fd13 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	220c      	movs	r2, #12
 80013c6:	4619      	mov	r1, r3
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <MX_TIM4_Init+0xb4>)
 80013ca:	f004 f8cd 	bl	8005568 <HAL_TIM_OC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80013d4:	f7ff fd00 	bl	8000dd8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <MX_TIM4_Init+0xb4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	69da      	ldr	r2, [r3, #28]
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <MX_TIM4_Init+0xb4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013e6:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000460 	.word	0x20000460
 80013f4:	40000800 	.word	0x40000800

080013f8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b096      	sub	sp, #88	; 0x58
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]
 8001426:	615a      	str	r2, [r3, #20]
 8001428:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2220      	movs	r2, #32
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f00c f9b3 	bl	800d79c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001436:	4b45      	ldr	r3, [pc, #276]	; (800154c <MX_TIM8_Init+0x154>)
 8001438:	4a45      	ldr	r2, [pc, #276]	; (8001550 <MX_TIM8_Init+0x158>)
 800143a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800143c:	4b43      	ldr	r3, [pc, #268]	; (800154c <MX_TIM8_Init+0x154>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b42      	ldr	r3, [pc, #264]	; (800154c <MX_TIM8_Init+0x154>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001448:	4b40      	ldr	r3, [pc, #256]	; (800154c <MX_TIM8_Init+0x154>)
 800144a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b3e      	ldr	r3, [pc, #248]	; (800154c <MX_TIM8_Init+0x154>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <MX_TIM8_Init+0x154>)
 8001458:	2200      	movs	r2, #0
 800145a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b3b      	ldr	r3, [pc, #236]	; (800154c <MX_TIM8_Init+0x154>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001462:	483a      	ldr	r0, [pc, #232]	; (800154c <MX_TIM8_Init+0x154>)
 8001464:	f003 fd1b 	bl	8004e9e <HAL_TIM_Base_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800146e:	f7ff fcb3 	bl	8000dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001476:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001478:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800147c:	4619      	mov	r1, r3
 800147e:	4833      	ldr	r0, [pc, #204]	; (800154c <MX_TIM8_Init+0x154>)
 8001480:	f004 fa2c 	bl	80058dc <HAL_TIM_ConfigClockSource>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800148a:	f7ff fca5 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800148e:	482f      	ldr	r0, [pc, #188]	; (800154c <MX_TIM8_Init+0x154>)
 8001490:	f003 fe13 	bl	80050ba <HAL_TIM_PWM_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800149a:	f7ff fc9d 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014aa:	4619      	mov	r1, r3
 80014ac:	4827      	ldr	r0, [pc, #156]	; (800154c <MX_TIM8_Init+0x154>)
 80014ae:	f004 ff19 	bl	80062e4 <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80014b8:	f7ff fc8e 	bl	8000dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014bc:	2360      	movs	r3, #96	; 0x60
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 512;
 80014c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ca:	2300      	movs	r3, #0
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	2204      	movs	r2, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	481a      	ldr	r0, [pc, #104]	; (800154c <MX_TIM8_Init+0x154>)
 80014e4:	f004 f938 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80014ee:	f7ff fc73 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	2208      	movs	r2, #8
 80014f8:	4619      	mov	r1, r3
 80014fa:	4814      	ldr	r0, [pc, #80]	; (800154c <MX_TIM8_Init+0x154>)
 80014fc:	f004 f92c 	bl	8005758 <HAL_TIM_PWM_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8001506:	f7ff fc67 	bl	8000dd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 2;
 8001516:	2302      	movs	r3, #2
 8001518:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800151e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001522:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4807      	ldr	r0, [pc, #28]	; (800154c <MX_TIM8_Init+0x154>)
 800152e:	f004 ff55 	bl	80063dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8001538:	f7ff fc4e 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800153c:	4803      	ldr	r0, [pc, #12]	; (800154c <MX_TIM8_Init+0x154>)
 800153e:	f000 f951 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 8001542:	bf00      	nop
 8001544:	3758      	adds	r7, #88	; 0x58
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200004a8 	.word	0x200004a8
 8001550:	40010400 	.word	0x40010400

08001554 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_TIM14_Init+0x40>)
 800155a:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <MX_TIM14_Init+0x44>)
 800155c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <MX_TIM14_Init+0x40>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_TIM14_Init+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <MX_TIM14_Init+0x40>)
 800156c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001570:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_TIM14_Init+0x40>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_TIM14_Init+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_TIM14_Init+0x40>)
 8001580:	f003 fc8d 	bl	8004e9e <HAL_TIM_Base_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800158a:	f7ff fc25 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200004f0 	.word	0x200004f0
 8001598:	40002000 	.word	0x40002000

0800159c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a36      	ldr	r2, [pc, #216]	; (8001694 <HAL_TIM_Encoder_MspInit+0xf8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d135      	bne.n	800162a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	4b35      	ldr	r3, [pc, #212]	; (8001698 <HAL_TIM_Encoder_MspInit+0xfc>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	4a34      	ldr	r2, [pc, #208]	; (8001698 <HAL_TIM_Encoder_MspInit+0xfc>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6453      	str	r3, [r2, #68]	; 0x44
 80015ce:	4b32      	ldr	r3, [pc, #200]	; (8001698 <HAL_TIM_Encoder_MspInit+0xfc>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_TIM_Encoder_MspInit+0xfc>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a2d      	ldr	r2, [pc, #180]	; (8001698 <HAL_TIM_Encoder_MspInit+0xfc>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <HAL_TIM_Encoder_MspInit+0xfc>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM_ENC1_A_Pin|TIM_ENC1_B_Pin;
 80015f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001608:	2301      	movs	r3, #1
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4822      	ldr	r0, [pc, #136]	; (800169c <HAL_TIM_Encoder_MspInit+0x100>)
 8001614:	f001 f934 	bl	8002880 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2105      	movs	r1, #5
 800161c:	2019      	movs	r0, #25
 800161e:	f000 fdff 	bl	8002220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001622:	2019      	movs	r0, #25
 8001624:	f000 fe18 	bl	8002258 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001628:	e030      	b.n	800168c <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM2)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001632:	d12b      	bne.n	800168c <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_TIM_Encoder_MspInit+0xfc>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	4a16      	ldr	r2, [pc, #88]	; (8001698 <HAL_TIM_Encoder_MspInit+0xfc>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6413      	str	r3, [r2, #64]	; 0x40
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	4b10      	ldr	r3, [pc, #64]	; (8001698 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_TIM_Encoder_MspInit+0xfc>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6313      	str	r3, [r2, #48]	; 0x30
 8001660:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_ENC2_B_Pin|TIM_ENC2_A_Pin;
 800166c:	2322      	movs	r3, #34	; 0x22
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800167c:	2301      	movs	r3, #1
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <HAL_TIM_Encoder_MspInit+0x100>)
 8001688:	f001 f8fa 	bl	8002880 <HAL_GPIO_Init>
}
 800168c:	bf00      	nop
 800168e:	3730      	adds	r7, #48	; 0x30
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40010000 	.word	0x40010000
 8001698:	40023800 	.word	0x40023800
 800169c:	40020000 	.word	0x40020000

080016a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM3)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a19      	ldr	r2, [pc, #100]	; (8001724 <HAL_TIM_PWM_MspInit+0x84>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d12b      	bne.n	800171a <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_TIM_PWM_MspInit+0x88>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a17      	ldr	r2, [pc, #92]	; (8001728 <HAL_TIM_PWM_MspInit+0x88>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_TIM_PWM_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <HAL_TIM_PWM_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a10      	ldr	r2, [pc, #64]	; (8001728 <HAL_TIM_PWM_MspInit+0x88>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_TIM_PWM_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_FAN_INDEX_Pin;
 80016fa:	2302      	movs	r3, #2
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001702:	2301      	movs	r3, #1
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800170a:	2302      	movs	r3, #2
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_FAN_INDEX_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	; (800172c <HAL_TIM_PWM_MspInit+0x8c>)
 8001716:	f001 f8b3 	bl	8002880 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40000400 	.word	0x40000400
 8001728:	40023800 	.word	0x40023800
 800172c:	40020400 	.word	0x40020400

08001730 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_TIM_OC_MspInit+0x3c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d10d      	bne.n	800175e <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_TIM_OC_MspInit+0x40>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_TIM_OC_MspInit+0x40>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_TIM_OC_MspInit+0x40>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40000800 	.word	0x40000800
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <HAL_TIM_Base_MspInit+0x64>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10e      	bne.n	80017a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_TIM_Base_MspInit+0x68>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <HAL_TIM_Base_MspInit+0x68>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_TIM_Base_MspInit+0x68>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80017a2:	e012      	b.n	80017ca <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM14)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_TIM_Base_MspInit+0x6c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10d      	bne.n	80017ca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_TIM_Base_MspInit+0x68>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a09      	ldr	r2, [pc, #36]	; (80017dc <HAL_TIM_Base_MspInit+0x68>)
 80017b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <HAL_TIM_Base_MspInit+0x68>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40010400 	.word	0x40010400
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40002000 	.word	0x40002000

080017e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a34      	ldr	r2, [pc, #208]	; (80018d4 <HAL_TIM_MspPostInit+0xf0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d11e      	bne.n	8001844 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b33      	ldr	r3, [pc, #204]	; (80018d8 <HAL_TIM_MspPostInit+0xf4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a32      	ldr	r2, [pc, #200]	; (80018d8 <HAL_TIM_MspPostInit+0xf4>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <HAL_TIM_MspPostInit+0xf4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = TIM_FAN_PWM_Pin;
 8001822:	2301      	movs	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001832:	2302      	movs	r3, #2
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4827      	ldr	r0, [pc, #156]	; (80018dc <HAL_TIM_MspPostInit+0xf8>)
 800183e:	f001 f81f 	bl	8002880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001842:	e042      	b.n	80018ca <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a25      	ldr	r2, [pc, #148]	; (80018e0 <HAL_TIM_MspPostInit+0xfc>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d13d      	bne.n	80018ca <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_TIM_MspPostInit+0xf4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a20      	ldr	r2, [pc, #128]	; (80018d8 <HAL_TIM_MspPostInit+0xf4>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <HAL_TIM_MspPostInit+0xf4>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_TIM_MspPostInit+0xf4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <HAL_TIM_MspPostInit+0xf4>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_TIM_MspPostInit+0xf4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM_MOT1_B_Pin|TIM_MOT2_B_Pin;
 8001886:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001898:	2303      	movs	r3, #3
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	480e      	ldr	r0, [pc, #56]	; (80018dc <HAL_TIM_MspPostInit+0xf8>)
 80018a4:	f000 ffec 	bl	8002880 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM_MOT1_A_Pin|TIM_MOT2_A_Pin;
 80018a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80018ba:	2303      	movs	r3, #3
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <HAL_TIM_MspPostInit+0x100>)
 80018c6:	f000 ffdb 	bl	8002880 <HAL_GPIO_Init>
}
 80018ca:	bf00      	nop
 80018cc:	3728      	adds	r7, #40	; 0x28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40000400 	.word	0x40000400
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40010400 	.word	0x40010400
 80018e4:	40020800 	.word	0x40020800

080018e8 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_UART5_Init+0x4c>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	; (8001938 <MX_UART5_Init+0x50>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <MX_UART5_Init+0x4c>)
 80018f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <MX_UART5_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <MX_UART5_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <MX_UART5_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_UART5_Init+0x4c>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <MX_UART5_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_UART5_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_UART5_Init+0x4c>)
 8001920:	f004 fdc2 	bl	80064a8 <HAL_UART_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800192a:	f7ff fa55 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000538 	.word	0x20000538
 8001938:	40005000 	.word	0x40005000

0800193c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <MX_USART1_UART_Init+0x50>)
 8001944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800194c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_USART1_UART_Init+0x4c>)
 8001974:	f004 fd98 	bl	80064a8 <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800197e:	f7ff fa2b 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2000057c 	.word	0x2000057c
 800198c:	40011000 	.word	0x40011000

08001990 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a41      	ldr	r2, [pc, #260]	; (8001ab4 <HAL_UART_MspInit+0x124>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d14b      	bne.n	8001a4a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a3f      	ldr	r2, [pc, #252]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 80019bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a38      	ldr	r2, [pc, #224]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a31      	ldr	r2, [pc, #196]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = SER2_TX_Pin;
 8001a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SER2_TX_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	4826      	ldr	r0, [pc, #152]	; (8001abc <HAL_UART_MspInit+0x12c>)
 8001a24:	f000 ff2c 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SER2_RX_Pin;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SER2_RX_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	4619      	mov	r1, r3
 8001a42:	481f      	ldr	r0, [pc, #124]	; (8001ac0 <HAL_UART_MspInit+0x130>)
 8001a44:	f000 ff1c 	bl	8002880 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a48:	e030      	b.n	8001aac <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <HAL_UART_MspInit+0x134>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d12b      	bne.n	8001aac <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5c:	4a16      	ldr	r2, [pc, #88]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	6453      	str	r3, [r2, #68]	; 0x44
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_UART_MspInit+0x128>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a8c:	23c0      	movs	r3, #192	; 0xc0
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <HAL_UART_MspInit+0x138>)
 8001aa8:	f000 feea 	bl	8002880 <HAL_GPIO_Init>
}
 8001aac:	bf00      	nop
 8001aae:	3730      	adds	r7, #48	; 0x30
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40005000 	.word	0x40005000
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	40020400 	.word	0x40020400

08001acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad0:	480d      	ldr	r0, [pc, #52]	; (8001b08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ad2:	490e      	ldr	r1, [pc, #56]	; (8001b0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad8:	e002      	b.n	8001ae0 <LoopCopyDataInit>

08001ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ade:	3304      	adds	r3, #4

08001ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae4:	d3f9      	bcc.n	8001ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ae8:	4c0b      	ldr	r4, [pc, #44]	; (8001b18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aec:	e001      	b.n	8001af2 <LoopFillZerobss>

08001aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af0:	3204      	adds	r2, #4

08001af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af4:	d3fb      	bcc.n	8001aee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001af6:	f7ff fae7 	bl	80010c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afa:	f00b fe1b 	bl	800d734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afe:	f7ff f8c1 	bl	8000c84 <main>
  bx  lr    
 8001b02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b0c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001b10:	0800daa8 	.word	0x0800daa8
  ldr r2, =_sbss
 8001b14:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001b18:	20006be8 	.word	0x20006be8

08001b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC_IRQHandler>
	...

08001b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_Init+0x40>)
 8001b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_Init+0x40>)
 8001b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_Init+0x40>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f000 fb5e 	bl	800220a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4e:	2005      	movs	r0, #5
 8001b50:	f7ff fa28 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b54:	f7ff f9fa 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00

08001b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x20>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x24>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <HAL_IncTick+0x24>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008
 8001b88:	200005c0 	.word	0x200005c0

08001b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_GetTick+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	200005c0 	.word	0x200005c0

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff ffee 	bl	8001b8c <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_Delay+0x44>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bca:	bf00      	nop
 8001bcc:	f7ff ffde 	bl	8001b8c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000008 	.word	0x20000008

08001bec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e033      	b.n	8001c6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7fe fd8a 	bl	8000724 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d118      	bne.n	8001c5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c32:	f023 0302 	bic.w	r3, r3, #2
 8001c36:	f043 0202 	orr.w	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f93a 	bl	8001eb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
 8001c5a:	e001      	b.n	8001c60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1c>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e105      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x228>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	d925      	bls.n	8001cec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68d9      	ldr	r1, [r3, #12]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b1e      	subs	r3, #30
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68d9      	ldr	r1, [r3, #12]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4603      	mov	r3, r0
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4403      	add	r3, r0
 8001cde:	3b1e      	subs	r3, #30
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	e022      	b.n	8001d32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6919      	ldr	r1, [r3, #16]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	2207      	movs	r2, #7
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6919      	ldr	r1, [r3, #16]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4403      	add	r3, r0
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d824      	bhi.n	8001d84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b05      	subs	r3, #5
 8001d4c:	221f      	movs	r2, #31
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	400a      	ands	r2, r1
 8001d5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	3b05      	subs	r3, #5
 8001d76:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34
 8001d82:	e04c      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	d824      	bhi.n	8001dd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b23      	subs	r3, #35	; 0x23
 8001d9e:	221f      	movs	r2, #31
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43da      	mvns	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	400a      	ands	r2, r1
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3b23      	subs	r3, #35	; 0x23
 8001dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd4:	e023      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	3b41      	subs	r3, #65	; 0x41
 8001de8:	221f      	movs	r2, #31
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	400a      	ands	r2, r1
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b41      	subs	r3, #65	; 0x41
 8001e12:	fa00 f203 	lsl.w	r2, r0, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <HAL_ADC_ConfigChannel+0x234>)
 8001e20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a21      	ldr	r2, [pc, #132]	; (8001eac <HAL_ADC_ConfigChannel+0x238>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d109      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x1cc>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b12      	cmp	r3, #18
 8001e32:	d105      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a19      	ldr	r2, [pc, #100]	; (8001eac <HAL_ADC_ConfigChannel+0x238>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d123      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x21e>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d003      	beq.n	8001e5a <HAL_ADC_ConfigChannel+0x1e6>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b11      	cmp	r3, #17
 8001e58:	d11b      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b10      	cmp	r3, #16
 8001e6c:	d111      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_ADC_ConfigChannel+0x23c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <HAL_ADC_ConfigChannel+0x240>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	0c9a      	lsrs	r2, r3, #18
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e84:	e002      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f9      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40012300 	.word	0x40012300
 8001eac:	40012000 	.word	0x40012000
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	431bde83 	.word	0x431bde83

08001eb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ec0:	4b79      	ldr	r3, [pc, #484]	; (80020a8 <ADC_Init+0x1f0>)
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	021a      	lsls	r2, r3, #8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6899      	ldr	r1, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	4a58      	ldr	r2, [pc, #352]	; (80020ac <ADC_Init+0x1f4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d022      	beq.n	8001f96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6899      	ldr	r1, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6899      	ldr	r1, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	e00f      	b.n	8001fb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0202 	bic.w	r2, r2, #2
 8001fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6899      	ldr	r1, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7e1b      	ldrb	r3, [r3, #24]
 8001fd0:	005a      	lsls	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01b      	beq.n	800201c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ff2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002002:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6859      	ldr	r1, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	3b01      	subs	r3, #1
 8002010:	035a      	lsls	r2, r3, #13
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	e007      	b.n	800202c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	3b01      	subs	r3, #1
 8002048:	051a      	lsls	r2, r3, #20
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800206e:	025a      	lsls	r2, r3, #9
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6899      	ldr	r1, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	029a      	lsls	r2, r3, #10
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	609a      	str	r2, [r3, #8]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40012300 	.word	0x40012300
 80020ac:	0f000001 	.word	0x0f000001

080020b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e2:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	60d3      	str	r3, [r2, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_GetPriorityGrouping+0x18>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0307 	and.w	r3, r3, #7
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db0b      	blt.n	800213e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <__NVIC_EnableIRQ+0x38>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	; (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	; (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	; 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ff4c 	bl	80020b0 <__NVIC_SetPriorityGrouping>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002232:	f7ff ff61 	bl	80020f8 <__NVIC_GetPriorityGrouping>
 8002236:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	6978      	ldr	r0, [r7, #20]
 800223e:	f7ff ffb1 	bl	80021a4 <NVIC_EncodePriority>
 8002242:	4602      	mov	r2, r0
 8002244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ff80 	bl	8002150 <__NVIC_SetPriority>
}
 8002250:	bf00      	nop
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff54 	bl	8002114 <__NVIC_EnableIRQ>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e00e      	b.n	80022a4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	795b      	ldrb	r3, [r3, #5]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fb1c 	bl	80008d4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff fc68 	bl	8001b8c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e099      	b.n	80023fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e8:	e00f      	b.n	800230a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ea:	f7ff fc4f 	bl	8001b8c <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d908      	bls.n	800230a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2203      	movs	r2, #3
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e078      	b.n	80023fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e8      	bne.n	80022ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4b38      	ldr	r3, [pc, #224]	; (8002404 <HAL_DMA_Init+0x158>)
 8002324:	4013      	ands	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2b04      	cmp	r3, #4
 8002362:	d107      	bne.n	8002374 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	4313      	orrs	r3, r2
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f023 0307 	bic.w	r3, r3, #7
 800238a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2b04      	cmp	r3, #4
 800239c:	d117      	bne.n	80023ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00e      	beq.n	80023ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f9e9 	bl	8002788 <DMA_CheckFifoParam>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023ca:	2301      	movs	r3, #1
 80023cc:	e016      	b.n	80023fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f9a0 	bl	800271c <DMA_CalcBaseAndBitshift>
 80023dc:	4603      	mov	r3, r0
 80023de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	223f      	movs	r2, #63	; 0x3f
 80023e6:	409a      	lsls	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	f010803f 	.word	0xf010803f

08002408 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002414:	4b8e      	ldr	r3, [pc, #568]	; (8002650 <HAL_DMA_IRQHandler+0x248>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a8e      	ldr	r2, [pc, #568]	; (8002654 <HAL_DMA_IRQHandler+0x24c>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	2208      	movs	r2, #8
 8002434:	409a      	lsls	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01a      	beq.n	8002474 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d013      	beq.n	8002474 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0204 	bic.w	r2, r2, #4
 800245a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002460:	2208      	movs	r2, #8
 8002462:	409a      	lsls	r2, r3
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	2201      	movs	r2, #1
 800247a:	409a      	lsls	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d012      	beq.n	80024aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	2201      	movs	r2, #1
 8002498:	409a      	lsls	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	f043 0202 	orr.w	r2, r3, #2
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	2204      	movs	r2, #4
 80024b0:	409a      	lsls	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d012      	beq.n	80024e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00b      	beq.n	80024e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	2204      	movs	r2, #4
 80024ce:	409a      	lsls	r2, r3
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	f043 0204 	orr.w	r2, r3, #4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	2210      	movs	r2, #16
 80024e6:	409a      	lsls	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d043      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d03c      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002502:	2210      	movs	r2, #16
 8002504:	409a      	lsls	r2, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d018      	beq.n	800254a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d108      	bne.n	8002538 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d024      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	4798      	blx	r3
 8002536:	e01f      	b.n	8002578 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01b      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
 8002548:	e016      	b.n	8002578 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d107      	bne.n	8002568 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0208 	bic.w	r2, r2, #8
 8002566:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	2220      	movs	r2, #32
 800257e:	409a      	lsls	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 808f 	beq.w	80026a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8087 	beq.w	80026a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	2220      	movs	r2, #32
 80025a0:	409a      	lsls	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d136      	bne.n	8002620 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0216 	bic.w	r2, r2, #22
 80025c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695a      	ldr	r2, [r3, #20]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <HAL_DMA_IRQHandler+0x1da>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0208 	bic.w	r2, r2, #8
 80025f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	223f      	movs	r2, #63	; 0x3f
 80025f8:	409a      	lsls	r2, r3
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002612:	2b00      	cmp	r3, #0
 8002614:	d07e      	beq.n	8002714 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	4798      	blx	r3
        }
        return;
 800261e:	e079      	b.n	8002714 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01d      	beq.n	800266a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10d      	bne.n	8002658 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	2b00      	cmp	r3, #0
 8002642:	d031      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4798      	blx	r3
 800264c:	e02c      	b.n	80026a8 <HAL_DMA_IRQHandler+0x2a0>
 800264e:	bf00      	nop
 8002650:	20000000 	.word	0x20000000
 8002654:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d023      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
 8002668:	e01e      	b.n	80026a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10f      	bne.n	8002698 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0210 	bic.w	r2, r2, #16
 8002686:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d032      	beq.n	8002716 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d022      	beq.n	8002702 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2205      	movs	r2, #5
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	3301      	adds	r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d307      	bcc.n	80026f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f2      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x2cc>
 80026ee:	e000      	b.n	80026f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	4798      	blx	r3
 8002712:	e000      	b.n	8002716 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002714:	bf00      	nop
    }
  }
}
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	3b10      	subs	r3, #16
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <DMA_CalcBaseAndBitshift+0x64>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002736:	4a13      	ldr	r2, [pc, #76]	; (8002784 <DMA_CalcBaseAndBitshift+0x68>)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4413      	add	r3, r2
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b03      	cmp	r3, #3
 8002748:	d909      	bls.n	800275e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002752:	f023 0303 	bic.w	r3, r3, #3
 8002756:	1d1a      	adds	r2, r3, #4
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	659a      	str	r2, [r3, #88]	; 0x58
 800275c:	e007      	b.n	800276e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002766:	f023 0303 	bic.w	r3, r3, #3
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	aaaaaaab 	.word	0xaaaaaaab
 8002784:	0800da30 	.word	0x0800da30

08002788 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d11f      	bne.n	80027e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d856      	bhi.n	8002856 <DMA_CheckFifoParam+0xce>
 80027a8:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <DMA_CheckFifoParam+0x28>)
 80027aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ae:	bf00      	nop
 80027b0:	080027c1 	.word	0x080027c1
 80027b4:	080027d3 	.word	0x080027d3
 80027b8:	080027c1 	.word	0x080027c1
 80027bc:	08002857 	.word	0x08002857
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d046      	beq.n	800285a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d0:	e043      	b.n	800285a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027da:	d140      	bne.n	800285e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e0:	e03d      	b.n	800285e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ea:	d121      	bne.n	8002830 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d837      	bhi.n	8002862 <DMA_CheckFifoParam+0xda>
 80027f2:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <DMA_CheckFifoParam+0x70>)
 80027f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f8:	08002809 	.word	0x08002809
 80027fc:	0800280f 	.word	0x0800280f
 8002800:	08002809 	.word	0x08002809
 8002804:	08002821 	.word	0x08002821
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      break;
 800280c:	e030      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d025      	beq.n	8002866 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281e:	e022      	b.n	8002866 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002828:	d11f      	bne.n	800286a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800282e:	e01c      	b.n	800286a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d903      	bls.n	800283e <DMA_CheckFifoParam+0xb6>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d003      	beq.n	8002844 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800283c:	e018      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      break;
 8002842:	e015      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00e      	beq.n	800286e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      break;
 8002854:	e00b      	b.n	800286e <DMA_CheckFifoParam+0xe6>
      break;
 8002856:	bf00      	nop
 8002858:	e00a      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 800285a:	bf00      	nop
 800285c:	e008      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 800285e:	bf00      	nop
 8002860:	e006      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 8002862:	bf00      	nop
 8002864:	e004      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 8002866:	bf00      	nop
 8002868:	e002      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;   
 800286a:	bf00      	nop
 800286c:	e000      	b.n	8002870 <DMA_CheckFifoParam+0xe8>
      break;
 800286e:	bf00      	nop
    }
  } 
  
  return status; 
 8002870:	7bfb      	ldrb	r3, [r7, #15]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	e16b      	b.n	8002b74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800289c:	2201      	movs	r2, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	f040 815a 	bne.w	8002b6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d005      	beq.n	80028d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d130      	bne.n	8002934 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	2203      	movs	r2, #3
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002908:	2201      	movs	r2, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 0201 	and.w	r2, r3, #1
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b03      	cmp	r3, #3
 800293e:	d017      	beq.n	8002970 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d123      	bne.n	80029c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	08da      	lsrs	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3208      	adds	r2, #8
 8002984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	220f      	movs	r2, #15
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	08da      	lsrs	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3208      	adds	r2, #8
 80029be:	69b9      	ldr	r1, [r7, #24]
 80029c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2203      	movs	r2, #3
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0203 	and.w	r2, r3, #3
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80b4 	beq.w	8002b6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	4b60      	ldr	r3, [pc, #384]	; (8002b8c <HAL_GPIO_Init+0x30c>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	4a5f      	ldr	r2, [pc, #380]	; (8002b8c <HAL_GPIO_Init+0x30c>)
 8002a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a14:	6453      	str	r3, [r2, #68]	; 0x44
 8002a16:	4b5d      	ldr	r3, [pc, #372]	; (8002b8c <HAL_GPIO_Init+0x30c>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a22:	4a5b      	ldr	r2, [pc, #364]	; (8002b90 <HAL_GPIO_Init+0x310>)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	220f      	movs	r2, #15
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a52      	ldr	r2, [pc, #328]	; (8002b94 <HAL_GPIO_Init+0x314>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d02b      	beq.n	8002aa6 <HAL_GPIO_Init+0x226>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a51      	ldr	r2, [pc, #324]	; (8002b98 <HAL_GPIO_Init+0x318>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d025      	beq.n	8002aa2 <HAL_GPIO_Init+0x222>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a50      	ldr	r2, [pc, #320]	; (8002b9c <HAL_GPIO_Init+0x31c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01f      	beq.n	8002a9e <HAL_GPIO_Init+0x21e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4f      	ldr	r2, [pc, #316]	; (8002ba0 <HAL_GPIO_Init+0x320>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d019      	beq.n	8002a9a <HAL_GPIO_Init+0x21a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4e      	ldr	r2, [pc, #312]	; (8002ba4 <HAL_GPIO_Init+0x324>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_GPIO_Init+0x216>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4d      	ldr	r2, [pc, #308]	; (8002ba8 <HAL_GPIO_Init+0x328>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00d      	beq.n	8002a92 <HAL_GPIO_Init+0x212>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4c      	ldr	r2, [pc, #304]	; (8002bac <HAL_GPIO_Init+0x32c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <HAL_GPIO_Init+0x20e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4b      	ldr	r2, [pc, #300]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_GPIO_Init+0x20a>
 8002a86:	2307      	movs	r3, #7
 8002a88:	e00e      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	e00c      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a8e:	2306      	movs	r3, #6
 8002a90:	e00a      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a92:	2305      	movs	r3, #5
 8002a94:	e008      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e004      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	f002 0203 	and.w	r2, r2, #3
 8002aae:	0092      	lsls	r2, r2, #2
 8002ab0:	4093      	lsls	r3, r2
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab8:	4935      	ldr	r1, [pc, #212]	; (8002b90 <HAL_GPIO_Init+0x310>)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	3302      	adds	r3, #2
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_GPIO_Init+0x334>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aea:	4a32      	ldr	r2, [pc, #200]	; (8002bb4 <HAL_GPIO_Init+0x334>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af0:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_GPIO_Init+0x334>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b14:	4a27      	ldr	r2, [pc, #156]	; (8002bb4 <HAL_GPIO_Init+0x334>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b1a:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <HAL_GPIO_Init+0x334>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <HAL_GPIO_Init+0x334>)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_GPIO_Init+0x334>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b68:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_GPIO_Init+0x334>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3301      	adds	r3, #1
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2b0f      	cmp	r3, #15
 8002b78:	f67f ae90 	bls.w	800289c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40013800 	.word	0x40013800
 8002b94:	40020000 	.word	0x40020000
 8002b98:	40020400 	.word	0x40020400
 8002b9c:	40020800 	.word	0x40020800
 8002ba0:	40020c00 	.word	0x40020c00
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40021400 	.word	0x40021400
 8002bac:	40021800 	.word	0x40021800
 8002bb0:	40021c00 	.word	0x40021c00
 8002bb4:	40013c00 	.word	0x40013c00

08002bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd4:	e003      	b.n	8002bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	041a      	lsls	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	619a      	str	r2, [r3, #24]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bfc:	887a      	ldrh	r2, [r7, #2]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4013      	ands	r3, r2
 8002c02:	041a      	lsls	r2, r3, #16
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	43d9      	mvns	r1, r3
 8002c08:	887b      	ldrh	r3, [r7, #2]
 8002c0a:	400b      	ands	r3, r1
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	619a      	str	r2, [r3, #24]
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e12b      	b.n	8002e8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fd ffd4 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2224      	movs	r2, #36	; 0x24
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c84:	f001 fffe 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8002c88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4a81      	ldr	r2, [pc, #516]	; (8002e94 <HAL_I2C_Init+0x274>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d807      	bhi.n	8002ca4 <HAL_I2C_Init+0x84>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a80      	ldr	r2, [pc, #512]	; (8002e98 <HAL_I2C_Init+0x278>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	bf94      	ite	ls
 8002c9c:	2301      	movls	r3, #1
 8002c9e:	2300      	movhi	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	e006      	b.n	8002cb2 <HAL_I2C_Init+0x92>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a7d      	ldr	r2, [pc, #500]	; (8002e9c <HAL_I2C_Init+0x27c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0e7      	b.n	8002e8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4a78      	ldr	r2, [pc, #480]	; (8002ea0 <HAL_I2C_Init+0x280>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	0c9b      	lsrs	r3, r3, #18
 8002cc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a6a      	ldr	r2, [pc, #424]	; (8002e94 <HAL_I2C_Init+0x274>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d802      	bhi.n	8002cf4 <HAL_I2C_Init+0xd4>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	e009      	b.n	8002d08 <HAL_I2C_Init+0xe8>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	4a69      	ldr	r2, [pc, #420]	; (8002ea4 <HAL_I2C_Init+0x284>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	3301      	adds	r3, #1
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	495c      	ldr	r1, [pc, #368]	; (8002e94 <HAL_I2C_Init+0x274>)
 8002d24:	428b      	cmp	r3, r1
 8002d26:	d819      	bhi.n	8002d5c <HAL_I2C_Init+0x13c>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e59      	subs	r1, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d36:	1c59      	adds	r1, r3, #1
 8002d38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d3c:	400b      	ands	r3, r1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_I2C_Init+0x138>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1e59      	subs	r1, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d56:	e051      	b.n	8002dfc <HAL_I2C_Init+0x1dc>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	e04f      	b.n	8002dfc <HAL_I2C_Init+0x1dc>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d111      	bne.n	8002d88 <HAL_I2C_Init+0x168>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e58      	subs	r0, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	440b      	add	r3, r1
 8002d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	e012      	b.n	8002dae <HAL_I2C_Init+0x18e>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e58      	subs	r0, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	0099      	lsls	r1, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_Init+0x196>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e022      	b.n	8002dfc <HAL_I2C_Init+0x1dc>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10e      	bne.n	8002ddc <HAL_I2C_Init+0x1bc>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1e58      	subs	r0, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	440b      	add	r3, r1
 8002dcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dda:	e00f      	b.n	8002dfc <HAL_I2C_Init+0x1dc>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1e58      	subs	r0, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	0099      	lsls	r1, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002df2:	3301      	adds	r3, #1
 8002df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	6809      	ldr	r1, [r1, #0]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69da      	ldr	r2, [r3, #28]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6911      	ldr	r1, [r2, #16]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68d2      	ldr	r2, [r2, #12]
 8002e36:	4311      	orrs	r1, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	000186a0 	.word	0x000186a0
 8002e98:	001e847f 	.word	0x001e847f
 8002e9c:	003d08ff 	.word	0x003d08ff
 8002ea0:	431bde83 	.word	0x431bde83
 8002ea4:	10624dd3 	.word	0x10624dd3

08002ea8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eaa:	b08f      	sub	sp, #60	; 0x3c
 8002eac:	af0a      	add	r7, sp, #40	; 0x28
 8002eae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e10f      	b.n	80030da <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f00a f919 	bl	800d10c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2203      	movs	r2, #3
 8002ede:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 feac 	bl	8006c56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	687e      	ldr	r6, [r7, #4]
 8002f06:	466d      	mov	r5, sp
 8002f08:	f106 0410 	add.w	r4, r6, #16
 8002f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f18:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f1c:	1d33      	adds	r3, r6, #4
 8002f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f20:	6838      	ldr	r0, [r7, #0]
 8002f22:	f003 fd83 	bl	8006a2c <USB_CoreInit>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0d0      	b.n	80030da <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f003 fe9a 	bl	8006c78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e04a      	b.n	8002fe0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	333d      	adds	r3, #61	; 0x3d
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	333c      	adds	r3, #60	; 0x3c
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	b298      	uxth	r0, r3
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3344      	adds	r3, #68	; 0x44
 8002f86:	4602      	mov	r2, r0
 8002f88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3340      	adds	r3, #64	; 0x40
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	3348      	adds	r3, #72	; 0x48
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	334c      	adds	r3, #76	; 0x4c
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3354      	adds	r3, #84	; 0x54
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d3af      	bcc.n	8002f4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]
 8002fee:	e044      	b.n	800307a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003032:	7bfa      	ldrb	r2, [r7, #15]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	3301      	adds	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	429a      	cmp	r2, r3
 8003082:	d3b5      	bcc.n	8002ff0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	687e      	ldr	r6, [r7, #4]
 800308c:	466d      	mov	r5, sp
 800308e:	f106 0410 	add.w	r4, r6, #16
 8003092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800309e:	e885 0003 	stmia.w	r5, {r0, r1}
 80030a2:	1d33      	adds	r3, r6, #4
 80030a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a6:	6838      	ldr	r0, [r7, #0]
 80030a8:	f003 fe32 	bl	8006d10 <USB_DevInit>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00d      	b.n	80030da <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f004 ff81 	bl	8007fda <USB_DevDisconnect>

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_PCD_Start+0x1c>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e020      	b.n	8003140 <HAL_PCD_Start+0x5e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	2b01      	cmp	r3, #1
 800310c:	d109      	bne.n	8003122 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003112:	2b01      	cmp	r3, #1
 8003114:	d005      	beq.n	8003122 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f003 fd84 	bl	8006c34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f004 ff31 	bl	8007f98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b08d      	sub	sp, #52	; 0x34
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f004 ffef 	bl	8008142 <USB_GetMode>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	f040 848a 	bne.w	8003a80 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f004 ff53 	bl	800801c <USB_ReadInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8480 	beq.w	8003a7e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f004 ff40 	bl	800801c <USB_ReadInterrupts>
 800319c:	4603      	mov	r3, r0
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d107      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695a      	ldr	r2, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f002 0202 	and.w	r2, r2, #2
 80031b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f004 ff2e 	bl	800801c <USB_ReadInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b10      	cmp	r3, #16
 80031c8:	d161      	bne.n	800328e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0210 	bic.w	r2, r2, #16
 80031d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f003 020f 	and.w	r2, r3, #15
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	3304      	adds	r3, #4
 80031f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	0c5b      	lsrs	r3, r3, #17
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	2b02      	cmp	r3, #2
 8003204:	d124      	bne.n	8003250 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d035      	beq.n	800327e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800321c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003220:	b29b      	uxth	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	6a38      	ldr	r0, [r7, #32]
 8003226:	f004 fd65 	bl	8007cf4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003236:	441a      	add	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003248:	441a      	add	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	621a      	str	r2, [r3, #32]
 800324e:	e016      	b.n	800327e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	0c5b      	lsrs	r3, r3, #17
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	2b06      	cmp	r3, #6
 800325a:	d110      	bne.n	800327e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003262:	2208      	movs	r2, #8
 8003264:	4619      	mov	r1, r3
 8003266:	6a38      	ldr	r0, [r7, #32]
 8003268:	f004 fd44 	bl	8007cf4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	6a1a      	ldr	r2, [r3, #32]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003278:	441a      	add	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699a      	ldr	r2, [r3, #24]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0210 	orr.w	r2, r2, #16
 800328c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f004 fec2 	bl	800801c <USB_ReadInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032a2:	f040 80a7 	bne.w	80033f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f004 fec7 	bl	8008042 <USB_ReadDevAllOutEpInterrupt>
 80032b4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80032b6:	e099      	b.n	80033ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 808e 	beq.w	80033e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 feeb 	bl	80080aa <USB_ReadDevOutEPInterrupt>
 80032d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00c      	beq.n	80032fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ec:	461a      	mov	r2, r3
 80032ee:	2301      	movs	r3, #1
 80032f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fec3 	bl	8004080 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003310:	461a      	mov	r2, r3
 8003312:	2308      	movs	r3, #8
 8003314:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003316:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 ff99 	bl	8004250 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003334:	461a      	mov	r2, r3
 8003336:	2310      	movs	r3, #16
 8003338:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d030      	beq.n	80033a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	2b80      	cmp	r3, #128	; 0x80
 800334e:	d109      	bne.n	8003364 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800335e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003362:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	78db      	ldrb	r3, [r3, #3]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d108      	bne.n	8003394 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	b2db      	uxtb	r3, r3
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f009 ffc2 	bl	800d318 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a0:	461a      	mov	r2, r3
 80033a2:	2302      	movs	r3, #2
 80033a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033bc:	461a      	mov	r2, r3
 80033be:	2320      	movs	r3, #32
 80033c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d009      	beq.n	80033e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d8:	461a      	mov	r2, r3
 80033da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	3301      	adds	r3, #1
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f47f af62 	bne.w	80032b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f004 fe0f 	bl	800801c <USB_ReadInterrupts>
 80033fe:	4603      	mov	r3, r0
 8003400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003404:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003408:	f040 80db 	bne.w	80035c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f004 fe30 	bl	8008076 <USB_ReadDevAllInEpInterrupt>
 8003416:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800341c:	e0cd      	b.n	80035ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80c2 	beq.w	80035ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f004 fe56 	bl	80080e6 <USB_ReadDevInEPInterrupt>
 800343a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d057      	beq.n	80034f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	2201      	movs	r2, #1
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	43db      	mvns	r3, r3
 8003460:	69f9      	ldr	r1, [r7, #28]
 8003462:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003466:	4013      	ands	r3, r2
 8003468:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003476:	461a      	mov	r2, r3
 8003478:	2301      	movs	r3, #1
 800347a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d132      	bne.n	80034ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	334c      	adds	r3, #76	; 0x4c
 8003494:	6819      	ldr	r1, [r3, #0]
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4403      	add	r3, r0
 80034a4:	3348      	adds	r3, #72	; 0x48
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4419      	add	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4403      	add	r3, r0
 80034b8:	334c      	adds	r3, #76	; 0x4c
 80034ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d113      	bne.n	80034ea <HAL_PCD_IRQHandler+0x3a2>
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3354      	adds	r3, #84	; 0x54
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d108      	bne.n	80034ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034e2:	461a      	mov	r2, r3
 80034e4:	2101      	movs	r1, #1
 80034e6:	f004 fe5d 	bl	80081a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f009 fe8c 	bl	800d20e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350c:	461a      	mov	r2, r3
 800350e:	2308      	movs	r3, #8
 8003510:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003528:	461a      	mov	r2, r3
 800352a:	2310      	movs	r3, #16
 800352c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003544:	461a      	mov	r2, r3
 8003546:	2340      	movs	r3, #64	; 0x40
 8003548:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d023      	beq.n	800359c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003556:	6a38      	ldr	r0, [r7, #32]
 8003558:	f003 fd3e 	bl	8006fd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800355c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	3338      	adds	r3, #56	; 0x38
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	4413      	add	r3, r2
 800356c:	3304      	adds	r3, #4
 800356e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	78db      	ldrb	r3, [r3, #3]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2200      	movs	r2, #0
 800357c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	b2db      	uxtb	r3, r3
 8003582:	4619      	mov	r1, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f009 fed9 	bl	800d33c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003596:	461a      	mov	r2, r3
 8003598:	2302      	movs	r3, #2
 800359a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fcdb 	bl	8003f64 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	3301      	adds	r3, #1
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	085b      	lsrs	r3, r3, #1
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f47f af2e 	bne.w	800341e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 fd28 	bl	800801c <USB_ReadInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035d6:	d122      	bne.n	800361e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035fe:	2100      	movs	r1, #0
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fec3 	bl	800438c <HAL_PCDEx_LPM_Callback>
 8003606:	e002      	b.n	800360e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f009 fe77 	bl	800d2fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800361c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f004 fcfa 	bl	800801c <USB_ReadInterrupts>
 8003628:	4603      	mov	r3, r0
 800362a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003632:	d112      	bne.n	800365a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d102      	bne.n	800364a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f009 fe33 	bl	800d2b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003658:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f004 fcdc 	bl	800801c <USB_ReadInterrupts>
 8003664:	4603      	mov	r3, r0
 8003666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366e:	f040 80b7 	bne.w	80037e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2110      	movs	r1, #16
 800368c:	4618      	mov	r0, r3
 800368e:	f003 fca3 	bl	8006fd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003692:	2300      	movs	r3, #0
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003696:	e046      	b.n	8003726 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a4:	461a      	mov	r2, r3
 80036a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036bc:	0151      	lsls	r1, r2, #5
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	440a      	add	r2, r1
 80036c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d8:	461a      	mov	r2, r3
 80036da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f0:	0151      	lsls	r1, r2, #5
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	440a      	add	r2, r1
 80036f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003710:	0151      	lsls	r1, r2, #5
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	440a      	add	r2, r1
 8003716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800371a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800371e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003722:	3301      	adds	r3, #1
 8003724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800372c:	429a      	cmp	r2, r3
 800372e:	d3b3      	bcc.n	8003698 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800373e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003742:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	2b00      	cmp	r3, #0
 800374a:	d016      	beq.n	800377a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800375c:	f043 030b 	orr.w	r3, r3, #11
 8003760:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003772:	f043 030b 	orr.w	r3, r3, #11
 8003776:	6453      	str	r3, [r2, #68]	; 0x44
 8003778:	e015      	b.n	80037a6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003788:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800378c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003790:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a0:	f043 030b 	orr.w	r3, r3, #11
 80037a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037ca:	461a      	mov	r2, r3
 80037cc:	f004 fcea 	bl	80081a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f004 fc19 	bl	800801c <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f4:	d124      	bne.n	8003840 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f004 fcaf 	bl	800815e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f003 fc64 	bl	80070d2 <USB_GetDevSpeed>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681c      	ldr	r4, [r3, #0]
 8003816:	f001 fa29 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 800381a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	4620      	mov	r0, r4
 8003826:	f003 f963 	bl	8006af0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f009 fd17 	bl	800d25e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800383e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f004 fbe9 	bl	800801c <USB_ReadInterrupts>
 800384a:	4603      	mov	r3, r0
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b08      	cmp	r3, #8
 8003852:	d10a      	bne.n	800386a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f009 fcf4 	bl	800d242 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f002 0208 	and.w	r2, r2, #8
 8003868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f004 fbd4 	bl	800801c <USB_ReadInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	2b80      	cmp	r3, #128	; 0x80
 800387c:	d122      	bne.n	80038c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800388a:	2301      	movs	r3, #1
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
 800388e:	e014      	b.n	80038ba <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d105      	bne.n	80038b4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	4619      	mov	r1, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fb27 	bl	8003f02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	3301      	adds	r3, #1
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d3e5      	bcc.n	8003890 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f004 fba7 	bl	800801c <USB_ReadInterrupts>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d8:	d13b      	bne.n	8003952 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038da:	2301      	movs	r3, #1
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
 80038de:	e02b      	b.n	8003938 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	3340      	adds	r3, #64	; 0x40
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d115      	bne.n	8003932 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003906:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003908:	2b00      	cmp	r3, #0
 800390a:	da12      	bge.n	8003932 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	333f      	adds	r3, #63	; 0x3f
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003928:	b2db      	uxtb	r3, r3
 800392a:	4619      	mov	r1, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fae8 	bl	8003f02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	3301      	adds	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393e:	429a      	cmp	r2, r3
 8003940:	d3ce      	bcc.n	80038e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f004 fb60 	bl	800801c <USB_ReadInterrupts>
 800395c:	4603      	mov	r3, r0
 800395e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003962:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003966:	d155      	bne.n	8003a14 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003968:	2301      	movs	r3, #1
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	e045      	b.n	80039fa <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d12e      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003996:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003998:	2b00      	cmp	r3, #0
 800399a:	da2b      	bge.n	80039f4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80039a8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d121      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039f0:	6053      	str	r3, [r2, #4]
            break;
 80039f2:	e007      	b.n	8003a04 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	3301      	adds	r3, #1
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d3b4      	bcc.n	800396e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f004 faff 	bl	800801c <USB_ReadInterrupts>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a28:	d10a      	bne.n	8003a40 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f009 fc98 	bl	800d360 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f004 fae9 	bl	800801c <USB_ReadInterrupts>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d115      	bne.n	8003a80 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f009 fc88 	bl	800d37c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
 8003a7c:	e000      	b.n	8003a80 <HAL_PCD_IRQHandler+0x938>
      return;
 8003a7e:	bf00      	nop
    }
  }
}
 8003a80:	3734      	adds	r7, #52	; 0x34
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd90      	pop	{r4, r7, pc}

08003a86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_PCD_SetAddress+0x1a>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e013      	b.n	8003ac8 <HAL_PCD_SetAddress+0x42>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f004 fa47 	bl	8007f4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	461a      	mov	r2, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	70fb      	strb	r3, [r7, #3]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	803b      	strh	r3, [r7, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	da0f      	bge.n	8003b16 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	f003 020f 	and.w	r2, r3, #15
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	3338      	adds	r3, #56	; 0x38
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4413      	add	r3, r2
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	705a      	strb	r2, [r3, #1]
 8003b14:	e00f      	b.n	8003b36 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	f003 020f 	and.w	r2, r3, #15
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b42:	883a      	ldrh	r2, [r7, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	78ba      	ldrb	r2, [r7, #2]
 8003b4c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b60:	78bb      	ldrb	r3, [r7, #2]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d102      	bne.n	8003b6c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_PCD_EP_Open+0xaa>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e00e      	b.n	8003b98 <HAL_PCD_EP_Open+0xc8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68f9      	ldr	r1, [r7, #12]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f003 fac7 	bl	800711c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003b96:	7afb      	ldrb	r3, [r7, #11]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	da0f      	bge.n	8003bd4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	f003 020f 	and.w	r2, r3, #15
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	3338      	adds	r3, #56	; 0x38
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3304      	adds	r3, #4
 8003bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	705a      	strb	r2, [r3, #1]
 8003bd2:	e00f      	b.n	8003bf4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 020f 	and.w	r2, r3, #15
 8003bda:	4613      	mov	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	3304      	adds	r3, #4
 8003bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_PCD_EP_Close+0x6e>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e00e      	b.n	8003c2c <HAL_PCD_EP_Close+0x8c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68f9      	ldr	r1, [r7, #12]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f003 fb05 	bl	800722c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	460b      	mov	r3, r1
 8003c42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c44:	7afb      	ldrb	r3, [r7, #11]
 8003c46:	f003 020f 	and.w	r2, r3, #15
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2200      	movs	r2, #0
 8003c74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c76:	7afb      	ldrb	r3, [r7, #11]
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d102      	bne.n	8003c90 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c90:	7afb      	ldrb	r3, [r7, #11]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	6979      	ldr	r1, [r7, #20]
 8003ca8:	f003 fde4 	bl	8007874 <USB_EP0StartXfer>
 8003cac:	e008      	b.n	8003cc0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6979      	ldr	r1, [r7, #20]
 8003cbc:	f003 fb92 	bl	80073e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	f003 020f 	and.w	r2, r3, #15
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003cec:	681b      	ldr	r3, [r3, #0]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	460b      	mov	r3, r1
 8003d08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d0a:	7afb      	ldrb	r3, [r7, #11]
 8003d0c:	f003 020f 	and.w	r2, r3, #15
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	3338      	adds	r3, #56	; 0x38
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3304      	adds	r3, #4
 8003d20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2201      	movs	r2, #1
 8003d38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d3a:	7afb      	ldrb	r3, [r7, #11]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d102      	bne.n	8003d54 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d54:	7afb      	ldrb	r3, [r7, #11]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	461a      	mov	r2, r3
 8003d6a:	6979      	ldr	r1, [r7, #20]
 8003d6c:	f003 fd82 	bl	8007874 <USB_EP0StartXfer>
 8003d70:	e008      	b.n	8003d84 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6979      	ldr	r1, [r7, #20]
 8003d80:	f003 fb30 	bl	80073e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	f003 020f 	and.w	r2, r3, #15
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d901      	bls.n	8003dac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e050      	b.n	8003e4e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	da0f      	bge.n	8003dd4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	f003 020f 	and.w	r2, r3, #15
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	3338      	adds	r3, #56	; 0x38
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3304      	adds	r3, #4
 8003dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	705a      	strb	r2, [r3, #1]
 8003dd2:	e00d      	b.n	8003df0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	3304      	adds	r3, #4
 8003de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003df6:	78fb      	ldrb	r3, [r7, #3]
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_PCD_EP_SetStall+0x82>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e01e      	b.n	8003e4e <HAL_PCD_EP_SetStall+0xc0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68f9      	ldr	r1, [r7, #12]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f003 ffc0 	bl	8007da4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	b2d9      	uxtb	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f004 f9b0 	bl	80081a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	f003 020f 	and.w	r2, r3, #15
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d901      	bls.n	8003e74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e042      	b.n	8003efa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	da0f      	bge.n	8003e9c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	f003 020f 	and.w	r2, r3, #15
 8003e82:	4613      	mov	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	3338      	adds	r3, #56	; 0x38
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4413      	add	r3, r2
 8003e90:	3304      	adds	r3, #4
 8003e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	705a      	strb	r2, [r3, #1]
 8003e9a:	e00f      	b.n	8003ebc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	f003 020f 	and.w	r2, r3, #15
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_PCD_EP_ClrStall+0x86>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e00e      	b.n	8003efa <HAL_PCD_EP_ClrStall+0xa4>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68f9      	ldr	r1, [r7, #12]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f003 ffc8 	bl	8007e80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	da0c      	bge.n	8003f30 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	f003 020f 	and.w	r2, r3, #15
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	3338      	adds	r3, #56	; 0x38
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	e00c      	b.n	8003f4a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	f003 020f 	and.w	r2, r3, #15
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	3304      	adds	r3, #4
 8003f48:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68f9      	ldr	r1, [r7, #12]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f003 fde7 	bl	8007b24 <USB_EPStopXfer>
 8003f56:	4603      	mov	r3, r0
 8003f58:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	3338      	adds	r3, #56	; 0x38
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	4413      	add	r3, r2
 8003f88:	3304      	adds	r3, #4
 8003f8a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d901      	bls.n	8003f9c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e06c      	b.n	8004076 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	699a      	ldr	r2, [r3, #24]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d902      	bls.n	8003fb8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	3303      	adds	r3, #3
 8003fbc:	089b      	lsrs	r3, r3, #2
 8003fbe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fc0:	e02b      	b.n	800401a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d902      	bls.n	8003fde <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	3303      	adds	r3, #3
 8003fe2:	089b      	lsrs	r3, r3, #2
 8003fe4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6919      	ldr	r1, [r3, #16]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	6978      	ldr	r0, [r7, #20]
 8003ffe:	f003 fe3b 	bl	8007c78 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	441a      	add	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a1a      	ldr	r2, [r3, #32]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	441a      	add	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	b29b      	uxth	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	429a      	cmp	r2, r3
 800402e:	d809      	bhi.n	8004044 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004038:	429a      	cmp	r2, r3
 800403a:	d203      	bcs.n	8004044 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1be      	bne.n	8003fc2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	699a      	ldr	r2, [r3, #24]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	429a      	cmp	r2, r3
 800404e:	d811      	bhi.n	8004074 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	2201      	movs	r2, #1
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	43db      	mvns	r3, r3
 800406a:	6939      	ldr	r1, [r7, #16]
 800406c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004070:	4013      	ands	r3, r2
 8004072:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	333c      	adds	r3, #60	; 0x3c
 8004098:	3304      	adds	r3, #4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d17b      	bne.n	80041ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d015      	beq.n	80040ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	4a61      	ldr	r2, [pc, #388]	; (8004248 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	f240 80b9 	bls.w	800423c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80b3 	beq.w	800423c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e2:	461a      	mov	r2, r3
 80040e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e8:	6093      	str	r3, [r2, #8]
 80040ea:	e0a7      	b.n	800423c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	461a      	mov	r2, r3
 8004104:	2320      	movs	r3, #32
 8004106:	6093      	str	r3, [r2, #8]
 8004108:	e098      	b.n	800423c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004110:	2b00      	cmp	r3, #0
 8004112:	f040 8093 	bne.w	800423c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	4a4b      	ldr	r2, [pc, #300]	; (8004248 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d90f      	bls.n	800413e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004134:	461a      	mov	r2, r3
 8004136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413a:	6093      	str	r3, [r2, #8]
 800413c:	e07e      	b.n	800423c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	4413      	add	r3, r2
 8004150:	3304      	adds	r3, #4
 8004152:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	0159      	lsls	r1, r3, #5
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	440b      	add	r3, r1
 8004160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800416a:	1ad2      	subs	r2, r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d114      	bne.n	80041a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004188:	461a      	mov	r2, r3
 800418a:	2101      	movs	r1, #1
 800418c:	f004 f80a 	bl	80081a4 <USB_EP0_OutStart>
 8004190:	e006      	b.n	80041a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	441a      	add	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f009 f816 	bl	800d1d8 <HAL_PCD_DataOutStageCallback>
 80041ac:	e046      	b.n	800423c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	4a26      	ldr	r2, [pc, #152]	; (800424c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d124      	bne.n	8004200 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041cc:	461a      	mov	r2, r3
 80041ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d2:	6093      	str	r3, [r2, #8]
 80041d4:	e032      	b.n	800423c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	461a      	mov	r2, r3
 80041ee:	2320      	movs	r3, #32
 80041f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	4619      	mov	r1, r3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f008 ffed 	bl	800d1d8 <HAL_PCD_DataOutStageCallback>
 80041fe:	e01d      	b.n	800423c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d114      	bne.n	8004230 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d108      	bne.n	8004230 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004228:	461a      	mov	r2, r3
 800422a:	2100      	movs	r1, #0
 800422c:	f003 ffba 	bl	80081a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	4619      	mov	r1, r3
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f008 ffce 	bl	800d1d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	4f54300a 	.word	0x4f54300a
 800424c:	4f54310a 	.word	0x4f54310a

08004250 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	333c      	adds	r3, #60	; 0x3c
 8004268:	3304      	adds	r3, #4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4a15      	ldr	r2, [pc, #84]	; (80042d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d90e      	bls.n	80042a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800428c:	2b00      	cmp	r3, #0
 800428e:	d009      	beq.n	80042a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429c:	461a      	mov	r2, r3
 800429e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f008 ff85 	bl	800d1b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d90c      	bls.n	80042cc <PCD_EP_OutSetupPacket_int+0x7c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d108      	bne.n	80042cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042c4:	461a      	mov	r2, r3
 80042c6:	2101      	movs	r1, #1
 80042c8:	f003 ff6c 	bl	80081a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	4f54300a 	.word	0x4f54300a

080042dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
 80042e8:	4613      	mov	r3, r2
 80042ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d107      	bne.n	800430a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042fa:	883b      	ldrh	r3, [r7, #0]
 80042fc:	0419      	lsls	r1, r3, #16
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	430a      	orrs	r2, r1
 8004306:	629a      	str	r2, [r3, #40]	; 0x28
 8004308:	e028      	b.n	800435c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	0c1b      	lsrs	r3, r3, #16
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	4413      	add	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004318:	2300      	movs	r3, #0
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e00d      	b.n	800433a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	3340      	adds	r3, #64	; 0x40
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	4413      	add	r3, r2
 8004332:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	3301      	adds	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
 800433a:	7bfa      	ldrb	r2, [r7, #15]
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	3b01      	subs	r3, #1
 8004340:	429a      	cmp	r2, r3
 8004342:	d3ec      	bcc.n	800431e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004344:	883b      	ldrh	r3, [r7, #0]
 8004346:	0418      	lsls	r0, r3, #16
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6819      	ldr	r1, [r3, #0]
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	3b01      	subs	r3, #1
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	4302      	orrs	r2, r0
 8004354:	3340      	adds	r3, #64	; 0x40
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	460b      	mov	r3, r1
 8004374:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	887a      	ldrh	r2, [r7, #2]
 800437c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e267      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d075      	beq.n	80044ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043c2:	4b88      	ldr	r3, [pc, #544]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d00c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ce:	4b85      	ldr	r3, [pc, #532]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d112      	bne.n	8004400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043da:	4b82      	ldr	r3, [pc, #520]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043e6:	d10b      	bne.n	8004400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	4b7e      	ldr	r3, [pc, #504]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d05b      	beq.n	80044ac <HAL_RCC_OscConfig+0x108>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d157      	bne.n	80044ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e242      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004408:	d106      	bne.n	8004418 <HAL_RCC_OscConfig+0x74>
 800440a:	4b76      	ldr	r3, [pc, #472]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a75      	ldr	r2, [pc, #468]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	e01d      	b.n	8004454 <HAL_RCC_OscConfig+0xb0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004420:	d10c      	bne.n	800443c <HAL_RCC_OscConfig+0x98>
 8004422:	4b70      	ldr	r3, [pc, #448]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a6f      	ldr	r2, [pc, #444]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b6d      	ldr	r3, [pc, #436]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a6c      	ldr	r2, [pc, #432]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e00b      	b.n	8004454 <HAL_RCC_OscConfig+0xb0>
 800443c:	4b69      	ldr	r3, [pc, #420]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a68      	ldr	r2, [pc, #416]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b66      	ldr	r3, [pc, #408]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a65      	ldr	r2, [pc, #404]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 800444e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d013      	beq.n	8004484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fd fb96 	bl	8001b8c <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004464:	f7fd fb92 	bl	8001b8c <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	; 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e207      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	4b5b      	ldr	r3, [pc, #364]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0xc0>
 8004482:	e014      	b.n	80044ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fd fb82 	bl	8001b8c <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800448c:	f7fd fb7e 	bl	8001b8c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e1f3      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449e:	4b51      	ldr	r3, [pc, #324]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0xe8>
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d063      	beq.n	8004582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ba:	4b4a      	ldr	r3, [pc, #296]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00b      	beq.n	80044de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c6:	4b47      	ldr	r3, [pc, #284]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d11c      	bne.n	800450c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d2:	4b44      	ldr	r3, [pc, #272]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d116      	bne.n	800450c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044de:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_RCC_OscConfig+0x152>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d001      	beq.n	80044f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e1c7      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f6:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4937      	ldr	r1, [pc, #220]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450a:	e03a      	b.n	8004582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d020      	beq.n	8004556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004514:	4b34      	ldr	r3, [pc, #208]	; (80045e8 <HAL_RCC_OscConfig+0x244>)
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451a:	f7fd fb37 	bl	8001b8c <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004522:	f7fd fb33 	bl	8001b8c <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e1a8      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004534:	4b2b      	ldr	r3, [pc, #172]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004540:	4b28      	ldr	r3, [pc, #160]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	4925      	ldr	r1, [pc, #148]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004550:	4313      	orrs	r3, r2
 8004552:	600b      	str	r3, [r1, #0]
 8004554:	e015      	b.n	8004582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004556:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <HAL_RCC_OscConfig+0x244>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fd fb16 	bl	8001b8c <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004564:	f7fd fb12 	bl	8001b8c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e187      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004576:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d036      	beq.n	80045fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d016      	beq.n	80045c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004596:	4b15      	ldr	r3, [pc, #84]	; (80045ec <HAL_RCC_OscConfig+0x248>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fd faf6 	bl	8001b8c <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a4:	f7fd faf2 	bl	8001b8c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e167      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCC_OscConfig+0x240>)
 80045b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x200>
 80045c2:	e01b      	b.n	80045fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <HAL_RCC_OscConfig+0x248>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ca:	f7fd fadf 	bl	8001b8c <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d0:	e00e      	b.n	80045f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d2:	f7fd fadb 	bl	8001b8c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d907      	bls.n	80045f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e150      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
 80045e4:	40023800 	.word	0x40023800
 80045e8:	42470000 	.word	0x42470000
 80045ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f0:	4b88      	ldr	r3, [pc, #544]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80045f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1ea      	bne.n	80045d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8097 	beq.w	8004738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460a:	2300      	movs	r3, #0
 800460c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800460e:	4b81      	ldr	r3, [pc, #516]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10f      	bne.n	800463a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	4b7d      	ldr	r3, [pc, #500]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	4a7c      	ldr	r2, [pc, #496]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004628:	6413      	str	r3, [r2, #64]	; 0x40
 800462a:	4b7a      	ldr	r3, [pc, #488]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	60bb      	str	r3, [r7, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463a:	4b77      	ldr	r3, [pc, #476]	; (8004818 <HAL_RCC_OscConfig+0x474>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d118      	bne.n	8004678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004646:	4b74      	ldr	r3, [pc, #464]	; (8004818 <HAL_RCC_OscConfig+0x474>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a73      	ldr	r2, [pc, #460]	; (8004818 <HAL_RCC_OscConfig+0x474>)
 800464c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004652:	f7fd fa9b 	bl	8001b8c <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465a:	f7fd fa97 	bl	8001b8c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e10c      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466c:	4b6a      	ldr	r3, [pc, #424]	; (8004818 <HAL_RCC_OscConfig+0x474>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d106      	bne.n	800468e <HAL_RCC_OscConfig+0x2ea>
 8004680:	4b64      	ldr	r3, [pc, #400]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a63      	ldr	r2, [pc, #396]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
 800468c:	e01c      	b.n	80046c8 <HAL_RCC_OscConfig+0x324>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b05      	cmp	r3, #5
 8004694:	d10c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x30c>
 8004696:	4b5f      	ldr	r3, [pc, #380]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	4a5e      	ldr	r2, [pc, #376]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 800469c:	f043 0304 	orr.w	r3, r3, #4
 80046a0:	6713      	str	r3, [r2, #112]	; 0x70
 80046a2:	4b5c      	ldr	r3, [pc, #368]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	4a5b      	ldr	r2, [pc, #364]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6713      	str	r3, [r2, #112]	; 0x70
 80046ae:	e00b      	b.n	80046c8 <HAL_RCC_OscConfig+0x324>
 80046b0:	4b58      	ldr	r3, [pc, #352]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4a57      	ldr	r2, [pc, #348]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
 80046bc:	4b55      	ldr	r3, [pc, #340]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	4a54      	ldr	r2, [pc, #336]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046c2:	f023 0304 	bic.w	r3, r3, #4
 80046c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d015      	beq.n	80046fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fd fa5c 	bl	8001b8c <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d6:	e00a      	b.n	80046ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d8:	f7fd fa58 	bl	8001b8c <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0cb      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ee:	4b49      	ldr	r3, [pc, #292]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0ee      	beq.n	80046d8 <HAL_RCC_OscConfig+0x334>
 80046fa:	e014      	b.n	8004726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fc:	f7fd fa46 	bl	8001b8c <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004702:	e00a      	b.n	800471a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004704:	f7fd fa42 	bl	8001b8c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e0b5      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471a:	4b3e      	ldr	r3, [pc, #248]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ee      	bne.n	8004704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004726:	7dfb      	ldrb	r3, [r7, #23]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d105      	bne.n	8004738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800472c:	4b39      	ldr	r3, [pc, #228]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	4a38      	ldr	r2, [pc, #224]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004736:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a1 	beq.w	8004884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004742:	4b34      	ldr	r3, [pc, #208]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b08      	cmp	r3, #8
 800474c:	d05c      	beq.n	8004808 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d141      	bne.n	80047da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004756:	4b31      	ldr	r3, [pc, #196]	; (800481c <HAL_RCC_OscConfig+0x478>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fd fa16 	bl	8001b8c <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004764:	f7fd fa12 	bl	8001b8c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e087      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	4b27      	ldr	r3, [pc, #156]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69da      	ldr	r2, [r3, #28]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	019b      	lsls	r3, r3, #6
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	3b01      	subs	r3, #1
 800479c:	041b      	lsls	r3, r3, #16
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	061b      	lsls	r3, r3, #24
 80047a6:	491b      	ldr	r1, [pc, #108]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ac:	4b1b      	ldr	r3, [pc, #108]	; (800481c <HAL_RCC_OscConfig+0x478>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b2:	f7fd f9eb 	bl	8001b8c <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ba:	f7fd f9e7 	bl	8001b8c <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e05c      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x416>
 80047d8:	e054      	b.n	8004884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047da:	4b10      	ldr	r3, [pc, #64]	; (800481c <HAL_RCC_OscConfig+0x478>)
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fd f9d4 	bl	8001b8c <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e8:	f7fd f9d0 	bl	8001b8c <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e045      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_RCC_OscConfig+0x470>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0x444>
 8004806:	e03d      	b.n	8004884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d107      	bne.n	8004820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e038      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
 8004814:	40023800 	.word	0x40023800
 8004818:	40007000 	.word	0x40007000
 800481c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004820:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <HAL_RCC_OscConfig+0x4ec>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d028      	beq.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d121      	bne.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d11a      	bne.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004850:	4013      	ands	r3, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004858:	4293      	cmp	r3, r2
 800485a:	d111      	bne.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	085b      	lsrs	r3, r3, #1
 8004868:	3b01      	subs	r3, #1
 800486a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800486c:	429a      	cmp	r2, r3
 800486e:	d107      	bne.n	8004880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800

08004894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0cc      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a8:	4b68      	ldr	r3, [pc, #416]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d90c      	bls.n	80048d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b65      	ldr	r3, [pc, #404]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b63      	ldr	r3, [pc, #396]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0b8      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d020      	beq.n	800491e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e8:	4b59      	ldr	r3, [pc, #356]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4a58      	ldr	r2, [pc, #352]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004900:	4b53      	ldr	r3, [pc, #332]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4a52      	ldr	r2, [pc, #328]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800490a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800490c:	4b50      	ldr	r3, [pc, #320]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	494d      	ldr	r1, [pc, #308]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d044      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004932:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d119      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e07f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d003      	beq.n	8004952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494e:	2b03      	cmp	r3, #3
 8004950:	d107      	bne.n	8004962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004952:	4b3f      	ldr	r3, [pc, #252]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e06f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004962:	4b3b      	ldr	r3, [pc, #236]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e067      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004972:	4b37      	ldr	r3, [pc, #220]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f023 0203 	bic.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4934      	ldr	r1, [pc, #208]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	4313      	orrs	r3, r2
 8004982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004984:	f7fd f902 	bl	8001b8c <HAL_GetTick>
 8004988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498a:	e00a      	b.n	80049a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498c:	f7fd f8fe 	bl	8001b8c <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	f241 3288 	movw	r2, #5000	; 0x1388
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e04f      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a2:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 020c 	and.w	r2, r3, #12
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d1eb      	bne.n	800498c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049b4:	4b25      	ldr	r3, [pc, #148]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d20c      	bcs.n	80049dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b22      	ldr	r3, [pc, #136]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b20      	ldr	r3, [pc, #128]	; (8004a4c <HAL_RCC_ClockConfig+0x1b8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e032      	b.n	8004a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e8:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4916      	ldr	r1, [pc, #88]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	490e      	ldr	r1, [pc, #56]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a1a:	f000 f821 	bl	8004a60 <HAL_RCC_GetSysClockFreq>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	490a      	ldr	r1, [pc, #40]	; (8004a54 <HAL_RCC_ClockConfig+0x1c0>)
 8004a2c:	5ccb      	ldrb	r3, [r1, r3]
 8004a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <HAL_RCC_ClockConfig+0x1c4>)
 8004a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCC_ClockConfig+0x1c8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fc fab2 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023c00 	.word	0x40023c00
 8004a50:	40023800 	.word	0x40023800
 8004a54:	0800da18 	.word	0x0800da18
 8004a58:	20000000 	.word	0x20000000
 8004a5c:	20000004 	.word	0x20000004

08004a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a64:	b094      	sub	sp, #80	; 0x50
 8004a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a70:	2300      	movs	r3, #0
 8004a72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a78:	4b79      	ldr	r3, [pc, #484]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 030c 	and.w	r3, r3, #12
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d00d      	beq.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	f200 80e1 	bhi.w	8004c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_RCC_GetSysClockFreq+0x34>
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d003      	beq.n	8004a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a92:	e0db      	b.n	8004c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a94:	4b73      	ldr	r3, [pc, #460]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a98:	e0db      	b.n	8004c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a9a:	4b73      	ldr	r3, [pc, #460]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a9e:	e0d8      	b.n	8004c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa0:	4b6f      	ldr	r3, [pc, #444]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aaa:	4b6d      	ldr	r3, [pc, #436]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d063      	beq.n	8004b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab6:	4b6a      	ldr	r3, [pc, #424]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	099b      	lsrs	r3, r3, #6
 8004abc:	2200      	movs	r2, #0
 8004abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8004aca:	2300      	movs	r3, #0
 8004acc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ad2:	4622      	mov	r2, r4
 8004ad4:	462b      	mov	r3, r5
 8004ad6:	f04f 0000 	mov.w	r0, #0
 8004ada:	f04f 0100 	mov.w	r1, #0
 8004ade:	0159      	lsls	r1, r3, #5
 8004ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae4:	0150      	lsls	r0, r2, #5
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4621      	mov	r1, r4
 8004aec:	1a51      	subs	r1, r2, r1
 8004aee:	6139      	str	r1, [r7, #16]
 8004af0:	4629      	mov	r1, r5
 8004af2:	eb63 0301 	sbc.w	r3, r3, r1
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b04:	4659      	mov	r1, fp
 8004b06:	018b      	lsls	r3, r1, #6
 8004b08:	4651      	mov	r1, sl
 8004b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b0e:	4651      	mov	r1, sl
 8004b10:	018a      	lsls	r2, r1, #6
 8004b12:	4651      	mov	r1, sl
 8004b14:	ebb2 0801 	subs.w	r8, r2, r1
 8004b18:	4659      	mov	r1, fp
 8004b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b32:	4690      	mov	r8, r2
 8004b34:	4699      	mov	r9, r3
 8004b36:	4623      	mov	r3, r4
 8004b38:	eb18 0303 	adds.w	r3, r8, r3
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	462b      	mov	r3, r5
 8004b40:	eb49 0303 	adc.w	r3, r9, r3
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b52:	4629      	mov	r1, r5
 8004b54:	024b      	lsls	r3, r1, #9
 8004b56:	4621      	mov	r1, r4
 8004b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	024a      	lsls	r2, r1, #9
 8004b60:	4610      	mov	r0, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b66:	2200      	movs	r2, #0
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b70:	f7fb fb2e 	bl	80001d0 <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4613      	mov	r3, r2
 8004b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b7c:	e058      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7e:	4b38      	ldr	r3, [pc, #224]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	099b      	lsrs	r3, r3, #6
 8004b84:	2200      	movs	r2, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	4611      	mov	r1, r2
 8004b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b8e:	623b      	str	r3, [r7, #32]
 8004b90:	2300      	movs	r3, #0
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
 8004b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b98:	4642      	mov	r2, r8
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	f04f 0000 	mov.w	r0, #0
 8004ba0:	f04f 0100 	mov.w	r1, #0
 8004ba4:	0159      	lsls	r1, r3, #5
 8004ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004baa:	0150      	lsls	r0, r2, #5
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4641      	mov	r1, r8
 8004bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8004bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	00eb      	lsls	r3, r5, #3
 8004be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004be6:	00e2      	lsls	r2, r4, #3
 8004be8:	4614      	mov	r4, r2
 8004bea:	461d      	mov	r5, r3
 8004bec:	4643      	mov	r3, r8
 8004bee:	18e3      	adds	r3, r4, r3
 8004bf0:	603b      	str	r3, [r7, #0]
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	eb45 0303 	adc.w	r3, r5, r3
 8004bf8:	607b      	str	r3, [r7, #4]
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c06:	4629      	mov	r1, r5
 8004c08:	028b      	lsls	r3, r1, #10
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c10:	4621      	mov	r1, r4
 8004c12:	028a      	lsls	r2, r1, #10
 8004c14:	4610      	mov	r0, r2
 8004c16:	4619      	mov	r1, r3
 8004c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	61fa      	str	r2, [r7, #28]
 8004c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c24:	f7fb fad4 	bl	80001d0 <__aeabi_uldivmod>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c4a:	e002      	b.n	8004c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3750      	adds	r7, #80	; 0x50
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c5e:	bf00      	nop
 8004c60:	40023800 	.word	0x40023800
 8004c64:	00f42400 	.word	0x00f42400
 8004c68:	007a1200 	.word	0x007a1200

08004c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c70:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c72:	681b      	ldr	r3, [r3, #0]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	20000000 	.word	0x20000000

08004c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c88:	f7ff fff0 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	0a9b      	lsrs	r3, r3, #10
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4903      	ldr	r1, [pc, #12]	; (8004ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	0800da28 	.word	0x0800da28

08004cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cb0:	f7ff ffdc 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	0b5b      	lsrs	r3, r3, #13
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	4903      	ldr	r1, [pc, #12]	; (8004cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	0800da28 	.word	0x0800da28

08004cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	220f      	movs	r2, #15
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ce4:	4b12      	ldr	r3, [pc, #72]	; (8004d30 <HAL_RCC_GetClockConfig+0x5c>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0203 	and.w	r2, r3, #3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <HAL_RCC_GetClockConfig+0x5c>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <HAL_RCC_GetClockConfig+0x5c>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d08:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <HAL_RCC_GetClockConfig+0x5c>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	08db      	lsrs	r3, r3, #3
 8004d0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d16:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <HAL_RCC_GetClockConfig+0x60>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0207 	and.w	r2, r3, #7
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	601a      	str	r2, [r3, #0]
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40023800 	.word	0x40023800
 8004d34:	40023c00 	.word	0x40023c00

08004d38 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e01c      	b.n	8004d84 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	795b      	ldrb	r3, [r3, #5]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d105      	bne.n	8004d60 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fc f856 	bl	8000e0c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0204 	orr.w	r2, r2, #4
 8004d74:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e07b      	b.n	8004e96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d108      	bne.n	8004db8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dae:	d009      	beq.n	8004dc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	61da      	str	r2, [r3, #28]
 8004db6:	e005      	b.n	8004dc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc f86c 	bl	8000ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	ea42 0103 	orr.w	r1, r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	f003 0104 	and.w	r1, r3, #4
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	f003 0210 	and.w	r2, r3, #16
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e041      	b.n	8004f34 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d106      	bne.n	8004eca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7fc fc55 	bl	8001774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f000 fded 	bl	8005abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d001      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e04e      	b.n	8004ff2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a23      	ldr	r2, [pc, #140]	; (8005000 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d022      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7e:	d01d      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d018      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1e      	ldr	r2, [pc, #120]	; (8005008 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1c      	ldr	r2, [pc, #112]	; (800500c <HAL_TIM_Base_Start_IT+0xd0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00e      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1b      	ldr	r2, [pc, #108]	; (8005010 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a19      	ldr	r2, [pc, #100]	; (8005014 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_TIM_Base_Start_IT+0x80>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a18      	ldr	r2, [pc, #96]	; (8005018 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d111      	bne.n	8004fe0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b06      	cmp	r3, #6
 8004fcc:	d010      	beq.n	8004ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fde:	e007      	b.n	8004ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40010000 	.word	0x40010000
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800
 800500c:	40000c00 	.word	0x40000c00
 8005010:	40010400 	.word	0x40010400
 8005014:	40014000 	.word	0x40014000
 8005018:	40001800 	.word	0x40001800

0800501c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e041      	b.n	80050b2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fc fb74 	bl	8001730 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f000 fd2e 	bl	8005abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e041      	b.n	8005150 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7fc fadd 	bl	80016a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2202      	movs	r2, #2
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4619      	mov	r1, r3
 80050f8:	4610      	mov	r0, r2
 80050fa:	f000 fcdf 	bl	8005abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e041      	b.n	80051ee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f839 	bl	80051f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3304      	adds	r3, #4
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f000 fc90 	bl	8005abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b086      	sub	sp, #24
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e097      	b.n	800534e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fc f9b2 	bl	800159c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800524e:	f023 0307 	bic.w	r3, r3, #7
 8005252:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	4619      	mov	r1, r3
 800525e:	4610      	mov	r0, r2
 8005260:	f000 fc2c 	bl	8005abc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528c:	f023 0303 	bic.w	r3, r3, #3
 8005290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	4313      	orrs	r3, r2
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80052aa:	f023 030c 	bic.w	r3, r3, #12
 80052ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	68da      	ldr	r2, [r3, #12]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	4313      	orrs	r3, r2
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	011a      	lsls	r2, r3, #4
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	031b      	lsls	r3, r3, #12
 80052da:	4313      	orrs	r3, r2
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80052e8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80052f0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	4313      	orrs	r3, r2
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b02      	cmp	r3, #2
 800536a:	d122      	bne.n	80053b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b02      	cmp	r3, #2
 8005378:	d11b      	bne.n	80053b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f06f 0202 	mvn.w	r2, #2
 8005382:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fb70 	bl	8005a7e <HAL_TIM_IC_CaptureCallback>
 800539e:	e005      	b.n	80053ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fb62 	bl	8005a6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fb73 	bl	8005a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d122      	bne.n	8005406 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d11b      	bne.n	8005406 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f06f 0204 	mvn.w	r2, #4
 80053d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fb46 	bl	8005a7e <HAL_TIM_IC_CaptureCallback>
 80053f2:	e005      	b.n	8005400 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fb38 	bl	8005a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fb49 	bl	8005a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b08      	cmp	r3, #8
 8005412:	d122      	bne.n	800545a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b08      	cmp	r3, #8
 8005420:	d11b      	bne.n	800545a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f06f 0208 	mvn.w	r2, #8
 800542a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2204      	movs	r2, #4
 8005430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 fb1c 	bl	8005a7e <HAL_TIM_IC_CaptureCallback>
 8005446:	e005      	b.n	8005454 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fb0e 	bl	8005a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fb1f 	bl	8005a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b10      	cmp	r3, #16
 8005466:	d122      	bne.n	80054ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0310 	and.w	r3, r3, #16
 8005472:	2b10      	cmp	r3, #16
 8005474:	d11b      	bne.n	80054ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f06f 0210 	mvn.w	r2, #16
 800547e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2208      	movs	r2, #8
 8005484:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 faf2 	bl	8005a7e <HAL_TIM_IC_CaptureCallback>
 800549a:	e005      	b.n	80054a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fae4 	bl	8005a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 faf5 	bl	8005a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d10e      	bne.n	80054da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d107      	bne.n	80054da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f06f 0201 	mvn.w	r2, #1
 80054d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7fb fc6d 	bl	8000db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	2b80      	cmp	r3, #128	; 0x80
 80054e6:	d10e      	bne.n	8005506 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f2:	2b80      	cmp	r3, #128	; 0x80
 80054f4:	d107      	bne.n	8005506 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 ffc7 	bl	8006494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	d10e      	bne.n	8005532 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b40      	cmp	r3, #64	; 0x40
 8005520:	d107      	bne.n	8005532 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800552a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 faba 	bl	8005aa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b20      	cmp	r3, #32
 800553e:	d10e      	bne.n	800555e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b20      	cmp	r3, #32
 800554c:	d107      	bne.n	800555e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f06f 0220 	mvn.w	r2, #32
 8005556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 ff91 	bl	8006480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005582:	2302      	movs	r3, #2
 8005584:	e048      	b.n	8005618 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b0c      	cmp	r3, #12
 8005592:	d839      	bhi.n	8005608 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005594:	a201      	add	r2, pc, #4	; (adr r2, 800559c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559a:	bf00      	nop
 800559c:	080055d1 	.word	0x080055d1
 80055a0:	08005609 	.word	0x08005609
 80055a4:	08005609 	.word	0x08005609
 80055a8:	08005609 	.word	0x08005609
 80055ac:	080055df 	.word	0x080055df
 80055b0:	08005609 	.word	0x08005609
 80055b4:	08005609 	.word	0x08005609
 80055b8:	08005609 	.word	0x08005609
 80055bc:	080055ed 	.word	0x080055ed
 80055c0:	08005609 	.word	0x08005609
 80055c4:	08005609 	.word	0x08005609
 80055c8:	08005609 	.word	0x08005609
 80055cc:	080055fb 	.word	0x080055fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68b9      	ldr	r1, [r7, #8]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fb10 	bl	8005bfc <TIM_OC1_SetConfig>
      break;
 80055dc:	e017      	b.n	800560e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fb79 	bl	8005cdc <TIM_OC2_SetConfig>
      break;
 80055ea:	e010      	b.n	800560e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fbe8 	bl	8005dc8 <TIM_OC3_SetConfig>
      break;
 80055f8:	e009      	b.n	800560e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fc55 	bl	8005eb0 <TIM_OC4_SetConfig>
      break;
 8005606:	e002      	b.n	800560e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	75fb      	strb	r3, [r7, #23]
      break;
 800560c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005616:	7dfb      	ldrb	r3, [r7, #23]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_TIM_IC_ConfigChannel+0x1e>
 800563a:	2302      	movs	r3, #2
 800563c:	e088      	b.n	8005750 <HAL_TIM_IC_ConfigChannel+0x130>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d11b      	bne.n	8005684 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	6819      	ldr	r1, [r3, #0]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f000 fc7e 	bl	8005f5c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 020c 	bic.w	r2, r2, #12
 800566e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6999      	ldr	r1, [r3, #24]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	689a      	ldr	r2, [r3, #8]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	619a      	str	r2, [r3, #24]
 8005682:	e060      	b.n	8005746 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b04      	cmp	r3, #4
 8005688:	d11c      	bne.n	80056c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f000 fd02 	bl	80060a2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699a      	ldr	r2, [r3, #24]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6999      	ldr	r1, [r3, #24]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	021a      	lsls	r2, r3, #8
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	619a      	str	r2, [r3, #24]
 80056c2:	e040      	b.n	8005746 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d11b      	bne.n	8005702 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	6819      	ldr	r1, [r3, #0]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f000 fd4f 	bl	800617c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 020c 	bic.w	r2, r2, #12
 80056ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69d9      	ldr	r1, [r3, #28]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	61da      	str	r2, [r3, #28]
 8005700:	e021      	b.n	8005746 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b0c      	cmp	r3, #12
 8005706:	d11c      	bne.n	8005742 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f000 fd6c 	bl	80061f4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69da      	ldr	r2, [r3, #28]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800572a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69d9      	ldr	r1, [r3, #28]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	021a      	lsls	r2, r3, #8
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	61da      	str	r2, [r3, #28]
 8005740:	e001      	b.n	8005746 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800574e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005772:	2302      	movs	r3, #2
 8005774:	e0ae      	b.n	80058d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b0c      	cmp	r3, #12
 8005782:	f200 809f 	bhi.w	80058c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005786:	a201      	add	r2, pc, #4	; (adr r2, 800578c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	080057c1 	.word	0x080057c1
 8005790:	080058c5 	.word	0x080058c5
 8005794:	080058c5 	.word	0x080058c5
 8005798:	080058c5 	.word	0x080058c5
 800579c:	08005801 	.word	0x08005801
 80057a0:	080058c5 	.word	0x080058c5
 80057a4:	080058c5 	.word	0x080058c5
 80057a8:	080058c5 	.word	0x080058c5
 80057ac:	08005843 	.word	0x08005843
 80057b0:	080058c5 	.word	0x080058c5
 80057b4:	080058c5 	.word	0x080058c5
 80057b8:	080058c5 	.word	0x080058c5
 80057bc:	08005883 	.word	0x08005883
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fa18 	bl	8005bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0208 	orr.w	r2, r2, #8
 80057da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0204 	bic.w	r2, r2, #4
 80057ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6999      	ldr	r1, [r3, #24]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	619a      	str	r2, [r3, #24]
      break;
 80057fe:	e064      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fa68 	bl	8005cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800581a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	021a      	lsls	r2, r3, #8
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	619a      	str	r2, [r3, #24]
      break;
 8005840:	e043      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fabd 	bl	8005dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0208 	orr.w	r2, r2, #8
 800585c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0204 	bic.w	r2, r2, #4
 800586c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69d9      	ldr	r1, [r3, #28]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	61da      	str	r2, [r3, #28]
      break;
 8005880:	e023      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fb11 	bl	8005eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800589c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69d9      	ldr	r1, [r3, #28]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	021a      	lsls	r2, r3, #8
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	61da      	str	r2, [r3, #28]
      break;
 80058c2:	e002      	b.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	75fb      	strb	r3, [r7, #23]
      break;
 80058c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_TIM_ConfigClockSource+0x1c>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e0b4      	b.n	8005a62 <HAL_TIM_ConfigClockSource+0x186>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800591e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005930:	d03e      	beq.n	80059b0 <HAL_TIM_ConfigClockSource+0xd4>
 8005932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005936:	f200 8087 	bhi.w	8005a48 <HAL_TIM_ConfigClockSource+0x16c>
 800593a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593e:	f000 8086 	beq.w	8005a4e <HAL_TIM_ConfigClockSource+0x172>
 8005942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005946:	d87f      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x16c>
 8005948:	2b70      	cmp	r3, #112	; 0x70
 800594a:	d01a      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0xa6>
 800594c:	2b70      	cmp	r3, #112	; 0x70
 800594e:	d87b      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x16c>
 8005950:	2b60      	cmp	r3, #96	; 0x60
 8005952:	d050      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0x11a>
 8005954:	2b60      	cmp	r3, #96	; 0x60
 8005956:	d877      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x16c>
 8005958:	2b50      	cmp	r3, #80	; 0x50
 800595a:	d03c      	beq.n	80059d6 <HAL_TIM_ConfigClockSource+0xfa>
 800595c:	2b50      	cmp	r3, #80	; 0x50
 800595e:	d873      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x16c>
 8005960:	2b40      	cmp	r3, #64	; 0x40
 8005962:	d058      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x13a>
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	d86f      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x16c>
 8005968:	2b30      	cmp	r3, #48	; 0x30
 800596a:	d064      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x15a>
 800596c:	2b30      	cmp	r3, #48	; 0x30
 800596e:	d86b      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x16c>
 8005970:	2b20      	cmp	r3, #32
 8005972:	d060      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x15a>
 8005974:	2b20      	cmp	r3, #32
 8005976:	d867      	bhi.n	8005a48 <HAL_TIM_ConfigClockSource+0x16c>
 8005978:	2b00      	cmp	r3, #0
 800597a:	d05c      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x15a>
 800597c:	2b10      	cmp	r3, #16
 800597e:	d05a      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x15a>
 8005980:	e062      	b.n	8005a48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6818      	ldr	r0, [r3, #0]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	6899      	ldr	r1, [r3, #8]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f000 fc87 	bl	80062a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	609a      	str	r2, [r3, #8]
      break;
 80059ae:	e04f      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	6899      	ldr	r1, [r3, #8]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f000 fc70 	bl	80062a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689a      	ldr	r2, [r3, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059d2:	609a      	str	r2, [r3, #8]
      break;
 80059d4:	e03c      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6859      	ldr	r1, [r3, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	461a      	mov	r2, r3
 80059e4:	f000 fb2e 	bl	8006044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2150      	movs	r1, #80	; 0x50
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fc3d 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 80059f4:	e02c      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6859      	ldr	r1, [r3, #4]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f000 fb8a 	bl	800611c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2160      	movs	r1, #96	; 0x60
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fc2d 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8005a14:	e01c      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6859      	ldr	r1, [r3, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f000 fb0e 	bl	8006044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2140      	movs	r1, #64	; 0x40
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fc1d 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8005a34:	e00c      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f000 fc14 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8005a46:	e003      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a4c:	e000      	b.n	8005a50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a40      	ldr	r2, [pc, #256]	; (8005bd0 <TIM_Base_SetConfig+0x114>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d013      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ada:	d00f      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a3d      	ldr	r2, [pc, #244]	; (8005bd4 <TIM_Base_SetConfig+0x118>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00b      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a3c      	ldr	r2, [pc, #240]	; (8005bd8 <TIM_Base_SetConfig+0x11c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d007      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a3b      	ldr	r2, [pc, #236]	; (8005bdc <TIM_Base_SetConfig+0x120>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d003      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a3a      	ldr	r2, [pc, #232]	; (8005be0 <TIM_Base_SetConfig+0x124>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d108      	bne.n	8005b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a2f      	ldr	r2, [pc, #188]	; (8005bd0 <TIM_Base_SetConfig+0x114>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d02b      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1c:	d027      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a2c      	ldr	r2, [pc, #176]	; (8005bd4 <TIM_Base_SetConfig+0x118>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d023      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a2b      	ldr	r2, [pc, #172]	; (8005bd8 <TIM_Base_SetConfig+0x11c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d01f      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2a      	ldr	r2, [pc, #168]	; (8005bdc <TIM_Base_SetConfig+0x120>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d01b      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a29      	ldr	r2, [pc, #164]	; (8005be0 <TIM_Base_SetConfig+0x124>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d017      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a28      	ldr	r2, [pc, #160]	; (8005be4 <TIM_Base_SetConfig+0x128>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a27      	ldr	r2, [pc, #156]	; (8005be8 <TIM_Base_SetConfig+0x12c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00f      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a26      	ldr	r2, [pc, #152]	; (8005bec <TIM_Base_SetConfig+0x130>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00b      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a25      	ldr	r2, [pc, #148]	; (8005bf0 <TIM_Base_SetConfig+0x134>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d007      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a24      	ldr	r2, [pc, #144]	; (8005bf4 <TIM_Base_SetConfig+0x138>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d003      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a23      	ldr	r2, [pc, #140]	; (8005bf8 <TIM_Base_SetConfig+0x13c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d108      	bne.n	8005b80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	; (8005bd0 <TIM_Base_SetConfig+0x114>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_Base_SetConfig+0xf8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a0c      	ldr	r2, [pc, #48]	; (8005be0 <TIM_Base_SetConfig+0x124>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d103      	bne.n	8005bbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	615a      	str	r2, [r3, #20]
}
 8005bc2:	bf00      	nop
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	40000400 	.word	0x40000400
 8005bd8:	40000800 	.word	0x40000800
 8005bdc:	40000c00 	.word	0x40000c00
 8005be0:	40010400 	.word	0x40010400
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40014400 	.word	0x40014400
 8005bec:	40014800 	.word	0x40014800
 8005bf0:	40001800 	.word	0x40001800
 8005bf4:	40001c00 	.word	0x40001c00
 8005bf8:	40002000 	.word	0x40002000

08005bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f023 0201 	bic.w	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f023 0302 	bic.w	r3, r3, #2
 8005c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a20      	ldr	r2, [pc, #128]	; (8005cd4 <TIM_OC1_SetConfig+0xd8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_OC1_SetConfig+0x64>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a1f      	ldr	r2, [pc, #124]	; (8005cd8 <TIM_OC1_SetConfig+0xdc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d10c      	bne.n	8005c7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f023 0308 	bic.w	r3, r3, #8
 8005c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f023 0304 	bic.w	r3, r3, #4
 8005c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a15      	ldr	r2, [pc, #84]	; (8005cd4 <TIM_OC1_SetConfig+0xd8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d003      	beq.n	8005c8a <TIM_OC1_SetConfig+0x8e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <TIM_OC1_SetConfig+0xdc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d111      	bne.n	8005cae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	621a      	str	r2, [r3, #32]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	40010000 	.word	0x40010000
 8005cd8:	40010400 	.word	0x40010400

08005cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f023 0210 	bic.w	r2, r3, #16
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	021b      	lsls	r3, r3, #8
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0320 	bic.w	r3, r3, #32
 8005d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a22      	ldr	r2, [pc, #136]	; (8005dc0 <TIM_OC2_SetConfig+0xe4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_OC2_SetConfig+0x68>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a21      	ldr	r2, [pc, #132]	; (8005dc4 <TIM_OC2_SetConfig+0xe8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d10d      	bne.n	8005d60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a17      	ldr	r2, [pc, #92]	; (8005dc0 <TIM_OC2_SetConfig+0xe4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_OC2_SetConfig+0x94>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a16      	ldr	r2, [pc, #88]	; (8005dc4 <TIM_OC2_SetConfig+0xe8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d113      	bne.n	8005d98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	40010400 	.word	0x40010400

08005dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0303 	bic.w	r3, r3, #3
 8005dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	021b      	lsls	r3, r3, #8
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a21      	ldr	r2, [pc, #132]	; (8005ea8 <TIM_OC3_SetConfig+0xe0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d003      	beq.n	8005e2e <TIM_OC3_SetConfig+0x66>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a20      	ldr	r2, [pc, #128]	; (8005eac <TIM_OC3_SetConfig+0xe4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d10d      	bne.n	8005e4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a16      	ldr	r2, [pc, #88]	; (8005ea8 <TIM_OC3_SetConfig+0xe0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d003      	beq.n	8005e5a <TIM_OC3_SetConfig+0x92>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a15      	ldr	r2, [pc, #84]	; (8005eac <TIM_OC3_SetConfig+0xe4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d113      	bne.n	8005e82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	011b      	lsls	r3, r3, #4
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	621a      	str	r2, [r3, #32]
}
 8005e9c:	bf00      	nop
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	40010000 	.word	0x40010000
 8005eac:	40010400 	.word	0x40010400

08005eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	031b      	lsls	r3, r3, #12
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <TIM_OC4_SetConfig+0xa4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <TIM_OC4_SetConfig+0x68>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a11      	ldr	r2, [pc, #68]	; (8005f58 <TIM_OC4_SetConfig+0xa8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d109      	bne.n	8005f2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	019b      	lsls	r3, r3, #6
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	621a      	str	r2, [r3, #32]
}
 8005f46:	bf00      	nop
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40010000 	.word	0x40010000
 8005f58:	40010400 	.word	0x40010400

08005f5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f023 0201 	bic.w	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4a28      	ldr	r2, [pc, #160]	; (8006028 <TIM_TI1_SetConfig+0xcc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01b      	beq.n	8005fc2 <TIM_TI1_SetConfig+0x66>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f90:	d017      	beq.n	8005fc2 <TIM_TI1_SetConfig+0x66>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4a25      	ldr	r2, [pc, #148]	; (800602c <TIM_TI1_SetConfig+0xd0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d013      	beq.n	8005fc2 <TIM_TI1_SetConfig+0x66>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4a24      	ldr	r2, [pc, #144]	; (8006030 <TIM_TI1_SetConfig+0xd4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00f      	beq.n	8005fc2 <TIM_TI1_SetConfig+0x66>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4a23      	ldr	r2, [pc, #140]	; (8006034 <TIM_TI1_SetConfig+0xd8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00b      	beq.n	8005fc2 <TIM_TI1_SetConfig+0x66>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4a22      	ldr	r2, [pc, #136]	; (8006038 <TIM_TI1_SetConfig+0xdc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <TIM_TI1_SetConfig+0x66>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4a21      	ldr	r2, [pc, #132]	; (800603c <TIM_TI1_SetConfig+0xe0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_TI1_SetConfig+0x66>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4a20      	ldr	r2, [pc, #128]	; (8006040 <TIM_TI1_SetConfig+0xe4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d101      	bne.n	8005fc6 <TIM_TI1_SetConfig+0x6a>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <TIM_TI1_SetConfig+0x6c>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d008      	beq.n	8005fde <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f023 0303 	bic.w	r3, r3, #3
 8005fd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	e003      	b.n	8005fe6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f043 0301 	orr.w	r3, r3, #1
 8005fe4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f023 030a 	bic.w	r3, r3, #10
 8006000:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f003 030a 	and.w	r3, r3, #10
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	621a      	str	r2, [r3, #32]
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40010000 	.word	0x40010000
 800602c:	40000400 	.word	0x40000400
 8006030:	40000800 	.word	0x40000800
 8006034:	40000c00 	.word	0x40000c00
 8006038:	40010400 	.word	0x40010400
 800603c:	40014000 	.word	0x40014000
 8006040:	40001800 	.word	0x40001800

08006044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f023 0201 	bic.w	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f023 030a 	bic.w	r3, r3, #10
 8006080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b087      	sub	sp, #28
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	607a      	str	r2, [r7, #4]
 80060ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	f023 0210 	bic.w	r2, r3, #16
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	031b      	lsls	r3, r3, #12
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	621a      	str	r2, [r3, #32]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	f023 0210 	bic.w	r2, r3, #16
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006146:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	031b      	lsls	r3, r3, #12
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006158:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	621a      	str	r2, [r3, #32]
}
 8006170:	bf00      	nop
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f023 0303 	bic.w	r3, r3, #3
 80061a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80061cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	621a      	str	r2, [r3, #32]
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006220:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006232:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	031b      	lsls	r3, r3, #12
 8006238:	b29b      	uxth	r3, r3
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006246:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	031b      	lsls	r3, r3, #12
 800624c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	621a      	str	r2, [r3, #32]
}
 8006262:	bf00      	nop
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	f043 0307 	orr.w	r3, r3, #7
 8006290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	609a      	str	r2, [r3, #8]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	021a      	lsls	r2, r3, #8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	431a      	orrs	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	609a      	str	r2, [r3, #8]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e05a      	b.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d022      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006348:	d01d      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a1d      	ldr	r2, [pc, #116]	; (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d018      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a1b      	ldr	r2, [pc, #108]	; (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d013      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a1a      	ldr	r2, [pc, #104]	; (80063cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00e      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a18      	ldr	r2, [pc, #96]	; (80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d009      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a17      	ldr	r2, [pc, #92]	; (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d004      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d10c      	bne.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800638c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	4313      	orrs	r3, r2
 8006396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40010400 	.word	0x40010400
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40001800 	.word	0x40001800

080063dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e03d      	b.n	8006474 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e03f      	b.n	800653a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fb fa5e 	bl	8001990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2224      	movs	r2, #36	; 0x24
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f829 	bl	8006544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695a      	ldr	r2, [r3, #20]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006510:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006520:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2220      	movs	r2, #32
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006548:	b0c0      	sub	sp, #256	; 0x100
 800654a:	af00      	add	r7, sp, #0
 800654c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006560:	68d9      	ldr	r1, [r3, #12]
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	ea40 0301 	orr.w	r3, r0, r1
 800656c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	431a      	orrs	r2, r3
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	431a      	orrs	r2, r3
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800659c:	f021 010c 	bic.w	r1, r1, #12
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065aa:	430b      	orrs	r3, r1
 80065ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065be:	6999      	ldr	r1, [r3, #24]
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	ea40 0301 	orr.w	r3, r0, r1
 80065ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	4b8f      	ldr	r3, [pc, #572]	; (8006810 <UART_SetConfig+0x2cc>)
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d005      	beq.n	80065e4 <UART_SetConfig+0xa0>
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	4b8d      	ldr	r3, [pc, #564]	; (8006814 <UART_SetConfig+0x2d0>)
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d104      	bne.n	80065ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065e4:	f7fe fb62 	bl	8004cac <HAL_RCC_GetPCLK2Freq>
 80065e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80065ec:	e003      	b.n	80065f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065ee:	f7fe fb49 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 80065f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006600:	f040 810c 	bne.w	800681c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006608:	2200      	movs	r2, #0
 800660a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800660e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006612:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006616:	4622      	mov	r2, r4
 8006618:	462b      	mov	r3, r5
 800661a:	1891      	adds	r1, r2, r2
 800661c:	65b9      	str	r1, [r7, #88]	; 0x58
 800661e:	415b      	adcs	r3, r3
 8006620:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006622:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006626:	4621      	mov	r1, r4
 8006628:	eb12 0801 	adds.w	r8, r2, r1
 800662c:	4629      	mov	r1, r5
 800662e:	eb43 0901 	adc.w	r9, r3, r1
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800663e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006646:	4690      	mov	r8, r2
 8006648:	4699      	mov	r9, r3
 800664a:	4623      	mov	r3, r4
 800664c:	eb18 0303 	adds.w	r3, r8, r3
 8006650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006654:	462b      	mov	r3, r5
 8006656:	eb49 0303 	adc.w	r3, r9, r3
 800665a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800665e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800666a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800666e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006672:	460b      	mov	r3, r1
 8006674:	18db      	adds	r3, r3, r3
 8006676:	653b      	str	r3, [r7, #80]	; 0x50
 8006678:	4613      	mov	r3, r2
 800667a:	eb42 0303 	adc.w	r3, r2, r3
 800667e:	657b      	str	r3, [r7, #84]	; 0x54
 8006680:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006684:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006688:	f7f9 fda2 	bl	80001d0 <__aeabi_uldivmod>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4b61      	ldr	r3, [pc, #388]	; (8006818 <UART_SetConfig+0x2d4>)
 8006692:	fba3 2302 	umull	r2, r3, r3, r2
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	011c      	lsls	r4, r3, #4
 800669a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800669e:	2200      	movs	r2, #0
 80066a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066ac:	4642      	mov	r2, r8
 80066ae:	464b      	mov	r3, r9
 80066b0:	1891      	adds	r1, r2, r2
 80066b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80066b4:	415b      	adcs	r3, r3
 80066b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066bc:	4641      	mov	r1, r8
 80066be:	eb12 0a01 	adds.w	sl, r2, r1
 80066c2:	4649      	mov	r1, r9
 80066c4:	eb43 0b01 	adc.w	fp, r3, r1
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066dc:	4692      	mov	sl, r2
 80066de:	469b      	mov	fp, r3
 80066e0:	4643      	mov	r3, r8
 80066e2:	eb1a 0303 	adds.w	r3, sl, r3
 80066e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066ea:	464b      	mov	r3, r9
 80066ec:	eb4b 0303 	adc.w	r3, fp, r3
 80066f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006700:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006704:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006708:	460b      	mov	r3, r1
 800670a:	18db      	adds	r3, r3, r3
 800670c:	643b      	str	r3, [r7, #64]	; 0x40
 800670e:	4613      	mov	r3, r2
 8006710:	eb42 0303 	adc.w	r3, r2, r3
 8006714:	647b      	str	r3, [r7, #68]	; 0x44
 8006716:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800671a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800671e:	f7f9 fd57 	bl	80001d0 <__aeabi_uldivmod>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4611      	mov	r1, r2
 8006728:	4b3b      	ldr	r3, [pc, #236]	; (8006818 <UART_SetConfig+0x2d4>)
 800672a:	fba3 2301 	umull	r2, r3, r3, r1
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	2264      	movs	r2, #100	; 0x64
 8006732:	fb02 f303 	mul.w	r3, r2, r3
 8006736:	1acb      	subs	r3, r1, r3
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800673e:	4b36      	ldr	r3, [pc, #216]	; (8006818 <UART_SetConfig+0x2d4>)
 8006740:	fba3 2302 	umull	r2, r3, r3, r2
 8006744:	095b      	lsrs	r3, r3, #5
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800674c:	441c      	add	r4, r3
 800674e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006752:	2200      	movs	r2, #0
 8006754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006758:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800675c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006760:	4642      	mov	r2, r8
 8006762:	464b      	mov	r3, r9
 8006764:	1891      	adds	r1, r2, r2
 8006766:	63b9      	str	r1, [r7, #56]	; 0x38
 8006768:	415b      	adcs	r3, r3
 800676a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800676c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006770:	4641      	mov	r1, r8
 8006772:	1851      	adds	r1, r2, r1
 8006774:	6339      	str	r1, [r7, #48]	; 0x30
 8006776:	4649      	mov	r1, r9
 8006778:	414b      	adcs	r3, r1
 800677a:	637b      	str	r3, [r7, #52]	; 0x34
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	f04f 0300 	mov.w	r3, #0
 8006784:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006788:	4659      	mov	r1, fp
 800678a:	00cb      	lsls	r3, r1, #3
 800678c:	4651      	mov	r1, sl
 800678e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006792:	4651      	mov	r1, sl
 8006794:	00ca      	lsls	r2, r1, #3
 8006796:	4610      	mov	r0, r2
 8006798:	4619      	mov	r1, r3
 800679a:	4603      	mov	r3, r0
 800679c:	4642      	mov	r2, r8
 800679e:	189b      	adds	r3, r3, r2
 80067a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067a4:	464b      	mov	r3, r9
 80067a6:	460a      	mov	r2, r1
 80067a8:	eb42 0303 	adc.w	r3, r2, r3
 80067ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067c4:	460b      	mov	r3, r1
 80067c6:	18db      	adds	r3, r3, r3
 80067c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ca:	4613      	mov	r3, r2
 80067cc:	eb42 0303 	adc.w	r3, r2, r3
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067da:	f7f9 fcf9 	bl	80001d0 <__aeabi_uldivmod>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4b0d      	ldr	r3, [pc, #52]	; (8006818 <UART_SetConfig+0x2d4>)
 80067e4:	fba3 1302 	umull	r1, r3, r3, r2
 80067e8:	095b      	lsrs	r3, r3, #5
 80067ea:	2164      	movs	r1, #100	; 0x64
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	3332      	adds	r3, #50	; 0x32
 80067f6:	4a08      	ldr	r2, [pc, #32]	; (8006818 <UART_SetConfig+0x2d4>)
 80067f8:	fba2 2303 	umull	r2, r3, r2, r3
 80067fc:	095b      	lsrs	r3, r3, #5
 80067fe:	f003 0207 	and.w	r2, r3, #7
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4422      	add	r2, r4
 800680a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800680c:	e105      	b.n	8006a1a <UART_SetConfig+0x4d6>
 800680e:	bf00      	nop
 8006810:	40011000 	.word	0x40011000
 8006814:	40011400 	.word	0x40011400
 8006818:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800681c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006820:	2200      	movs	r2, #0
 8006822:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006826:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800682a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800682e:	4642      	mov	r2, r8
 8006830:	464b      	mov	r3, r9
 8006832:	1891      	adds	r1, r2, r2
 8006834:	6239      	str	r1, [r7, #32]
 8006836:	415b      	adcs	r3, r3
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
 800683a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800683e:	4641      	mov	r1, r8
 8006840:	1854      	adds	r4, r2, r1
 8006842:	4649      	mov	r1, r9
 8006844:	eb43 0501 	adc.w	r5, r3, r1
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	00eb      	lsls	r3, r5, #3
 8006852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006856:	00e2      	lsls	r2, r4, #3
 8006858:	4614      	mov	r4, r2
 800685a:	461d      	mov	r5, r3
 800685c:	4643      	mov	r3, r8
 800685e:	18e3      	adds	r3, r4, r3
 8006860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006864:	464b      	mov	r3, r9
 8006866:	eb45 0303 	adc.w	r3, r5, r3
 800686a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800686e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800687a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800687e:	f04f 0200 	mov.w	r2, #0
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800688a:	4629      	mov	r1, r5
 800688c:	008b      	lsls	r3, r1, #2
 800688e:	4621      	mov	r1, r4
 8006890:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006894:	4621      	mov	r1, r4
 8006896:	008a      	lsls	r2, r1, #2
 8006898:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800689c:	f7f9 fc98 	bl	80001d0 <__aeabi_uldivmod>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4b60      	ldr	r3, [pc, #384]	; (8006a28 <UART_SetConfig+0x4e4>)
 80068a6:	fba3 2302 	umull	r2, r3, r3, r2
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	011c      	lsls	r4, r3, #4
 80068ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	1891      	adds	r1, r2, r2
 80068c6:	61b9      	str	r1, [r7, #24]
 80068c8:	415b      	adcs	r3, r3
 80068ca:	61fb      	str	r3, [r7, #28]
 80068cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068d0:	4641      	mov	r1, r8
 80068d2:	1851      	adds	r1, r2, r1
 80068d4:	6139      	str	r1, [r7, #16]
 80068d6:	4649      	mov	r1, r9
 80068d8:	414b      	adcs	r3, r1
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068e8:	4659      	mov	r1, fp
 80068ea:	00cb      	lsls	r3, r1, #3
 80068ec:	4651      	mov	r1, sl
 80068ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068f2:	4651      	mov	r1, sl
 80068f4:	00ca      	lsls	r2, r1, #3
 80068f6:	4610      	mov	r0, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	4603      	mov	r3, r0
 80068fc:	4642      	mov	r2, r8
 80068fe:	189b      	adds	r3, r3, r2
 8006900:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006904:	464b      	mov	r3, r9
 8006906:	460a      	mov	r2, r1
 8006908:	eb42 0303 	adc.w	r3, r2, r3
 800690c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	67bb      	str	r3, [r7, #120]	; 0x78
 800691a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006928:	4649      	mov	r1, r9
 800692a:	008b      	lsls	r3, r1, #2
 800692c:	4641      	mov	r1, r8
 800692e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006932:	4641      	mov	r1, r8
 8006934:	008a      	lsls	r2, r1, #2
 8006936:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800693a:	f7f9 fc49 	bl	80001d0 <__aeabi_uldivmod>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4b39      	ldr	r3, [pc, #228]	; (8006a28 <UART_SetConfig+0x4e4>)
 8006944:	fba3 1302 	umull	r1, r3, r3, r2
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	2164      	movs	r1, #100	; 0x64
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	3332      	adds	r3, #50	; 0x32
 8006956:	4a34      	ldr	r2, [pc, #208]	; (8006a28 <UART_SetConfig+0x4e4>)
 8006958:	fba2 2303 	umull	r2, r3, r2, r3
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006962:	441c      	add	r4, r3
 8006964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006968:	2200      	movs	r2, #0
 800696a:	673b      	str	r3, [r7, #112]	; 0x70
 800696c:	677a      	str	r2, [r7, #116]	; 0x74
 800696e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006972:	4642      	mov	r2, r8
 8006974:	464b      	mov	r3, r9
 8006976:	1891      	adds	r1, r2, r2
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	415b      	adcs	r3, r3
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006982:	4641      	mov	r1, r8
 8006984:	1851      	adds	r1, r2, r1
 8006986:	6039      	str	r1, [r7, #0]
 8006988:	4649      	mov	r1, r9
 800698a:	414b      	adcs	r3, r1
 800698c:	607b      	str	r3, [r7, #4]
 800698e:	f04f 0200 	mov.w	r2, #0
 8006992:	f04f 0300 	mov.w	r3, #0
 8006996:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800699a:	4659      	mov	r1, fp
 800699c:	00cb      	lsls	r3, r1, #3
 800699e:	4651      	mov	r1, sl
 80069a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069a4:	4651      	mov	r1, sl
 80069a6:	00ca      	lsls	r2, r1, #3
 80069a8:	4610      	mov	r0, r2
 80069aa:	4619      	mov	r1, r3
 80069ac:	4603      	mov	r3, r0
 80069ae:	4642      	mov	r2, r8
 80069b0:	189b      	adds	r3, r3, r2
 80069b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80069b4:	464b      	mov	r3, r9
 80069b6:	460a      	mov	r2, r1
 80069b8:	eb42 0303 	adc.w	r3, r2, r3
 80069bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	663b      	str	r3, [r7, #96]	; 0x60
 80069c8:	667a      	str	r2, [r7, #100]	; 0x64
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	f04f 0300 	mov.w	r3, #0
 80069d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069d6:	4649      	mov	r1, r9
 80069d8:	008b      	lsls	r3, r1, #2
 80069da:	4641      	mov	r1, r8
 80069dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069e0:	4641      	mov	r1, r8
 80069e2:	008a      	lsls	r2, r1, #2
 80069e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80069e8:	f7f9 fbf2 	bl	80001d0 <__aeabi_uldivmod>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4b0d      	ldr	r3, [pc, #52]	; (8006a28 <UART_SetConfig+0x4e4>)
 80069f2:	fba3 1302 	umull	r1, r3, r3, r2
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	2164      	movs	r1, #100	; 0x64
 80069fa:	fb01 f303 	mul.w	r3, r1, r3
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	3332      	adds	r3, #50	; 0x32
 8006a04:	4a08      	ldr	r2, [pc, #32]	; (8006a28 <UART_SetConfig+0x4e4>)
 8006a06:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	f003 020f 	and.w	r2, r3, #15
 8006a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4422      	add	r2, r4
 8006a18:	609a      	str	r2, [r3, #8]
}
 8006a1a:	bf00      	nop
 8006a1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a20:	46bd      	mov	sp, r7
 8006a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a26:	bf00      	nop
 8006a28:	51eb851f 	.word	0x51eb851f

08006a2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	f107 001c 	add.w	r0, r7, #28
 8006a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d122      	bne.n	8006a8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d105      	bne.n	8006a7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f001 fbee 	bl	8008260 <USB_CoreReset>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73fb      	strb	r3, [r7, #15]
 8006a88:	e01a      	b.n	8006ac0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f001 fbe2 	bl	8008260 <USB_CoreReset>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8006ab2:	e005      	b.n	8006ac0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d10b      	bne.n	8006ade <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f043 0206 	orr.w	r2, r3, #6
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f043 0220 	orr.w	r2, r3, #32
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aea:	b004      	add	sp, #16
 8006aec:	4770      	bx	lr
	...

08006af0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	4613      	mov	r3, r2
 8006afc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006afe:	79fb      	ldrb	r3, [r7, #7]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d165      	bne.n	8006bd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	4a41      	ldr	r2, [pc, #260]	; (8006c0c <USB_SetTurnaroundTime+0x11c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d906      	bls.n	8006b1a <USB_SetTurnaroundTime+0x2a>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4a40      	ldr	r2, [pc, #256]	; (8006c10 <USB_SetTurnaroundTime+0x120>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d202      	bcs.n	8006b1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b14:	230f      	movs	r3, #15
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	e062      	b.n	8006be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	4a3c      	ldr	r2, [pc, #240]	; (8006c10 <USB_SetTurnaroundTime+0x120>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d306      	bcc.n	8006b30 <USB_SetTurnaroundTime+0x40>
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	4a3b      	ldr	r2, [pc, #236]	; (8006c14 <USB_SetTurnaroundTime+0x124>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d202      	bcs.n	8006b30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b2a:	230e      	movs	r3, #14
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	e057      	b.n	8006be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4a38      	ldr	r2, [pc, #224]	; (8006c14 <USB_SetTurnaroundTime+0x124>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d306      	bcc.n	8006b46 <USB_SetTurnaroundTime+0x56>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4a37      	ldr	r2, [pc, #220]	; (8006c18 <USB_SetTurnaroundTime+0x128>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d202      	bcs.n	8006b46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b40:	230d      	movs	r3, #13
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	e04c      	b.n	8006be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	4a33      	ldr	r2, [pc, #204]	; (8006c18 <USB_SetTurnaroundTime+0x128>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d306      	bcc.n	8006b5c <USB_SetTurnaroundTime+0x6c>
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	4a32      	ldr	r2, [pc, #200]	; (8006c1c <USB_SetTurnaroundTime+0x12c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d802      	bhi.n	8006b5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b56:	230c      	movs	r3, #12
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	e041      	b.n	8006be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4a2f      	ldr	r2, [pc, #188]	; (8006c1c <USB_SetTurnaroundTime+0x12c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d906      	bls.n	8006b72 <USB_SetTurnaroundTime+0x82>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4a2e      	ldr	r2, [pc, #184]	; (8006c20 <USB_SetTurnaroundTime+0x130>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d802      	bhi.n	8006b72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b6c:	230b      	movs	r3, #11
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e036      	b.n	8006be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	4a2a      	ldr	r2, [pc, #168]	; (8006c20 <USB_SetTurnaroundTime+0x130>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d906      	bls.n	8006b88 <USB_SetTurnaroundTime+0x98>
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4a29      	ldr	r2, [pc, #164]	; (8006c24 <USB_SetTurnaroundTime+0x134>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d802      	bhi.n	8006b88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b82:	230a      	movs	r3, #10
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	e02b      	b.n	8006be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4a26      	ldr	r2, [pc, #152]	; (8006c24 <USB_SetTurnaroundTime+0x134>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d906      	bls.n	8006b9e <USB_SetTurnaroundTime+0xae>
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4a25      	ldr	r2, [pc, #148]	; (8006c28 <USB_SetTurnaroundTime+0x138>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d202      	bcs.n	8006b9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b98:	2309      	movs	r3, #9
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	e020      	b.n	8006be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	4a21      	ldr	r2, [pc, #132]	; (8006c28 <USB_SetTurnaroundTime+0x138>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d306      	bcc.n	8006bb4 <USB_SetTurnaroundTime+0xc4>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	4a20      	ldr	r2, [pc, #128]	; (8006c2c <USB_SetTurnaroundTime+0x13c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d802      	bhi.n	8006bb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006bae:	2308      	movs	r3, #8
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	e015      	b.n	8006be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4a1d      	ldr	r2, [pc, #116]	; (8006c2c <USB_SetTurnaroundTime+0x13c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d906      	bls.n	8006bca <USB_SetTurnaroundTime+0xda>
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4a1c      	ldr	r2, [pc, #112]	; (8006c30 <USB_SetTurnaroundTime+0x140>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d202      	bcs.n	8006bca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006bc4:	2307      	movs	r3, #7
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	e00a      	b.n	8006be0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006bca:	2306      	movs	r3, #6
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	e007      	b.n	8006be0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d102      	bne.n	8006bdc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006bd6:	2309      	movs	r3, #9
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	e001      	b.n	8006be0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006bdc:	2309      	movs	r3, #9
 8006bde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	029b      	lsls	r3, r3, #10
 8006bf4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	371c      	adds	r7, #28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	00d8acbf 	.word	0x00d8acbf
 8006c10:	00e4e1c0 	.word	0x00e4e1c0
 8006c14:	00f42400 	.word	0x00f42400
 8006c18:	01067380 	.word	0x01067380
 8006c1c:	011a499f 	.word	0x011a499f
 8006c20:	01312cff 	.word	0x01312cff
 8006c24:	014ca43f 	.word	0x014ca43f
 8006c28:	016e3600 	.word	0x016e3600
 8006c2c:	01a6ab1f 	.word	0x01a6ab1f
 8006c30:	01e84800 	.word	0x01e84800

08006c34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f043 0201 	orr.w	r2, r3, #1
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b083      	sub	sp, #12
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f023 0201 	bic.w	r2, r3, #1
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d115      	bne.n	8006cc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	f7fa ff7c 	bl	8001ba4 <HAL_Delay>
      ms++;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fa45 	bl	8008142 <USB_GetMode>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d01e      	beq.n	8006cfc <USB_SetCurrentMode+0x84>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b31      	cmp	r3, #49	; 0x31
 8006cc2:	d9f0      	bls.n	8006ca6 <USB_SetCurrentMode+0x2e>
 8006cc4:	e01a      	b.n	8006cfc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d115      	bne.n	8006cf8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cd8:	2001      	movs	r0, #1
 8006cda:	f7fa ff63 	bl	8001ba4 <HAL_Delay>
      ms++;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 fa2c 	bl	8008142 <USB_GetMode>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d005      	beq.n	8006cfc <USB_SetCurrentMode+0x84>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b31      	cmp	r3, #49	; 0x31
 8006cf4:	d9f0      	bls.n	8006cd8 <USB_SetCurrentMode+0x60>
 8006cf6:	e001      	b.n	8006cfc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e005      	b.n	8006d08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b32      	cmp	r3, #50	; 0x32
 8006d00:	d101      	bne.n	8006d06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e000      	b.n	8006d08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d10:	b084      	sub	sp, #16
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b086      	sub	sp, #24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	e009      	b.n	8006d44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	3340      	adds	r3, #64	; 0x40
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	3301      	adds	r3, #1
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b0e      	cmp	r3, #14
 8006d48:	d9f2      	bls.n	8006d30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d11c      	bne.n	8006d8a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d5e:	f043 0302 	orr.w	r3, r3, #2
 8006d62:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	639a      	str	r2, [r3, #56]	; 0x38
 8006d88:	e00b      	b.n	8006da2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006da8:	461a      	mov	r2, r3
 8006daa:	2300      	movs	r3, #0
 8006dac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db4:	4619      	mov	r1, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	680b      	ldr	r3, [r1, #0]
 8006dc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d10c      	bne.n	8006de2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d104      	bne.n	8006dd8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006dce:	2100      	movs	r1, #0
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f965 	bl	80070a0 <USB_SetDevSpeed>
 8006dd6:	e008      	b.n	8006dea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006dd8:	2101      	movs	r1, #1
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f960 	bl	80070a0 <USB_SetDevSpeed>
 8006de0:	e003      	b.n	8006dea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006de2:	2103      	movs	r1, #3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f95b 	bl	80070a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006dea:	2110      	movs	r1, #16
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f8f3 	bl	8006fd8 <USB_FlushTxFifo>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f91f 	bl	8007040 <USB_FlushRxFifo>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e12:	461a      	mov	r2, r3
 8006e14:	2300      	movs	r3, #0
 8006e16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1e:	461a      	mov	r2, r3
 8006e20:	2300      	movs	r3, #0
 8006e22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e30:	2300      	movs	r3, #0
 8006e32:	613b      	str	r3, [r7, #16]
 8006e34:	e043      	b.n	8006ebe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e4c:	d118      	bne.n	8006e80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e60:	461a      	mov	r2, r3
 8006e62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	e013      	b.n	8006e92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e76:	461a      	mov	r2, r3
 8006e78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	e008      	b.n	8006e92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	2300      	movs	r3, #0
 8006e90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	613b      	str	r3, [r7, #16]
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d3b7      	bcc.n	8006e36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	e043      	b.n	8006f54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ee2:	d118      	bne.n	8006f16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10a      	bne.n	8006f00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	e013      	b.n	8006f28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	e008      	b.n	8006f28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	461a      	mov	r2, r3
 8006f24:	2300      	movs	r3, #0
 8006f26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f34:	461a      	mov	r2, r3
 8006f36:	2300      	movs	r3, #0
 8006f38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f46:	461a      	mov	r2, r3
 8006f48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	3301      	adds	r3, #1
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d3b7      	bcc.n	8006ecc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d105      	bne.n	8006f90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	f043 0210 	orr.w	r2, r3, #16
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699a      	ldr	r2, [r3, #24]
 8006f94:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <USB_DevInit+0x2c4>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d005      	beq.n	8006fae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	f043 0208 	orr.w	r2, r3, #8
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d107      	bne.n	8006fc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fbc:	f043 0304 	orr.w	r3, r3, #4
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fd0:	b004      	add	sp, #16
 8006fd2:	4770      	bx	lr
 8006fd4:	803c3800 	.word	0x803c3800

08006fd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4a13      	ldr	r2, [pc, #76]	; (800703c <USB_FlushTxFifo+0x64>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d901      	bls.n	8006ff8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e01b      	b.n	8007030 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	daf2      	bge.n	8006fe6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	019b      	lsls	r3, r3, #6
 8007008:	f043 0220 	orr.w	r2, r3, #32
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3301      	adds	r3, #1
 8007014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4a08      	ldr	r2, [pc, #32]	; (800703c <USB_FlushTxFifo+0x64>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d901      	bls.n	8007022 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e006      	b.n	8007030 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b20      	cmp	r3, #32
 800702c:	d0f0      	beq.n	8007010 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	00030d40 	.word	0x00030d40

08007040 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3301      	adds	r3, #1
 8007050:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4a11      	ldr	r2, [pc, #68]	; (800709c <USB_FlushRxFifo+0x5c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d901      	bls.n	800705e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e018      	b.n	8007090 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	daf2      	bge.n	800704c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2210      	movs	r2, #16
 800706e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4a08      	ldr	r2, [pc, #32]	; (800709c <USB_FlushRxFifo+0x5c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d901      	bls.n	8007082 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e006      	b.n	8007090 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 0310 	and.w	r3, r3, #16
 800708a:	2b10      	cmp	r3, #16
 800708c:	d0f0      	beq.n	8007070 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	00030d40 	.word	0x00030d40

080070a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	68f9      	ldr	r1, [r7, #12]
 80070bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070c0:	4313      	orrs	r3, r2
 80070c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b087      	sub	sp, #28
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 0306 	and.w	r3, r3, #6
 80070ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d102      	bne.n	80070f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80070f2:	2300      	movs	r3, #0
 80070f4:	75fb      	strb	r3, [r7, #23]
 80070f6:	e00a      	b.n	800710e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d002      	beq.n	8007104 <USB_GetDevSpeed+0x32>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b06      	cmp	r3, #6
 8007102:	d102      	bne.n	800710a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007104:	2302      	movs	r3, #2
 8007106:	75fb      	strb	r3, [r7, #23]
 8007108:	e001      	b.n	800710e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800710a:	230f      	movs	r3, #15
 800710c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800710e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007110:	4618      	mov	r0, r3
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d13a      	bne.n	80071ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800713e:	69da      	ldr	r2, [r3, #28]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	f003 030f 	and.w	r3, r3, #15
 8007148:	2101      	movs	r1, #1
 800714a:	fa01 f303 	lsl.w	r3, r1, r3
 800714e:	b29b      	uxth	r3, r3
 8007150:	68f9      	ldr	r1, [r7, #12]
 8007152:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007156:	4313      	orrs	r3, r2
 8007158:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d155      	bne.n	800721c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	791b      	ldrb	r3, [r3, #4]
 800718a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800718c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	059b      	lsls	r3, r3, #22
 8007192:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007194:	4313      	orrs	r3, r2
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	0151      	lsls	r1, r2, #5
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	440a      	add	r2, r1
 800719e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	e036      	b.n	800721c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b4:	69da      	ldr	r2, [r3, #28]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	2101      	movs	r1, #1
 80071c0:	fa01 f303 	lsl.w	r3, r1, r3
 80071c4:	041b      	lsls	r3, r3, #16
 80071c6:	68f9      	ldr	r1, [r7, #12]
 80071c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071cc:	4313      	orrs	r3, r2
 80071ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d11a      	bne.n	800721c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	791b      	ldrb	r3, [r3, #4]
 8007200:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007202:	430b      	orrs	r3, r1
 8007204:	4313      	orrs	r3, r2
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	440a      	add	r2, r1
 800720e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800721a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
	...

0800722c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	785b      	ldrb	r3, [r3, #1]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d161      	bne.n	800730c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800725a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800725e:	d11f      	bne.n	80072a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	0151      	lsls	r1, r2, #5
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	440a      	add	r2, r1
 8007276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800727e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	0151      	lsls	r1, r2, #5
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	440a      	add	r2, r1
 8007296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800729e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	2101      	movs	r1, #1
 80072b2:	fa01 f303 	lsl.w	r3, r1, r3
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	43db      	mvns	r3, r3
 80072ba:	68f9      	ldr	r1, [r7, #12]
 80072bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c0:	4013      	ands	r3, r2
 80072c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ca:	69da      	ldr	r2, [r3, #28]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	f003 030f 	and.w	r3, r3, #15
 80072d4:	2101      	movs	r1, #1
 80072d6:	fa01 f303 	lsl.w	r3, r1, r3
 80072da:	b29b      	uxth	r3, r3
 80072dc:	43db      	mvns	r3, r3
 80072de:	68f9      	ldr	r1, [r7, #12]
 80072e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072e4:	4013      	ands	r3, r2
 80072e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	0159      	lsls	r1, r3, #5
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	440b      	add	r3, r1
 80072fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007302:	4619      	mov	r1, r3
 8007304:	4b35      	ldr	r3, [pc, #212]	; (80073dc <USB_DeactivateEndpoint+0x1b0>)
 8007306:	4013      	ands	r3, r2
 8007308:	600b      	str	r3, [r1, #0]
 800730a:	e060      	b.n	80073ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800731e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007322:	d11f      	bne.n	8007364 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	0151      	lsls	r1, r2, #5
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	440a      	add	r2, r1
 800733a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800733e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007342:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	440a      	add	r2, r1
 800735a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800735e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	f003 030f 	and.w	r3, r3, #15
 8007374:	2101      	movs	r1, #1
 8007376:	fa01 f303 	lsl.w	r3, r1, r3
 800737a:	041b      	lsls	r3, r3, #16
 800737c:	43db      	mvns	r3, r3
 800737e:	68f9      	ldr	r1, [r7, #12]
 8007380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007384:	4013      	ands	r3, r2
 8007386:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738e:	69da      	ldr	r2, [r3, #28]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	2101      	movs	r1, #1
 800739a:	fa01 f303 	lsl.w	r3, r1, r3
 800739e:	041b      	lsls	r3, r3, #16
 80073a0:	43db      	mvns	r3, r3
 80073a2:	68f9      	ldr	r1, [r7, #12]
 80073a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073a8:	4013      	ands	r3, r2
 80073aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	0159      	lsls	r1, r3, #5
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	440b      	add	r3, r1
 80073c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c6:	4619      	mov	r1, r3
 80073c8:	4b05      	ldr	r3, [pc, #20]	; (80073e0 <USB_DeactivateEndpoint+0x1b4>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	ec337800 	.word	0xec337800
 80073e0:	eff37800 	.word	0xeff37800

080073e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08a      	sub	sp, #40	; 0x28
 80073e8:	af02      	add	r7, sp, #8
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	785b      	ldrb	r3, [r3, #1]
 8007400:	2b01      	cmp	r3, #1
 8007402:	f040 815c 	bne.w	80076be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d132      	bne.n	8007474 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	0151      	lsls	r1, r2, #5
 8007420:	69fa      	ldr	r2, [r7, #28]
 8007422:	440a      	add	r2, r1
 8007424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800742c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	0151      	lsls	r1, r2, #5
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	440a      	add	r2, r1
 8007448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800744c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007450:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	0151      	lsls	r1, r2, #5
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	440a      	add	r2, r1
 8007468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800746c:	0cdb      	lsrs	r3, r3, #19
 800746e:	04db      	lsls	r3, r3, #19
 8007470:	6113      	str	r3, [r2, #16]
 8007472:	e074      	b.n	800755e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	0151      	lsls	r1, r2, #5
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	440a      	add	r2, r1
 800748a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748e:	0cdb      	lsrs	r3, r3, #19
 8007490:	04db      	lsls	r3, r3, #19
 8007492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	0151      	lsls	r1, r2, #5
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	440a      	add	r2, r1
 80074aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	6999      	ldr	r1, [r3, #24]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	440b      	add	r3, r1
 80074d0:	1e59      	subs	r1, r3, #1
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80074da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074dc:	4b9d      	ldr	r3, [pc, #628]	; (8007754 <USB_EPStartXfer+0x370>)
 80074de:	400b      	ands	r3, r1
 80074e0:	69b9      	ldr	r1, [r7, #24]
 80074e2:	0148      	lsls	r0, r1, #5
 80074e4:	69f9      	ldr	r1, [r7, #28]
 80074e6:	4401      	add	r1, r0
 80074e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074ec:	4313      	orrs	r3, r2
 80074ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fc:	691a      	ldr	r2, [r3, #16]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007506:	69b9      	ldr	r1, [r7, #24]
 8007508:	0148      	lsls	r0, r1, #5
 800750a:	69f9      	ldr	r1, [r7, #28]
 800750c:	4401      	add	r1, r0
 800750e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007512:	4313      	orrs	r3, r2
 8007514:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	791b      	ldrb	r3, [r3, #4]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d11f      	bne.n	800755e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	0151      	lsls	r1, r2, #5
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	440a      	add	r2, r1
 8007534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007538:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800753c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	0151      	lsls	r1, r2, #5
 8007550:	69fa      	ldr	r2, [r7, #28]
 8007552:	440a      	add	r2, r1
 8007554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007558:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800755c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d14b      	bne.n	80075fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d009      	beq.n	8007580 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007578:	461a      	mov	r2, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	791b      	ldrb	r3, [r3, #4]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d128      	bne.n	80075da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007594:	2b00      	cmp	r3, #0
 8007596:	d110      	bne.n	80075ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	015a      	lsls	r2, r3, #5
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	4413      	add	r3, r2
 80075a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	0151      	lsls	r1, r2, #5
 80075aa:	69fa      	ldr	r2, [r7, #28]
 80075ac:	440a      	add	r2, r1
 80075ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	e00f      	b.n	80075da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	0151      	lsls	r1, r2, #5
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	440a      	add	r2, r1
 80075d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	0151      	lsls	r1, r2, #5
 80075ec:	69fa      	ldr	r2, [r7, #28]
 80075ee:	440a      	add	r2, r1
 80075f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	e133      	b.n	8007864 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	0151      	lsls	r1, r2, #5
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	440a      	add	r2, r1
 8007612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007616:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800761a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	791b      	ldrb	r3, [r3, #4]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d015      	beq.n	8007650 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 811b 	beq.w	8007864 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	2101      	movs	r1, #1
 8007640:	fa01 f303 	lsl.w	r3, r1, r3
 8007644:	69f9      	ldr	r1, [r7, #28]
 8007646:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800764a:	4313      	orrs	r3, r2
 800764c:	634b      	str	r3, [r1, #52]	; 0x34
 800764e:	e109      	b.n	8007864 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800765c:	2b00      	cmp	r3, #0
 800765e:	d110      	bne.n	8007682 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	0151      	lsls	r1, r2, #5
 8007672:	69fa      	ldr	r2, [r7, #28]
 8007674:	440a      	add	r2, r1
 8007676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	e00f      	b.n	80076a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	0151      	lsls	r1, r2, #5
 8007694:	69fa      	ldr	r2, [r7, #28]
 8007696:	440a      	add	r2, r1
 8007698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6919      	ldr	r1, [r3, #16]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	781a      	ldrb	r2, [r3, #0]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	b298      	uxth	r0, r3
 80076b0:	79fb      	ldrb	r3, [r7, #7]
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	4603      	mov	r3, r0
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fade 	bl	8007c78 <USB_WritePacket>
 80076bc:	e0d2      	b.n	8007864 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	0151      	lsls	r1, r2, #5
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	440a      	add	r2, r1
 80076d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d8:	0cdb      	lsrs	r3, r3, #19
 80076da:	04db      	lsls	r3, r3, #19
 80076dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007700:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d126      	bne.n	8007758 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007716:	691a      	ldr	r2, [r3, #16]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007720:	69b9      	ldr	r1, [r7, #24]
 8007722:	0148      	lsls	r0, r1, #5
 8007724:	69f9      	ldr	r1, [r7, #28]
 8007726:	4401      	add	r1, r0
 8007728:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800772c:	4313      	orrs	r3, r2
 800772e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	0151      	lsls	r1, r2, #5
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	440a      	add	r2, r1
 8007746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800774e:	6113      	str	r3, [r2, #16]
 8007750:	e03a      	b.n	80077c8 <USB_EPStartXfer+0x3e4>
 8007752:	bf00      	nop
 8007754:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	699a      	ldr	r2, [r3, #24]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	4413      	add	r3, r2
 8007762:	1e5a      	subs	r2, r3, #1
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	fbb2 f3f3 	udiv	r3, r2, r3
 800776c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	8afa      	ldrh	r2, [r7, #22]
 8007774:	fb03 f202 	mul.w	r2, r3, r2
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007788:	691a      	ldr	r2, [r3, #16]
 800778a:	8afb      	ldrh	r3, [r7, #22]
 800778c:	04d9      	lsls	r1, r3, #19
 800778e:	4b38      	ldr	r3, [pc, #224]	; (8007870 <USB_EPStartXfer+0x48c>)
 8007790:	400b      	ands	r3, r1
 8007792:	69b9      	ldr	r1, [r7, #24]
 8007794:	0148      	lsls	r0, r1, #5
 8007796:	69f9      	ldr	r1, [r7, #28]
 8007798:	4401      	add	r1, r0
 800779a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800779e:	4313      	orrs	r3, r2
 80077a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077b8:	69b9      	ldr	r1, [r7, #24]
 80077ba:	0148      	lsls	r0, r1, #5
 80077bc:	69f9      	ldr	r1, [r7, #28]
 80077be:	4401      	add	r1, r0
 80077c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077c4:	4313      	orrs	r3, r2
 80077c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80077c8:	79fb      	ldrb	r3, [r7, #7]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d10d      	bne.n	80077ea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d009      	beq.n	80077ea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6919      	ldr	r1, [r3, #16]
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e6:	460a      	mov	r2, r1
 80077e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	791b      	ldrb	r3, [r3, #4]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d128      	bne.n	8007844 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d110      	bne.n	8007824 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	0151      	lsls	r1, r2, #5
 8007814:	69fa      	ldr	r2, [r7, #28]
 8007816:	440a      	add	r2, r1
 8007818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800781c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	e00f      	b.n	8007844 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	0151      	lsls	r1, r2, #5
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	440a      	add	r2, r1
 800783a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800783e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007842:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	0151      	lsls	r1, r2, #5
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	440a      	add	r2, r1
 800785a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800785e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007862:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3720      	adds	r7, #32
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	1ff80000 	.word	0x1ff80000

08007874 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	785b      	ldrb	r3, [r3, #1]
 8007890:	2b01      	cmp	r3, #1
 8007892:	f040 80ce 	bne.w	8007a32 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d132      	bne.n	8007904 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	0151      	lsls	r1, r2, #5
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	440a      	add	r2, r1
 80078b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	0151      	lsls	r1, r2, #5
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	440a      	add	r2, r1
 80078d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	0151      	lsls	r1, r2, #5
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	440a      	add	r2, r1
 80078f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078fc:	0cdb      	lsrs	r3, r3, #19
 80078fe:	04db      	lsls	r3, r3, #19
 8007900:	6113      	str	r3, [r2, #16]
 8007902:	e04e      	b.n	80079a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	0151      	lsls	r1, r2, #5
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	440a      	add	r2, r1
 800791a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800791e:	0cdb      	lsrs	r3, r3, #19
 8007920:	04db      	lsls	r3, r3, #19
 8007922:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	0151      	lsls	r1, r2, #5
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	440a      	add	r2, r1
 800793a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800793e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007942:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007946:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	699a      	ldr	r2, [r3, #24]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	429a      	cmp	r2, r3
 8007952:	d903      	bls.n	800795c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	0151      	lsls	r1, r2, #5
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	440a      	add	r2, r1
 8007972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007976:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800797a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	4413      	add	r3, r2
 8007984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007988:	691a      	ldr	r2, [r3, #16]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007992:	6939      	ldr	r1, [r7, #16]
 8007994:	0148      	lsls	r0, r1, #5
 8007996:	6979      	ldr	r1, [r7, #20]
 8007998:	4401      	add	r1, r0
 800799a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800799e:	4313      	orrs	r3, r2
 80079a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80079a2:	79fb      	ldrb	r3, [r7, #7]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d11e      	bne.n	80079e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d009      	beq.n	80079c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079bc:	461a      	mov	r2, r3
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	0151      	lsls	r1, r2, #5
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	440a      	add	r2, r1
 80079da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	e097      	b.n	8007b16 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	0151      	lsls	r1, r2, #5
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	440a      	add	r2, r1
 80079fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a04:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 8083 	beq.w	8007b16 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	f003 030f 	and.w	r3, r3, #15
 8007a20:	2101      	movs	r1, #1
 8007a22:	fa01 f303 	lsl.w	r3, r1, r3
 8007a26:	6979      	ldr	r1, [r7, #20]
 8007a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	634b      	str	r3, [r1, #52]	; 0x34
 8007a30:	e071      	b.n	8007b16 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	0151      	lsls	r1, r2, #5
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	440a      	add	r2, r1
 8007a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a4c:	0cdb      	lsrs	r3, r3, #19
 8007a4e:	04db      	lsls	r3, r3, #19
 8007a50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	0151      	lsls	r1, r2, #5
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	440a      	add	r2, r1
 8007a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a74:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ac4:	6939      	ldr	r1, [r7, #16]
 8007ac6:	0148      	lsls	r0, r1, #5
 8007ac8:	6979      	ldr	r1, [r7, #20]
 8007aca:	4401      	add	r1, r0
 8007acc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d10d      	bne.n	8007af6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d009      	beq.n	8007af6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	6919      	ldr	r1, [r3, #16]
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af2:	460a      	mov	r2, r1
 8007af4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	0151      	lsls	r1, r2, #5
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	440a      	add	r2, r1
 8007b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	371c      	adds	r7, #28
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	785b      	ldrb	r3, [r3, #1]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d14a      	bne.n	8007bd8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b5a:	f040 8086 	bne.w	8007c6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	7812      	ldrb	r2, [r2, #0]
 8007b72:	0151      	lsls	r1, r2, #5
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	440a      	add	r2, r1
 8007b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	7812      	ldrb	r2, [r2, #0]
 8007b96:	0151      	lsls	r1, r2, #5
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	440a      	add	r2, r1
 8007b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ba4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f242 7210 	movw	r2, #10000	; 0x2710
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d902      	bls.n	8007bbc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8007bba:	e056      	b.n	8007c6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bd4:	d0e7      	beq.n	8007ba6 <USB_EPStopXfer+0x82>
 8007bd6:	e048      	b.n	8007c6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bf0:	d13b      	bne.n	8007c6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	7812      	ldrb	r2, [r2, #0]
 8007c06:	0151      	lsls	r1, r2, #5
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	440a      	add	r2, r1
 8007c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	7812      	ldrb	r2, [r2, #0]
 8007c2a:	0151      	lsls	r1, r2, #5
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	440a      	add	r2, r1
 8007c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f242 7210 	movw	r2, #10000	; 0x2710
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d902      	bls.n	8007c50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c4e:	e00c      	b.n	8007c6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c68:	d0e7      	beq.n	8007c3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b089      	sub	sp, #36	; 0x24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4611      	mov	r1, r2
 8007c84:	461a      	mov	r2, r3
 8007c86:	460b      	mov	r3, r1
 8007c88:	71fb      	strb	r3, [r7, #7]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d123      	bne.n	8007ce6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c9e:	88bb      	ldrh	r3, [r7, #4]
 8007ca0:	3303      	adds	r3, #3
 8007ca2:	089b      	lsrs	r3, r3, #2
 8007ca4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	61bb      	str	r3, [r7, #24]
 8007caa:	e018      	b.n	8007cde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	031a      	lsls	r2, r3, #12
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb8:	461a      	mov	r2, r3
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	61bb      	str	r3, [r7, #24]
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d3e2      	bcc.n	8007cac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3724      	adds	r7, #36	; 0x24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b08b      	sub	sp, #44	; 0x2c
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	089b      	lsrs	r3, r3, #2
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d12:	88fb      	ldrh	r3, [r7, #6]
 8007d14:	f003 0303 	and.w	r3, r3, #3
 8007d18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	623b      	str	r3, [r7, #32]
 8007d1e:	e014      	b.n	8007d4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	3301      	adds	r3, #1
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	3301      	adds	r3, #1
 8007d36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	3301      	adds	r3, #1
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	3301      	adds	r3, #1
 8007d48:	623b      	str	r3, [r7, #32]
 8007d4a:	6a3a      	ldr	r2, [r7, #32]
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d3e6      	bcc.n	8007d20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d52:	8bfb      	ldrh	r3, [r7, #30]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01e      	beq.n	8007d96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d62:	461a      	mov	r2, r3
 8007d64:	f107 0310 	add.w	r3, r7, #16
 8007d68:	6812      	ldr	r2, [r2, #0]
 8007d6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	fa22 f303 	lsr.w	r3, r2, r3
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	701a      	strb	r2, [r3, #0]
      i++;
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	3301      	adds	r3, #1
 8007d82:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	3301      	adds	r3, #1
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007d8a:	8bfb      	ldrh	r3, [r7, #30]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d90:	8bfb      	ldrh	r3, [r7, #30]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1ea      	bne.n	8007d6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	372c      	adds	r7, #44	; 0x2c
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	785b      	ldrb	r3, [r3, #1]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d12c      	bne.n	8007e1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	db12      	blt.n	8007df8 <USB_EPSetStall+0x54>
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00f      	beq.n	8007df8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	0151      	lsls	r1, r2, #5
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	440a      	add	r2, r1
 8007dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007df6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	0151      	lsls	r1, r2, #5
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	440a      	add	r2, r1
 8007e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	e02b      	b.n	8007e72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	db12      	blt.n	8007e52 <USB_EPSetStall+0xae>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00f      	beq.n	8007e52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	0151      	lsls	r1, r2, #5
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	440a      	add	r2, r1
 8007e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	0151      	lsls	r1, r2, #5
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	440a      	add	r2, r1
 8007e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	785b      	ldrb	r3, [r3, #1]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d128      	bne.n	8007eee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	0151      	lsls	r1, r2, #5
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	440a      	add	r2, r1
 8007eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	791b      	ldrb	r3, [r3, #4]
 8007ec0:	2b03      	cmp	r3, #3
 8007ec2:	d003      	beq.n	8007ecc <USB_EPClearStall+0x4c>
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	791b      	ldrb	r3, [r3, #4]
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d138      	bne.n	8007f3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	e027      	b.n	8007f3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	015a      	lsls	r2, r3, #5
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	0151      	lsls	r1, r2, #5
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	440a      	add	r2, r1
 8007f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	791b      	ldrb	r3, [r3, #4]
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d003      	beq.n	8007f1e <USB_EPClearStall+0x9e>
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	791b      	ldrb	r3, [r3, #4]
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d10f      	bne.n	8007f3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	0151      	lsls	r1, r2, #5
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	440a      	add	r2, r1
 8007f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007f6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	011b      	lsls	r3, r3, #4
 8007f7c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007f80:	68f9      	ldr	r1, [r7, #12]
 8007f82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f86:	4313      	orrs	r3, r2
 8007f88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3714      	adds	r7, #20
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fb2:	f023 0303 	bic.w	r3, r3, #3
 8007fb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fc6:	f023 0302 	bic.w	r3, r3, #2
 8007fca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b085      	sub	sp, #20
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ff4:	f023 0303 	bic.w	r3, r3, #3
 8007ff8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008008:	f043 0302 	orr.w	r3, r3, #2
 800800c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	4013      	ands	r3, r2
 8008032:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008034:	68fb      	ldr	r3, [r7, #12]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3714      	adds	r7, #20
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008042:	b480      	push	{r7}
 8008044:	b085      	sub	sp, #20
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	4013      	ands	r3, r2
 8008064:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	0c1b      	lsrs	r3, r3, #16
}
 800806a:	4618      	mov	r0, r3
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008076:	b480      	push	{r7}
 8008078:	b085      	sub	sp, #20
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	4013      	ands	r3, r2
 8008098:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	b29b      	uxth	r3, r3
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b085      	sub	sp, #20
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80080ba:	78fb      	ldrb	r3, [r7, #3]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	4013      	ands	r3, r2
 80080d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080d8:	68bb      	ldr	r3, [r7, #8]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3714      	adds	r7, #20
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b087      	sub	sp, #28
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	460b      	mov	r3, r1
 80080f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008108:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800810a:	78fb      	ldrb	r3, [r7, #3]
 800810c:	f003 030f 	and.w	r3, r3, #15
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	fa22 f303 	lsr.w	r3, r2, r3
 8008116:	01db      	lsls	r3, r3, #7
 8008118:	b2db      	uxtb	r3, r3
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	4313      	orrs	r3, r2
 800811e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008120:	78fb      	ldrb	r3, [r7, #3]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	4013      	ands	r3, r2
 8008132:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008134:	68bb      	ldr	r3, [r7, #8]
}
 8008136:	4618      	mov	r0, r3
 8008138:	371c      	adds	r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	f003 0301 	and.w	r3, r3, #1
}
 8008152:	4618      	mov	r0, r3
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800815e:	b480      	push	{r7}
 8008160:	b085      	sub	sp, #20
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008178:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800817c:	f023 0307 	bic.w	r3, r3, #7
 8008180:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008194:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	460b      	mov	r3, r1
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	333c      	adds	r3, #60	; 0x3c
 80081ba:	3304      	adds	r3, #4
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	4a26      	ldr	r2, [pc, #152]	; (800825c <USB_EP0_OutStart+0xb8>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d90a      	bls.n	80081de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081d8:	d101      	bne.n	80081de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	e037      	b.n	800824e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e4:	461a      	mov	r2, r3
 80081e6:	2300      	movs	r3, #0
 80081e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800820c:	f043 0318 	orr.w	r3, r3, #24
 8008210:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008220:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008224:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008226:	7afb      	ldrb	r3, [r7, #11]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d10f      	bne.n	800824c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008232:	461a      	mov	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008246:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800824a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	4f54300a 	.word	0x4f54300a

08008260 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008268:	2300      	movs	r3, #0
 800826a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	3301      	adds	r3, #1
 8008270:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	4a13      	ldr	r2, [pc, #76]	; (80082c4 <USB_CoreReset+0x64>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d901      	bls.n	800827e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e01b      	b.n	80082b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	daf2      	bge.n	800826c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	f043 0201 	orr.w	r2, r3, #1
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3301      	adds	r3, #1
 800829a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4a09      	ldr	r2, [pc, #36]	; (80082c4 <USB_CoreReset+0x64>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d901      	bls.n	80082a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e006      	b.n	80082b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d0f0      	beq.n	8008296 <USB_CoreReset+0x36>

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	00030d40 	.word	0x00030d40

080082c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082d8:	f005 f9e8 	bl	800d6ac <USBD_static_malloc>
 80082dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d109      	bne.n	80082f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	32b0      	adds	r2, #176	; 0xb0
 80082ee:	2100      	movs	r1, #0
 80082f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80082f4:	2302      	movs	r3, #2
 80082f6:	e0d4      	b.n	80084a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80082f8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80082fc:	2100      	movs	r1, #0
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f005 fa4c 	bl	800d79c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	32b0      	adds	r2, #176	; 0xb0
 800830e:	68f9      	ldr	r1, [r7, #12]
 8008310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	32b0      	adds	r2, #176	; 0xb0
 800831e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	7c1b      	ldrb	r3, [r3, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d138      	bne.n	80083a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008330:	4b5e      	ldr	r3, [pc, #376]	; (80084ac <USBD_CDC_Init+0x1e4>)
 8008332:	7819      	ldrb	r1, [r3, #0]
 8008334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008338:	2202      	movs	r2, #2
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f005 f893 	bl	800d466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008340:	4b5a      	ldr	r3, [pc, #360]	; (80084ac <USBD_CDC_Init+0x1e4>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	f003 020f 	and.w	r2, r3, #15
 8008348:	6879      	ldr	r1, [r7, #4]
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	440b      	add	r3, r1
 8008354:	3324      	adds	r3, #36	; 0x24
 8008356:	2201      	movs	r2, #1
 8008358:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800835a:	4b55      	ldr	r3, [pc, #340]	; (80084b0 <USBD_CDC_Init+0x1e8>)
 800835c:	7819      	ldrb	r1, [r3, #0]
 800835e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008362:	2202      	movs	r2, #2
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f005 f87e 	bl	800d466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800836a:	4b51      	ldr	r3, [pc, #324]	; (80084b0 <USBD_CDC_Init+0x1e8>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	f003 020f 	and.w	r2, r3, #15
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008382:	2201      	movs	r2, #1
 8008384:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008386:	4b4b      	ldr	r3, [pc, #300]	; (80084b4 <USBD_CDC_Init+0x1ec>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	f003 020f 	and.w	r2, r3, #15
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	4613      	mov	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	3326      	adds	r3, #38	; 0x26
 800839c:	2210      	movs	r2, #16
 800839e:	801a      	strh	r2, [r3, #0]
 80083a0:	e035      	b.n	800840e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80083a2:	4b42      	ldr	r3, [pc, #264]	; (80084ac <USBD_CDC_Init+0x1e4>)
 80083a4:	7819      	ldrb	r1, [r3, #0]
 80083a6:	2340      	movs	r3, #64	; 0x40
 80083a8:	2202      	movs	r2, #2
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f005 f85b 	bl	800d466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083b0:	4b3e      	ldr	r3, [pc, #248]	; (80084ac <USBD_CDC_Init+0x1e4>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	f003 020f 	and.w	r2, r3, #15
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	4613      	mov	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	440b      	add	r3, r1
 80083c4:	3324      	adds	r3, #36	; 0x24
 80083c6:	2201      	movs	r2, #1
 80083c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083ca:	4b39      	ldr	r3, [pc, #228]	; (80084b0 <USBD_CDC_Init+0x1e8>)
 80083cc:	7819      	ldrb	r1, [r3, #0]
 80083ce:	2340      	movs	r3, #64	; 0x40
 80083d0:	2202      	movs	r2, #2
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f005 f847 	bl	800d466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083d8:	4b35      	ldr	r3, [pc, #212]	; (80084b0 <USBD_CDC_Init+0x1e8>)
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	f003 020f 	and.w	r2, r3, #15
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	440b      	add	r3, r1
 80083ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083f0:	2201      	movs	r2, #1
 80083f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80083f4:	4b2f      	ldr	r3, [pc, #188]	; (80084b4 <USBD_CDC_Init+0x1ec>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	f003 020f 	and.w	r2, r3, #15
 80083fc:	6879      	ldr	r1, [r7, #4]
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	440b      	add	r3, r1
 8008408:	3326      	adds	r3, #38	; 0x26
 800840a:	2210      	movs	r2, #16
 800840c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800840e:	4b29      	ldr	r3, [pc, #164]	; (80084b4 <USBD_CDC_Init+0x1ec>)
 8008410:	7819      	ldrb	r1, [r3, #0]
 8008412:	2308      	movs	r3, #8
 8008414:	2203      	movs	r2, #3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f005 f825 	bl	800d466 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800841c:	4b25      	ldr	r3, [pc, #148]	; (80084b4 <USBD_CDC_Init+0x1ec>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f003 020f 	and.w	r2, r3, #15
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	4613      	mov	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	440b      	add	r3, r1
 8008430:	3324      	adds	r3, #36	; 0x24
 8008432:	2201      	movs	r2, #1
 8008434:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	33b0      	adds	r3, #176	; 0xb0
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800846c:	2302      	movs	r3, #2
 800846e:	e018      	b.n	80084a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	7c1b      	ldrb	r3, [r3, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10a      	bne.n	800848e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008478:	4b0d      	ldr	r3, [pc, #52]	; (80084b0 <USBD_CDC_Init+0x1e8>)
 800847a:	7819      	ldrb	r1, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f005 f8dc 	bl	800d644 <USBD_LL_PrepareReceive>
 800848c:	e008      	b.n	80084a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800848e:	4b08      	ldr	r3, [pc, #32]	; (80084b0 <USBD_CDC_Init+0x1e8>)
 8008490:	7819      	ldrb	r1, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008498:	2340      	movs	r3, #64	; 0x40
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f005 f8d2 	bl	800d644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000093 	.word	0x20000093
 80084b0:	20000094 	.word	0x20000094
 80084b4:	20000095 	.word	0x20000095

080084b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80084c4:	4b3a      	ldr	r3, [pc, #232]	; (80085b0 <USBD_CDC_DeInit+0xf8>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f004 fff1 	bl	800d4b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80084d0:	4b37      	ldr	r3, [pc, #220]	; (80085b0 <USBD_CDC_DeInit+0xf8>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	f003 020f 	and.w	r2, r3, #15
 80084d8:	6879      	ldr	r1, [r7, #4]
 80084da:	4613      	mov	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	440b      	add	r3, r1
 80084e4:	3324      	adds	r3, #36	; 0x24
 80084e6:	2200      	movs	r2, #0
 80084e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80084ea:	4b32      	ldr	r3, [pc, #200]	; (80085b4 <USBD_CDC_DeInit+0xfc>)
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f004 ffde 	bl	800d4b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80084f6:	4b2f      	ldr	r3, [pc, #188]	; (80085b4 <USBD_CDC_DeInit+0xfc>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	f003 020f 	and.w	r2, r3, #15
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800850e:	2200      	movs	r2, #0
 8008510:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008512:	4b29      	ldr	r3, [pc, #164]	; (80085b8 <USBD_CDC_DeInit+0x100>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f004 ffca 	bl	800d4b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800851e:	4b26      	ldr	r3, [pc, #152]	; (80085b8 <USBD_CDC_DeInit+0x100>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	f003 020f 	and.w	r2, r3, #15
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	440b      	add	r3, r1
 8008532:	3324      	adds	r3, #36	; 0x24
 8008534:	2200      	movs	r2, #0
 8008536:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008538:	4b1f      	ldr	r3, [pc, #124]	; (80085b8 <USBD_CDC_DeInit+0x100>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	f003 020f 	and.w	r2, r3, #15
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	440b      	add	r3, r1
 800854c:	3326      	adds	r3, #38	; 0x26
 800854e:	2200      	movs	r2, #0
 8008550:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	32b0      	adds	r2, #176	; 0xb0
 800855c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d01f      	beq.n	80085a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	33b0      	adds	r3, #176	; 0xb0
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	32b0      	adds	r2, #176	; 0xb0
 8008582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008586:	4618      	mov	r0, r3
 8008588:	f005 f89e 	bl	800d6c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	32b0      	adds	r2, #176	; 0xb0
 8008596:	2100      	movs	r1, #0
 8008598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20000093 	.word	0x20000093
 80085b4:	20000094 	.word	0x20000094
 80085b8:	20000095 	.word	0x20000095

080085bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	32b0      	adds	r2, #176	; 0xb0
 80085d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e0bf      	b.n	800876c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d050      	beq.n	800869a <USBD_CDC_Setup+0xde>
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	f040 80af 	bne.w	800875c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	88db      	ldrh	r3, [r3, #6]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d03a      	beq.n	800867c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	b25b      	sxtb	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	da1b      	bge.n	8008648 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	33b0      	adds	r3, #176	; 0xb0
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008626:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	88d2      	ldrh	r2, [r2, #6]
 800862c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	88db      	ldrh	r3, [r3, #6]
 8008632:	2b07      	cmp	r3, #7
 8008634:	bf28      	it	cs
 8008636:	2307      	movcs	r3, #7
 8008638:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	89fa      	ldrh	r2, [r7, #14]
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 fd43 	bl	800a0cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008646:	e090      	b.n	800876a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	785a      	ldrb	r2, [r3, #1]
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	88db      	ldrh	r3, [r3, #6]
 8008656:	2b3f      	cmp	r3, #63	; 0x3f
 8008658:	d803      	bhi.n	8008662 <USBD_CDC_Setup+0xa6>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	88db      	ldrh	r3, [r3, #6]
 800865e:	b2da      	uxtb	r2, r3
 8008660:	e000      	b.n	8008664 <USBD_CDC_Setup+0xa8>
 8008662:	2240      	movs	r2, #64	; 0x40
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800866a:	6939      	ldr	r1, [r7, #16]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008672:	461a      	mov	r2, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 fd55 	bl	800a124 <USBD_CtlPrepareRx>
      break;
 800867a:	e076      	b.n	800876a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	33b0      	adds	r3, #176	; 0xb0
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	7850      	ldrb	r0, [r2, #1]
 8008692:	2200      	movs	r2, #0
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	4798      	blx	r3
      break;
 8008698:	e067      	b.n	800876a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	785b      	ldrb	r3, [r3, #1]
 800869e:	2b0b      	cmp	r3, #11
 80086a0:	d851      	bhi.n	8008746 <USBD_CDC_Setup+0x18a>
 80086a2:	a201      	add	r2, pc, #4	; (adr r2, 80086a8 <USBD_CDC_Setup+0xec>)
 80086a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a8:	080086d9 	.word	0x080086d9
 80086ac:	08008755 	.word	0x08008755
 80086b0:	08008747 	.word	0x08008747
 80086b4:	08008747 	.word	0x08008747
 80086b8:	08008747 	.word	0x08008747
 80086bc:	08008747 	.word	0x08008747
 80086c0:	08008747 	.word	0x08008747
 80086c4:	08008747 	.word	0x08008747
 80086c8:	08008747 	.word	0x08008747
 80086cc:	08008747 	.word	0x08008747
 80086d0:	08008703 	.word	0x08008703
 80086d4:	0800872d 	.word	0x0800872d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d107      	bne.n	80086f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80086e4:	f107 030a 	add.w	r3, r7, #10
 80086e8:	2202      	movs	r2, #2
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 fced 	bl	800a0cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086f2:	e032      	b.n	800875a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f001 fc77 	bl	8009fea <USBD_CtlError>
            ret = USBD_FAIL;
 80086fc:	2303      	movs	r3, #3
 80086fe:	75fb      	strb	r3, [r7, #23]
          break;
 8008700:	e02b      	b.n	800875a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b03      	cmp	r3, #3
 800870c:	d107      	bne.n	800871e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800870e:	f107 030d 	add.w	r3, r7, #13
 8008712:	2201      	movs	r2, #1
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 fcd8 	bl	800a0cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800871c:	e01d      	b.n	800875a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 fc62 	bl	8009fea <USBD_CtlError>
            ret = USBD_FAIL;
 8008726:	2303      	movs	r3, #3
 8008728:	75fb      	strb	r3, [r7, #23]
          break;
 800872a:	e016      	b.n	800875a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b03      	cmp	r3, #3
 8008736:	d00f      	beq.n	8008758 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 fc55 	bl	8009fea <USBD_CtlError>
            ret = USBD_FAIL;
 8008740:	2303      	movs	r3, #3
 8008742:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008744:	e008      	b.n	8008758 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f001 fc4e 	bl	8009fea <USBD_CtlError>
          ret = USBD_FAIL;
 800874e:	2303      	movs	r3, #3
 8008750:	75fb      	strb	r3, [r7, #23]
          break;
 8008752:	e002      	b.n	800875a <USBD_CDC_Setup+0x19e>
          break;
 8008754:	bf00      	nop
 8008756:	e008      	b.n	800876a <USBD_CDC_Setup+0x1ae>
          break;
 8008758:	bf00      	nop
      }
      break;
 800875a:	e006      	b.n	800876a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 fc43 	bl	8009fea <USBD_CtlError>
      ret = USBD_FAIL;
 8008764:	2303      	movs	r3, #3
 8008766:	75fb      	strb	r3, [r7, #23]
      break;
 8008768:	bf00      	nop
  }

  return (uint8_t)ret;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008786:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	32b0      	adds	r2, #176	; 0xb0
 8008792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800879a:	2303      	movs	r3, #3
 800879c:	e065      	b.n	800886a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	32b0      	adds	r2, #176	; 0xb0
 80087a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087ae:	78fb      	ldrb	r3, [r7, #3]
 80087b0:	f003 020f 	and.w	r2, r3, #15
 80087b4:	6879      	ldr	r1, [r7, #4]
 80087b6:	4613      	mov	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	440b      	add	r3, r1
 80087c0:	3318      	adds	r3, #24
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d02f      	beq.n	8008828 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80087c8:	78fb      	ldrb	r3, [r7, #3]
 80087ca:	f003 020f 	and.w	r2, r3, #15
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	440b      	add	r3, r1
 80087da:	3318      	adds	r3, #24
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	f003 010f 	and.w	r1, r3, #15
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	460b      	mov	r3, r1
 80087e8:	00db      	lsls	r3, r3, #3
 80087ea:	440b      	add	r3, r1
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4403      	add	r3, r0
 80087f0:	3348      	adds	r3, #72	; 0x48
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80087f8:	fb01 f303 	mul.w	r3, r1, r3
 80087fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d112      	bne.n	8008828 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	f003 020f 	and.w	r2, r3, #15
 8008808:	6879      	ldr	r1, [r7, #4]
 800880a:	4613      	mov	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	440b      	add	r3, r1
 8008814:	3318      	adds	r3, #24
 8008816:	2200      	movs	r2, #0
 8008818:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800881a:	78f9      	ldrb	r1, [r7, #3]
 800881c:	2300      	movs	r3, #0
 800881e:	2200      	movs	r2, #0
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f004 feee 	bl	800d602 <USBD_LL_Transmit>
 8008826:	e01f      	b.n	8008868 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2200      	movs	r2, #0
 800882c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	33b0      	adds	r3, #176	; 0xb0
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d010      	beq.n	8008868 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	33b0      	adds	r3, #176	; 0xb0
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008864:	78fa      	ldrb	r2, [r7, #3]
 8008866:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	32b0      	adds	r2, #176	; 0xb0
 8008888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	32b0      	adds	r2, #176	; 0xb0
 8008898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e01a      	b.n	80088da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f004 feec 	bl	800d686 <USBD_LL_GetRxDataSize>
 80088ae:	4602      	mov	r2, r0
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	33b0      	adds	r3, #176	; 0xb0
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80088d4:	4611      	mov	r1, r2
 80088d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	32b0      	adds	r2, #176	; 0xb0
 80088f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008900:	2303      	movs	r3, #3
 8008902:	e025      	b.n	8008950 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	33b0      	adds	r3, #176	; 0xb0
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01a      	beq.n	800894e <USBD_CDC_EP0_RxReady+0x6c>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800891e:	2bff      	cmp	r3, #255	; 0xff
 8008920:	d015      	beq.n	800894e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	33b0      	adds	r3, #176	; 0xb0
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800893a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008942:	b292      	uxth	r2, r2
 8008944:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	22ff      	movs	r2, #255	; 0xff
 800894a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3710      	adds	r7, #16
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008960:	2182      	movs	r1, #130	; 0x82
 8008962:	4818      	ldr	r0, [pc, #96]	; (80089c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008964:	f000 fd09 	bl	800937a <USBD_GetEpDesc>
 8008968:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800896a:	2101      	movs	r1, #1
 800896c:	4815      	ldr	r0, [pc, #84]	; (80089c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800896e:	f000 fd04 	bl	800937a <USBD_GetEpDesc>
 8008972:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008974:	2181      	movs	r1, #129	; 0x81
 8008976:	4813      	ldr	r0, [pc, #76]	; (80089c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008978:	f000 fcff 	bl	800937a <USBD_GetEpDesc>
 800897c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	2210      	movs	r2, #16
 8008988:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d006      	beq.n	800899e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	2200      	movs	r2, #0
 8008994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008998:	711a      	strb	r2, [r3, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d006      	beq.n	80089b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089ac:	711a      	strb	r2, [r3, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2243      	movs	r2, #67	; 0x43
 80089b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089b8:	4b02      	ldr	r3, [pc, #8]	; (80089c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20000050 	.word	0x20000050

080089c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089d0:	2182      	movs	r1, #130	; 0x82
 80089d2:	4818      	ldr	r0, [pc, #96]	; (8008a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089d4:	f000 fcd1 	bl	800937a <USBD_GetEpDesc>
 80089d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089da:	2101      	movs	r1, #1
 80089dc:	4815      	ldr	r0, [pc, #84]	; (8008a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089de:	f000 fccc 	bl	800937a <USBD_GetEpDesc>
 80089e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089e4:	2181      	movs	r1, #129	; 0x81
 80089e6:	4813      	ldr	r0, [pc, #76]	; (8008a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089e8:	f000 fcc7 	bl	800937a <USBD_GetEpDesc>
 80089ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2210      	movs	r2, #16
 80089f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d006      	beq.n	8008a0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	2200      	movs	r2, #0
 8008a04:	711a      	strb	r2, [r3, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f042 0202 	orr.w	r2, r2, #2
 8008a0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d006      	beq.n	8008a22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	711a      	strb	r2, [r3, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f042 0202 	orr.w	r2, r2, #2
 8008a20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2243      	movs	r2, #67	; 0x43
 8008a26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a28:	4b02      	ldr	r3, [pc, #8]	; (8008a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	20000050 	.word	0x20000050

08008a38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a40:	2182      	movs	r1, #130	; 0x82
 8008a42:	4818      	ldr	r0, [pc, #96]	; (8008aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a44:	f000 fc99 	bl	800937a <USBD_GetEpDesc>
 8008a48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	4815      	ldr	r0, [pc, #84]	; (8008aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a4e:	f000 fc94 	bl	800937a <USBD_GetEpDesc>
 8008a52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a54:	2181      	movs	r1, #129	; 0x81
 8008a56:	4813      	ldr	r0, [pc, #76]	; (8008aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a58:	f000 fc8f 	bl	800937a <USBD_GetEpDesc>
 8008a5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	2210      	movs	r2, #16
 8008a68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d006      	beq.n	8008a7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a78:	711a      	strb	r2, [r3, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d006      	beq.n	8008a92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a8c:	711a      	strb	r2, [r3, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2243      	movs	r2, #67	; 0x43
 8008a96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a98:	4b02      	ldr	r3, [pc, #8]	; (8008aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000050 	.word	0x20000050

08008aa8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	220a      	movs	r2, #10
 8008ab4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008ab6:	4b03      	ldr	r3, [pc, #12]	; (8008ac4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	2000000c 	.word	0x2000000c

08008ac8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e009      	b.n	8008af0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	33b0      	adds	r3, #176	; 0xb0
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	32b0      	adds	r2, #176	; 0xb0
 8008b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b16:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e008      	b.n	8008b34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	32b0      	adds	r2, #176	; 0xb0
 8008b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e004      	b.n	8008b6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
	...

08008b7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	32b0      	adds	r2, #176	; 0xb0
 8008b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	32b0      	adds	r2, #176	; 0xb0
 8008b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e018      	b.n	8008bdc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	7c1b      	ldrb	r3, [r3, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10a      	bne.n	8008bc8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bb2:	4b0c      	ldr	r3, [pc, #48]	; (8008be4 <USBD_CDC_ReceivePacket+0x68>)
 8008bb4:	7819      	ldrb	r1, [r3, #0]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f004 fd3f 	bl	800d644 <USBD_LL_PrepareReceive>
 8008bc6:	e008      	b.n	8008bda <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bc8:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <USBD_CDC_ReceivePacket+0x68>)
 8008bca:	7819      	ldrb	r1, [r3, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bd2:	2340      	movs	r3, #64	; 0x40
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f004 fd35 	bl	800d644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	20000094 	.word	0x20000094

08008be8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e01f      	b.n	8008c40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	79fa      	ldrb	r2, [r7, #7]
 8008c32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f004 fbaf 	bl	800d398 <USBD_LL_Init>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e025      	b.n	8008cac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	32ae      	adds	r2, #174	; 0xae
 8008c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00f      	beq.n	8008c9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	32ae      	adds	r2, #174	; 0xae
 8008c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	f107 020e 	add.w	r2, r7, #14
 8008c90:	4610      	mov	r0, r2
 8008c92:	4798      	blx	r3
 8008c94:	4602      	mov	r2, r0
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f004 fbb7 	bl	800d430 <USBD_LL_Start>
 8008cc2:	4603      	mov	r3, r0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cd4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	460b      	mov	r3, r1
 8008cec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d009      	beq.n	8008d10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	78fa      	ldrb	r2, [r7, #3]
 8008d06:	4611      	mov	r1, r2
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	4798      	blx	r3
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	78fa      	ldrb	r2, [r7, #3]
 8008d34:	4611      	mov	r1, r2
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	4798      	blx	r3
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d40:	2303      	movs	r3, #3
 8008d42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f001 f908 	bl	8009f76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008d74:	461a      	mov	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d82:	f003 031f 	and.w	r3, r3, #31
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d01a      	beq.n	8008dc0 <USBD_LL_SetupStage+0x72>
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d822      	bhi.n	8008dd4 <USBD_LL_SetupStage+0x86>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d002      	beq.n	8008d98 <USBD_LL_SetupStage+0x4a>
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d00a      	beq.n	8008dac <USBD_LL_SetupStage+0x5e>
 8008d96:	e01d      	b.n	8008dd4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fb5f 	bl	8009464 <USBD_StdDevReq>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]
      break;
 8008daa:	e020      	b.n	8008dee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fbc7 	bl	8009548 <USBD_StdItfReq>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008dbe:	e016      	b.n	8008dee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fc29 	bl	8009620 <USBD_StdEPReq>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd2:	e00c      	b.n	8008dee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008dda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f004 fb84 	bl	800d4f0 <USBD_LL_StallEP>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73fb      	strb	r3, [r7, #15]
      break;
 8008dec:	bf00      	nop
  }

  return ret;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	460b      	mov	r3, r1
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d16e      	bne.n	8008eee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	f040 8098 	bne.w	8008f54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	689a      	ldr	r2, [r3, #8]
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d913      	bls.n	8008e58 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	689a      	ldr	r2, [r3, #8]
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	1ad2      	subs	r2, r2, r3
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	4293      	cmp	r3, r2
 8008e48:	bf28      	it	cs
 8008e4a:	4613      	movcs	r3, r2
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f001 f984 	bl	800a15e <USBD_CtlContinueRx>
 8008e56:	e07d      	b.n	8008f54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e5e:	f003 031f 	and.w	r3, r3, #31
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d014      	beq.n	8008e90 <USBD_LL_DataOutStage+0x98>
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d81d      	bhi.n	8008ea6 <USBD_LL_DataOutStage+0xae>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d002      	beq.n	8008e74 <USBD_LL_DataOutStage+0x7c>
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d003      	beq.n	8008e7a <USBD_LL_DataOutStage+0x82>
 8008e72:	e018      	b.n	8008ea6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	75bb      	strb	r3, [r7, #22]
            break;
 8008e78:	e018      	b.n	8008eac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	4619      	mov	r1, r3
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 fa5e 	bl	8009346 <USBD_CoreFindIF>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	75bb      	strb	r3, [r7, #22]
            break;
 8008e8e:	e00d      	b.n	8008eac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	4619      	mov	r1, r3
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f000 fa60 	bl	8009360 <USBD_CoreFindEP>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	75bb      	strb	r3, [r7, #22]
            break;
 8008ea4:	e002      	b.n	8008eac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	75bb      	strb	r3, [r7, #22]
            break;
 8008eaa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008eac:	7dbb      	ldrb	r3, [r7, #22]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d119      	bne.n	8008ee6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d113      	bne.n	8008ee6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008ebe:	7dba      	ldrb	r2, [r7, #22]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	32ae      	adds	r2, #174	; 0xae
 8008ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00b      	beq.n	8008ee6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008ece:	7dba      	ldrb	r2, [r7, #22]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ed6:	7dba      	ldrb	r2, [r7, #22]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	32ae      	adds	r2, #174	; 0xae
 8008edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f001 f94a 	bl	800a180 <USBD_CtlSendStatus>
 8008eec:	e032      	b.n	8008f54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008eee:	7afb      	ldrb	r3, [r7, #11]
 8008ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f000 fa31 	bl	8009360 <USBD_CoreFindEP>
 8008efe:	4603      	mov	r3, r0
 8008f00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f02:	7dbb      	ldrb	r3, [r7, #22]
 8008f04:	2bff      	cmp	r3, #255	; 0xff
 8008f06:	d025      	beq.n	8008f54 <USBD_LL_DataOutStage+0x15c>
 8008f08:	7dbb      	ldrb	r3, [r7, #22]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d122      	bne.n	8008f54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d117      	bne.n	8008f4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f1a:	7dba      	ldrb	r2, [r7, #22]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	32ae      	adds	r2, #174	; 0xae
 8008f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00f      	beq.n	8008f4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f2a:	7dba      	ldrb	r2, [r7, #22]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f32:	7dba      	ldrb	r2, [r7, #22]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	32ae      	adds	r2, #174	; 0xae
 8008f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	7afa      	ldrb	r2, [r7, #11]
 8008f40:	4611      	mov	r1, r2
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	4798      	blx	r3
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	e000      	b.n	8008f56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3718      	adds	r7, #24
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b086      	sub	sp, #24
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	460b      	mov	r3, r1
 8008f68:	607a      	str	r2, [r7, #4]
 8008f6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f6c:	7afb      	ldrb	r3, [r7, #11]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d16f      	bne.n	8009052 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3314      	adds	r3, #20
 8008f76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d15a      	bne.n	8009038 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	689a      	ldr	r2, [r3, #8]
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d914      	bls.n	8008fb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	689a      	ldr	r2, [r3, #8]
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	1ad2      	subs	r2, r2, r3
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f001 f8ac 	bl	800a102 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008faa:	2300      	movs	r3, #0
 8008fac:	2200      	movs	r2, #0
 8008fae:	2100      	movs	r1, #0
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f004 fb47 	bl	800d644 <USBD_LL_PrepareReceive>
 8008fb6:	e03f      	b.n	8009038 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d11c      	bne.n	8008ffe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d316      	bcc.n	8008ffe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d20f      	bcs.n	8008ffe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f001 f88d 	bl	800a102 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f004 fb24 	bl	800d644 <USBD_LL_PrepareReceive>
 8008ffc:	e01c      	b.n	8009038 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009004:	b2db      	uxtb	r3, r3
 8009006:	2b03      	cmp	r3, #3
 8009008:	d10f      	bne.n	800902a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d009      	beq.n	800902a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800902a:	2180      	movs	r1, #128	; 0x80
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f004 fa5f 	bl	800d4f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f001 f8b7 	bl	800a1a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d03a      	beq.n	80090b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7ff fe42 	bl	8008ccc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009050:	e032      	b.n	80090b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009052:	7afb      	ldrb	r3, [r7, #11]
 8009054:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009058:	b2db      	uxtb	r3, r3
 800905a:	4619      	mov	r1, r3
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 f97f 	bl	8009360 <USBD_CoreFindEP>
 8009062:	4603      	mov	r3, r0
 8009064:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	2bff      	cmp	r3, #255	; 0xff
 800906a:	d025      	beq.n	80090b8 <USBD_LL_DataInStage+0x15a>
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d122      	bne.n	80090b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b03      	cmp	r3, #3
 800907c:	d11c      	bne.n	80090b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800907e:	7dfa      	ldrb	r2, [r7, #23]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	32ae      	adds	r2, #174	; 0xae
 8009084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d014      	beq.n	80090b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800908e:	7dfa      	ldrb	r2, [r7, #23]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009096:	7dfa      	ldrb	r2, [r7, #23]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	32ae      	adds	r2, #174	; 0xae
 800909c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	7afa      	ldrb	r2, [r7, #11]
 80090a4:	4611      	mov	r1, r2
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	4798      	blx	r3
 80090aa:	4603      	mov	r3, r0
 80090ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80090ae:	7dbb      	ldrb	r3, [r7, #22]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80090b4:	7dbb      	ldrb	r3, [r7, #22]
 80090b6:	e000      	b.n	80090ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b084      	sub	sp, #16
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d014      	beq.n	8009128 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00e      	beq.n	8009128 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	6852      	ldr	r2, [r2, #4]
 8009116:	b2d2      	uxtb	r2, r2
 8009118:	4611      	mov	r1, r2
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	4798      	blx	r3
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009124:	2303      	movs	r3, #3
 8009126:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009128:	2340      	movs	r3, #64	; 0x40
 800912a:	2200      	movs	r2, #0
 800912c:	2100      	movs	r1, #0
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f004 f999 	bl	800d466 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2240      	movs	r2, #64	; 0x40
 8009140:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009144:	2340      	movs	r3, #64	; 0x40
 8009146:	2200      	movs	r2, #0
 8009148:	2180      	movs	r1, #128	; 0x80
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f004 f98b 	bl	800d466 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2240      	movs	r2, #64	; 0x40
 800915a:	621a      	str	r2, [r3, #32]

  return ret;
 800915c:	7bfb      	ldrb	r3, [r7, #15]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009166:	b480      	push	{r7}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	460b      	mov	r3, r1
 8009170:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	78fa      	ldrb	r2, [r7, #3]
 8009176:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009194:	b2da      	uxtb	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2204      	movs	r2, #4
 80091a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b04      	cmp	r3, #4
 80091c4:	d106      	bne.n	80091d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d110      	bne.n	8009218 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00b      	beq.n	8009218 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009206:	69db      	ldr	r3, [r3, #28]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d005      	beq.n	8009218 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b082      	sub	sp, #8
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	460b      	mov	r3, r1
 800922c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	32ae      	adds	r2, #174	; 0xae
 8009238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009240:	2303      	movs	r3, #3
 8009242:	e01c      	b.n	800927e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800924a:	b2db      	uxtb	r3, r3
 800924c:	2b03      	cmp	r3, #3
 800924e:	d115      	bne.n	800927c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	32ae      	adds	r2, #174	; 0xae
 800925a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800925e:	6a1b      	ldr	r3, [r3, #32]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00b      	beq.n	800927c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	32ae      	adds	r2, #174	; 0xae
 800926e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009272:	6a1b      	ldr	r3, [r3, #32]
 8009274:	78fa      	ldrb	r2, [r7, #3]
 8009276:	4611      	mov	r1, r2
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b082      	sub	sp, #8
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	32ae      	adds	r2, #174	; 0xae
 800929c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d101      	bne.n	80092a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e01c      	b.n	80092e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b03      	cmp	r3, #3
 80092b2:	d115      	bne.n	80092e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	32ae      	adds	r2, #174	; 0xae
 80092be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00b      	beq.n	80092e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	32ae      	adds	r2, #174	; 0xae
 80092d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	78fa      	ldrb	r2, [r7, #3]
 80092da:	4611      	mov	r1, r2
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00e      	beq.n	800933c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	6852      	ldr	r2, [r2, #4]
 800932a:	b2d2      	uxtb	r2, r2
 800932c:	4611      	mov	r1, r2
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	4798      	blx	r3
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009338:	2303      	movs	r3, #3
 800933a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009346:	b480      	push	{r7}
 8009348:	b083      	sub	sp, #12
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009352:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009354:	4618      	mov	r0, r3
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr

08009360 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800936c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800936e:	4618      	mov	r0, r3
 8009370:	370c      	adds	r7, #12
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b086      	sub	sp, #24
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	460b      	mov	r3, r1
 8009384:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800938e:	2300      	movs	r3, #0
 8009390:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	885b      	ldrh	r3, [r3, #2]
 8009396:	b29a      	uxth	r2, r3
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	b29b      	uxth	r3, r3
 800939e:	429a      	cmp	r2, r3
 80093a0:	d920      	bls.n	80093e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80093aa:	e013      	b.n	80093d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80093ac:	f107 030a 	add.w	r3, r7, #10
 80093b0:	4619      	mov	r1, r3
 80093b2:	6978      	ldr	r0, [r7, #20]
 80093b4:	f000 f81b 	bl	80093ee <USBD_GetNextDesc>
 80093b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	785b      	ldrb	r3, [r3, #1]
 80093be:	2b05      	cmp	r3, #5
 80093c0:	d108      	bne.n	80093d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	789b      	ldrb	r3, [r3, #2]
 80093ca:	78fa      	ldrb	r2, [r7, #3]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d008      	beq.n	80093e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	885b      	ldrh	r3, [r3, #2]
 80093d8:	b29a      	uxth	r2, r3
 80093da:	897b      	ldrh	r3, [r7, #10]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d8e5      	bhi.n	80093ac <USBD_GetEpDesc+0x32>
 80093e0:	e000      	b.n	80093e4 <USBD_GetEpDesc+0x6a>
          break;
 80093e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80093e4:	693b      	ldr	r3, [r7, #16]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b085      	sub	sp, #20
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	881a      	ldrh	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	b29b      	uxth	r3, r3
 8009406:	4413      	add	r3, r2
 8009408:	b29a      	uxth	r2, r3
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4413      	add	r3, r2
 8009418:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800941a:	68fb      	ldr	r3, [r7, #12]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	3301      	adds	r3, #1
 800943e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009446:	8a3b      	ldrh	r3, [r7, #16]
 8009448:	021b      	lsls	r3, r3, #8
 800944a:	b21a      	sxth	r2, r3
 800944c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009450:	4313      	orrs	r3, r2
 8009452:	b21b      	sxth	r3, r3
 8009454:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009456:	89fb      	ldrh	r3, [r7, #14]
}
 8009458:	4618      	mov	r0, r3
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800947a:	2b40      	cmp	r3, #64	; 0x40
 800947c:	d005      	beq.n	800948a <USBD_StdDevReq+0x26>
 800947e:	2b40      	cmp	r3, #64	; 0x40
 8009480:	d857      	bhi.n	8009532 <USBD_StdDevReq+0xce>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00f      	beq.n	80094a6 <USBD_StdDevReq+0x42>
 8009486:	2b20      	cmp	r3, #32
 8009488:	d153      	bne.n	8009532 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	32ae      	adds	r2, #174	; 0xae
 8009494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	4798      	blx	r3
 80094a0:	4603      	mov	r3, r0
 80094a2:	73fb      	strb	r3, [r7, #15]
      break;
 80094a4:	e04a      	b.n	800953c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	785b      	ldrb	r3, [r3, #1]
 80094aa:	2b09      	cmp	r3, #9
 80094ac:	d83b      	bhi.n	8009526 <USBD_StdDevReq+0xc2>
 80094ae:	a201      	add	r2, pc, #4	; (adr r2, 80094b4 <USBD_StdDevReq+0x50>)
 80094b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b4:	08009509 	.word	0x08009509
 80094b8:	0800951d 	.word	0x0800951d
 80094bc:	08009527 	.word	0x08009527
 80094c0:	08009513 	.word	0x08009513
 80094c4:	08009527 	.word	0x08009527
 80094c8:	080094e7 	.word	0x080094e7
 80094cc:	080094dd 	.word	0x080094dd
 80094d0:	08009527 	.word	0x08009527
 80094d4:	080094ff 	.word	0x080094ff
 80094d8:	080094f1 	.word	0x080094f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fa3c 	bl	800995c <USBD_GetDescriptor>
          break;
 80094e4:	e024      	b.n	8009530 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fba1 	bl	8009c30 <USBD_SetAddress>
          break;
 80094ee:	e01f      	b.n	8009530 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 fbe0 	bl	8009cb8 <USBD_SetConfig>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73fb      	strb	r3, [r7, #15]
          break;
 80094fc:	e018      	b.n	8009530 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fc83 	bl	8009e0c <USBD_GetConfig>
          break;
 8009506:	e013      	b.n	8009530 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fcb4 	bl	8009e78 <USBD_GetStatus>
          break;
 8009510:	e00e      	b.n	8009530 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fce3 	bl	8009ee0 <USBD_SetFeature>
          break;
 800951a:	e009      	b.n	8009530 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fd07 	bl	8009f32 <USBD_ClrFeature>
          break;
 8009524:	e004      	b.n	8009530 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fd5e 	bl	8009fea <USBD_CtlError>
          break;
 800952e:	bf00      	nop
      }
      break;
 8009530:	e004      	b.n	800953c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fd58 	bl	8009fea <USBD_CtlError>
      break;
 800953a:	bf00      	nop
  }

  return ret;
 800953c:	7bfb      	ldrb	r3, [r7, #15]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop

08009548 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800955e:	2b40      	cmp	r3, #64	; 0x40
 8009560:	d005      	beq.n	800956e <USBD_StdItfReq+0x26>
 8009562:	2b40      	cmp	r3, #64	; 0x40
 8009564:	d852      	bhi.n	800960c <USBD_StdItfReq+0xc4>
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <USBD_StdItfReq+0x26>
 800956a:	2b20      	cmp	r3, #32
 800956c:	d14e      	bne.n	800960c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009574:	b2db      	uxtb	r3, r3
 8009576:	3b01      	subs	r3, #1
 8009578:	2b02      	cmp	r3, #2
 800957a:	d840      	bhi.n	80095fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	889b      	ldrh	r3, [r3, #4]
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b01      	cmp	r3, #1
 8009584:	d836      	bhi.n	80095f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	889b      	ldrh	r3, [r3, #4]
 800958a:	b2db      	uxtb	r3, r3
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f7ff fed9 	bl	8009346 <USBD_CoreFindIF>
 8009594:	4603      	mov	r3, r0
 8009596:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009598:	7bbb      	ldrb	r3, [r7, #14]
 800959a:	2bff      	cmp	r3, #255	; 0xff
 800959c:	d01d      	beq.n	80095da <USBD_StdItfReq+0x92>
 800959e:	7bbb      	ldrb	r3, [r7, #14]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d11a      	bne.n	80095da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80095a4:	7bba      	ldrb	r2, [r7, #14]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	32ae      	adds	r2, #174	; 0xae
 80095aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00f      	beq.n	80095d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80095b4:	7bba      	ldrb	r2, [r7, #14]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095bc:	7bba      	ldrb	r2, [r7, #14]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	32ae      	adds	r2, #174	; 0xae
 80095c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	4798      	blx	r3
 80095ce:	4603      	mov	r3, r0
 80095d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095d2:	e004      	b.n	80095de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80095d4:	2303      	movs	r3, #3
 80095d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095d8:	e001      	b.n	80095de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80095da:	2303      	movs	r3, #3
 80095dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	88db      	ldrh	r3, [r3, #6]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d110      	bne.n	8009608 <USBD_StdItfReq+0xc0>
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10d      	bne.n	8009608 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 fdc7 	bl	800a180 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095f2:	e009      	b.n	8009608 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80095f4:	6839      	ldr	r1, [r7, #0]
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fcf7 	bl	8009fea <USBD_CtlError>
          break;
 80095fc:	e004      	b.n	8009608 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fcf2 	bl	8009fea <USBD_CtlError>
          break;
 8009606:	e000      	b.n	800960a <USBD_StdItfReq+0xc2>
          break;
 8009608:	bf00      	nop
      }
      break;
 800960a:	e004      	b.n	8009616 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fceb 	bl	8009fea <USBD_CtlError>
      break;
 8009614:	bf00      	nop
  }

  return ret;
 8009616:	7bfb      	ldrb	r3, [r7, #15]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	889b      	ldrh	r3, [r3, #4]
 8009632:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800963c:	2b40      	cmp	r3, #64	; 0x40
 800963e:	d007      	beq.n	8009650 <USBD_StdEPReq+0x30>
 8009640:	2b40      	cmp	r3, #64	; 0x40
 8009642:	f200 817f 	bhi.w	8009944 <USBD_StdEPReq+0x324>
 8009646:	2b00      	cmp	r3, #0
 8009648:	d02a      	beq.n	80096a0 <USBD_StdEPReq+0x80>
 800964a:	2b20      	cmp	r3, #32
 800964c:	f040 817a 	bne.w	8009944 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009650:	7bbb      	ldrb	r3, [r7, #14]
 8009652:	4619      	mov	r1, r3
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7ff fe83 	bl	8009360 <USBD_CoreFindEP>
 800965a:	4603      	mov	r3, r0
 800965c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800965e:	7b7b      	ldrb	r3, [r7, #13]
 8009660:	2bff      	cmp	r3, #255	; 0xff
 8009662:	f000 8174 	beq.w	800994e <USBD_StdEPReq+0x32e>
 8009666:	7b7b      	ldrb	r3, [r7, #13]
 8009668:	2b00      	cmp	r3, #0
 800966a:	f040 8170 	bne.w	800994e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800966e:	7b7a      	ldrb	r2, [r7, #13]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009676:	7b7a      	ldrb	r2, [r7, #13]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	32ae      	adds	r2, #174	; 0xae
 800967c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 8163 	beq.w	800994e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009688:	7b7a      	ldrb	r2, [r7, #13]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	32ae      	adds	r2, #174	; 0xae
 800968e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	4798      	blx	r3
 800969a:	4603      	mov	r3, r0
 800969c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800969e:	e156      	b.n	800994e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	785b      	ldrb	r3, [r3, #1]
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d008      	beq.n	80096ba <USBD_StdEPReq+0x9a>
 80096a8:	2b03      	cmp	r3, #3
 80096aa:	f300 8145 	bgt.w	8009938 <USBD_StdEPReq+0x318>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 809b 	beq.w	80097ea <USBD_StdEPReq+0x1ca>
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d03c      	beq.n	8009732 <USBD_StdEPReq+0x112>
 80096b8:	e13e      	b.n	8009938 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d002      	beq.n	80096cc <USBD_StdEPReq+0xac>
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d016      	beq.n	80096f8 <USBD_StdEPReq+0xd8>
 80096ca:	e02c      	b.n	8009726 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096cc:	7bbb      	ldrb	r3, [r7, #14]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00d      	beq.n	80096ee <USBD_StdEPReq+0xce>
 80096d2:	7bbb      	ldrb	r3, [r7, #14]
 80096d4:	2b80      	cmp	r3, #128	; 0x80
 80096d6:	d00a      	beq.n	80096ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f003 ff07 	bl	800d4f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096e2:	2180      	movs	r1, #128	; 0x80
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f003 ff03 	bl	800d4f0 <USBD_LL_StallEP>
 80096ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096ec:	e020      	b.n	8009730 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fc7a 	bl	8009fea <USBD_CtlError>
              break;
 80096f6:	e01b      	b.n	8009730 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	885b      	ldrh	r3, [r3, #2]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10e      	bne.n	800971e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009700:	7bbb      	ldrb	r3, [r7, #14]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00b      	beq.n	800971e <USBD_StdEPReq+0xfe>
 8009706:	7bbb      	ldrb	r3, [r7, #14]
 8009708:	2b80      	cmp	r3, #128	; 0x80
 800970a:	d008      	beq.n	800971e <USBD_StdEPReq+0xfe>
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	88db      	ldrh	r3, [r3, #6]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d104      	bne.n	800971e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009714:	7bbb      	ldrb	r3, [r7, #14]
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f003 fee9 	bl	800d4f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fd2e 	bl	800a180 <USBD_CtlSendStatus>

              break;
 8009724:	e004      	b.n	8009730 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fc5e 	bl	8009fea <USBD_CtlError>
              break;
 800972e:	bf00      	nop
          }
          break;
 8009730:	e107      	b.n	8009942 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b02      	cmp	r3, #2
 800973c:	d002      	beq.n	8009744 <USBD_StdEPReq+0x124>
 800973e:	2b03      	cmp	r3, #3
 8009740:	d016      	beq.n	8009770 <USBD_StdEPReq+0x150>
 8009742:	e04b      	b.n	80097dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00d      	beq.n	8009766 <USBD_StdEPReq+0x146>
 800974a:	7bbb      	ldrb	r3, [r7, #14]
 800974c:	2b80      	cmp	r3, #128	; 0x80
 800974e:	d00a      	beq.n	8009766 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009750:	7bbb      	ldrb	r3, [r7, #14]
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f003 fecb 	bl	800d4f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800975a:	2180      	movs	r1, #128	; 0x80
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f003 fec7 	bl	800d4f0 <USBD_LL_StallEP>
 8009762:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009764:	e040      	b.n	80097e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fc3e 	bl	8009fea <USBD_CtlError>
              break;
 800976e:	e03b      	b.n	80097e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	885b      	ldrh	r3, [r3, #2]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d136      	bne.n	80097e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009778:	7bbb      	ldrb	r3, [r7, #14]
 800977a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800977e:	2b00      	cmp	r3, #0
 8009780:	d004      	beq.n	800978c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009782:	7bbb      	ldrb	r3, [r7, #14]
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f003 fed1 	bl	800d52e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fcf7 	bl	800a180 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009792:	7bbb      	ldrb	r3, [r7, #14]
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7ff fde2 	bl	8009360 <USBD_CoreFindEP>
 800979c:	4603      	mov	r3, r0
 800979e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097a0:	7b7b      	ldrb	r3, [r7, #13]
 80097a2:	2bff      	cmp	r3, #255	; 0xff
 80097a4:	d01f      	beq.n	80097e6 <USBD_StdEPReq+0x1c6>
 80097a6:	7b7b      	ldrb	r3, [r7, #13]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d11c      	bne.n	80097e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80097ac:	7b7a      	ldrb	r2, [r7, #13]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80097b4:	7b7a      	ldrb	r2, [r7, #13]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	32ae      	adds	r2, #174	; 0xae
 80097ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d010      	beq.n	80097e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097c4:	7b7a      	ldrb	r2, [r7, #13]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	32ae      	adds	r2, #174	; 0xae
 80097ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	4798      	blx	r3
 80097d6:	4603      	mov	r3, r0
 80097d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80097da:	e004      	b.n	80097e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fc03 	bl	8009fea <USBD_CtlError>
              break;
 80097e4:	e000      	b.n	80097e8 <USBD_StdEPReq+0x1c8>
              break;
 80097e6:	bf00      	nop
          }
          break;
 80097e8:	e0ab      	b.n	8009942 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d002      	beq.n	80097fc <USBD_StdEPReq+0x1dc>
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d032      	beq.n	8009860 <USBD_StdEPReq+0x240>
 80097fa:	e097      	b.n	800992c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d007      	beq.n	8009812 <USBD_StdEPReq+0x1f2>
 8009802:	7bbb      	ldrb	r3, [r7, #14]
 8009804:	2b80      	cmp	r3, #128	; 0x80
 8009806:	d004      	beq.n	8009812 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fbed 	bl	8009fea <USBD_CtlError>
                break;
 8009810:	e091      	b.n	8009936 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009816:	2b00      	cmp	r3, #0
 8009818:	da0b      	bge.n	8009832 <USBD_StdEPReq+0x212>
 800981a:	7bbb      	ldrb	r3, [r7, #14]
 800981c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009820:	4613      	mov	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	3310      	adds	r3, #16
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	4413      	add	r3, r2
 800982e:	3304      	adds	r3, #4
 8009830:	e00b      	b.n	800984a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	4413      	add	r3, r2
 8009848:	3304      	adds	r3, #4
 800984a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	2200      	movs	r2, #0
 8009850:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	2202      	movs	r2, #2
 8009856:	4619      	mov	r1, r3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fc37 	bl	800a0cc <USBD_CtlSendData>
              break;
 800985e:	e06a      	b.n	8009936 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009864:	2b00      	cmp	r3, #0
 8009866:	da11      	bge.n	800988c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	f003 020f 	and.w	r2, r3, #15
 800986e:	6879      	ldr	r1, [r7, #4]
 8009870:	4613      	mov	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	440b      	add	r3, r1
 800987a:	3324      	adds	r3, #36	; 0x24
 800987c:	881b      	ldrh	r3, [r3, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d117      	bne.n	80098b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fbb0 	bl	8009fea <USBD_CtlError>
                  break;
 800988a:	e054      	b.n	8009936 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800988c:	7bbb      	ldrb	r3, [r7, #14]
 800988e:	f003 020f 	and.w	r2, r3, #15
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	4613      	mov	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	440b      	add	r3, r1
 800989e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098a2:	881b      	ldrh	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d104      	bne.n	80098b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fb9d 	bl	8009fea <USBD_CtlError>
                  break;
 80098b0:	e041      	b.n	8009936 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	da0b      	bge.n	80098d2 <USBD_StdEPReq+0x2b2>
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
 80098bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098c0:	4613      	mov	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	3310      	adds	r3, #16
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	4413      	add	r3, r2
 80098ce:	3304      	adds	r3, #4
 80098d0:	e00b      	b.n	80098ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098d2:	7bbb      	ldrb	r3, [r7, #14]
 80098d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098d8:	4613      	mov	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	4413      	add	r3, r2
 80098e8:	3304      	adds	r3, #4
 80098ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <USBD_StdEPReq+0x2d8>
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	2b80      	cmp	r3, #128	; 0x80
 80098f6:	d103      	bne.n	8009900 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2200      	movs	r2, #0
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	e00e      	b.n	800991e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009900:	7bbb      	ldrb	r3, [r7, #14]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f003 fe31 	bl	800d56c <USBD_LL_IsStallEP>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2201      	movs	r2, #1
 8009914:	601a      	str	r2, [r3, #0]
 8009916:	e002      	b.n	800991e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2202      	movs	r2, #2
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fbd1 	bl	800a0cc <USBD_CtlSendData>
              break;
 800992a:	e004      	b.n	8009936 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fb5b 	bl	8009fea <USBD_CtlError>
              break;
 8009934:	bf00      	nop
          }
          break;
 8009936:	e004      	b.n	8009942 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009938:	6839      	ldr	r1, [r7, #0]
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fb55 	bl	8009fea <USBD_CtlError>
          break;
 8009940:	bf00      	nop
      }
      break;
 8009942:	e005      	b.n	8009950 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009944:	6839      	ldr	r1, [r7, #0]
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fb4f 	bl	8009fea <USBD_CtlError>
      break;
 800994c:	e000      	b.n	8009950 <USBD_StdEPReq+0x330>
      break;
 800994e:	bf00      	nop
  }

  return ret;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
	...

0800995c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009966:	2300      	movs	r3, #0
 8009968:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800996a:	2300      	movs	r3, #0
 800996c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	885b      	ldrh	r3, [r3, #2]
 8009976:	0a1b      	lsrs	r3, r3, #8
 8009978:	b29b      	uxth	r3, r3
 800997a:	3b01      	subs	r3, #1
 800997c:	2b06      	cmp	r3, #6
 800997e:	f200 8128 	bhi.w	8009bd2 <USBD_GetDescriptor+0x276>
 8009982:	a201      	add	r2, pc, #4	; (adr r2, 8009988 <USBD_GetDescriptor+0x2c>)
 8009984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009988:	080099a5 	.word	0x080099a5
 800998c:	080099bd 	.word	0x080099bd
 8009990:	080099fd 	.word	0x080099fd
 8009994:	08009bd3 	.word	0x08009bd3
 8009998:	08009bd3 	.word	0x08009bd3
 800999c:	08009b73 	.word	0x08009b73
 80099a0:	08009b9f 	.word	0x08009b9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	7c12      	ldrb	r2, [r2, #16]
 80099b0:	f107 0108 	add.w	r1, r7, #8
 80099b4:	4610      	mov	r0, r2
 80099b6:	4798      	blx	r3
 80099b8:	60f8      	str	r0, [r7, #12]
      break;
 80099ba:	e112      	b.n	8009be2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	7c1b      	ldrb	r3, [r3, #16]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10d      	bne.n	80099e0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099cc:	f107 0208 	add.w	r2, r7, #8
 80099d0:	4610      	mov	r0, r2
 80099d2:	4798      	blx	r3
 80099d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3301      	adds	r3, #1
 80099da:	2202      	movs	r2, #2
 80099dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099de:	e100      	b.n	8009be2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	f107 0208 	add.w	r2, r7, #8
 80099ec:	4610      	mov	r0, r2
 80099ee:	4798      	blx	r3
 80099f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	3301      	adds	r3, #1
 80099f6:	2202      	movs	r2, #2
 80099f8:	701a      	strb	r2, [r3, #0]
      break;
 80099fa:	e0f2      	b.n	8009be2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	885b      	ldrh	r3, [r3, #2]
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b05      	cmp	r3, #5
 8009a04:	f200 80ac 	bhi.w	8009b60 <USBD_GetDescriptor+0x204>
 8009a08:	a201      	add	r2, pc, #4	; (adr r2, 8009a10 <USBD_GetDescriptor+0xb4>)
 8009a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0e:	bf00      	nop
 8009a10:	08009a29 	.word	0x08009a29
 8009a14:	08009a5d 	.word	0x08009a5d
 8009a18:	08009a91 	.word	0x08009a91
 8009a1c:	08009ac5 	.word	0x08009ac5
 8009a20:	08009af9 	.word	0x08009af9
 8009a24:	08009b2d 	.word	0x08009b2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00b      	beq.n	8009a4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	7c12      	ldrb	r2, [r2, #16]
 8009a40:	f107 0108 	add.w	r1, r7, #8
 8009a44:	4610      	mov	r0, r2
 8009a46:	4798      	blx	r3
 8009a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a4a:	e091      	b.n	8009b70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 facb 	bl	8009fea <USBD_CtlError>
            err++;
 8009a54:	7afb      	ldrb	r3, [r7, #11]
 8009a56:	3301      	adds	r3, #1
 8009a58:	72fb      	strb	r3, [r7, #11]
          break;
 8009a5a:	e089      	b.n	8009b70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00b      	beq.n	8009a80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	7c12      	ldrb	r2, [r2, #16]
 8009a74:	f107 0108 	add.w	r1, r7, #8
 8009a78:	4610      	mov	r0, r2
 8009a7a:	4798      	blx	r3
 8009a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a7e:	e077      	b.n	8009b70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fab1 	bl	8009fea <USBD_CtlError>
            err++;
 8009a88:	7afb      	ldrb	r3, [r7, #11]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a8e:	e06f      	b.n	8009b70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00b      	beq.n	8009ab4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	7c12      	ldrb	r2, [r2, #16]
 8009aa8:	f107 0108 	add.w	r1, r7, #8
 8009aac:	4610      	mov	r0, r2
 8009aae:	4798      	blx	r3
 8009ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ab2:	e05d      	b.n	8009b70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fa97 	bl	8009fea <USBD_CtlError>
            err++;
 8009abc:	7afb      	ldrb	r3, [r7, #11]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ac2:	e055      	b.n	8009b70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00b      	beq.n	8009ae8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	7c12      	ldrb	r2, [r2, #16]
 8009adc:	f107 0108 	add.w	r1, r7, #8
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	4798      	blx	r3
 8009ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ae6:	e043      	b.n	8009b70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fa7d 	bl	8009fea <USBD_CtlError>
            err++;
 8009af0:	7afb      	ldrb	r3, [r7, #11]
 8009af2:	3301      	adds	r3, #1
 8009af4:	72fb      	strb	r3, [r7, #11]
          break;
 8009af6:	e03b      	b.n	8009b70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00b      	beq.n	8009b1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b0a:	695b      	ldr	r3, [r3, #20]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	7c12      	ldrb	r2, [r2, #16]
 8009b10:	f107 0108 	add.w	r1, r7, #8
 8009b14:	4610      	mov	r0, r2
 8009b16:	4798      	blx	r3
 8009b18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b1a:	e029      	b.n	8009b70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fa63 	bl	8009fea <USBD_CtlError>
            err++;
 8009b24:	7afb      	ldrb	r3, [r7, #11]
 8009b26:	3301      	adds	r3, #1
 8009b28:	72fb      	strb	r3, [r7, #11]
          break;
 8009b2a:	e021      	b.n	8009b70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00b      	beq.n	8009b50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	7c12      	ldrb	r2, [r2, #16]
 8009b44:	f107 0108 	add.w	r1, r7, #8
 8009b48:	4610      	mov	r0, r2
 8009b4a:	4798      	blx	r3
 8009b4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b4e:	e00f      	b.n	8009b70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fa49 	bl	8009fea <USBD_CtlError>
            err++;
 8009b58:	7afb      	ldrb	r3, [r7, #11]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b5e:	e007      	b.n	8009b70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fa41 	bl	8009fea <USBD_CtlError>
          err++;
 8009b68:	7afb      	ldrb	r3, [r7, #11]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b6e:	bf00      	nop
      }
      break;
 8009b70:	e037      	b.n	8009be2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	7c1b      	ldrb	r3, [r3, #16]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d109      	bne.n	8009b8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b82:	f107 0208 	add.w	r2, r7, #8
 8009b86:	4610      	mov	r0, r2
 8009b88:	4798      	blx	r3
 8009b8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b8c:	e029      	b.n	8009be2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fa2a 	bl	8009fea <USBD_CtlError>
        err++;
 8009b96:	7afb      	ldrb	r3, [r7, #11]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b9c:	e021      	b.n	8009be2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	7c1b      	ldrb	r3, [r3, #16]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10d      	bne.n	8009bc2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bae:	f107 0208 	add.w	r2, r7, #8
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	4798      	blx	r3
 8009bb6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	2207      	movs	r2, #7
 8009bbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bc0:	e00f      	b.n	8009be2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fa10 	bl	8009fea <USBD_CtlError>
        err++;
 8009bca:	7afb      	ldrb	r3, [r7, #11]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	72fb      	strb	r3, [r7, #11]
      break;
 8009bd0:	e007      	b.n	8009be2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fa08 	bl	8009fea <USBD_CtlError>
      err++;
 8009bda:	7afb      	ldrb	r3, [r7, #11]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	72fb      	strb	r3, [r7, #11]
      break;
 8009be0:	bf00      	nop
  }

  if (err != 0U)
 8009be2:	7afb      	ldrb	r3, [r7, #11]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d11e      	bne.n	8009c26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	88db      	ldrh	r3, [r3, #6]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d016      	beq.n	8009c1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009bf0:	893b      	ldrh	r3, [r7, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00e      	beq.n	8009c14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	88da      	ldrh	r2, [r3, #6]
 8009bfa:	893b      	ldrh	r3, [r7, #8]
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	bf28      	it	cs
 8009c00:	4613      	movcs	r3, r2
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c06:	893b      	ldrh	r3, [r7, #8]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	68f9      	ldr	r1, [r7, #12]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fa5d 	bl	800a0cc <USBD_CtlSendData>
 8009c12:	e009      	b.n	8009c28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f9e7 	bl	8009fea <USBD_CtlError>
 8009c1c:	e004      	b.n	8009c28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 faae 	bl	800a180 <USBD_CtlSendStatus>
 8009c24:	e000      	b.n	8009c28 <USBD_GetDescriptor+0x2cc>
    return;
 8009c26:	bf00      	nop
  }
}
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop

08009c30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	889b      	ldrh	r3, [r3, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d131      	bne.n	8009ca6 <USBD_SetAddress+0x76>
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	88db      	ldrh	r3, [r3, #6]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d12d      	bne.n	8009ca6 <USBD_SetAddress+0x76>
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	885b      	ldrh	r3, [r3, #2]
 8009c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8009c50:	d829      	bhi.n	8009ca6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	885b      	ldrh	r3, [r3, #2]
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d104      	bne.n	8009c74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f9bc 	bl	8009fea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c72:	e01d      	b.n	8009cb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	7bfa      	ldrb	r2, [r7, #15]
 8009c78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f003 fc9f 	bl	800d5c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fa7a 	bl	800a180 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d004      	beq.n	8009c9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2202      	movs	r2, #2
 8009c96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c9a:	e009      	b.n	8009cb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ca4:	e004      	b.n	8009cb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f99e 	bl	8009fea <USBD_CtlError>
  }
}
 8009cae:	bf00      	nop
 8009cb0:	bf00      	nop
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	885b      	ldrh	r3, [r3, #2]
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	4b4e      	ldr	r3, [pc, #312]	; (8009e08 <USBD_SetConfig+0x150>)
 8009cce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009cd0:	4b4d      	ldr	r3, [pc, #308]	; (8009e08 <USBD_SetConfig+0x150>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d905      	bls.n	8009ce4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009cd8:	6839      	ldr	r1, [r7, #0]
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f985 	bl	8009fea <USBD_CtlError>
    return USBD_FAIL;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e08c      	b.n	8009dfe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d002      	beq.n	8009cf6 <USBD_SetConfig+0x3e>
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	d029      	beq.n	8009d48 <USBD_SetConfig+0x90>
 8009cf4:	e075      	b.n	8009de2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009cf6:	4b44      	ldr	r3, [pc, #272]	; (8009e08 <USBD_SetConfig+0x150>)
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d020      	beq.n	8009d40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009cfe:	4b42      	ldr	r3, [pc, #264]	; (8009e08 <USBD_SetConfig+0x150>)
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	461a      	mov	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d08:	4b3f      	ldr	r3, [pc, #252]	; (8009e08 <USBD_SetConfig+0x150>)
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7fe ffe7 	bl	8008ce2 <USBD_SetClassConfig>
 8009d14:	4603      	mov	r3, r0
 8009d16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d008      	beq.n	8009d30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f962 	bl	8009fea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2202      	movs	r2, #2
 8009d2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d2e:	e065      	b.n	8009dfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fa25 	bl	800a180 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2203      	movs	r2, #3
 8009d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d3e:	e05d      	b.n	8009dfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fa1d 	bl	800a180 <USBD_CtlSendStatus>
      break;
 8009d46:	e059      	b.n	8009dfc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d48:	4b2f      	ldr	r3, [pc, #188]	; (8009e08 <USBD_SetConfig+0x150>)
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d112      	bne.n	8009d76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2202      	movs	r2, #2
 8009d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009d58:	4b2b      	ldr	r3, [pc, #172]	; (8009e08 <USBD_SetConfig+0x150>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d62:	4b29      	ldr	r3, [pc, #164]	; (8009e08 <USBD_SetConfig+0x150>)
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7fe ffd6 	bl	8008d1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fa06 	bl	800a180 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d74:	e042      	b.n	8009dfc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d76:	4b24      	ldr	r3, [pc, #144]	; (8009e08 <USBD_SetConfig+0x150>)
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d02a      	beq.n	8009dda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7fe ffc4 	bl	8008d1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d92:	4b1d      	ldr	r3, [pc, #116]	; (8009e08 <USBD_SetConfig+0x150>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	461a      	mov	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d9c:	4b1a      	ldr	r3, [pc, #104]	; (8009e08 <USBD_SetConfig+0x150>)
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	4619      	mov	r1, r3
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7fe ff9d 	bl	8008ce2 <USBD_SetClassConfig>
 8009da8:	4603      	mov	r3, r0
 8009daa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00f      	beq.n	8009dd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f918 	bl	8009fea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7fe ffa9 	bl	8008d1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009dd0:	e014      	b.n	8009dfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f9d4 	bl	800a180 <USBD_CtlSendStatus>
      break;
 8009dd8:	e010      	b.n	8009dfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f9d0 	bl	800a180 <USBD_CtlSendStatus>
      break;
 8009de0:	e00c      	b.n	8009dfc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f900 	bl	8009fea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dea:	4b07      	ldr	r3, [pc, #28]	; (8009e08 <USBD_SetConfig+0x150>)
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7fe ff92 	bl	8008d1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009df6:	2303      	movs	r3, #3
 8009df8:	73fb      	strb	r3, [r7, #15]
      break;
 8009dfa:	bf00      	nop
  }

  return ret;
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	200005c4 	.word	0x200005c4

08009e0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	88db      	ldrh	r3, [r3, #6]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d004      	beq.n	8009e28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f8e2 	bl	8009fea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e26:	e023      	b.n	8009e70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	dc02      	bgt.n	8009e3a <USBD_GetConfig+0x2e>
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	dc03      	bgt.n	8009e40 <USBD_GetConfig+0x34>
 8009e38:	e015      	b.n	8009e66 <USBD_GetConfig+0x5a>
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	d00b      	beq.n	8009e56 <USBD_GetConfig+0x4a>
 8009e3e:	e012      	b.n	8009e66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	3308      	adds	r3, #8
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f93c 	bl	800a0cc <USBD_CtlSendData>
        break;
 8009e54:	e00c      	b.n	8009e70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3304      	adds	r3, #4
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f934 	bl	800a0cc <USBD_CtlSendData>
        break;
 8009e64:	e004      	b.n	8009e70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f8be 	bl	8009fea <USBD_CtlError>
        break;
 8009e6e:	bf00      	nop
}
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d81e      	bhi.n	8009ece <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	88db      	ldrh	r3, [r3, #6]
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d004      	beq.n	8009ea2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f8a5 	bl	8009fea <USBD_CtlError>
        break;
 8009ea0:	e01a      	b.n	8009ed8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d005      	beq.n	8009ebe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	f043 0202 	orr.w	r2, r3, #2
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	330c      	adds	r3, #12
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f900 	bl	800a0cc <USBD_CtlSendData>
      break;
 8009ecc:	e004      	b.n	8009ed8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f88a 	bl	8009fea <USBD_CtlError>
      break;
 8009ed6:	bf00      	nop
  }
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	885b      	ldrh	r3, [r3, #2]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d107      	bne.n	8009f02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f940 	bl	800a180 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009f00:	e013      	b.n	8009f2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	885b      	ldrh	r3, [r3, #2]
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d10b      	bne.n	8009f22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	889b      	ldrh	r3, [r3, #4]
 8009f0e:	0a1b      	lsrs	r3, r3, #8
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f930 	bl	800a180 <USBD_CtlSendStatus>
}
 8009f20:	e003      	b.n	8009f2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009f22:	6839      	ldr	r1, [r7, #0]
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f860 	bl	8009fea <USBD_CtlError>
}
 8009f2a:	bf00      	nop
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b082      	sub	sp, #8
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	3b01      	subs	r3, #1
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d80b      	bhi.n	8009f62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	885b      	ldrh	r3, [r3, #2]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d10c      	bne.n	8009f6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f910 	bl	800a180 <USBD_CtlSendStatus>
      }
      break;
 8009f60:	e004      	b.n	8009f6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f840 	bl	8009fea <USBD_CtlError>
      break;
 8009f6a:	e000      	b.n	8009f6e <USBD_ClrFeature+0x3c>
      break;
 8009f6c:	bf00      	nop
  }
}
 8009f6e:	bf00      	nop
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b084      	sub	sp, #16
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	781a      	ldrb	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	781a      	ldrb	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f7ff fa41 	bl	8009428 <SWAPBYTE>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	461a      	mov	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f7ff fa34 	bl	8009428 <SWAPBYTE>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f7ff fa27 	bl	8009428 <SWAPBYTE>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	461a      	mov	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	80da      	strh	r2, [r3, #6]
}
 8009fe2:	bf00      	nop
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b082      	sub	sp, #8
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ff4:	2180      	movs	r1, #128	; 0x80
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f003 fa7a 	bl	800d4f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f003 fa76 	bl	800d4f0 <USBD_LL_StallEP>
}
 800a004:	bf00      	nop
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a018:	2300      	movs	r3, #0
 800a01a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d036      	beq.n	800a090 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a026:	6938      	ldr	r0, [r7, #16]
 800a028:	f000 f836 	bl	800a098 <USBD_GetLen>
 800a02c:	4603      	mov	r3, r0
 800a02e:	3301      	adds	r3, #1
 800a030:	b29b      	uxth	r3, r3
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	b29a      	uxth	r2, r3
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	4413      	add	r3, r2
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	7812      	ldrb	r2, [r2, #0]
 800a044:	701a      	strb	r2, [r3, #0]
  idx++;
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	3301      	adds	r3, #1
 800a04a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	4413      	add	r3, r2
 800a052:	2203      	movs	r2, #3
 800a054:	701a      	strb	r2, [r3, #0]
  idx++;
 800a056:	7dfb      	ldrb	r3, [r7, #23]
 800a058:	3301      	adds	r3, #1
 800a05a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a05c:	e013      	b.n	800a086 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a05e:	7dfb      	ldrb	r3, [r7, #23]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	4413      	add	r3, r2
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	7812      	ldrb	r2, [r2, #0]
 800a068:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	3301      	adds	r3, #1
 800a06e:	613b      	str	r3, [r7, #16]
    idx++;
 800a070:	7dfb      	ldrb	r3, [r7, #23]
 800a072:	3301      	adds	r3, #1
 800a074:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	4413      	add	r3, r2
 800a07c:	2200      	movs	r2, #0
 800a07e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a080:	7dfb      	ldrb	r3, [r7, #23]
 800a082:	3301      	adds	r3, #1
 800a084:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d1e7      	bne.n	800a05e <USBD_GetString+0x52>
 800a08e:	e000      	b.n	800a092 <USBD_GetString+0x86>
    return;
 800a090:	bf00      	nop
  }
}
 800a092:	3718      	adds	r7, #24
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a0a8:	e005      	b.n	800a0b6 <USBD_GetLen+0x1e>
  {
    len++;
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1f5      	bne.n	800a0aa <USBD_GetLen+0x12>
  }

  return len;
 800a0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3714      	adds	r7, #20
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f003 fa85 	bl	800d602 <USBD_LL_Transmit>

  return USBD_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b084      	sub	sp, #16
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	2100      	movs	r1, #0
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f003 fa74 	bl	800d602 <USBD_LL_Transmit>

  return USBD_OK;
 800a11a:	2300      	movs	r3, #0
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2203      	movs	r2, #3
 800a134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	2100      	movs	r1, #0
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f003 fa78 	bl	800d644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	60f8      	str	r0, [r7, #12]
 800a166:	60b9      	str	r1, [r7, #8]
 800a168:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	2100      	movs	r1, #0
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f003 fa67 	bl	800d644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2204      	movs	r2, #4
 800a18c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a190:	2300      	movs	r3, #0
 800a192:	2200      	movs	r2, #0
 800a194:	2100      	movs	r1, #0
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f003 fa33 	bl	800d602 <USBD_LL_Transmit>

  return USBD_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2205      	movs	r2, #5
 800a1b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f003 fa41 	bl	800d644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <__NVIC_SetPriority>:
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	6039      	str	r1, [r7, #0]
 800a1d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	db0a      	blt.n	800a1f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	490c      	ldr	r1, [pc, #48]	; (800a218 <__NVIC_SetPriority+0x4c>)
 800a1e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ea:	0112      	lsls	r2, r2, #4
 800a1ec:	b2d2      	uxtb	r2, r2
 800a1ee:	440b      	add	r3, r1
 800a1f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a1f4:	e00a      	b.n	800a20c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	4908      	ldr	r1, [pc, #32]	; (800a21c <__NVIC_SetPriority+0x50>)
 800a1fc:	79fb      	ldrb	r3, [r7, #7]
 800a1fe:	f003 030f 	and.w	r3, r3, #15
 800a202:	3b04      	subs	r3, #4
 800a204:	0112      	lsls	r2, r2, #4
 800a206:	b2d2      	uxtb	r2, r2
 800a208:	440b      	add	r3, r1
 800a20a:	761a      	strb	r2, [r3, #24]
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	e000e100 	.word	0xe000e100
 800a21c:	e000ed00 	.word	0xe000ed00

0800a220 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a224:	4b05      	ldr	r3, [pc, #20]	; (800a23c <SysTick_Handler+0x1c>)
 800a226:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a228:	f001 fd28 	bl	800bc7c <xTaskGetSchedulerState>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d001      	beq.n	800a236 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a232:	f002 fb11 	bl	800c858 <xPortSysTickHandler>
  }
}
 800a236:	bf00      	nop
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	e000e010 	.word	0xe000e010

0800a240 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a240:	b580      	push	{r7, lr}
 800a242:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a244:	2100      	movs	r1, #0
 800a246:	f06f 0004 	mvn.w	r0, #4
 800a24a:	f7ff ffbf 	bl	800a1cc <__NVIC_SetPriority>
#endif
}
 800a24e:	bf00      	nop
 800a250:	bd80      	pop	{r7, pc}
	...

0800a254 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a25a:	f3ef 8305 	mrs	r3, IPSR
 800a25e:	603b      	str	r3, [r7, #0]
  return(result);
 800a260:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a266:	f06f 0305 	mvn.w	r3, #5
 800a26a:	607b      	str	r3, [r7, #4]
 800a26c:	e00c      	b.n	800a288 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a26e:	4b0a      	ldr	r3, [pc, #40]	; (800a298 <osKernelInitialize+0x44>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d105      	bne.n	800a282 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a276:	4b08      	ldr	r3, [pc, #32]	; (800a298 <osKernelInitialize+0x44>)
 800a278:	2201      	movs	r2, #1
 800a27a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	607b      	str	r3, [r7, #4]
 800a280:	e002      	b.n	800a288 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a286:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a288:	687b      	ldr	r3, [r7, #4]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	200005c8 	.word	0x200005c8

0800a29c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2a2:	f3ef 8305 	mrs	r3, IPSR
 800a2a6:	603b      	str	r3, [r7, #0]
  return(result);
 800a2a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a2ae:	f06f 0305 	mvn.w	r3, #5
 800a2b2:	607b      	str	r3, [r7, #4]
 800a2b4:	e010      	b.n	800a2d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a2b6:	4b0b      	ldr	r3, [pc, #44]	; (800a2e4 <osKernelStart+0x48>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d109      	bne.n	800a2d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a2be:	f7ff ffbf 	bl	800a240 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a2c2:	4b08      	ldr	r3, [pc, #32]	; (800a2e4 <osKernelStart+0x48>)
 800a2c4:	2202      	movs	r2, #2
 800a2c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a2c8:	f001 f87c 	bl	800b3c4 <vTaskStartScheduler>
      stat = osOK;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	607b      	str	r3, [r7, #4]
 800a2d0:	e002      	b.n	800a2d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a2d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a2d8:	687b      	ldr	r3, [r7, #4]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	200005c8 	.word	0x200005c8

0800a2e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b08e      	sub	sp, #56	; 0x38
 800a2ec:	af04      	add	r7, sp, #16
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2f8:	f3ef 8305 	mrs	r3, IPSR
 800a2fc:	617b      	str	r3, [r7, #20]
  return(result);
 800a2fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a300:	2b00      	cmp	r3, #0
 800a302:	d17e      	bne.n	800a402 <osThreadNew+0x11a>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d07b      	beq.n	800a402 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a30a:	2380      	movs	r3, #128	; 0x80
 800a30c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a30e:	2318      	movs	r3, #24
 800a310:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a312:	2300      	movs	r3, #0
 800a314:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a31a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d045      	beq.n	800a3ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <osThreadNew+0x48>
        name = attr->name;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d008      	beq.n	800a356 <osThreadNew+0x6e>
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	2b38      	cmp	r3, #56	; 0x38
 800a348:	d805      	bhi.n	800a356 <osThreadNew+0x6e>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <osThreadNew+0x72>
        return (NULL);
 800a356:	2300      	movs	r3, #0
 800a358:	e054      	b.n	800a404 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d003      	beq.n	800a36a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	089b      	lsrs	r3, r3, #2
 800a368:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00e      	beq.n	800a390 <osThreadNew+0xa8>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	2bbb      	cmp	r3, #187	; 0xbb
 800a378:	d90a      	bls.n	800a390 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d006      	beq.n	800a390 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <osThreadNew+0xa8>
        mem = 1;
 800a38a:	2301      	movs	r3, #1
 800a38c:	61bb      	str	r3, [r7, #24]
 800a38e:	e010      	b.n	800a3b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10c      	bne.n	800a3b2 <osThreadNew+0xca>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d108      	bne.n	800a3b2 <osThreadNew+0xca>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d104      	bne.n	800a3b2 <osThreadNew+0xca>
          mem = 0;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	61bb      	str	r3, [r7, #24]
 800a3ac:	e001      	b.n	800a3b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d110      	bne.n	800a3da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3c0:	9202      	str	r2, [sp, #8]
 800a3c2:	9301      	str	r3, [sp, #4]
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	6a3a      	ldr	r2, [r7, #32]
 800a3cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f000 fe0c 	bl	800afec <xTaskCreateStatic>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	613b      	str	r3, [r7, #16]
 800a3d8:	e013      	b.n	800a402 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d110      	bne.n	800a402 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	f107 0310 	add.w	r3, r7, #16
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f000 fe57 	bl	800b0a6 <xTaskCreate>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d001      	beq.n	800a402 <osThreadNew+0x11a>
            hTask = NULL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a402:	693b      	ldr	r3, [r7, #16]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3728      	adds	r7, #40	; 0x28
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a414:	f3ef 8305 	mrs	r3, IPSR
 800a418:	60bb      	str	r3, [r7, #8]
  return(result);
 800a41a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d003      	beq.n	800a428 <osDelay+0x1c>
    stat = osErrorISR;
 800a420:	f06f 0305 	mvn.w	r3, #5
 800a424:	60fb      	str	r3, [r7, #12]
 800a426:	e007      	b.n	800a438 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a428:	2300      	movs	r3, #0
 800a42a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d002      	beq.n	800a438 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 ff92 	bl	800b35c <vTaskDelay>
    }
  }

  return (stat);
 800a438:	68fb      	ldr	r3, [r7, #12]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
	...

0800a444 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4a07      	ldr	r2, [pc, #28]	; (800a470 <vApplicationGetIdleTaskMemory+0x2c>)
 800a454:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	4a06      	ldr	r2, [pc, #24]	; (800a474 <vApplicationGetIdleTaskMemory+0x30>)
 800a45a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2280      	movs	r2, #128	; 0x80
 800a460:	601a      	str	r2, [r3, #0]
}
 800a462:	bf00      	nop
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	200005cc 	.word	0x200005cc
 800a474:	20000688 	.word	0x20000688

0800a478 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	4a07      	ldr	r2, [pc, #28]	; (800a4a4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a488:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	4a06      	ldr	r2, [pc, #24]	; (800a4a8 <vApplicationGetTimerTaskMemory+0x30>)
 800a48e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a496:	601a      	str	r2, [r3, #0]
}
 800a498:	bf00      	nop
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	20000888 	.word	0x20000888
 800a4a8:	20000944 	.word	0x20000944

0800a4ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f103 0208 	add.w	r2, r3, #8
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f103 0208 	add.w	r2, r3, #8
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f103 0208 	add.w	r2, r3, #8
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4fa:	bf00      	nop
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a506:	b480      	push	{r7}
 800a508:	b085      	sub	sp, #20
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	689a      	ldr	r2, [r3, #8]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	1c5a      	adds	r2, r3, #1
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	601a      	str	r2, [r3, #0]
}
 800a542:	bf00      	nop
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a54e:	b480      	push	{r7}
 800a550:	b085      	sub	sp, #20
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a564:	d103      	bne.n	800a56e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	e00c      	b.n	800a588 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	3308      	adds	r3, #8
 800a572:	60fb      	str	r3, [r7, #12]
 800a574:	e002      	b.n	800a57c <vListInsert+0x2e>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	429a      	cmp	r2, r3
 800a586:	d2f6      	bcs.n	800a576 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	1c5a      	adds	r2, r3, #1
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	601a      	str	r2, [r3, #0]
}
 800a5b4:	bf00      	nop
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	6892      	ldr	r2, [r2, #8]
 800a5d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	6852      	ldr	r2, [r2, #4]
 800a5e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d103      	bne.n	800a5f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	689a      	ldr	r2, [r3, #8]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	1e5a      	subs	r2, r3, #1
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3714      	adds	r7, #20
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10a      	bne.n	800a63e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a63a:	bf00      	nop
 800a63c:	e7fe      	b.n	800a63c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a63e:	f002 f879 	bl	800c734 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681a      	ldr	r2, [r3, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a64a:	68f9      	ldr	r1, [r7, #12]
 800a64c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a64e:	fb01 f303 	mul.w	r3, r1, r3
 800a652:	441a      	add	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66e:	3b01      	subs	r3, #1
 800a670:	68f9      	ldr	r1, [r7, #12]
 800a672:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a674:	fb01 f303 	mul.w	r3, r1, r3
 800a678:	441a      	add	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	22ff      	movs	r2, #255	; 0xff
 800a682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	22ff      	movs	r2, #255	; 0xff
 800a68a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d114      	bne.n	800a6be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d01a      	beq.n	800a6d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3310      	adds	r3, #16
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f001 f929 	bl	800b8f8 <xTaskRemoveFromEventList>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d012      	beq.n	800a6d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a6ac:	4b0c      	ldr	r3, [pc, #48]	; (800a6e0 <xQueueGenericReset+0xcc>)
 800a6ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	e009      	b.n	800a6d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3310      	adds	r3, #16
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff fef2 	bl	800a4ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3324      	adds	r3, #36	; 0x24
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7ff feed 	bl	800a4ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6d2:	f002 f85f 	bl	800c794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6d6:	2301      	movs	r3, #1
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	e000ed04 	.word	0xe000ed04

0800a6e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b08e      	sub	sp, #56	; 0x38
 800a6e8:	af02      	add	r7, sp, #8
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10a      	bne.n	800a70e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fc:	f383 8811 	msr	BASEPRI, r3
 800a700:	f3bf 8f6f 	isb	sy
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a70a:	bf00      	nop
 800a70c:	e7fe      	b.n	800a70c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10a      	bne.n	800a72a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <xQueueGenericCreateStatic+0x52>
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <xQueueGenericCreateStatic+0x56>
 800a736:	2301      	movs	r3, #1
 800a738:	e000      	b.n	800a73c <xQueueGenericCreateStatic+0x58>
 800a73a:	2300      	movs	r3, #0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10a      	bne.n	800a756 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	623b      	str	r3, [r7, #32]
}
 800a752:	bf00      	nop
 800a754:	e7fe      	b.n	800a754 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d102      	bne.n	800a762 <xQueueGenericCreateStatic+0x7e>
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d101      	bne.n	800a766 <xQueueGenericCreateStatic+0x82>
 800a762:	2301      	movs	r3, #1
 800a764:	e000      	b.n	800a768 <xQueueGenericCreateStatic+0x84>
 800a766:	2300      	movs	r3, #0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10a      	bne.n	800a782 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	61fb      	str	r3, [r7, #28]
}
 800a77e:	bf00      	nop
 800a780:	e7fe      	b.n	800a780 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a782:	2350      	movs	r3, #80	; 0x50
 800a784:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	2b50      	cmp	r3, #80	; 0x50
 800a78a:	d00a      	beq.n	800a7a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	61bb      	str	r3, [r7, #24]
}
 800a79e:	bf00      	nop
 800a7a0:	e7fe      	b.n	800a7a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a7a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00d      	beq.n	800a7ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	68b9      	ldr	r1, [r7, #8]
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f000 f805 	bl	800a7d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3730      	adds	r7, #48	; 0x30
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d103      	bne.n	800a7f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	69ba      	ldr	r2, [r7, #24]
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	e002      	b.n	800a7f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a802:	2101      	movs	r1, #1
 800a804:	69b8      	ldr	r0, [r7, #24]
 800a806:	f7ff ff05 	bl	800a614 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	78fa      	ldrb	r2, [r7, #3]
 800a80e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a812:	bf00      	nop
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
	...

0800a81c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b08e      	sub	sp, #56	; 0x38
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
 800a828:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a82a:	2300      	movs	r3, #0
 800a82c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10a      	bne.n	800a84e <xQueueGenericSend+0x32>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a84a:	bf00      	nop
 800a84c:	e7fe      	b.n	800a84c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d103      	bne.n	800a85c <xQueueGenericSend+0x40>
 800a854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <xQueueGenericSend+0x44>
 800a85c:	2301      	movs	r3, #1
 800a85e:	e000      	b.n	800a862 <xQueueGenericSend+0x46>
 800a860:	2300      	movs	r3, #0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10a      	bne.n	800a87c <xQueueGenericSend+0x60>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a878:	bf00      	nop
 800a87a:	e7fe      	b.n	800a87a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d103      	bne.n	800a88a <xQueueGenericSend+0x6e>
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a886:	2b01      	cmp	r3, #1
 800a888:	d101      	bne.n	800a88e <xQueueGenericSend+0x72>
 800a88a:	2301      	movs	r3, #1
 800a88c:	e000      	b.n	800a890 <xQueueGenericSend+0x74>
 800a88e:	2300      	movs	r3, #0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10a      	bne.n	800a8aa <xQueueGenericSend+0x8e>
	__asm volatile
 800a894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	623b      	str	r3, [r7, #32]
}
 800a8a6:	bf00      	nop
 800a8a8:	e7fe      	b.n	800a8a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8aa:	f001 f9e7 	bl	800bc7c <xTaskGetSchedulerState>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d102      	bne.n	800a8ba <xQueueGenericSend+0x9e>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d101      	bne.n	800a8be <xQueueGenericSend+0xa2>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e000      	b.n	800a8c0 <xQueueGenericSend+0xa4>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10a      	bne.n	800a8da <xQueueGenericSend+0xbe>
	__asm volatile
 800a8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	61fb      	str	r3, [r7, #28]
}
 800a8d6:	bf00      	nop
 800a8d8:	e7fe      	b.n	800a8d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8da:	f001 ff2b 	bl	800c734 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d302      	bcc.n	800a8f0 <xQueueGenericSend+0xd4>
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d129      	bne.n	800a944 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	68b9      	ldr	r1, [r7, #8]
 800a8f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8f6:	f000 fa0b 	bl	800ad10 <prvCopyDataToQueue>
 800a8fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	2b00      	cmp	r3, #0
 800a902:	d010      	beq.n	800a926 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a906:	3324      	adds	r3, #36	; 0x24
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 fff5 	bl	800b8f8 <xTaskRemoveFromEventList>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d013      	beq.n	800a93c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a914:	4b3f      	ldr	r3, [pc, #252]	; (800aa14 <xQueueGenericSend+0x1f8>)
 800a916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	e00a      	b.n	800a93c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d007      	beq.n	800a93c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a92c:	4b39      	ldr	r3, [pc, #228]	; (800aa14 <xQueueGenericSend+0x1f8>)
 800a92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a93c:	f001 ff2a 	bl	800c794 <vPortExitCritical>
				return pdPASS;
 800a940:	2301      	movs	r3, #1
 800a942:	e063      	b.n	800aa0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d103      	bne.n	800a952 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a94a:	f001 ff23 	bl	800c794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	e05c      	b.n	800aa0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a954:	2b00      	cmp	r3, #0
 800a956:	d106      	bne.n	800a966 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a958:	f107 0314 	add.w	r3, r7, #20
 800a95c:	4618      	mov	r0, r3
 800a95e:	f001 f82f 	bl	800b9c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a962:	2301      	movs	r3, #1
 800a964:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a966:	f001 ff15 	bl	800c794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a96a:	f000 fd9b 	bl	800b4a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a96e:	f001 fee1 	bl	800c734 <vPortEnterCritical>
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a978:	b25b      	sxtb	r3, r3
 800a97a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a97e:	d103      	bne.n	800a988 <xQueueGenericSend+0x16c>
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	2200      	movs	r2, #0
 800a984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a98e:	b25b      	sxtb	r3, r3
 800a990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a994:	d103      	bne.n	800a99e <xQueueGenericSend+0x182>
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a99e:	f001 fef9 	bl	800c794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9a2:	1d3a      	adds	r2, r7, #4
 800a9a4:	f107 0314 	add.w	r3, r7, #20
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f001 f81e 	bl	800b9ec <xTaskCheckForTimeOut>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d124      	bne.n	800aa00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a9b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9b8:	f000 faa2 	bl	800af00 <prvIsQueueFull>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d018      	beq.n	800a9f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c4:	3310      	adds	r3, #16
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 ff44 	bl	800b858 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9d2:	f000 fa2d 	bl	800ae30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a9d6:	f000 fd73 	bl	800b4c0 <xTaskResumeAll>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f47f af7c 	bne.w	800a8da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a9e2:	4b0c      	ldr	r3, [pc, #48]	; (800aa14 <xQueueGenericSend+0x1f8>)
 800a9e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	e772      	b.n	800a8da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9f6:	f000 fa1b 	bl	800ae30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9fa:	f000 fd61 	bl	800b4c0 <xTaskResumeAll>
 800a9fe:	e76c      	b.n	800a8da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa02:	f000 fa15 	bl	800ae30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa06:	f000 fd5b 	bl	800b4c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3738      	adds	r7, #56	; 0x38
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	e000ed04 	.word	0xe000ed04

0800aa18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b090      	sub	sp, #64	; 0x40
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
 800aa24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10a      	bne.n	800aa46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa42:	bf00      	nop
 800aa44:	e7fe      	b.n	800aa44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d103      	bne.n	800aa54 <xQueueGenericSendFromISR+0x3c>
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d101      	bne.n	800aa58 <xQueueGenericSendFromISR+0x40>
 800aa54:	2301      	movs	r3, #1
 800aa56:	e000      	b.n	800aa5a <xQueueGenericSendFromISR+0x42>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10a      	bne.n	800aa74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa70:	bf00      	nop
 800aa72:	e7fe      	b.n	800aa72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d103      	bne.n	800aa82 <xQueueGenericSendFromISR+0x6a>
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d101      	bne.n	800aa86 <xQueueGenericSendFromISR+0x6e>
 800aa82:	2301      	movs	r3, #1
 800aa84:	e000      	b.n	800aa88 <xQueueGenericSendFromISR+0x70>
 800aa86:	2300      	movs	r3, #0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10a      	bne.n	800aaa2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	623b      	str	r3, [r7, #32]
}
 800aa9e:	bf00      	nop
 800aaa0:	e7fe      	b.n	800aaa0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aaa2:	f001 ff29 	bl	800c8f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aaa6:	f3ef 8211 	mrs	r2, BASEPRI
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	61fa      	str	r2, [r7, #28]
 800aabc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aabe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aac0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d302      	bcc.n	800aad4 <xQueueGenericSendFromISR+0xbc>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d12f      	bne.n	800ab34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	68b9      	ldr	r1, [r7, #8]
 800aae8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aaea:	f000 f911 	bl	800ad10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aaee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aaf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaf6:	d112      	bne.n	800ab1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d016      	beq.n	800ab2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab02:	3324      	adds	r3, #36	; 0x24
 800ab04:	4618      	mov	r0, r3
 800ab06:	f000 fef7 	bl	800b8f8 <xTaskRemoveFromEventList>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00e      	beq.n	800ab2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00b      	beq.n	800ab2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]
 800ab1c:	e007      	b.n	800ab2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab22:	3301      	adds	r3, #1
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	b25a      	sxtb	r2, r3
 800ab28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ab32:	e001      	b.n	800ab38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab34:	2300      	movs	r3, #0
 800ab36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3740      	adds	r7, #64	; 0x40
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
	...

0800ab50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b08c      	sub	sp, #48	; 0x30
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d10a      	bne.n	800ab80 <xQueueReceive+0x30>
	__asm volatile
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	623b      	str	r3, [r7, #32]
}
 800ab7c:	bf00      	nop
 800ab7e:	e7fe      	b.n	800ab7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d103      	bne.n	800ab8e <xQueueReceive+0x3e>
 800ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <xQueueReceive+0x42>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e000      	b.n	800ab94 <xQueueReceive+0x44>
 800ab92:	2300      	movs	r3, #0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10a      	bne.n	800abae <xQueueReceive+0x5e>
	__asm volatile
 800ab98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	61fb      	str	r3, [r7, #28]
}
 800abaa:	bf00      	nop
 800abac:	e7fe      	b.n	800abac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abae:	f001 f865 	bl	800bc7c <xTaskGetSchedulerState>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d102      	bne.n	800abbe <xQueueReceive+0x6e>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <xQueueReceive+0x72>
 800abbe:	2301      	movs	r3, #1
 800abc0:	e000      	b.n	800abc4 <xQueueReceive+0x74>
 800abc2:	2300      	movs	r3, #0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10a      	bne.n	800abde <xQueueReceive+0x8e>
	__asm volatile
 800abc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	61bb      	str	r3, [r7, #24]
}
 800abda:	bf00      	nop
 800abdc:	e7fe      	b.n	800abdc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abde:	f001 fda9 	bl	800c734 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abea:	2b00      	cmp	r3, #0
 800abec:	d01f      	beq.n	800ac2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abee:	68b9      	ldr	r1, [r7, #8]
 800abf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abf2:	f000 f8f7 	bl	800ade4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	1e5a      	subs	r2, r3, #1
 800abfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00f      	beq.n	800ac26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac08:	3310      	adds	r3, #16
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 fe74 	bl	800b8f8 <xTaskRemoveFromEventList>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d007      	beq.n	800ac26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac16:	4b3d      	ldr	r3, [pc, #244]	; (800ad0c <xQueueReceive+0x1bc>)
 800ac18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac1c:	601a      	str	r2, [r3, #0]
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac26:	f001 fdb5 	bl	800c794 <vPortExitCritical>
				return pdPASS;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e069      	b.n	800ad02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d103      	bne.n	800ac3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac34:	f001 fdae 	bl	800c794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	e062      	b.n	800ad02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d106      	bne.n	800ac50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac42:	f107 0310 	add.w	r3, r7, #16
 800ac46:	4618      	mov	r0, r3
 800ac48:	f000 feba 	bl	800b9c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac50:	f001 fda0 	bl	800c794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac54:	f000 fc26 	bl	800b4a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac58:	f001 fd6c 	bl	800c734 <vPortEnterCritical>
 800ac5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac62:	b25b      	sxtb	r3, r3
 800ac64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac68:	d103      	bne.n	800ac72 <xQueueReceive+0x122>
 800ac6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac78:	b25b      	sxtb	r3, r3
 800ac7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac7e:	d103      	bne.n	800ac88 <xQueueReceive+0x138>
 800ac80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac88:	f001 fd84 	bl	800c794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac8c:	1d3a      	adds	r2, r7, #4
 800ac8e:	f107 0310 	add.w	r3, r7, #16
 800ac92:	4611      	mov	r1, r2
 800ac94:	4618      	mov	r0, r3
 800ac96:	f000 fea9 	bl	800b9ec <xTaskCheckForTimeOut>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d123      	bne.n	800ace8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aca2:	f000 f917 	bl	800aed4 <prvIsQueueEmpty>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d017      	beq.n	800acdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800acac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acae:	3324      	adds	r3, #36	; 0x24
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	4611      	mov	r1, r2
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 fdcf 	bl	800b858 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acbc:	f000 f8b8 	bl	800ae30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acc0:	f000 fbfe 	bl	800b4c0 <xTaskResumeAll>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d189      	bne.n	800abde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800acca:	4b10      	ldr	r3, [pc, #64]	; (800ad0c <xQueueReceive+0x1bc>)
 800accc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	e780      	b.n	800abde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800acdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acde:	f000 f8a7 	bl	800ae30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ace2:	f000 fbed 	bl	800b4c0 <xTaskResumeAll>
 800ace6:	e77a      	b.n	800abde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ace8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acea:	f000 f8a1 	bl	800ae30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acee:	f000 fbe7 	bl	800b4c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acf4:	f000 f8ee 	bl	800aed4 <prvIsQueueEmpty>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	f43f af6f 	beq.w	800abde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3730      	adds	r7, #48	; 0x30
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	e000ed04 	.word	0xe000ed04

0800ad10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10d      	bne.n	800ad4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d14d      	bne.n	800add2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 ffbc 	bl	800bcb8 <xTaskPriorityDisinherit>
 800ad40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	609a      	str	r2, [r3, #8]
 800ad48:	e043      	b.n	800add2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d119      	bne.n	800ad84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6858      	ldr	r0, [r3, #4]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad58:	461a      	mov	r2, r3
 800ad5a:	68b9      	ldr	r1, [r7, #8]
 800ad5c:	f002 fd10 	bl	800d780 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad68:	441a      	add	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d32b      	bcc.n	800add2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	605a      	str	r2, [r3, #4]
 800ad82:	e026      	b.n	800add2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	68d8      	ldr	r0, [r3, #12]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	68b9      	ldr	r1, [r7, #8]
 800ad90:	f002 fcf6 	bl	800d780 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	68da      	ldr	r2, [r3, #12]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9c:	425b      	negs	r3, r3
 800ad9e:	441a      	add	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	68da      	ldr	r2, [r3, #12]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d207      	bcs.n	800adc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb8:	425b      	negs	r3, r3
 800adba:	441a      	add	r2, r3
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d105      	bne.n	800add2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	3b01      	subs	r3, #1
 800add0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800adda:	697b      	ldr	r3, [r7, #20]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d018      	beq.n	800ae28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68da      	ldr	r2, [r3, #12]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adfe:	441a      	add	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	68da      	ldr	r2, [r3, #12]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d303      	bcc.n	800ae18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	68d9      	ldr	r1, [r3, #12]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae20:	461a      	mov	r2, r3
 800ae22:	6838      	ldr	r0, [r7, #0]
 800ae24:	f002 fcac 	bl	800d780 <memcpy>
	}
}
 800ae28:	bf00      	nop
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae38:	f001 fc7c 	bl	800c734 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae44:	e011      	b.n	800ae6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d012      	beq.n	800ae74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	3324      	adds	r3, #36	; 0x24
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 fd50 	bl	800b8f8 <xTaskRemoveFromEventList>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae5e:	f000 fe27 	bl	800bab0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	dce9      	bgt.n	800ae46 <prvUnlockQueue+0x16>
 800ae72:	e000      	b.n	800ae76 <prvUnlockQueue+0x46>
					break;
 800ae74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	22ff      	movs	r2, #255	; 0xff
 800ae7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ae7e:	f001 fc89 	bl	800c794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae82:	f001 fc57 	bl	800c734 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae8e:	e011      	b.n	800aeb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d012      	beq.n	800aebe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	3310      	adds	r3, #16
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fd2b 	bl	800b8f8 <xTaskRemoveFromEventList>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aea8:	f000 fe02 	bl	800bab0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aeac:	7bbb      	ldrb	r3, [r7, #14]
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aeb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dce9      	bgt.n	800ae90 <prvUnlockQueue+0x60>
 800aebc:	e000      	b.n	800aec0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aebe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	22ff      	movs	r2, #255	; 0xff
 800aec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aec8:	f001 fc64 	bl	800c794 <vPortExitCritical>
}
 800aecc:	bf00      	nop
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aedc:	f001 fc2a 	bl	800c734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d102      	bne.n	800aeee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aee8:	2301      	movs	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	e001      	b.n	800aef2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aef2:	f001 fc4f 	bl	800c794 <vPortExitCritical>

	return xReturn;
 800aef6:	68fb      	ldr	r3, [r7, #12]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af08:	f001 fc14 	bl	800c734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af14:	429a      	cmp	r2, r3
 800af16:	d102      	bne.n	800af1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af18:	2301      	movs	r3, #1
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	e001      	b.n	800af22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af22:	f001 fc37 	bl	800c794 <vPortExitCritical>

	return xReturn;
 800af26:	68fb      	ldr	r3, [r7, #12]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af3a:	2300      	movs	r3, #0
 800af3c:	60fb      	str	r3, [r7, #12]
 800af3e:	e014      	b.n	800af6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af40:	4a0f      	ldr	r2, [pc, #60]	; (800af80 <vQueueAddToRegistry+0x50>)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10b      	bne.n	800af64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af4c:	490c      	ldr	r1, [pc, #48]	; (800af80 <vQueueAddToRegistry+0x50>)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af56:	4a0a      	ldr	r2, [pc, #40]	; (800af80 <vQueueAddToRegistry+0x50>)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	00db      	lsls	r3, r3, #3
 800af5c:	4413      	add	r3, r2
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af62:	e006      	b.n	800af72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	3301      	adds	r3, #1
 800af68:	60fb      	str	r3, [r7, #12]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2b07      	cmp	r3, #7
 800af6e:	d9e7      	bls.n	800af40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af70:	bf00      	nop
 800af72:	bf00      	nop
 800af74:	3714      	adds	r7, #20
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	20000d44 	.word	0x20000d44

0800af84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af94:	f001 fbce 	bl	800c734 <vPortEnterCritical>
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af9e:	b25b      	sxtb	r3, r3
 800afa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afa4:	d103      	bne.n	800afae <vQueueWaitForMessageRestricted+0x2a>
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afb4:	b25b      	sxtb	r3, r3
 800afb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afba:	d103      	bne.n	800afc4 <vQueueWaitForMessageRestricted+0x40>
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afc4:	f001 fbe6 	bl	800c794 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d106      	bne.n	800afde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	3324      	adds	r3, #36	; 0x24
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	68b9      	ldr	r1, [r7, #8]
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 fc61 	bl	800b8a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800afde:	6978      	ldr	r0, [r7, #20]
 800afe0:	f7ff ff26 	bl	800ae30 <prvUnlockQueue>
	}
 800afe4:	bf00      	nop
 800afe6:	3718      	adds	r7, #24
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800afec:	b580      	push	{r7, lr}
 800afee:	b08e      	sub	sp, #56	; 0x38
 800aff0:	af04      	add	r7, sp, #16
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
 800aff8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800affa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affc:	2b00      	cmp	r3, #0
 800affe:	d10a      	bne.n	800b016 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	623b      	str	r3, [r7, #32]
}
 800b012:	bf00      	nop
 800b014:	e7fe      	b.n	800b014 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10a      	bne.n	800b032 <xTaskCreateStatic+0x46>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	61fb      	str	r3, [r7, #28]
}
 800b02e:	bf00      	nop
 800b030:	e7fe      	b.n	800b030 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b032:	23bc      	movs	r3, #188	; 0xbc
 800b034:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2bbc      	cmp	r3, #188	; 0xbc
 800b03a:	d00a      	beq.n	800b052 <xTaskCreateStatic+0x66>
	__asm volatile
 800b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b040:	f383 8811 	msr	BASEPRI, r3
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	61bb      	str	r3, [r7, #24]
}
 800b04e:	bf00      	nop
 800b050:	e7fe      	b.n	800b050 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b052:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b056:	2b00      	cmp	r3, #0
 800b058:	d01e      	beq.n	800b098 <xTaskCreateStatic+0xac>
 800b05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d01b      	beq.n	800b098 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b068:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06c:	2202      	movs	r2, #2
 800b06e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b072:	2300      	movs	r3, #0
 800b074:	9303      	str	r3, [sp, #12]
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b078:	9302      	str	r3, [sp, #8]
 800b07a:	f107 0314 	add.w	r3, r7, #20
 800b07e:	9301      	str	r3, [sp, #4]
 800b080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	68b9      	ldr	r1, [r7, #8]
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f000 f850 	bl	800b130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b092:	f000 f8f3 	bl	800b27c <prvAddNewTaskToReadyList>
 800b096:	e001      	b.n	800b09c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b098:	2300      	movs	r3, #0
 800b09a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b09c:	697b      	ldr	r3, [r7, #20]
	}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3728      	adds	r7, #40	; 0x28
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b08c      	sub	sp, #48	; 0x30
 800b0aa:	af04      	add	r7, sp, #16
 800b0ac:	60f8      	str	r0, [r7, #12]
 800b0ae:	60b9      	str	r1, [r7, #8]
 800b0b0:	603b      	str	r3, [r7, #0]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b0b6:	88fb      	ldrh	r3, [r7, #6]
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f001 fc5c 	bl	800c978 <pvPortMalloc>
 800b0c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00e      	beq.n	800b0e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b0c8:	20bc      	movs	r0, #188	; 0xbc
 800b0ca:	f001 fc55 	bl	800c978 <pvPortMalloc>
 800b0ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	631a      	str	r2, [r3, #48]	; 0x30
 800b0dc:	e005      	b.n	800b0ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b0de:	6978      	ldr	r0, [r7, #20]
 800b0e0:	f001 fd16 	bl	800cb10 <vPortFree>
 800b0e4:	e001      	b.n	800b0ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d017      	beq.n	800b120 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b0f8:	88fa      	ldrh	r2, [r7, #6]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	9303      	str	r3, [sp, #12]
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	9302      	str	r3, [sp, #8]
 800b102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	68b9      	ldr	r1, [r7, #8]
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f000 f80e 	bl	800b130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b114:	69f8      	ldr	r0, [r7, #28]
 800b116:	f000 f8b1 	bl	800b27c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b11a:	2301      	movs	r3, #1
 800b11c:	61bb      	str	r3, [r7, #24]
 800b11e:	e002      	b.n	800b126 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b124:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b126:	69bb      	ldr	r3, [r7, #24]
	}
 800b128:	4618      	mov	r0, r3
 800b12a:	3720      	adds	r7, #32
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b088      	sub	sp, #32
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
 800b13c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b140:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	461a      	mov	r2, r3
 800b148:	21a5      	movs	r1, #165	; 0xa5
 800b14a:	f002 fb27 	bl	800d79c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b158:	3b01      	subs	r3, #1
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	f023 0307 	bic.w	r3, r3, #7
 800b166:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	f003 0307 	and.w	r3, r3, #7
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00a      	beq.n	800b188 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	617b      	str	r3, [r7, #20]
}
 800b184:	bf00      	nop
 800b186:	e7fe      	b.n	800b186 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d01f      	beq.n	800b1ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b18e:	2300      	movs	r3, #0
 800b190:	61fb      	str	r3, [r7, #28]
 800b192:	e012      	b.n	800b1ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	4413      	add	r3, r2
 800b19a:	7819      	ldrb	r1, [r3, #0]
 800b19c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	3334      	adds	r3, #52	; 0x34
 800b1a4:	460a      	mov	r2, r1
 800b1a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b1a8:	68ba      	ldr	r2, [r7, #8]
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	781b      	ldrb	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d006      	beq.n	800b1c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	61fb      	str	r3, [r7, #28]
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	2b0f      	cmp	r3, #15
 800b1be:	d9e9      	bls.n	800b194 <prvInitialiseNewTask+0x64>
 800b1c0:	e000      	b.n	800b1c4 <prvInitialiseNewTask+0x94>
			{
				break;
 800b1c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1cc:	e003      	b.n	800b1d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	2b37      	cmp	r3, #55	; 0x37
 800b1da:	d901      	bls.n	800b1e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1dc:	2337      	movs	r3, #55	; 0x37
 800b1de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7ff f978 	bl	800a4ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fe:	3318      	adds	r3, #24
 800b200:	4618      	mov	r0, r3
 800b202:	f7ff f973 	bl	800a4ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b20a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b214:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b21a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21e:	2200      	movs	r2, #0
 800b220:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b226:	2200      	movs	r2, #0
 800b228:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22e:	3354      	adds	r3, #84	; 0x54
 800b230:	2260      	movs	r2, #96	; 0x60
 800b232:	2100      	movs	r1, #0
 800b234:	4618      	mov	r0, r3
 800b236:	f002 fab1 	bl	800d79c <memset>
 800b23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23c:	4a0c      	ldr	r2, [pc, #48]	; (800b270 <prvInitialiseNewTask+0x140>)
 800b23e:	659a      	str	r2, [r3, #88]	; 0x58
 800b240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b242:	4a0c      	ldr	r2, [pc, #48]	; (800b274 <prvInitialiseNewTask+0x144>)
 800b244:	65da      	str	r2, [r3, #92]	; 0x5c
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	4a0b      	ldr	r2, [pc, #44]	; (800b278 <prvInitialiseNewTask+0x148>)
 800b24a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	68f9      	ldr	r1, [r7, #12]
 800b250:	69b8      	ldr	r0, [r7, #24]
 800b252:	f001 f941 	bl	800c4d8 <pxPortInitialiseStack>
 800b256:	4602      	mov	r2, r0
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d002      	beq.n	800b268 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b266:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b268:	bf00      	nop
 800b26a:	3720      	adds	r7, #32
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	0800da58 	.word	0x0800da58
 800b274:	0800da78 	.word	0x0800da78
 800b278:	0800da38 	.word	0x0800da38

0800b27c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b284:	f001 fa56 	bl	800c734 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b288:	4b2d      	ldr	r3, [pc, #180]	; (800b340 <prvAddNewTaskToReadyList+0xc4>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3301      	adds	r3, #1
 800b28e:	4a2c      	ldr	r2, [pc, #176]	; (800b340 <prvAddNewTaskToReadyList+0xc4>)
 800b290:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b292:	4b2c      	ldr	r3, [pc, #176]	; (800b344 <prvAddNewTaskToReadyList+0xc8>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d109      	bne.n	800b2ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b29a:	4a2a      	ldr	r2, [pc, #168]	; (800b344 <prvAddNewTaskToReadyList+0xc8>)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2a0:	4b27      	ldr	r3, [pc, #156]	; (800b340 <prvAddNewTaskToReadyList+0xc4>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d110      	bne.n	800b2ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2a8:	f000 fc26 	bl	800baf8 <prvInitialiseTaskLists>
 800b2ac:	e00d      	b.n	800b2ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b2ae:	4b26      	ldr	r3, [pc, #152]	; (800b348 <prvAddNewTaskToReadyList+0xcc>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d109      	bne.n	800b2ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2b6:	4b23      	ldr	r3, [pc, #140]	; (800b344 <prvAddNewTaskToReadyList+0xc8>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d802      	bhi.n	800b2ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2c4:	4a1f      	ldr	r2, [pc, #124]	; (800b344 <prvAddNewTaskToReadyList+0xc8>)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2ca:	4b20      	ldr	r3, [pc, #128]	; (800b34c <prvAddNewTaskToReadyList+0xd0>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	4a1e      	ldr	r2, [pc, #120]	; (800b34c <prvAddNewTaskToReadyList+0xd0>)
 800b2d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b2d4:	4b1d      	ldr	r3, [pc, #116]	; (800b34c <prvAddNewTaskToReadyList+0xd0>)
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e0:	4b1b      	ldr	r3, [pc, #108]	; (800b350 <prvAddNewTaskToReadyList+0xd4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d903      	bls.n	800b2f0 <prvAddNewTaskToReadyList+0x74>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ec:	4a18      	ldr	r2, [pc, #96]	; (800b350 <prvAddNewTaskToReadyList+0xd4>)
 800b2ee:	6013      	str	r3, [r2, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4a15      	ldr	r2, [pc, #84]	; (800b354 <prvAddNewTaskToReadyList+0xd8>)
 800b2fe:	441a      	add	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	3304      	adds	r3, #4
 800b304:	4619      	mov	r1, r3
 800b306:	4610      	mov	r0, r2
 800b308:	f7ff f8fd 	bl	800a506 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b30c:	f001 fa42 	bl	800c794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b310:	4b0d      	ldr	r3, [pc, #52]	; (800b348 <prvAddNewTaskToReadyList+0xcc>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00e      	beq.n	800b336 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b318:	4b0a      	ldr	r3, [pc, #40]	; (800b344 <prvAddNewTaskToReadyList+0xc8>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b322:	429a      	cmp	r2, r3
 800b324:	d207      	bcs.n	800b336 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b326:	4b0c      	ldr	r3, [pc, #48]	; (800b358 <prvAddNewTaskToReadyList+0xdc>)
 800b328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b32c:	601a      	str	r2, [r3, #0]
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b336:	bf00      	nop
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	20001258 	.word	0x20001258
 800b344:	20000d84 	.word	0x20000d84
 800b348:	20001264 	.word	0x20001264
 800b34c:	20001274 	.word	0x20001274
 800b350:	20001260 	.word	0x20001260
 800b354:	20000d88 	.word	0x20000d88
 800b358:	e000ed04 	.word	0xe000ed04

0800b35c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b364:	2300      	movs	r3, #0
 800b366:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d017      	beq.n	800b39e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b36e:	4b13      	ldr	r3, [pc, #76]	; (800b3bc <vTaskDelay+0x60>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00a      	beq.n	800b38c <vTaskDelay+0x30>
	__asm volatile
 800b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37a:	f383 8811 	msr	BASEPRI, r3
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	f3bf 8f4f 	dsb	sy
 800b386:	60bb      	str	r3, [r7, #8]
}
 800b388:	bf00      	nop
 800b38a:	e7fe      	b.n	800b38a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b38c:	f000 f88a 	bl	800b4a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b390:	2100      	movs	r1, #0
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fcfe 	bl	800bd94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b398:	f000 f892 	bl	800b4c0 <xTaskResumeAll>
 800b39c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d107      	bne.n	800b3b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b3a4:	4b06      	ldr	r3, [pc, #24]	; (800b3c0 <vTaskDelay+0x64>)
 800b3a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3b4:	bf00      	nop
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	20001280 	.word	0x20001280
 800b3c0:	e000ed04 	.word	0xe000ed04

0800b3c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b08a      	sub	sp, #40	; 0x28
 800b3c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b3d2:	463a      	mov	r2, r7
 800b3d4:	1d39      	adds	r1, r7, #4
 800b3d6:	f107 0308 	add.w	r3, r7, #8
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7ff f832 	bl	800a444 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	9202      	str	r2, [sp, #8]
 800b3e8:	9301      	str	r3, [sp, #4]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	460a      	mov	r2, r1
 800b3f2:	4924      	ldr	r1, [pc, #144]	; (800b484 <vTaskStartScheduler+0xc0>)
 800b3f4:	4824      	ldr	r0, [pc, #144]	; (800b488 <vTaskStartScheduler+0xc4>)
 800b3f6:	f7ff fdf9 	bl	800afec <xTaskCreateStatic>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	4a23      	ldr	r2, [pc, #140]	; (800b48c <vTaskStartScheduler+0xc8>)
 800b3fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b400:	4b22      	ldr	r3, [pc, #136]	; (800b48c <vTaskStartScheduler+0xc8>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d002      	beq.n	800b40e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b408:	2301      	movs	r3, #1
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	e001      	b.n	800b412 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b40e:	2300      	movs	r3, #0
 800b410:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	2b01      	cmp	r3, #1
 800b416:	d102      	bne.n	800b41e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b418:	f000 fd10 	bl	800be3c <xTimerCreateTimerTask>
 800b41c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d11b      	bne.n	800b45c <vTaskStartScheduler+0x98>
	__asm volatile
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	613b      	str	r3, [r7, #16]
}
 800b436:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b438:	4b15      	ldr	r3, [pc, #84]	; (800b490 <vTaskStartScheduler+0xcc>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3354      	adds	r3, #84	; 0x54
 800b43e:	4a15      	ldr	r2, [pc, #84]	; (800b494 <vTaskStartScheduler+0xd0>)
 800b440:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b442:	4b15      	ldr	r3, [pc, #84]	; (800b498 <vTaskStartScheduler+0xd4>)
 800b444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b448:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b44a:	4b14      	ldr	r3, [pc, #80]	; (800b49c <vTaskStartScheduler+0xd8>)
 800b44c:	2201      	movs	r2, #1
 800b44e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b450:	4b13      	ldr	r3, [pc, #76]	; (800b4a0 <vTaskStartScheduler+0xdc>)
 800b452:	2200      	movs	r2, #0
 800b454:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b456:	f001 f8cb 	bl	800c5f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b45a:	e00e      	b.n	800b47a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b462:	d10a      	bne.n	800b47a <vTaskStartScheduler+0xb6>
	__asm volatile
 800b464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b468:	f383 8811 	msr	BASEPRI, r3
 800b46c:	f3bf 8f6f 	isb	sy
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	60fb      	str	r3, [r7, #12]
}
 800b476:	bf00      	nop
 800b478:	e7fe      	b.n	800b478 <vTaskStartScheduler+0xb4>
}
 800b47a:	bf00      	nop
 800b47c:	3718      	adds	r7, #24
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	0800d964 	.word	0x0800d964
 800b488:	0800bac9 	.word	0x0800bac9
 800b48c:	2000127c 	.word	0x2000127c
 800b490:	20000d84 	.word	0x20000d84
 800b494:	20000100 	.word	0x20000100
 800b498:	20001278 	.word	0x20001278
 800b49c:	20001264 	.word	0x20001264
 800b4a0:	2000125c 	.word	0x2000125c

0800b4a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b4a8:	4b04      	ldr	r3, [pc, #16]	; (800b4bc <vTaskSuspendAll+0x18>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	4a03      	ldr	r2, [pc, #12]	; (800b4bc <vTaskSuspendAll+0x18>)
 800b4b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b4b2:	bf00      	nop
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	20001280 	.word	0x20001280

0800b4c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4ce:	4b42      	ldr	r3, [pc, #264]	; (800b5d8 <xTaskResumeAll+0x118>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10a      	bne.n	800b4ec <xTaskResumeAll+0x2c>
	__asm volatile
 800b4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	603b      	str	r3, [r7, #0]
}
 800b4e8:	bf00      	nop
 800b4ea:	e7fe      	b.n	800b4ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b4ec:	f001 f922 	bl	800c734 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b4f0:	4b39      	ldr	r3, [pc, #228]	; (800b5d8 <xTaskResumeAll+0x118>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	4a38      	ldr	r2, [pc, #224]	; (800b5d8 <xTaskResumeAll+0x118>)
 800b4f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4fa:	4b37      	ldr	r3, [pc, #220]	; (800b5d8 <xTaskResumeAll+0x118>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d162      	bne.n	800b5c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b502:	4b36      	ldr	r3, [pc, #216]	; (800b5dc <xTaskResumeAll+0x11c>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d05e      	beq.n	800b5c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b50a:	e02f      	b.n	800b56c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b50c:	4b34      	ldr	r3, [pc, #208]	; (800b5e0 <xTaskResumeAll+0x120>)
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	3318      	adds	r3, #24
 800b518:	4618      	mov	r0, r3
 800b51a:	f7ff f851 	bl	800a5c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	3304      	adds	r3, #4
 800b522:	4618      	mov	r0, r3
 800b524:	f7ff f84c 	bl	800a5c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52c:	4b2d      	ldr	r3, [pc, #180]	; (800b5e4 <xTaskResumeAll+0x124>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	429a      	cmp	r2, r3
 800b532:	d903      	bls.n	800b53c <xTaskResumeAll+0x7c>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b538:	4a2a      	ldr	r2, [pc, #168]	; (800b5e4 <xTaskResumeAll+0x124>)
 800b53a:	6013      	str	r3, [r2, #0]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b540:	4613      	mov	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	4413      	add	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4a27      	ldr	r2, [pc, #156]	; (800b5e8 <xTaskResumeAll+0x128>)
 800b54a:	441a      	add	r2, r3
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3304      	adds	r3, #4
 800b550:	4619      	mov	r1, r3
 800b552:	4610      	mov	r0, r2
 800b554:	f7fe ffd7 	bl	800a506 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55c:	4b23      	ldr	r3, [pc, #140]	; (800b5ec <xTaskResumeAll+0x12c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b562:	429a      	cmp	r2, r3
 800b564:	d302      	bcc.n	800b56c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b566:	4b22      	ldr	r3, [pc, #136]	; (800b5f0 <xTaskResumeAll+0x130>)
 800b568:	2201      	movs	r2, #1
 800b56a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b56c:	4b1c      	ldr	r3, [pc, #112]	; (800b5e0 <xTaskResumeAll+0x120>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1cb      	bne.n	800b50c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b57a:	f000 fb5f 	bl	800bc3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b57e:	4b1d      	ldr	r3, [pc, #116]	; (800b5f4 <xTaskResumeAll+0x134>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d010      	beq.n	800b5ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b58a:	f000 f847 	bl	800b61c <xTaskIncrementTick>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d002      	beq.n	800b59a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b594:	4b16      	ldr	r3, [pc, #88]	; (800b5f0 <xTaskResumeAll+0x130>)
 800b596:	2201      	movs	r2, #1
 800b598:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1f1      	bne.n	800b58a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b5a6:	4b13      	ldr	r3, [pc, #76]	; (800b5f4 <xTaskResumeAll+0x134>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5ac:	4b10      	ldr	r3, [pc, #64]	; (800b5f0 <xTaskResumeAll+0x130>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d009      	beq.n	800b5c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5b8:	4b0f      	ldr	r3, [pc, #60]	; (800b5f8 <xTaskResumeAll+0x138>)
 800b5ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5be:	601a      	str	r2, [r3, #0]
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5c8:	f001 f8e4 	bl	800c794 <vPortExitCritical>

	return xAlreadyYielded;
 800b5cc:	68bb      	ldr	r3, [r7, #8]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20001280 	.word	0x20001280
 800b5dc:	20001258 	.word	0x20001258
 800b5e0:	20001218 	.word	0x20001218
 800b5e4:	20001260 	.word	0x20001260
 800b5e8:	20000d88 	.word	0x20000d88
 800b5ec:	20000d84 	.word	0x20000d84
 800b5f0:	2000126c 	.word	0x2000126c
 800b5f4:	20001268 	.word	0x20001268
 800b5f8:	e000ed04 	.word	0xe000ed04

0800b5fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b602:	4b05      	ldr	r3, [pc, #20]	; (800b618 <xTaskGetTickCount+0x1c>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b608:	687b      	ldr	r3, [r7, #4]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	370c      	adds	r7, #12
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	2000125c 	.word	0x2000125c

0800b61c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b622:	2300      	movs	r3, #0
 800b624:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b626:	4b4f      	ldr	r3, [pc, #316]	; (800b764 <xTaskIncrementTick+0x148>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f040 808f 	bne.w	800b74e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b630:	4b4d      	ldr	r3, [pc, #308]	; (800b768 <xTaskIncrementTick+0x14c>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	3301      	adds	r3, #1
 800b636:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b638:	4a4b      	ldr	r2, [pc, #300]	; (800b768 <xTaskIncrementTick+0x14c>)
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d120      	bne.n	800b686 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b644:	4b49      	ldr	r3, [pc, #292]	; (800b76c <xTaskIncrementTick+0x150>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00a      	beq.n	800b664 <xTaskIncrementTick+0x48>
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	603b      	str	r3, [r7, #0]
}
 800b660:	bf00      	nop
 800b662:	e7fe      	b.n	800b662 <xTaskIncrementTick+0x46>
 800b664:	4b41      	ldr	r3, [pc, #260]	; (800b76c <xTaskIncrementTick+0x150>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	60fb      	str	r3, [r7, #12]
 800b66a:	4b41      	ldr	r3, [pc, #260]	; (800b770 <xTaskIncrementTick+0x154>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a3f      	ldr	r2, [pc, #252]	; (800b76c <xTaskIncrementTick+0x150>)
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	4a3f      	ldr	r2, [pc, #252]	; (800b770 <xTaskIncrementTick+0x154>)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	4b3e      	ldr	r3, [pc, #248]	; (800b774 <xTaskIncrementTick+0x158>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3301      	adds	r3, #1
 800b67e:	4a3d      	ldr	r2, [pc, #244]	; (800b774 <xTaskIncrementTick+0x158>)
 800b680:	6013      	str	r3, [r2, #0]
 800b682:	f000 fadb 	bl	800bc3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b686:	4b3c      	ldr	r3, [pc, #240]	; (800b778 <xTaskIncrementTick+0x15c>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	693a      	ldr	r2, [r7, #16]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d349      	bcc.n	800b724 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b690:	4b36      	ldr	r3, [pc, #216]	; (800b76c <xTaskIncrementTick+0x150>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d104      	bne.n	800b6a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b69a:	4b37      	ldr	r3, [pc, #220]	; (800b778 <xTaskIncrementTick+0x15c>)
 800b69c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6a0:	601a      	str	r2, [r3, #0]
					break;
 800b6a2:	e03f      	b.n	800b724 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6a4:	4b31      	ldr	r3, [pc, #196]	; (800b76c <xTaskIncrementTick+0x150>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6b4:	693a      	ldr	r2, [r7, #16]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d203      	bcs.n	800b6c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6bc:	4a2e      	ldr	r2, [pc, #184]	; (800b778 <xTaskIncrementTick+0x15c>)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b6c2:	e02f      	b.n	800b724 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	3304      	adds	r3, #4
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fe ff79 	bl	800a5c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d004      	beq.n	800b6e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	3318      	adds	r3, #24
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fe ff70 	bl	800a5c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e4:	4b25      	ldr	r3, [pc, #148]	; (800b77c <xTaskIncrementTick+0x160>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d903      	bls.n	800b6f4 <xTaskIncrementTick+0xd8>
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	4a22      	ldr	r2, [pc, #136]	; (800b77c <xTaskIncrementTick+0x160>)
 800b6f2:	6013      	str	r3, [r2, #0]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4413      	add	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4a1f      	ldr	r2, [pc, #124]	; (800b780 <xTaskIncrementTick+0x164>)
 800b702:	441a      	add	r2, r3
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	3304      	adds	r3, #4
 800b708:	4619      	mov	r1, r3
 800b70a:	4610      	mov	r0, r2
 800b70c:	f7fe fefb 	bl	800a506 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b714:	4b1b      	ldr	r3, [pc, #108]	; (800b784 <xTaskIncrementTick+0x168>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d3b8      	bcc.n	800b690 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b71e:	2301      	movs	r3, #1
 800b720:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b722:	e7b5      	b.n	800b690 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b724:	4b17      	ldr	r3, [pc, #92]	; (800b784 <xTaskIncrementTick+0x168>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72a:	4915      	ldr	r1, [pc, #84]	; (800b780 <xTaskIncrementTick+0x164>)
 800b72c:	4613      	mov	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4413      	add	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	440b      	add	r3, r1
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d901      	bls.n	800b740 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b73c:	2301      	movs	r3, #1
 800b73e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b740:	4b11      	ldr	r3, [pc, #68]	; (800b788 <xTaskIncrementTick+0x16c>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d007      	beq.n	800b758 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b748:	2301      	movs	r3, #1
 800b74a:	617b      	str	r3, [r7, #20]
 800b74c:	e004      	b.n	800b758 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b74e:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <xTaskIncrementTick+0x170>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3301      	adds	r3, #1
 800b754:	4a0d      	ldr	r2, [pc, #52]	; (800b78c <xTaskIncrementTick+0x170>)
 800b756:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b758:	697b      	ldr	r3, [r7, #20]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3718      	adds	r7, #24
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	20001280 	.word	0x20001280
 800b768:	2000125c 	.word	0x2000125c
 800b76c:	20001210 	.word	0x20001210
 800b770:	20001214 	.word	0x20001214
 800b774:	20001270 	.word	0x20001270
 800b778:	20001278 	.word	0x20001278
 800b77c:	20001260 	.word	0x20001260
 800b780:	20000d88 	.word	0x20000d88
 800b784:	20000d84 	.word	0x20000d84
 800b788:	2000126c 	.word	0x2000126c
 800b78c:	20001268 	.word	0x20001268

0800b790 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b796:	4b2a      	ldr	r3, [pc, #168]	; (800b840 <vTaskSwitchContext+0xb0>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d003      	beq.n	800b7a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b79e:	4b29      	ldr	r3, [pc, #164]	; (800b844 <vTaskSwitchContext+0xb4>)
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7a4:	e046      	b.n	800b834 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b7a6:	4b27      	ldr	r3, [pc, #156]	; (800b844 <vTaskSwitchContext+0xb4>)
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ac:	4b26      	ldr	r3, [pc, #152]	; (800b848 <vTaskSwitchContext+0xb8>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	60fb      	str	r3, [r7, #12]
 800b7b2:	e010      	b.n	800b7d6 <vTaskSwitchContext+0x46>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d10a      	bne.n	800b7d0 <vTaskSwitchContext+0x40>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	607b      	str	r3, [r7, #4]
}
 800b7cc:	bf00      	nop
 800b7ce:	e7fe      	b.n	800b7ce <vTaskSwitchContext+0x3e>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	60fb      	str	r3, [r7, #12]
 800b7d6:	491d      	ldr	r1, [pc, #116]	; (800b84c <vTaskSwitchContext+0xbc>)
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4413      	add	r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	440b      	add	r3, r1
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d0e4      	beq.n	800b7b4 <vTaskSwitchContext+0x24>
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	4413      	add	r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	4a15      	ldr	r2, [pc, #84]	; (800b84c <vTaskSwitchContext+0xbc>)
 800b7f6:	4413      	add	r3, r2
 800b7f8:	60bb      	str	r3, [r7, #8]
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	685a      	ldr	r2, [r3, #4]
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	605a      	str	r2, [r3, #4]
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	685a      	ldr	r2, [r3, #4]
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	3308      	adds	r3, #8
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d104      	bne.n	800b81a <vTaskSwitchContext+0x8a>
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	685a      	ldr	r2, [r3, #4]
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	605a      	str	r2, [r3, #4]
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	4a0b      	ldr	r2, [pc, #44]	; (800b850 <vTaskSwitchContext+0xc0>)
 800b822:	6013      	str	r3, [r2, #0]
 800b824:	4a08      	ldr	r2, [pc, #32]	; (800b848 <vTaskSwitchContext+0xb8>)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b82a:	4b09      	ldr	r3, [pc, #36]	; (800b850 <vTaskSwitchContext+0xc0>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	3354      	adds	r3, #84	; 0x54
 800b830:	4a08      	ldr	r2, [pc, #32]	; (800b854 <vTaskSwitchContext+0xc4>)
 800b832:	6013      	str	r3, [r2, #0]
}
 800b834:	bf00      	nop
 800b836:	3714      	adds	r7, #20
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	20001280 	.word	0x20001280
 800b844:	2000126c 	.word	0x2000126c
 800b848:	20001260 	.word	0x20001260
 800b84c:	20000d88 	.word	0x20000d88
 800b850:	20000d84 	.word	0x20000d84
 800b854:	20000100 	.word	0x20000100

0800b858 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d10a      	bne.n	800b87e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86c:	f383 8811 	msr	BASEPRI, r3
 800b870:	f3bf 8f6f 	isb	sy
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	60fb      	str	r3, [r7, #12]
}
 800b87a:	bf00      	nop
 800b87c:	e7fe      	b.n	800b87c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b87e:	4b07      	ldr	r3, [pc, #28]	; (800b89c <vTaskPlaceOnEventList+0x44>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3318      	adds	r3, #24
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7fe fe61 	bl	800a54e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b88c:	2101      	movs	r1, #1
 800b88e:	6838      	ldr	r0, [r7, #0]
 800b890:	f000 fa80 	bl	800bd94 <prvAddCurrentTaskToDelayedList>
}
 800b894:	bf00      	nop
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	20000d84 	.word	0x20000d84

0800b8a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b086      	sub	sp, #24
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d10a      	bne.n	800b8c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b6:	f383 8811 	msr	BASEPRI, r3
 800b8ba:	f3bf 8f6f 	isb	sy
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	617b      	str	r3, [r7, #20]
}
 800b8c4:	bf00      	nop
 800b8c6:	e7fe      	b.n	800b8c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8c8:	4b0a      	ldr	r3, [pc, #40]	; (800b8f4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3318      	adds	r3, #24
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f7fe fe18 	bl	800a506 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d002      	beq.n	800b8e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b8dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b8e2:	6879      	ldr	r1, [r7, #4]
 800b8e4:	68b8      	ldr	r0, [r7, #8]
 800b8e6:	f000 fa55 	bl	800bd94 <prvAddCurrentTaskToDelayedList>
	}
 800b8ea:	bf00      	nop
 800b8ec:	3718      	adds	r7, #24
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	20000d84 	.word	0x20000d84

0800b8f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10a      	bne.n	800b924 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	60fb      	str	r3, [r7, #12]
}
 800b920:	bf00      	nop
 800b922:	e7fe      	b.n	800b922 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	3318      	adds	r3, #24
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fe fe49 	bl	800a5c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b92e:	4b1e      	ldr	r3, [pc, #120]	; (800b9a8 <xTaskRemoveFromEventList+0xb0>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d11d      	bne.n	800b972 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	3304      	adds	r3, #4
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fe fe40 	bl	800a5c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b944:	4b19      	ldr	r3, [pc, #100]	; (800b9ac <xTaskRemoveFromEventList+0xb4>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d903      	bls.n	800b954 <xTaskRemoveFromEventList+0x5c>
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b950:	4a16      	ldr	r2, [pc, #88]	; (800b9ac <xTaskRemoveFromEventList+0xb4>)
 800b952:	6013      	str	r3, [r2, #0]
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b958:	4613      	mov	r3, r2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	4413      	add	r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	4a13      	ldr	r2, [pc, #76]	; (800b9b0 <xTaskRemoveFromEventList+0xb8>)
 800b962:	441a      	add	r2, r3
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	3304      	adds	r3, #4
 800b968:	4619      	mov	r1, r3
 800b96a:	4610      	mov	r0, r2
 800b96c:	f7fe fdcb 	bl	800a506 <vListInsertEnd>
 800b970:	e005      	b.n	800b97e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	3318      	adds	r3, #24
 800b976:	4619      	mov	r1, r3
 800b978:	480e      	ldr	r0, [pc, #56]	; (800b9b4 <xTaskRemoveFromEventList+0xbc>)
 800b97a:	f7fe fdc4 	bl	800a506 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b982:	4b0d      	ldr	r3, [pc, #52]	; (800b9b8 <xTaskRemoveFromEventList+0xc0>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b988:	429a      	cmp	r2, r3
 800b98a:	d905      	bls.n	800b998 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b98c:	2301      	movs	r3, #1
 800b98e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b990:	4b0a      	ldr	r3, [pc, #40]	; (800b9bc <xTaskRemoveFromEventList+0xc4>)
 800b992:	2201      	movs	r2, #1
 800b994:	601a      	str	r2, [r3, #0]
 800b996:	e001      	b.n	800b99c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b998:	2300      	movs	r3, #0
 800b99a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b99c:	697b      	ldr	r3, [r7, #20]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20001280 	.word	0x20001280
 800b9ac:	20001260 	.word	0x20001260
 800b9b0:	20000d88 	.word	0x20000d88
 800b9b4:	20001218 	.word	0x20001218
 800b9b8:	20000d84 	.word	0x20000d84
 800b9bc:	2000126c 	.word	0x2000126c

0800b9c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9c8:	4b06      	ldr	r3, [pc, #24]	; (800b9e4 <vTaskInternalSetTimeOutState+0x24>)
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9d0:	4b05      	ldr	r3, [pc, #20]	; (800b9e8 <vTaskInternalSetTimeOutState+0x28>)
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	605a      	str	r2, [r3, #4]
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	20001270 	.word	0x20001270
 800b9e8:	2000125c 	.word	0x2000125c

0800b9ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b088      	sub	sp, #32
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10a      	bne.n	800ba12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	613b      	str	r3, [r7, #16]
}
 800ba0e:	bf00      	nop
 800ba10:	e7fe      	b.n	800ba10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10a      	bne.n	800ba2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ba18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	60fb      	str	r3, [r7, #12]
}
 800ba2a:	bf00      	nop
 800ba2c:	e7fe      	b.n	800ba2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ba2e:	f000 fe81 	bl	800c734 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba32:	4b1d      	ldr	r3, [pc, #116]	; (800baa8 <xTaskCheckForTimeOut+0xbc>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	69ba      	ldr	r2, [r7, #24]
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba4a:	d102      	bne.n	800ba52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	61fb      	str	r3, [r7, #28]
 800ba50:	e023      	b.n	800ba9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	4b15      	ldr	r3, [pc, #84]	; (800baac <xTaskCheckForTimeOut+0xc0>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d007      	beq.n	800ba6e <xTaskCheckForTimeOut+0x82>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	69ba      	ldr	r2, [r7, #24]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d302      	bcc.n	800ba6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	61fb      	str	r3, [r7, #28]
 800ba6c:	e015      	b.n	800ba9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d20b      	bcs.n	800ba90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	1ad2      	subs	r2, r2, r3
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f7ff ff9b 	bl	800b9c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	61fb      	str	r3, [r7, #28]
 800ba8e:	e004      	b.n	800ba9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2200      	movs	r2, #0
 800ba94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba96:	2301      	movs	r3, #1
 800ba98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba9a:	f000 fe7b 	bl	800c794 <vPortExitCritical>

	return xReturn;
 800ba9e:	69fb      	ldr	r3, [r7, #28]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3720      	adds	r7, #32
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	2000125c 	.word	0x2000125c
 800baac:	20001270 	.word	0x20001270

0800bab0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bab0:	b480      	push	{r7}
 800bab2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bab4:	4b03      	ldr	r3, [pc, #12]	; (800bac4 <vTaskMissedYield+0x14>)
 800bab6:	2201      	movs	r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
}
 800baba:	bf00      	nop
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	2000126c 	.word	0x2000126c

0800bac8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bad0:	f000 f852 	bl	800bb78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bad4:	4b06      	ldr	r3, [pc, #24]	; (800baf0 <prvIdleTask+0x28>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d9f9      	bls.n	800bad0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800badc:	4b05      	ldr	r3, [pc, #20]	; (800baf4 <prvIdleTask+0x2c>)
 800bade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800baec:	e7f0      	b.n	800bad0 <prvIdleTask+0x8>
 800baee:	bf00      	nop
 800baf0:	20000d88 	.word	0x20000d88
 800baf4:	e000ed04 	.word	0xe000ed04

0800baf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bafe:	2300      	movs	r3, #0
 800bb00:	607b      	str	r3, [r7, #4]
 800bb02:	e00c      	b.n	800bb1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	4613      	mov	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4413      	add	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4a12      	ldr	r2, [pc, #72]	; (800bb58 <prvInitialiseTaskLists+0x60>)
 800bb10:	4413      	add	r3, r2
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fe fcca 	bl	800a4ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	607b      	str	r3, [r7, #4]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2b37      	cmp	r3, #55	; 0x37
 800bb22:	d9ef      	bls.n	800bb04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb24:	480d      	ldr	r0, [pc, #52]	; (800bb5c <prvInitialiseTaskLists+0x64>)
 800bb26:	f7fe fcc1 	bl	800a4ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb2a:	480d      	ldr	r0, [pc, #52]	; (800bb60 <prvInitialiseTaskLists+0x68>)
 800bb2c:	f7fe fcbe 	bl	800a4ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb30:	480c      	ldr	r0, [pc, #48]	; (800bb64 <prvInitialiseTaskLists+0x6c>)
 800bb32:	f7fe fcbb 	bl	800a4ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb36:	480c      	ldr	r0, [pc, #48]	; (800bb68 <prvInitialiseTaskLists+0x70>)
 800bb38:	f7fe fcb8 	bl	800a4ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb3c:	480b      	ldr	r0, [pc, #44]	; (800bb6c <prvInitialiseTaskLists+0x74>)
 800bb3e:	f7fe fcb5 	bl	800a4ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb42:	4b0b      	ldr	r3, [pc, #44]	; (800bb70 <prvInitialiseTaskLists+0x78>)
 800bb44:	4a05      	ldr	r2, [pc, #20]	; (800bb5c <prvInitialiseTaskLists+0x64>)
 800bb46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb48:	4b0a      	ldr	r3, [pc, #40]	; (800bb74 <prvInitialiseTaskLists+0x7c>)
 800bb4a:	4a05      	ldr	r2, [pc, #20]	; (800bb60 <prvInitialiseTaskLists+0x68>)
 800bb4c:	601a      	str	r2, [r3, #0]
}
 800bb4e:	bf00      	nop
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20000d88 	.word	0x20000d88
 800bb5c:	200011e8 	.word	0x200011e8
 800bb60:	200011fc 	.word	0x200011fc
 800bb64:	20001218 	.word	0x20001218
 800bb68:	2000122c 	.word	0x2000122c
 800bb6c:	20001244 	.word	0x20001244
 800bb70:	20001210 	.word	0x20001210
 800bb74:	20001214 	.word	0x20001214

0800bb78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb7e:	e019      	b.n	800bbb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb80:	f000 fdd8 	bl	800c734 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb84:	4b10      	ldr	r3, [pc, #64]	; (800bbc8 <prvCheckTasksWaitingTermination+0x50>)
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	3304      	adds	r3, #4
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe fd15 	bl	800a5c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb96:	4b0d      	ldr	r3, [pc, #52]	; (800bbcc <prvCheckTasksWaitingTermination+0x54>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	4a0b      	ldr	r2, [pc, #44]	; (800bbcc <prvCheckTasksWaitingTermination+0x54>)
 800bb9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bba0:	4b0b      	ldr	r3, [pc, #44]	; (800bbd0 <prvCheckTasksWaitingTermination+0x58>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	3b01      	subs	r3, #1
 800bba6:	4a0a      	ldr	r2, [pc, #40]	; (800bbd0 <prvCheckTasksWaitingTermination+0x58>)
 800bba8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bbaa:	f000 fdf3 	bl	800c794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f810 	bl	800bbd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbb4:	4b06      	ldr	r3, [pc, #24]	; (800bbd0 <prvCheckTasksWaitingTermination+0x58>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1e1      	bne.n	800bb80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbbc:	bf00      	nop
 800bbbe:	bf00      	nop
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	2000122c 	.word	0x2000122c
 800bbcc:	20001258 	.word	0x20001258
 800bbd0:	20001240 	.word	0x20001240

0800bbd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	3354      	adds	r3, #84	; 0x54
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f001 fdf1 	bl	800d7c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d108      	bne.n	800bc02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f000 ff8b 	bl	800cb10 <vPortFree>
				vPortFree( pxTCB );
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 ff88 	bl	800cb10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc00:	e018      	b.n	800bc34 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d103      	bne.n	800bc14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 ff7f 	bl	800cb10 <vPortFree>
	}
 800bc12:	e00f      	b.n	800bc34 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bc1a:	2b02      	cmp	r3, #2
 800bc1c:	d00a      	beq.n	800bc34 <prvDeleteTCB+0x60>
	__asm volatile
 800bc1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc22:	f383 8811 	msr	BASEPRI, r3
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	60fb      	str	r3, [r7, #12]
}
 800bc30:	bf00      	nop
 800bc32:	e7fe      	b.n	800bc32 <prvDeleteTCB+0x5e>
	}
 800bc34:	bf00      	nop
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc42:	4b0c      	ldr	r3, [pc, #48]	; (800bc74 <prvResetNextTaskUnblockTime+0x38>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d104      	bne.n	800bc56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc4c:	4b0a      	ldr	r3, [pc, #40]	; (800bc78 <prvResetNextTaskUnblockTime+0x3c>)
 800bc4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc54:	e008      	b.n	800bc68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc56:	4b07      	ldr	r3, [pc, #28]	; (800bc74 <prvResetNextTaskUnblockTime+0x38>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	4a04      	ldr	r2, [pc, #16]	; (800bc78 <prvResetNextTaskUnblockTime+0x3c>)
 800bc66:	6013      	str	r3, [r2, #0]
}
 800bc68:	bf00      	nop
 800bc6a:	370c      	adds	r7, #12
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr
 800bc74:	20001210 	.word	0x20001210
 800bc78:	20001278 	.word	0x20001278

0800bc7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc82:	4b0b      	ldr	r3, [pc, #44]	; (800bcb0 <xTaskGetSchedulerState+0x34>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d102      	bne.n	800bc90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	607b      	str	r3, [r7, #4]
 800bc8e:	e008      	b.n	800bca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc90:	4b08      	ldr	r3, [pc, #32]	; (800bcb4 <xTaskGetSchedulerState+0x38>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d102      	bne.n	800bc9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc98:	2302      	movs	r3, #2
 800bc9a:	607b      	str	r3, [r7, #4]
 800bc9c:	e001      	b.n	800bca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bca2:	687b      	ldr	r3, [r7, #4]
	}
 800bca4:	4618      	mov	r0, r3
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	20001264 	.word	0x20001264
 800bcb4:	20001280 	.word	0x20001280

0800bcb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b086      	sub	sp, #24
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d056      	beq.n	800bd7c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcce:	4b2e      	ldr	r3, [pc, #184]	; (800bd88 <xTaskPriorityDisinherit+0xd0>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	693a      	ldr	r2, [r7, #16]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d00a      	beq.n	800bcee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	60fb      	str	r3, [r7, #12]
}
 800bcea:	bf00      	nop
 800bcec:	e7fe      	b.n	800bcec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10a      	bne.n	800bd0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfa:	f383 8811 	msr	BASEPRI, r3
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	60bb      	str	r3, [r7, #8]
}
 800bd08:	bf00      	nop
 800bd0a:	e7fe      	b.n	800bd0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd10:	1e5a      	subs	r2, r3, #1
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d02c      	beq.n	800bd7c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d128      	bne.n	800bd7c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	3304      	adds	r3, #4
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7fe fc46 	bl	800a5c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4c:	4b0f      	ldr	r3, [pc, #60]	; (800bd8c <xTaskPriorityDisinherit+0xd4>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d903      	bls.n	800bd5c <xTaskPriorityDisinherit+0xa4>
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd58:	4a0c      	ldr	r2, [pc, #48]	; (800bd8c <xTaskPriorityDisinherit+0xd4>)
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd60:	4613      	mov	r3, r2
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	4413      	add	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4a09      	ldr	r2, [pc, #36]	; (800bd90 <xTaskPriorityDisinherit+0xd8>)
 800bd6a:	441a      	add	r2, r3
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	3304      	adds	r3, #4
 800bd70:	4619      	mov	r1, r3
 800bd72:	4610      	mov	r0, r2
 800bd74:	f7fe fbc7 	bl	800a506 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd7c:	697b      	ldr	r3, [r7, #20]
	}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3718      	adds	r7, #24
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	20000d84 	.word	0x20000d84
 800bd8c:	20001260 	.word	0x20001260
 800bd90:	20000d88 	.word	0x20000d88

0800bd94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd9e:	4b21      	ldr	r3, [pc, #132]	; (800be24 <prvAddCurrentTaskToDelayedList+0x90>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bda4:	4b20      	ldr	r3, [pc, #128]	; (800be28 <prvAddCurrentTaskToDelayedList+0x94>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	3304      	adds	r3, #4
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe fc08 	bl	800a5c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdb6:	d10a      	bne.n	800bdce <prvAddCurrentTaskToDelayedList+0x3a>
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d007      	beq.n	800bdce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdbe:	4b1a      	ldr	r3, [pc, #104]	; (800be28 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3304      	adds	r3, #4
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	4819      	ldr	r0, [pc, #100]	; (800be2c <prvAddCurrentTaskToDelayedList+0x98>)
 800bdc8:	f7fe fb9d 	bl	800a506 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bdcc:	e026      	b.n	800be1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdd6:	4b14      	ldr	r3, [pc, #80]	; (800be28 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdde:	68ba      	ldr	r2, [r7, #8]
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d209      	bcs.n	800bdfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bde6:	4b12      	ldr	r3, [pc, #72]	; (800be30 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	4b0f      	ldr	r3, [pc, #60]	; (800be28 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	f7fe fbab 	bl	800a54e <vListInsert>
}
 800bdf8:	e010      	b.n	800be1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdfa:	4b0e      	ldr	r3, [pc, #56]	; (800be34 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	4b0a      	ldr	r3, [pc, #40]	; (800be28 <prvAddCurrentTaskToDelayedList+0x94>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	3304      	adds	r3, #4
 800be04:	4619      	mov	r1, r3
 800be06:	4610      	mov	r0, r2
 800be08:	f7fe fba1 	bl	800a54e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be0c:	4b0a      	ldr	r3, [pc, #40]	; (800be38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	68ba      	ldr	r2, [r7, #8]
 800be12:	429a      	cmp	r2, r3
 800be14:	d202      	bcs.n	800be1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be16:	4a08      	ldr	r2, [pc, #32]	; (800be38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	6013      	str	r3, [r2, #0]
}
 800be1c:	bf00      	nop
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	2000125c 	.word	0x2000125c
 800be28:	20000d84 	.word	0x20000d84
 800be2c:	20001244 	.word	0x20001244
 800be30:	20001214 	.word	0x20001214
 800be34:	20001210 	.word	0x20001210
 800be38:	20001278 	.word	0x20001278

0800be3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b08a      	sub	sp, #40	; 0x28
 800be40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be42:	2300      	movs	r3, #0
 800be44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be46:	f000 fb07 	bl	800c458 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be4a:	4b1c      	ldr	r3, [pc, #112]	; (800bebc <xTimerCreateTimerTask+0x80>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d021      	beq.n	800be96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be52:	2300      	movs	r3, #0
 800be54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be56:	2300      	movs	r3, #0
 800be58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be5a:	1d3a      	adds	r2, r7, #4
 800be5c:	f107 0108 	add.w	r1, r7, #8
 800be60:	f107 030c 	add.w	r3, r7, #12
 800be64:	4618      	mov	r0, r3
 800be66:	f7fe fb07 	bl	800a478 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be6a:	6879      	ldr	r1, [r7, #4]
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	9202      	str	r2, [sp, #8]
 800be72:	9301      	str	r3, [sp, #4]
 800be74:	2302      	movs	r3, #2
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	2300      	movs	r3, #0
 800be7a:	460a      	mov	r2, r1
 800be7c:	4910      	ldr	r1, [pc, #64]	; (800bec0 <xTimerCreateTimerTask+0x84>)
 800be7e:	4811      	ldr	r0, [pc, #68]	; (800bec4 <xTimerCreateTimerTask+0x88>)
 800be80:	f7ff f8b4 	bl	800afec <xTaskCreateStatic>
 800be84:	4603      	mov	r3, r0
 800be86:	4a10      	ldr	r2, [pc, #64]	; (800bec8 <xTimerCreateTimerTask+0x8c>)
 800be88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be8a:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <xTimerCreateTimerTask+0x8c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d001      	beq.n	800be96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be92:	2301      	movs	r3, #1
 800be94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10a      	bne.n	800beb2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	613b      	str	r3, [r7, #16]
}
 800beae:	bf00      	nop
 800beb0:	e7fe      	b.n	800beb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800beb2:	697b      	ldr	r3, [r7, #20]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3718      	adds	r7, #24
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	200012b4 	.word	0x200012b4
 800bec0:	0800d96c 	.word	0x0800d96c
 800bec4:	0800c001 	.word	0x0800c001
 800bec8:	200012b8 	.word	0x200012b8

0800becc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b08a      	sub	sp, #40	; 0x28
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800beda:	2300      	movs	r3, #0
 800bedc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d10a      	bne.n	800befa <xTimerGenericCommand+0x2e>
	__asm volatile
 800bee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	623b      	str	r3, [r7, #32]
}
 800bef6:	bf00      	nop
 800bef8:	e7fe      	b.n	800bef8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800befa:	4b1a      	ldr	r3, [pc, #104]	; (800bf64 <xTimerGenericCommand+0x98>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d02a      	beq.n	800bf58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	2b05      	cmp	r3, #5
 800bf12:	dc18      	bgt.n	800bf46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf14:	f7ff feb2 	bl	800bc7c <xTaskGetSchedulerState>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b02      	cmp	r3, #2
 800bf1c:	d109      	bne.n	800bf32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf1e:	4b11      	ldr	r3, [pc, #68]	; (800bf64 <xTimerGenericCommand+0x98>)
 800bf20:	6818      	ldr	r0, [r3, #0]
 800bf22:	f107 0110 	add.w	r1, r7, #16
 800bf26:	2300      	movs	r3, #0
 800bf28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf2a:	f7fe fc77 	bl	800a81c <xQueueGenericSend>
 800bf2e:	6278      	str	r0, [r7, #36]	; 0x24
 800bf30:	e012      	b.n	800bf58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf32:	4b0c      	ldr	r3, [pc, #48]	; (800bf64 <xTimerGenericCommand+0x98>)
 800bf34:	6818      	ldr	r0, [r3, #0]
 800bf36:	f107 0110 	add.w	r1, r7, #16
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f7fe fc6d 	bl	800a81c <xQueueGenericSend>
 800bf42:	6278      	str	r0, [r7, #36]	; 0x24
 800bf44:	e008      	b.n	800bf58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf46:	4b07      	ldr	r3, [pc, #28]	; (800bf64 <xTimerGenericCommand+0x98>)
 800bf48:	6818      	ldr	r0, [r3, #0]
 800bf4a:	f107 0110 	add.w	r1, r7, #16
 800bf4e:	2300      	movs	r3, #0
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	f7fe fd61 	bl	800aa18 <xQueueGenericSendFromISR>
 800bf56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3728      	adds	r7, #40	; 0x28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	200012b4 	.word	0x200012b4

0800bf68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af02      	add	r7, sp, #8
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf72:	4b22      	ldr	r3, [pc, #136]	; (800bffc <prvProcessExpiredTimer+0x94>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	3304      	adds	r3, #4
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7fe fb1d 	bl	800a5c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf8c:	f003 0304 	and.w	r3, r3, #4
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d022      	beq.n	800bfda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	699a      	ldr	r2, [r3, #24]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	18d1      	adds	r1, r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	6978      	ldr	r0, [r7, #20]
 800bfa2:	f000 f8d1 	bl	800c148 <prvInsertTimerInActiveList>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d01f      	beq.n	800bfec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfac:	2300      	movs	r3, #0
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	6978      	ldr	r0, [r7, #20]
 800bfb8:	f7ff ff88 	bl	800becc <xTimerGenericCommand>
 800bfbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d113      	bne.n	800bfec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	60fb      	str	r3, [r7, #12]
}
 800bfd6:	bf00      	nop
 800bfd8:	e7fe      	b.n	800bfd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfe0:	f023 0301 	bic.w	r3, r3, #1
 800bfe4:	b2da      	uxtb	r2, r3
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	6a1b      	ldr	r3, [r3, #32]
 800bff0:	6978      	ldr	r0, [r7, #20]
 800bff2:	4798      	blx	r3
}
 800bff4:	bf00      	nop
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	200012ac 	.word	0x200012ac

0800c000 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c008:	f107 0308 	add.w	r3, r7, #8
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 f857 	bl	800c0c0 <prvGetNextExpireTime>
 800c012:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	4619      	mov	r1, r3
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f000 f803 	bl	800c024 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c01e:	f000 f8d5 	bl	800c1cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c022:	e7f1      	b.n	800c008 <prvTimerTask+0x8>

0800c024 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c02e:	f7ff fa39 	bl	800b4a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c032:	f107 0308 	add.w	r3, r7, #8
 800c036:	4618      	mov	r0, r3
 800c038:	f000 f866 	bl	800c108 <prvSampleTimeNow>
 800c03c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d130      	bne.n	800c0a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10a      	bne.n	800c060 <prvProcessTimerOrBlockTask+0x3c>
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d806      	bhi.n	800c060 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c052:	f7ff fa35 	bl	800b4c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c056:	68f9      	ldr	r1, [r7, #12]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f7ff ff85 	bl	800bf68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c05e:	e024      	b.n	800c0aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d008      	beq.n	800c078 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c066:	4b13      	ldr	r3, [pc, #76]	; (800c0b4 <prvProcessTimerOrBlockTask+0x90>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <prvProcessTimerOrBlockTask+0x50>
 800c070:	2301      	movs	r3, #1
 800c072:	e000      	b.n	800c076 <prvProcessTimerOrBlockTask+0x52>
 800c074:	2300      	movs	r3, #0
 800c076:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c078:	4b0f      	ldr	r3, [pc, #60]	; (800c0b8 <prvProcessTimerOrBlockTask+0x94>)
 800c07a:	6818      	ldr	r0, [r3, #0]
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	683a      	ldr	r2, [r7, #0]
 800c084:	4619      	mov	r1, r3
 800c086:	f7fe ff7d 	bl	800af84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c08a:	f7ff fa19 	bl	800b4c0 <xTaskResumeAll>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c094:	4b09      	ldr	r3, [pc, #36]	; (800c0bc <prvProcessTimerOrBlockTask+0x98>)
 800c096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c09a:	601a      	str	r2, [r3, #0]
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	f3bf 8f6f 	isb	sy
}
 800c0a4:	e001      	b.n	800c0aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c0a6:	f7ff fa0b 	bl	800b4c0 <xTaskResumeAll>
}
 800c0aa:	bf00      	nop
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	200012b0 	.word	0x200012b0
 800c0b8:	200012b4 	.word	0x200012b4
 800c0bc:	e000ed04 	.word	0xe000ed04

0800c0c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b085      	sub	sp, #20
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c0c8:	4b0e      	ldr	r3, [pc, #56]	; (800c104 <prvGetNextExpireTime+0x44>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d101      	bne.n	800c0d6 <prvGetNextExpireTime+0x16>
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	e000      	b.n	800c0d8 <prvGetNextExpireTime+0x18>
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d105      	bne.n	800c0f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0e4:	4b07      	ldr	r3, [pc, #28]	; (800c104 <prvGetNextExpireTime+0x44>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	60fb      	str	r3, [r7, #12]
 800c0ee:	e001      	b.n	800c0f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3714      	adds	r7, #20
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	200012ac 	.word	0x200012ac

0800c108 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c110:	f7ff fa74 	bl	800b5fc <xTaskGetTickCount>
 800c114:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c116:	4b0b      	ldr	r3, [pc, #44]	; (800c144 <prvSampleTimeNow+0x3c>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d205      	bcs.n	800c12c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c120:	f000 f936 	bl	800c390 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	e002      	b.n	800c132 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c132:	4a04      	ldr	r2, [pc, #16]	; (800c144 <prvSampleTimeNow+0x3c>)
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c138:	68fb      	ldr	r3, [r7, #12]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	200012bc 	.word	0x200012bc

0800c148 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	607a      	str	r2, [r7, #4]
 800c154:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c156:	2300      	movs	r3, #0
 800c158:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c166:	68ba      	ldr	r2, [r7, #8]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d812      	bhi.n	800c194 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	1ad2      	subs	r2, r2, r3
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	699b      	ldr	r3, [r3, #24]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d302      	bcc.n	800c182 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c17c:	2301      	movs	r3, #1
 800c17e:	617b      	str	r3, [r7, #20]
 800c180:	e01b      	b.n	800c1ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c182:	4b10      	ldr	r3, [pc, #64]	; (800c1c4 <prvInsertTimerInActiveList+0x7c>)
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	3304      	adds	r3, #4
 800c18a:	4619      	mov	r1, r3
 800c18c:	4610      	mov	r0, r2
 800c18e:	f7fe f9de 	bl	800a54e <vListInsert>
 800c192:	e012      	b.n	800c1ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d206      	bcs.n	800c1aa <prvInsertTimerInActiveList+0x62>
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d302      	bcc.n	800c1aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	617b      	str	r3, [r7, #20]
 800c1a8:	e007      	b.n	800c1ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1aa:	4b07      	ldr	r3, [pc, #28]	; (800c1c8 <prvInsertTimerInActiveList+0x80>)
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	3304      	adds	r3, #4
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	f7fe f9ca 	bl	800a54e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c1ba:	697b      	ldr	r3, [r7, #20]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3718      	adds	r7, #24
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	200012b0 	.word	0x200012b0
 800c1c8:	200012ac 	.word	0x200012ac

0800c1cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08e      	sub	sp, #56	; 0x38
 800c1d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1d2:	e0ca      	b.n	800c36a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	da18      	bge.n	800c20c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c1da:	1d3b      	adds	r3, r7, #4
 800c1dc:	3304      	adds	r3, #4
 800c1de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10a      	bne.n	800c1fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ea:	f383 8811 	msr	BASEPRI, r3
 800c1ee:	f3bf 8f6f 	isb	sy
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	61fb      	str	r3, [r7, #28]
}
 800c1f8:	bf00      	nop
 800c1fa:	e7fe      	b.n	800c1fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c202:	6850      	ldr	r0, [r2, #4]
 800c204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c206:	6892      	ldr	r2, [r2, #8]
 800c208:	4611      	mov	r1, r2
 800c20a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f2c0 80aa 	blt.w	800c368 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21a:	695b      	ldr	r3, [r3, #20]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d004      	beq.n	800c22a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	3304      	adds	r3, #4
 800c224:	4618      	mov	r0, r3
 800c226:	f7fe f9cb 	bl	800a5c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c22a:	463b      	mov	r3, r7
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7ff ff6b 	bl	800c108 <prvSampleTimeNow>
 800c232:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b09      	cmp	r3, #9
 800c238:	f200 8097 	bhi.w	800c36a <prvProcessReceivedCommands+0x19e>
 800c23c:	a201      	add	r2, pc, #4	; (adr r2, 800c244 <prvProcessReceivedCommands+0x78>)
 800c23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c242:	bf00      	nop
 800c244:	0800c26d 	.word	0x0800c26d
 800c248:	0800c26d 	.word	0x0800c26d
 800c24c:	0800c26d 	.word	0x0800c26d
 800c250:	0800c2e1 	.word	0x0800c2e1
 800c254:	0800c2f5 	.word	0x0800c2f5
 800c258:	0800c33f 	.word	0x0800c33f
 800c25c:	0800c26d 	.word	0x0800c26d
 800c260:	0800c26d 	.word	0x0800c26d
 800c264:	0800c2e1 	.word	0x0800c2e1
 800c268:	0800c2f5 	.word	0x0800c2f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c272:	f043 0301 	orr.w	r3, r3, #1
 800c276:	b2da      	uxtb	r2, r3
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c282:	699b      	ldr	r3, [r3, #24]
 800c284:	18d1      	adds	r1, r2, r3
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c28a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c28c:	f7ff ff5c 	bl	800c148 <prvInsertTimerInActiveList>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	d069      	beq.n	800c36a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c298:	6a1b      	ldr	r3, [r3, #32]
 800c29a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c29c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2a4:	f003 0304 	and.w	r3, r3, #4
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d05e      	beq.n	800c36a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	441a      	add	r2, r3
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2be:	f7ff fe05 	bl	800becc <xTimerGenericCommand>
 800c2c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c2c4:	6a3b      	ldr	r3, [r7, #32]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d14f      	bne.n	800c36a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ce:	f383 8811 	msr	BASEPRI, r3
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	f3bf 8f4f 	dsb	sy
 800c2da:	61bb      	str	r3, [r7, #24]
}
 800c2dc:	bf00      	nop
 800c2de:	e7fe      	b.n	800c2de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2e6:	f023 0301 	bic.w	r3, r3, #1
 800c2ea:	b2da      	uxtb	r2, r3
 800c2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c2f2:	e03a      	b.n	800c36a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2fa:	f043 0301 	orr.w	r3, r3, #1
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30e:	699b      	ldr	r3, [r3, #24]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d10a      	bne.n	800c32a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c318:	f383 8811 	msr	BASEPRI, r3
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	617b      	str	r3, [r7, #20]
}
 800c326:	bf00      	nop
 800c328:	e7fe      	b.n	800c328 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32c:	699a      	ldr	r2, [r3, #24]
 800c32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c330:	18d1      	adds	r1, r2, r3
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c338:	f7ff ff06 	bl	800c148 <prvInsertTimerInActiveList>
					break;
 800c33c:	e015      	b.n	800c36a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c344:	f003 0302 	and.w	r3, r3, #2
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d103      	bne.n	800c354 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c34c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c34e:	f000 fbdf 	bl	800cb10 <vPortFree>
 800c352:	e00a      	b.n	800c36a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c35a:	f023 0301 	bic.w	r3, r3, #1
 800c35e:	b2da      	uxtb	r2, r3
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c366:	e000      	b.n	800c36a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c368:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c36a:	4b08      	ldr	r3, [pc, #32]	; (800c38c <prvProcessReceivedCommands+0x1c0>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	1d39      	adds	r1, r7, #4
 800c370:	2200      	movs	r2, #0
 800c372:	4618      	mov	r0, r3
 800c374:	f7fe fbec 	bl	800ab50 <xQueueReceive>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f47f af2a 	bne.w	800c1d4 <prvProcessReceivedCommands+0x8>
	}
}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	3730      	adds	r7, #48	; 0x30
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	200012b4 	.word	0x200012b4

0800c390 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b088      	sub	sp, #32
 800c394:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c396:	e048      	b.n	800c42a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c398:	4b2d      	ldr	r3, [pc, #180]	; (800c450 <prvSwitchTimerLists+0xc0>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3a2:	4b2b      	ldr	r3, [pc, #172]	; (800c450 <prvSwitchTimerLists+0xc0>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fe f905 	bl	800a5c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6a1b      	ldr	r3, [r3, #32]
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3c4:	f003 0304 	and.w	r3, r3, #4
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d02e      	beq.n	800c42a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	693a      	ldr	r2, [r7, #16]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d90e      	bls.n	800c3fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	68ba      	ldr	r2, [r7, #8]
 800c3e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	68fa      	ldr	r2, [r7, #12]
 800c3e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3ea:	4b19      	ldr	r3, [pc, #100]	; (800c450 <prvSwitchTimerLists+0xc0>)
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	3304      	adds	r3, #4
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	4610      	mov	r0, r2
 800c3f6:	f7fe f8aa 	bl	800a54e <vListInsert>
 800c3fa:	e016      	b.n	800c42a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	2300      	movs	r3, #0
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	2100      	movs	r1, #0
 800c406:	68f8      	ldr	r0, [r7, #12]
 800c408:	f7ff fd60 	bl	800becc <xTimerGenericCommand>
 800c40c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d10a      	bne.n	800c42a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c418:	f383 8811 	msr	BASEPRI, r3
 800c41c:	f3bf 8f6f 	isb	sy
 800c420:	f3bf 8f4f 	dsb	sy
 800c424:	603b      	str	r3, [r7, #0]
}
 800c426:	bf00      	nop
 800c428:	e7fe      	b.n	800c428 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c42a:	4b09      	ldr	r3, [pc, #36]	; (800c450 <prvSwitchTimerLists+0xc0>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d1b1      	bne.n	800c398 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c434:	4b06      	ldr	r3, [pc, #24]	; (800c450 <prvSwitchTimerLists+0xc0>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c43a:	4b06      	ldr	r3, [pc, #24]	; (800c454 <prvSwitchTimerLists+0xc4>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a04      	ldr	r2, [pc, #16]	; (800c450 <prvSwitchTimerLists+0xc0>)
 800c440:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c442:	4a04      	ldr	r2, [pc, #16]	; (800c454 <prvSwitchTimerLists+0xc4>)
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	6013      	str	r3, [r2, #0]
}
 800c448:	bf00      	nop
 800c44a:	3718      	adds	r7, #24
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	200012ac 	.word	0x200012ac
 800c454:	200012b0 	.word	0x200012b0

0800c458 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c45e:	f000 f969 	bl	800c734 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c462:	4b15      	ldr	r3, [pc, #84]	; (800c4b8 <prvCheckForValidListAndQueue+0x60>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d120      	bne.n	800c4ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c46a:	4814      	ldr	r0, [pc, #80]	; (800c4bc <prvCheckForValidListAndQueue+0x64>)
 800c46c:	f7fe f81e 	bl	800a4ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c470:	4813      	ldr	r0, [pc, #76]	; (800c4c0 <prvCheckForValidListAndQueue+0x68>)
 800c472:	f7fe f81b 	bl	800a4ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c476:	4b13      	ldr	r3, [pc, #76]	; (800c4c4 <prvCheckForValidListAndQueue+0x6c>)
 800c478:	4a10      	ldr	r2, [pc, #64]	; (800c4bc <prvCheckForValidListAndQueue+0x64>)
 800c47a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c47c:	4b12      	ldr	r3, [pc, #72]	; (800c4c8 <prvCheckForValidListAndQueue+0x70>)
 800c47e:	4a10      	ldr	r2, [pc, #64]	; (800c4c0 <prvCheckForValidListAndQueue+0x68>)
 800c480:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c482:	2300      	movs	r3, #0
 800c484:	9300      	str	r3, [sp, #0]
 800c486:	4b11      	ldr	r3, [pc, #68]	; (800c4cc <prvCheckForValidListAndQueue+0x74>)
 800c488:	4a11      	ldr	r2, [pc, #68]	; (800c4d0 <prvCheckForValidListAndQueue+0x78>)
 800c48a:	2110      	movs	r1, #16
 800c48c:	200a      	movs	r0, #10
 800c48e:	f7fe f929 	bl	800a6e4 <xQueueGenericCreateStatic>
 800c492:	4603      	mov	r3, r0
 800c494:	4a08      	ldr	r2, [pc, #32]	; (800c4b8 <prvCheckForValidListAndQueue+0x60>)
 800c496:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c498:	4b07      	ldr	r3, [pc, #28]	; (800c4b8 <prvCheckForValidListAndQueue+0x60>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d005      	beq.n	800c4ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c4a0:	4b05      	ldr	r3, [pc, #20]	; (800c4b8 <prvCheckForValidListAndQueue+0x60>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	490b      	ldr	r1, [pc, #44]	; (800c4d4 <prvCheckForValidListAndQueue+0x7c>)
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fe fd42 	bl	800af30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4ac:	f000 f972 	bl	800c794 <vPortExitCritical>
}
 800c4b0:	bf00      	nop
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	200012b4 	.word	0x200012b4
 800c4bc:	20001284 	.word	0x20001284
 800c4c0:	20001298 	.word	0x20001298
 800c4c4:	200012ac 	.word	0x200012ac
 800c4c8:	200012b0 	.word	0x200012b0
 800c4cc:	20001360 	.word	0x20001360
 800c4d0:	200012c0 	.word	0x200012c0
 800c4d4:	0800d974 	.word	0x0800d974

0800c4d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	3b04      	subs	r3, #4
 800c4e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c4f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	3b04      	subs	r3, #4
 800c4f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	f023 0201 	bic.w	r2, r3, #1
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	3b04      	subs	r3, #4
 800c506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c508:	4a0c      	ldr	r2, [pc, #48]	; (800c53c <pxPortInitialiseStack+0x64>)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	3b14      	subs	r3, #20
 800c512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	3b04      	subs	r3, #4
 800c51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f06f 0202 	mvn.w	r2, #2
 800c526:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	3b20      	subs	r3, #32
 800c52c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c52e:	68fb      	ldr	r3, [r7, #12]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3714      	adds	r7, #20
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr
 800c53c:	0800c541 	.word	0x0800c541

0800c540 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c540:	b480      	push	{r7}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c546:	2300      	movs	r3, #0
 800c548:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c54a:	4b12      	ldr	r3, [pc, #72]	; (800c594 <prvTaskExitError+0x54>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c552:	d00a      	beq.n	800c56a <prvTaskExitError+0x2a>
	__asm volatile
 800c554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	60fb      	str	r3, [r7, #12]
}
 800c566:	bf00      	nop
 800c568:	e7fe      	b.n	800c568 <prvTaskExitError+0x28>
	__asm volatile
 800c56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56e:	f383 8811 	msr	BASEPRI, r3
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	60bb      	str	r3, [r7, #8]
}
 800c57c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c57e:	bf00      	nop
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d0fc      	beq.n	800c580 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c586:	bf00      	nop
 800c588:	bf00      	nop
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	20000098 	.word	0x20000098
	...

0800c5a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c5a0:	4b07      	ldr	r3, [pc, #28]	; (800c5c0 <pxCurrentTCBConst2>)
 800c5a2:	6819      	ldr	r1, [r3, #0]
 800c5a4:	6808      	ldr	r0, [r1, #0]
 800c5a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5aa:	f380 8809 	msr	PSP, r0
 800c5ae:	f3bf 8f6f 	isb	sy
 800c5b2:	f04f 0000 	mov.w	r0, #0
 800c5b6:	f380 8811 	msr	BASEPRI, r0
 800c5ba:	4770      	bx	lr
 800c5bc:	f3af 8000 	nop.w

0800c5c0 <pxCurrentTCBConst2>:
 800c5c0:	20000d84 	.word	0x20000d84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop

0800c5c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c5c8:	4808      	ldr	r0, [pc, #32]	; (800c5ec <prvPortStartFirstTask+0x24>)
 800c5ca:	6800      	ldr	r0, [r0, #0]
 800c5cc:	6800      	ldr	r0, [r0, #0]
 800c5ce:	f380 8808 	msr	MSP, r0
 800c5d2:	f04f 0000 	mov.w	r0, #0
 800c5d6:	f380 8814 	msr	CONTROL, r0
 800c5da:	b662      	cpsie	i
 800c5dc:	b661      	cpsie	f
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	df00      	svc	0
 800c5e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5ea:	bf00      	nop
 800c5ec:	e000ed08 	.word	0xe000ed08

0800c5f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c5f6:	4b46      	ldr	r3, [pc, #280]	; (800c710 <xPortStartScheduler+0x120>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a46      	ldr	r2, [pc, #280]	; (800c714 <xPortStartScheduler+0x124>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d10a      	bne.n	800c616 <xPortStartScheduler+0x26>
	__asm volatile
 800c600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	613b      	str	r3, [r7, #16]
}
 800c612:	bf00      	nop
 800c614:	e7fe      	b.n	800c614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c616:	4b3e      	ldr	r3, [pc, #248]	; (800c710 <xPortStartScheduler+0x120>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a3f      	ldr	r2, [pc, #252]	; (800c718 <xPortStartScheduler+0x128>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d10a      	bne.n	800c636 <xPortStartScheduler+0x46>
	__asm volatile
 800c620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c624:	f383 8811 	msr	BASEPRI, r3
 800c628:	f3bf 8f6f 	isb	sy
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	60fb      	str	r3, [r7, #12]
}
 800c632:	bf00      	nop
 800c634:	e7fe      	b.n	800c634 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c636:	4b39      	ldr	r3, [pc, #228]	; (800c71c <xPortStartScheduler+0x12c>)
 800c638:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	22ff      	movs	r2, #255	; 0xff
 800c646:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c650:	78fb      	ldrb	r3, [r7, #3]
 800c652:	b2db      	uxtb	r3, r3
 800c654:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	4b31      	ldr	r3, [pc, #196]	; (800c720 <xPortStartScheduler+0x130>)
 800c65c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c65e:	4b31      	ldr	r3, [pc, #196]	; (800c724 <xPortStartScheduler+0x134>)
 800c660:	2207      	movs	r2, #7
 800c662:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c664:	e009      	b.n	800c67a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c666:	4b2f      	ldr	r3, [pc, #188]	; (800c724 <xPortStartScheduler+0x134>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	3b01      	subs	r3, #1
 800c66c:	4a2d      	ldr	r2, [pc, #180]	; (800c724 <xPortStartScheduler+0x134>)
 800c66e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c670:	78fb      	ldrb	r3, [r7, #3]
 800c672:	b2db      	uxtb	r3, r3
 800c674:	005b      	lsls	r3, r3, #1
 800c676:	b2db      	uxtb	r3, r3
 800c678:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c67a:	78fb      	ldrb	r3, [r7, #3]
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c682:	2b80      	cmp	r3, #128	; 0x80
 800c684:	d0ef      	beq.n	800c666 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c686:	4b27      	ldr	r3, [pc, #156]	; (800c724 <xPortStartScheduler+0x134>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f1c3 0307 	rsb	r3, r3, #7
 800c68e:	2b04      	cmp	r3, #4
 800c690:	d00a      	beq.n	800c6a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c696:	f383 8811 	msr	BASEPRI, r3
 800c69a:	f3bf 8f6f 	isb	sy
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	60bb      	str	r3, [r7, #8]
}
 800c6a4:	bf00      	nop
 800c6a6:	e7fe      	b.n	800c6a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c6a8:	4b1e      	ldr	r3, [pc, #120]	; (800c724 <xPortStartScheduler+0x134>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	021b      	lsls	r3, r3, #8
 800c6ae:	4a1d      	ldr	r2, [pc, #116]	; (800c724 <xPortStartScheduler+0x134>)
 800c6b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c6b2:	4b1c      	ldr	r3, [pc, #112]	; (800c724 <xPortStartScheduler+0x134>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c6ba:	4a1a      	ldr	r2, [pc, #104]	; (800c724 <xPortStartScheduler+0x134>)
 800c6bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	b2da      	uxtb	r2, r3
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c6c6:	4b18      	ldr	r3, [pc, #96]	; (800c728 <xPortStartScheduler+0x138>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a17      	ldr	r2, [pc, #92]	; (800c728 <xPortStartScheduler+0x138>)
 800c6cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c6d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c6d2:	4b15      	ldr	r3, [pc, #84]	; (800c728 <xPortStartScheduler+0x138>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a14      	ldr	r2, [pc, #80]	; (800c728 <xPortStartScheduler+0x138>)
 800c6d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c6dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c6de:	f000 f8dd 	bl	800c89c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6e2:	4b12      	ldr	r3, [pc, #72]	; (800c72c <xPortStartScheduler+0x13c>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6e8:	f000 f8fc 	bl	800c8e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6ec:	4b10      	ldr	r3, [pc, #64]	; (800c730 <xPortStartScheduler+0x140>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a0f      	ldr	r2, [pc, #60]	; (800c730 <xPortStartScheduler+0x140>)
 800c6f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c6f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c6f8:	f7ff ff66 	bl	800c5c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c6fc:	f7ff f848 	bl	800b790 <vTaskSwitchContext>
	prvTaskExitError();
 800c700:	f7ff ff1e 	bl	800c540 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3718      	adds	r7, #24
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	e000ed00 	.word	0xe000ed00
 800c714:	410fc271 	.word	0x410fc271
 800c718:	410fc270 	.word	0x410fc270
 800c71c:	e000e400 	.word	0xe000e400
 800c720:	200013b0 	.word	0x200013b0
 800c724:	200013b4 	.word	0x200013b4
 800c728:	e000ed20 	.word	0xe000ed20
 800c72c:	20000098 	.word	0x20000098
 800c730:	e000ef34 	.word	0xe000ef34

0800c734 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
	__asm volatile
 800c73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73e:	f383 8811 	msr	BASEPRI, r3
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	607b      	str	r3, [r7, #4]
}
 800c74c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c74e:	4b0f      	ldr	r3, [pc, #60]	; (800c78c <vPortEnterCritical+0x58>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	3301      	adds	r3, #1
 800c754:	4a0d      	ldr	r2, [pc, #52]	; (800c78c <vPortEnterCritical+0x58>)
 800c756:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c758:	4b0c      	ldr	r3, [pc, #48]	; (800c78c <vPortEnterCritical+0x58>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d10f      	bne.n	800c780 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c760:	4b0b      	ldr	r3, [pc, #44]	; (800c790 <vPortEnterCritical+0x5c>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	b2db      	uxtb	r3, r3
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00a      	beq.n	800c780 <vPortEnterCritical+0x4c>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	603b      	str	r3, [r7, #0]
}
 800c77c:	bf00      	nop
 800c77e:	e7fe      	b.n	800c77e <vPortEnterCritical+0x4a>
	}
}
 800c780:	bf00      	nop
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr
 800c78c:	20000098 	.word	0x20000098
 800c790:	e000ed04 	.word	0xe000ed04

0800c794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c79a:	4b12      	ldr	r3, [pc, #72]	; (800c7e4 <vPortExitCritical+0x50>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10a      	bne.n	800c7b8 <vPortExitCritical+0x24>
	__asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	607b      	str	r3, [r7, #4]
}
 800c7b4:	bf00      	nop
 800c7b6:	e7fe      	b.n	800c7b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c7b8:	4b0a      	ldr	r3, [pc, #40]	; (800c7e4 <vPortExitCritical+0x50>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	4a09      	ldr	r2, [pc, #36]	; (800c7e4 <vPortExitCritical+0x50>)
 800c7c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c7c2:	4b08      	ldr	r3, [pc, #32]	; (800c7e4 <vPortExitCritical+0x50>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d105      	bne.n	800c7d6 <vPortExitCritical+0x42>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	f383 8811 	msr	BASEPRI, r3
}
 800c7d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c7d6:	bf00      	nop
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	20000098 	.word	0x20000098
	...

0800c7f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7f0:	f3ef 8009 	mrs	r0, PSP
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	4b15      	ldr	r3, [pc, #84]	; (800c850 <pxCurrentTCBConst>)
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	f01e 0f10 	tst.w	lr, #16
 800c800:	bf08      	it	eq
 800c802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80a:	6010      	str	r0, [r2, #0]
 800c80c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c810:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c814:	f380 8811 	msr	BASEPRI, r0
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	f7fe ffb6 	bl	800b790 <vTaskSwitchContext>
 800c824:	f04f 0000 	mov.w	r0, #0
 800c828:	f380 8811 	msr	BASEPRI, r0
 800c82c:	bc09      	pop	{r0, r3}
 800c82e:	6819      	ldr	r1, [r3, #0]
 800c830:	6808      	ldr	r0, [r1, #0]
 800c832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c836:	f01e 0f10 	tst.w	lr, #16
 800c83a:	bf08      	it	eq
 800c83c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c840:	f380 8809 	msr	PSP, r0
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	f3af 8000 	nop.w

0800c850 <pxCurrentTCBConst>:
 800c850:	20000d84 	.word	0x20000d84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c854:	bf00      	nop
 800c856:	bf00      	nop

0800c858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	607b      	str	r3, [r7, #4]
}
 800c870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c872:	f7fe fed3 	bl	800b61c <xTaskIncrementTick>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d003      	beq.n	800c884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c87c:	4b06      	ldr	r3, [pc, #24]	; (800c898 <xPortSysTickHandler+0x40>)
 800c87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c882:	601a      	str	r2, [r3, #0]
 800c884:	2300      	movs	r3, #0
 800c886:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	f383 8811 	msr	BASEPRI, r3
}
 800c88e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c890:	bf00      	nop
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	e000ed04 	.word	0xe000ed04

0800c89c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c89c:	b480      	push	{r7}
 800c89e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c8a0:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <vPortSetupTimerInterrupt+0x34>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c8a6:	4b0b      	ldr	r3, [pc, #44]	; (800c8d4 <vPortSetupTimerInterrupt+0x38>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	; (800c8d8 <vPortSetupTimerInterrupt+0x3c>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a0a      	ldr	r2, [pc, #40]	; (800c8dc <vPortSetupTimerInterrupt+0x40>)
 800c8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8b6:	099b      	lsrs	r3, r3, #6
 800c8b8:	4a09      	ldr	r2, [pc, #36]	; (800c8e0 <vPortSetupTimerInterrupt+0x44>)
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c8be:	4b04      	ldr	r3, [pc, #16]	; (800c8d0 <vPortSetupTimerInterrupt+0x34>)
 800c8c0:	2207      	movs	r2, #7
 800c8c2:	601a      	str	r2, [r3, #0]
}
 800c8c4:	bf00      	nop
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	e000e010 	.word	0xe000e010
 800c8d4:	e000e018 	.word	0xe000e018
 800c8d8:	20000000 	.word	0x20000000
 800c8dc:	10624dd3 	.word	0x10624dd3
 800c8e0:	e000e014 	.word	0xe000e014

0800c8e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c8e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c8f4 <vPortEnableVFP+0x10>
 800c8e8:	6801      	ldr	r1, [r0, #0]
 800c8ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c8ee:	6001      	str	r1, [r0, #0]
 800c8f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c8f2:	bf00      	nop
 800c8f4:	e000ed88 	.word	0xe000ed88

0800c8f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c8fe:	f3ef 8305 	mrs	r3, IPSR
 800c902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2b0f      	cmp	r3, #15
 800c908:	d914      	bls.n	800c934 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c90a:	4a17      	ldr	r2, [pc, #92]	; (800c968 <vPortValidateInterruptPriority+0x70>)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	4413      	add	r3, r2
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c914:	4b15      	ldr	r3, [pc, #84]	; (800c96c <vPortValidateInterruptPriority+0x74>)
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	7afa      	ldrb	r2, [r7, #11]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d20a      	bcs.n	800c934 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	607b      	str	r3, [r7, #4]
}
 800c930:	bf00      	nop
 800c932:	e7fe      	b.n	800c932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c934:	4b0e      	ldr	r3, [pc, #56]	; (800c970 <vPortValidateInterruptPriority+0x78>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c93c:	4b0d      	ldr	r3, [pc, #52]	; (800c974 <vPortValidateInterruptPriority+0x7c>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	429a      	cmp	r2, r3
 800c942:	d90a      	bls.n	800c95a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	603b      	str	r3, [r7, #0]
}
 800c956:	bf00      	nop
 800c958:	e7fe      	b.n	800c958 <vPortValidateInterruptPriority+0x60>
	}
 800c95a:	bf00      	nop
 800c95c:	3714      	adds	r7, #20
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	e000e3f0 	.word	0xe000e3f0
 800c96c:	200013b0 	.word	0x200013b0
 800c970:	e000ed0c 	.word	0xe000ed0c
 800c974:	200013b4 	.word	0x200013b4

0800c978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b08a      	sub	sp, #40	; 0x28
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c980:	2300      	movs	r3, #0
 800c982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c984:	f7fe fd8e 	bl	800b4a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c988:	4b5b      	ldr	r3, [pc, #364]	; (800caf8 <pvPortMalloc+0x180>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d101      	bne.n	800c994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c990:	f000 f920 	bl	800cbd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c994:	4b59      	ldr	r3, [pc, #356]	; (800cafc <pvPortMalloc+0x184>)
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4013      	ands	r3, r2
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f040 8093 	bne.w	800cac8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d01d      	beq.n	800c9e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c9a8:	2208      	movs	r2, #8
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f003 0307 	and.w	r3, r3, #7
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d014      	beq.n	800c9e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f023 0307 	bic.w	r3, r3, #7
 800c9c0:	3308      	adds	r3, #8
 800c9c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f003 0307 	and.w	r3, r3, #7
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00a      	beq.n	800c9e4 <pvPortMalloc+0x6c>
	__asm volatile
 800c9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	617b      	str	r3, [r7, #20]
}
 800c9e0:	bf00      	nop
 800c9e2:	e7fe      	b.n	800c9e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d06e      	beq.n	800cac8 <pvPortMalloc+0x150>
 800c9ea:	4b45      	ldr	r3, [pc, #276]	; (800cb00 <pvPortMalloc+0x188>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d869      	bhi.n	800cac8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9f4:	4b43      	ldr	r3, [pc, #268]	; (800cb04 <pvPortMalloc+0x18c>)
 800c9f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c9f8:	4b42      	ldr	r3, [pc, #264]	; (800cb04 <pvPortMalloc+0x18c>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9fe:	e004      	b.n	800ca0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d903      	bls.n	800ca1c <pvPortMalloc+0xa4>
 800ca14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d1f1      	bne.n	800ca00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca1c:	4b36      	ldr	r3, [pc, #216]	; (800caf8 <pvPortMalloc+0x180>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d050      	beq.n	800cac8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca26:	6a3b      	ldr	r3, [r7, #32]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2208      	movs	r2, #8
 800ca2c:	4413      	add	r3, r2
 800ca2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3a:	685a      	ldr	r2, [r3, #4]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	1ad2      	subs	r2, r2, r3
 800ca40:	2308      	movs	r3, #8
 800ca42:	005b      	lsls	r3, r3, #1
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d91f      	bls.n	800ca88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	f003 0307 	and.w	r3, r3, #7
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00a      	beq.n	800ca70 <pvPortMalloc+0xf8>
	__asm volatile
 800ca5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5e:	f383 8811 	msr	BASEPRI, r3
 800ca62:	f3bf 8f6f 	isb	sy
 800ca66:	f3bf 8f4f 	dsb	sy
 800ca6a:	613b      	str	r3, [r7, #16]
}
 800ca6c:	bf00      	nop
 800ca6e:	e7fe      	b.n	800ca6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca72:	685a      	ldr	r2, [r3, #4]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	1ad2      	subs	r2, r2, r3
 800ca78:	69bb      	ldr	r3, [r7, #24]
 800ca7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca82:	69b8      	ldr	r0, [r7, #24]
 800ca84:	f000 f908 	bl	800cc98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca88:	4b1d      	ldr	r3, [pc, #116]	; (800cb00 <pvPortMalloc+0x188>)
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	4a1b      	ldr	r2, [pc, #108]	; (800cb00 <pvPortMalloc+0x188>)
 800ca94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca96:	4b1a      	ldr	r3, [pc, #104]	; (800cb00 <pvPortMalloc+0x188>)
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	4b1b      	ldr	r3, [pc, #108]	; (800cb08 <pvPortMalloc+0x190>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d203      	bcs.n	800caaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800caa2:	4b17      	ldr	r3, [pc, #92]	; (800cb00 <pvPortMalloc+0x188>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a18      	ldr	r2, [pc, #96]	; (800cb08 <pvPortMalloc+0x190>)
 800caa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caac:	685a      	ldr	r2, [r3, #4]
 800caae:	4b13      	ldr	r3, [pc, #76]	; (800cafc <pvPortMalloc+0x184>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	431a      	orrs	r2, r3
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caba:	2200      	movs	r2, #0
 800cabc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cabe:	4b13      	ldr	r3, [pc, #76]	; (800cb0c <pvPortMalloc+0x194>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	3301      	adds	r3, #1
 800cac4:	4a11      	ldr	r2, [pc, #68]	; (800cb0c <pvPortMalloc+0x194>)
 800cac6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cac8:	f7fe fcfa 	bl	800b4c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	f003 0307 	and.w	r3, r3, #7
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00a      	beq.n	800caec <pvPortMalloc+0x174>
	__asm volatile
 800cad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cada:	f383 8811 	msr	BASEPRI, r3
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f3bf 8f4f 	dsb	sy
 800cae6:	60fb      	str	r3, [r7, #12]
}
 800cae8:	bf00      	nop
 800caea:	e7fe      	b.n	800caea <pvPortMalloc+0x172>
	return pvReturn;
 800caec:	69fb      	ldr	r3, [r7, #28]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3728      	adds	r7, #40	; 0x28
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	20004fc0 	.word	0x20004fc0
 800cafc:	20004fd4 	.word	0x20004fd4
 800cb00:	20004fc4 	.word	0x20004fc4
 800cb04:	20004fb8 	.word	0x20004fb8
 800cb08:	20004fc8 	.word	0x20004fc8
 800cb0c:	20004fcc 	.word	0x20004fcc

0800cb10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b086      	sub	sp, #24
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d04d      	beq.n	800cbbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb22:	2308      	movs	r3, #8
 800cb24:	425b      	negs	r3, r3
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	4413      	add	r3, r2
 800cb2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	685a      	ldr	r2, [r3, #4]
 800cb34:	4b24      	ldr	r3, [pc, #144]	; (800cbc8 <vPortFree+0xb8>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4013      	ands	r3, r2
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d10a      	bne.n	800cb54 <vPortFree+0x44>
	__asm volatile
 800cb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	60fb      	str	r3, [r7, #12]
}
 800cb50:	bf00      	nop
 800cb52:	e7fe      	b.n	800cb52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00a      	beq.n	800cb72 <vPortFree+0x62>
	__asm volatile
 800cb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb60:	f383 8811 	msr	BASEPRI, r3
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	60bb      	str	r3, [r7, #8]
}
 800cb6e:	bf00      	nop
 800cb70:	e7fe      	b.n	800cb70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	685a      	ldr	r2, [r3, #4]
 800cb76:	4b14      	ldr	r3, [pc, #80]	; (800cbc8 <vPortFree+0xb8>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4013      	ands	r3, r2
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d01e      	beq.n	800cbbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d11a      	bne.n	800cbbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	4b0e      	ldr	r3, [pc, #56]	; (800cbc8 <vPortFree+0xb8>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	43db      	mvns	r3, r3
 800cb92:	401a      	ands	r2, r3
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb98:	f7fe fc84 	bl	800b4a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	685a      	ldr	r2, [r3, #4]
 800cba0:	4b0a      	ldr	r3, [pc, #40]	; (800cbcc <vPortFree+0xbc>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4413      	add	r3, r2
 800cba6:	4a09      	ldr	r2, [pc, #36]	; (800cbcc <vPortFree+0xbc>)
 800cba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cbaa:	6938      	ldr	r0, [r7, #16]
 800cbac:	f000 f874 	bl	800cc98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cbb0:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <vPortFree+0xc0>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	4a06      	ldr	r2, [pc, #24]	; (800cbd0 <vPortFree+0xc0>)
 800cbb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cbba:	f7fe fc81 	bl	800b4c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cbbe:	bf00      	nop
 800cbc0:	3718      	adds	r7, #24
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	20004fd4 	.word	0x20004fd4
 800cbcc:	20004fc4 	.word	0x20004fc4
 800cbd0:	20004fd0 	.word	0x20004fd0

0800cbd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cbde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbe0:	4b27      	ldr	r3, [pc, #156]	; (800cc80 <prvHeapInit+0xac>)
 800cbe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f003 0307 	and.w	r3, r3, #7
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00c      	beq.n	800cc08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	3307      	adds	r3, #7
 800cbf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f023 0307 	bic.w	r3, r3, #7
 800cbfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbfc:	68ba      	ldr	r2, [r7, #8]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	1ad3      	subs	r3, r2, r3
 800cc02:	4a1f      	ldr	r2, [pc, #124]	; (800cc80 <prvHeapInit+0xac>)
 800cc04:	4413      	add	r3, r2
 800cc06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc0c:	4a1d      	ldr	r2, [pc, #116]	; (800cc84 <prvHeapInit+0xb0>)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc12:	4b1c      	ldr	r3, [pc, #112]	; (800cc84 <prvHeapInit+0xb0>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	68ba      	ldr	r2, [r7, #8]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc20:	2208      	movs	r2, #8
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	1a9b      	subs	r3, r3, r2
 800cc26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f023 0307 	bic.w	r3, r3, #7
 800cc2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	4a15      	ldr	r2, [pc, #84]	; (800cc88 <prvHeapInit+0xb4>)
 800cc34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc36:	4b14      	ldr	r3, [pc, #80]	; (800cc88 <prvHeapInit+0xb4>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc3e:	4b12      	ldr	r3, [pc, #72]	; (800cc88 <prvHeapInit+0xb4>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2200      	movs	r2, #0
 800cc44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	1ad2      	subs	r2, r2, r3
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc54:	4b0c      	ldr	r3, [pc, #48]	; (800cc88 <prvHeapInit+0xb4>)
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	4a0a      	ldr	r2, [pc, #40]	; (800cc8c <prvHeapInit+0xb8>)
 800cc62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	4a09      	ldr	r2, [pc, #36]	; (800cc90 <prvHeapInit+0xbc>)
 800cc6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc6c:	4b09      	ldr	r3, [pc, #36]	; (800cc94 <prvHeapInit+0xc0>)
 800cc6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc72:	601a      	str	r2, [r3, #0]
}
 800cc74:	bf00      	nop
 800cc76:	3714      	adds	r7, #20
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr
 800cc80:	200013b8 	.word	0x200013b8
 800cc84:	20004fb8 	.word	0x20004fb8
 800cc88:	20004fc0 	.word	0x20004fc0
 800cc8c:	20004fc8 	.word	0x20004fc8
 800cc90:	20004fc4 	.word	0x20004fc4
 800cc94:	20004fd4 	.word	0x20004fd4

0800cc98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cca0:	4b28      	ldr	r3, [pc, #160]	; (800cd44 <prvInsertBlockIntoFreeList+0xac>)
 800cca2:	60fb      	str	r3, [r7, #12]
 800cca4:	e002      	b.n	800ccac <prvInsertBlockIntoFreeList+0x14>
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	60fb      	str	r3, [r7, #12]
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d8f7      	bhi.n	800cca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	68ba      	ldr	r2, [r7, #8]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d108      	bne.n	800ccda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	441a      	add	r2, r3
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	68ba      	ldr	r2, [r7, #8]
 800cce4:	441a      	add	r2, r3
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d118      	bne.n	800cd20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	4b15      	ldr	r3, [pc, #84]	; (800cd48 <prvInsertBlockIntoFreeList+0xb0>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d00d      	beq.n	800cd16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	685a      	ldr	r2, [r3, #4]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	441a      	add	r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	601a      	str	r2, [r3, #0]
 800cd14:	e008      	b.n	800cd28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd16:	4b0c      	ldr	r3, [pc, #48]	; (800cd48 <prvInsertBlockIntoFreeList+0xb0>)
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	601a      	str	r2, [r3, #0]
 800cd1e:	e003      	b.n	800cd28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd28:	68fa      	ldr	r2, [r7, #12]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d002      	beq.n	800cd36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd36:	bf00      	nop
 800cd38:	3714      	adds	r7, #20
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	20004fb8 	.word	0x20004fb8
 800cd48:	20004fc0 	.word	0x20004fc0

0800cd4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cd50:	2200      	movs	r2, #0
 800cd52:	4912      	ldr	r1, [pc, #72]	; (800cd9c <MX_USB_DEVICE_Init+0x50>)
 800cd54:	4812      	ldr	r0, [pc, #72]	; (800cda0 <MX_USB_DEVICE_Init+0x54>)
 800cd56:	f7fb ff47 	bl	8008be8 <USBD_Init>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d001      	beq.n	800cd64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cd60:	f7f4 f83a 	bl	8000dd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cd64:	490f      	ldr	r1, [pc, #60]	; (800cda4 <MX_USB_DEVICE_Init+0x58>)
 800cd66:	480e      	ldr	r0, [pc, #56]	; (800cda0 <MX_USB_DEVICE_Init+0x54>)
 800cd68:	f7fb ff6e 	bl	8008c48 <USBD_RegisterClass>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d001      	beq.n	800cd76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cd72:	f7f4 f831 	bl	8000dd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cd76:	490c      	ldr	r1, [pc, #48]	; (800cda8 <MX_USB_DEVICE_Init+0x5c>)
 800cd78:	4809      	ldr	r0, [pc, #36]	; (800cda0 <MX_USB_DEVICE_Init+0x54>)
 800cd7a:	f7fb fea5 	bl	8008ac8 <USBD_CDC_RegisterInterface>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d001      	beq.n	800cd88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cd84:	f7f4 f828 	bl	8000dd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cd88:	4805      	ldr	r0, [pc, #20]	; (800cda0 <MX_USB_DEVICE_Init+0x54>)
 800cd8a:	f7fb ff93 	bl	8008cb4 <USBD_Start>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d001      	beq.n	800cd98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cd94:	f7f4 f820 	bl	8000dd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cd98:	bf00      	nop
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	200000b0 	.word	0x200000b0
 800cda0:	20004fd8 	.word	0x20004fd8
 800cda4:	20000018 	.word	0x20000018
 800cda8:	2000009c 	.word	0x2000009c

0800cdac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	4905      	ldr	r1, [pc, #20]	; (800cdc8 <CDC_Init_FS+0x1c>)
 800cdb4:	4805      	ldr	r0, [pc, #20]	; (800cdcc <CDC_Init_FS+0x20>)
 800cdb6:	f7fb fea1 	bl	8008afc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cdba:	4905      	ldr	r1, [pc, #20]	; (800cdd0 <CDC_Init_FS+0x24>)
 800cdbc:	4803      	ldr	r0, [pc, #12]	; (800cdcc <CDC_Init_FS+0x20>)
 800cdbe:	f7fb febf 	bl	8008b40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cdc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	20005ab4 	.word	0x20005ab4
 800cdcc:	20004fd8 	.word	0x20004fd8
 800cdd0:	200052b4 	.word	0x200052b4

0800cdd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cdd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	4603      	mov	r3, r0
 800cdec:	6039      	str	r1, [r7, #0]
 800cdee:	71fb      	strb	r3, [r7, #7]
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cdf4:	79fb      	ldrb	r3, [r7, #7]
 800cdf6:	2b23      	cmp	r3, #35	; 0x23
 800cdf8:	d84a      	bhi.n	800ce90 <CDC_Control_FS+0xac>
 800cdfa:	a201      	add	r2, pc, #4	; (adr r2, 800ce00 <CDC_Control_FS+0x1c>)
 800cdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce00:	0800ce91 	.word	0x0800ce91
 800ce04:	0800ce91 	.word	0x0800ce91
 800ce08:	0800ce91 	.word	0x0800ce91
 800ce0c:	0800ce91 	.word	0x0800ce91
 800ce10:	0800ce91 	.word	0x0800ce91
 800ce14:	0800ce91 	.word	0x0800ce91
 800ce18:	0800ce91 	.word	0x0800ce91
 800ce1c:	0800ce91 	.word	0x0800ce91
 800ce20:	0800ce91 	.word	0x0800ce91
 800ce24:	0800ce91 	.word	0x0800ce91
 800ce28:	0800ce91 	.word	0x0800ce91
 800ce2c:	0800ce91 	.word	0x0800ce91
 800ce30:	0800ce91 	.word	0x0800ce91
 800ce34:	0800ce91 	.word	0x0800ce91
 800ce38:	0800ce91 	.word	0x0800ce91
 800ce3c:	0800ce91 	.word	0x0800ce91
 800ce40:	0800ce91 	.word	0x0800ce91
 800ce44:	0800ce91 	.word	0x0800ce91
 800ce48:	0800ce91 	.word	0x0800ce91
 800ce4c:	0800ce91 	.word	0x0800ce91
 800ce50:	0800ce91 	.word	0x0800ce91
 800ce54:	0800ce91 	.word	0x0800ce91
 800ce58:	0800ce91 	.word	0x0800ce91
 800ce5c:	0800ce91 	.word	0x0800ce91
 800ce60:	0800ce91 	.word	0x0800ce91
 800ce64:	0800ce91 	.word	0x0800ce91
 800ce68:	0800ce91 	.word	0x0800ce91
 800ce6c:	0800ce91 	.word	0x0800ce91
 800ce70:	0800ce91 	.word	0x0800ce91
 800ce74:	0800ce91 	.word	0x0800ce91
 800ce78:	0800ce91 	.word	0x0800ce91
 800ce7c:	0800ce91 	.word	0x0800ce91
 800ce80:	0800ce91 	.word	0x0800ce91
 800ce84:	0800ce91 	.word	0x0800ce91
 800ce88:	0800ce91 	.word	0x0800ce91
 800ce8c:	0800ce91 	.word	0x0800ce91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ce90:	bf00      	nop
  }

  return (USBD_OK);
 800ce92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ceaa:	6879      	ldr	r1, [r7, #4]
 800ceac:	4805      	ldr	r0, [pc, #20]	; (800cec4 <CDC_Receive_FS+0x24>)
 800ceae:	f7fb fe47 	bl	8008b40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ceb2:	4804      	ldr	r0, [pc, #16]	; (800cec4 <CDC_Receive_FS+0x24>)
 800ceb4:	f7fb fe62 	bl	8008b7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ceb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3708      	adds	r7, #8
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	20004fd8 	.word	0x20004fd8

0800cec8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b087      	sub	sp, #28
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	4613      	mov	r3, r2
 800ced4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ced6:	2300      	movs	r3, #0
 800ced8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ceda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	371c      	adds	r7, #28
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr
	...

0800ceec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	4603      	mov	r3, r0
 800cef4:	6039      	str	r1, [r7, #0]
 800cef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	2212      	movs	r2, #18
 800cefc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cefe:	4b03      	ldr	r3, [pc, #12]	; (800cf0c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr
 800cf0c:	200000cc 	.word	0x200000cc

0800cf10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	4603      	mov	r3, r0
 800cf18:	6039      	str	r1, [r7, #0]
 800cf1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	2204      	movs	r2, #4
 800cf20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cf22:	4b03      	ldr	r3, [pc, #12]	; (800cf30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	370c      	adds	r7, #12
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr
 800cf30:	200000e0 	.word	0x200000e0

0800cf34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	6039      	str	r1, [r7, #0]
 800cf3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf40:	79fb      	ldrb	r3, [r7, #7]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d105      	bne.n	800cf52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf46:	683a      	ldr	r2, [r7, #0]
 800cf48:	4907      	ldr	r1, [pc, #28]	; (800cf68 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf4a:	4808      	ldr	r0, [pc, #32]	; (800cf6c <USBD_FS_ProductStrDescriptor+0x38>)
 800cf4c:	f7fd f85e 	bl	800a00c <USBD_GetString>
 800cf50:	e004      	b.n	800cf5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	4904      	ldr	r1, [pc, #16]	; (800cf68 <USBD_FS_ProductStrDescriptor+0x34>)
 800cf56:	4805      	ldr	r0, [pc, #20]	; (800cf6c <USBD_FS_ProductStrDescriptor+0x38>)
 800cf58:	f7fd f858 	bl	800a00c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf5c:	4b02      	ldr	r3, [pc, #8]	; (800cf68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	200062b4 	.word	0x200062b4
 800cf6c:	0800d97c 	.word	0x0800d97c

0800cf70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	6039      	str	r1, [r7, #0]
 800cf7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	4904      	ldr	r1, [pc, #16]	; (800cf90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cf80:	4804      	ldr	r0, [pc, #16]	; (800cf94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cf82:	f7fd f843 	bl	800a00c <USBD_GetString>
  return USBD_StrDesc;
 800cf86:	4b02      	ldr	r3, [pc, #8]	; (800cf90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	200062b4 	.word	0x200062b4
 800cf94:	0800d988 	.word	0x0800d988

0800cf98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	6039      	str	r1, [r7, #0]
 800cfa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	221a      	movs	r2, #26
 800cfa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cfaa:	f000 f843 	bl	800d034 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cfae:	4b02      	ldr	r3, [pc, #8]	; (800cfb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	200000e4 	.word	0x200000e4

0800cfbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	6039      	str	r1, [r7, #0]
 800cfc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cfc8:	79fb      	ldrb	r3, [r7, #7]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d105      	bne.n	800cfda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cfce:	683a      	ldr	r2, [r7, #0]
 800cfd0:	4907      	ldr	r1, [pc, #28]	; (800cff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cfd2:	4808      	ldr	r0, [pc, #32]	; (800cff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cfd4:	f7fd f81a 	bl	800a00c <USBD_GetString>
 800cfd8:	e004      	b.n	800cfe4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	4904      	ldr	r1, [pc, #16]	; (800cff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cfde:	4805      	ldr	r0, [pc, #20]	; (800cff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cfe0:	f7fd f814 	bl	800a00c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfe4:	4b02      	ldr	r3, [pc, #8]	; (800cff0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3708      	adds	r7, #8
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	200062b4 	.word	0x200062b4
 800cff4:	0800d990 	.word	0x0800d990

0800cff8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	4603      	mov	r3, r0
 800d000:	6039      	str	r1, [r7, #0]
 800d002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d004:	79fb      	ldrb	r3, [r7, #7]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d105      	bne.n	800d016 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d00a:	683a      	ldr	r2, [r7, #0]
 800d00c:	4907      	ldr	r1, [pc, #28]	; (800d02c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d00e:	4808      	ldr	r0, [pc, #32]	; (800d030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d010:	f7fc fffc 	bl	800a00c <USBD_GetString>
 800d014:	e004      	b.n	800d020 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d016:	683a      	ldr	r2, [r7, #0]
 800d018:	4904      	ldr	r1, [pc, #16]	; (800d02c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d01a:	4805      	ldr	r0, [pc, #20]	; (800d030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d01c:	f7fc fff6 	bl	800a00c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d020:	4b02      	ldr	r3, [pc, #8]	; (800d02c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d022:	4618      	mov	r0, r3
 800d024:	3708      	adds	r7, #8
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	200062b4 	.word	0x200062b4
 800d030:	0800d99c 	.word	0x0800d99c

0800d034 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d03a:	4b0f      	ldr	r3, [pc, #60]	; (800d078 <Get_SerialNum+0x44>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d040:	4b0e      	ldr	r3, [pc, #56]	; (800d07c <Get_SerialNum+0x48>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d046:	4b0e      	ldr	r3, [pc, #56]	; (800d080 <Get_SerialNum+0x4c>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4413      	add	r3, r2
 800d052:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d009      	beq.n	800d06e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d05a:	2208      	movs	r2, #8
 800d05c:	4909      	ldr	r1, [pc, #36]	; (800d084 <Get_SerialNum+0x50>)
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f000 f814 	bl	800d08c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d064:	2204      	movs	r2, #4
 800d066:	4908      	ldr	r1, [pc, #32]	; (800d088 <Get_SerialNum+0x54>)
 800d068:	68b8      	ldr	r0, [r7, #8]
 800d06a:	f000 f80f 	bl	800d08c <IntToUnicode>
  }
}
 800d06e:	bf00      	nop
 800d070:	3710      	adds	r7, #16
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	1fff7a10 	.word	0x1fff7a10
 800d07c:	1fff7a14 	.word	0x1fff7a14
 800d080:	1fff7a18 	.word	0x1fff7a18
 800d084:	200000e6 	.word	0x200000e6
 800d088:	200000f6 	.word	0x200000f6

0800d08c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b087      	sub	sp, #28
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	4613      	mov	r3, r2
 800d098:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d09a:	2300      	movs	r3, #0
 800d09c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d09e:	2300      	movs	r3, #0
 800d0a0:	75fb      	strb	r3, [r7, #23]
 800d0a2:	e027      	b.n	800d0f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	0f1b      	lsrs	r3, r3, #28
 800d0a8:	2b09      	cmp	r3, #9
 800d0aa:	d80b      	bhi.n	800d0c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	0f1b      	lsrs	r3, r3, #28
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	7dfb      	ldrb	r3, [r7, #23]
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	440b      	add	r3, r1
 800d0bc:	3230      	adds	r2, #48	; 0x30
 800d0be:	b2d2      	uxtb	r2, r2
 800d0c0:	701a      	strb	r2, [r3, #0]
 800d0c2:	e00a      	b.n	800d0da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	0f1b      	lsrs	r3, r3, #28
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	7dfb      	ldrb	r3, [r7, #23]
 800d0cc:	005b      	lsls	r3, r3, #1
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	440b      	add	r3, r1
 800d0d4:	3237      	adds	r2, #55	; 0x37
 800d0d6:	b2d2      	uxtb	r2, r2
 800d0d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	011b      	lsls	r3, r3, #4
 800d0de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d0e0:	7dfb      	ldrb	r3, [r7, #23]
 800d0e2:	005b      	lsls	r3, r3, #1
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	68ba      	ldr	r2, [r7, #8]
 800d0e8:	4413      	add	r3, r2
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d0ee:	7dfb      	ldrb	r3, [r7, #23]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	75fb      	strb	r3, [r7, #23]
 800d0f4:	7dfa      	ldrb	r2, [r7, #23]
 800d0f6:	79fb      	ldrb	r3, [r7, #7]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d3d3      	bcc.n	800d0a4 <IntToUnicode+0x18>
  }
}
 800d0fc:	bf00      	nop
 800d0fe:	bf00      	nop
 800d100:	371c      	adds	r7, #28
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr
	...

0800d10c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b08a      	sub	sp, #40	; 0x28
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d114:	f107 0314 	add.w	r3, r7, #20
 800d118:	2200      	movs	r2, #0
 800d11a:	601a      	str	r2, [r3, #0]
 800d11c:	605a      	str	r2, [r3, #4]
 800d11e:	609a      	str	r2, [r3, #8]
 800d120:	60da      	str	r2, [r3, #12]
 800d122:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d12c:	d13a      	bne.n	800d1a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d12e:	2300      	movs	r3, #0
 800d130:	613b      	str	r3, [r7, #16]
 800d132:	4b1e      	ldr	r3, [pc, #120]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d136:	4a1d      	ldr	r2, [pc, #116]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d138:	f043 0301 	orr.w	r3, r3, #1
 800d13c:	6313      	str	r3, [r2, #48]	; 0x30
 800d13e:	4b1b      	ldr	r3, [pc, #108]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d142:	f003 0301 	and.w	r3, r3, #1
 800d146:	613b      	str	r3, [r7, #16]
 800d148:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d14a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d14e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d150:	2302      	movs	r3, #2
 800d152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d154:	2300      	movs	r3, #0
 800d156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d158:	2303      	movs	r3, #3
 800d15a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d15c:	230a      	movs	r3, #10
 800d15e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d160:	f107 0314 	add.w	r3, r7, #20
 800d164:	4619      	mov	r1, r3
 800d166:	4812      	ldr	r0, [pc, #72]	; (800d1b0 <HAL_PCD_MspInit+0xa4>)
 800d168:	f7f5 fb8a 	bl	8002880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d16c:	4b0f      	ldr	r3, [pc, #60]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d170:	4a0e      	ldr	r2, [pc, #56]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d176:	6353      	str	r3, [r2, #52]	; 0x34
 800d178:	2300      	movs	r3, #0
 800d17a:	60fb      	str	r3, [r7, #12]
 800d17c:	4b0b      	ldr	r3, [pc, #44]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d17e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d180:	4a0a      	ldr	r2, [pc, #40]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d186:	6453      	str	r3, [r2, #68]	; 0x44
 800d188:	4b08      	ldr	r3, [pc, #32]	; (800d1ac <HAL_PCD_MspInit+0xa0>)
 800d18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d18c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d190:	60fb      	str	r3, [r7, #12]
 800d192:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d194:	2200      	movs	r2, #0
 800d196:	2105      	movs	r1, #5
 800d198:	2043      	movs	r0, #67	; 0x43
 800d19a:	f7f5 f841 	bl	8002220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d19e:	2043      	movs	r0, #67	; 0x43
 800d1a0:	f7f5 f85a 	bl	8002258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d1a4:	bf00      	nop
 800d1a6:	3728      	adds	r7, #40	; 0x28
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	40023800 	.word	0x40023800
 800d1b0:	40020000 	.word	0x40020000

0800d1b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	4610      	mov	r0, r2
 800d1cc:	f7fb fdbf 	bl	8008d4e <USBD_LL_SetupStage>
}
 800d1d0:	bf00      	nop
 800d1d2:	3708      	adds	r7, #8
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d1ea:	78fa      	ldrb	r2, [r7, #3]
 800d1ec:	6879      	ldr	r1, [r7, #4]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	00db      	lsls	r3, r3, #3
 800d1f2:	4413      	add	r3, r2
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	440b      	add	r3, r1
 800d1f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	78fb      	ldrb	r3, [r7, #3]
 800d200:	4619      	mov	r1, r3
 800d202:	f7fb fdf9 	bl	8008df8 <USBD_LL_DataOutStage>
}
 800d206:	bf00      	nop
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b082      	sub	sp, #8
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	460b      	mov	r3, r1
 800d218:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d220:	78fa      	ldrb	r2, [r7, #3]
 800d222:	6879      	ldr	r1, [r7, #4]
 800d224:	4613      	mov	r3, r2
 800d226:	00db      	lsls	r3, r3, #3
 800d228:	4413      	add	r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	440b      	add	r3, r1
 800d22e:	334c      	adds	r3, #76	; 0x4c
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	78fb      	ldrb	r3, [r7, #3]
 800d234:	4619      	mov	r1, r3
 800d236:	f7fb fe92 	bl	8008f5e <USBD_LL_DataInStage>
}
 800d23a:	bf00      	nop
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b082      	sub	sp, #8
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d250:	4618      	mov	r0, r3
 800d252:	f7fb ffc6 	bl	80091e2 <USBD_LL_SOF>
}
 800d256:	bf00      	nop
 800d258:	3708      	adds	r7, #8
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b084      	sub	sp, #16
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d266:	2301      	movs	r3, #1
 800d268:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d102      	bne.n	800d278 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d272:	2300      	movs	r3, #0
 800d274:	73fb      	strb	r3, [r7, #15]
 800d276:	e008      	b.n	800d28a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d102      	bne.n	800d286 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d280:	2301      	movs	r3, #1
 800d282:	73fb      	strb	r3, [r7, #15]
 800d284:	e001      	b.n	800d28a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d286:	f7f3 fda7 	bl	8000dd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d290:	7bfa      	ldrb	r2, [r7, #15]
 800d292:	4611      	mov	r1, r2
 800d294:	4618      	mov	r0, r3
 800d296:	f7fb ff66 	bl	8009166 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7fb ff0e 	bl	80090c2 <USBD_LL_Reset>
}
 800d2a6:	bf00      	nop
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
	...

0800d2b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fb ff61 	bl	8009186 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	6812      	ldr	r2, [r2, #0]
 800d2d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d2d6:	f043 0301 	orr.w	r3, r3, #1
 800d2da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a1b      	ldr	r3, [r3, #32]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d005      	beq.n	800d2f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d2e4:	4b04      	ldr	r3, [pc, #16]	; (800d2f8 <HAL_PCD_SuspendCallback+0x48>)
 800d2e6:	691b      	ldr	r3, [r3, #16]
 800d2e8:	4a03      	ldr	r2, [pc, #12]	; (800d2f8 <HAL_PCD_SuspendCallback+0x48>)
 800d2ea:	f043 0306 	orr.w	r3, r3, #6
 800d2ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d2f0:	bf00      	nop
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	e000ed00 	.word	0xe000ed00

0800d2fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7fb ff51 	bl	80091b2 <USBD_LL_Resume>
}
 800d310:	bf00      	nop
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	460b      	mov	r3, r1
 800d322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d32a:	78fa      	ldrb	r2, [r7, #3]
 800d32c:	4611      	mov	r1, r2
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fb ffa9 	bl	8009286 <USBD_LL_IsoOUTIncomplete>
}
 800d334:	bf00      	nop
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	460b      	mov	r3, r1
 800d346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d34e:	78fa      	ldrb	r2, [r7, #3]
 800d350:	4611      	mov	r1, r2
 800d352:	4618      	mov	r0, r3
 800d354:	f7fb ff65 	bl	8009222 <USBD_LL_IsoINIncomplete>
}
 800d358:	bf00      	nop
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fb ffbb 	bl	80092ea <USBD_LL_DevConnected>
}
 800d374:	bf00      	nop
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fb ffb8 	bl	8009300 <USBD_LL_DevDisconnected>
}
 800d390:	bf00      	nop
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d13c      	bne.n	800d422 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d3a8:	4a20      	ldr	r2, [pc, #128]	; (800d42c <USBD_LL_Init+0x94>)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4a1e      	ldr	r2, [pc, #120]	; (800d42c <USBD_LL_Init+0x94>)
 800d3b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d3b8:	4b1c      	ldr	r3, [pc, #112]	; (800d42c <USBD_LL_Init+0x94>)
 800d3ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d3be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d3c0:	4b1a      	ldr	r3, [pc, #104]	; (800d42c <USBD_LL_Init+0x94>)
 800d3c2:	2204      	movs	r2, #4
 800d3c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d3c6:	4b19      	ldr	r3, [pc, #100]	; (800d42c <USBD_LL_Init+0x94>)
 800d3c8:	2202      	movs	r2, #2
 800d3ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d3cc:	4b17      	ldr	r3, [pc, #92]	; (800d42c <USBD_LL_Init+0x94>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d3d2:	4b16      	ldr	r3, [pc, #88]	; (800d42c <USBD_LL_Init+0x94>)
 800d3d4:	2202      	movs	r2, #2
 800d3d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d3d8:	4b14      	ldr	r3, [pc, #80]	; (800d42c <USBD_LL_Init+0x94>)
 800d3da:	2200      	movs	r2, #0
 800d3dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d3de:	4b13      	ldr	r3, [pc, #76]	; (800d42c <USBD_LL_Init+0x94>)
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d3e4:	4b11      	ldr	r3, [pc, #68]	; (800d42c <USBD_LL_Init+0x94>)
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d3ea:	4b10      	ldr	r3, [pc, #64]	; (800d42c <USBD_LL_Init+0x94>)
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d3f0:	4b0e      	ldr	r3, [pc, #56]	; (800d42c <USBD_LL_Init+0x94>)
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d3f6:	480d      	ldr	r0, [pc, #52]	; (800d42c <USBD_LL_Init+0x94>)
 800d3f8:	f7f5 fd56 	bl	8002ea8 <HAL_PCD_Init>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d001      	beq.n	800d406 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d402:	f7f3 fce9 	bl	8000dd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d406:	2180      	movs	r1, #128	; 0x80
 800d408:	4808      	ldr	r0, [pc, #32]	; (800d42c <USBD_LL_Init+0x94>)
 800d40a:	f7f6 ffae 	bl	800436a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d40e:	2240      	movs	r2, #64	; 0x40
 800d410:	2100      	movs	r1, #0
 800d412:	4806      	ldr	r0, [pc, #24]	; (800d42c <USBD_LL_Init+0x94>)
 800d414:	f7f6 ff62 	bl	80042dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d418:	2280      	movs	r2, #128	; 0x80
 800d41a:	2101      	movs	r1, #1
 800d41c:	4803      	ldr	r0, [pc, #12]	; (800d42c <USBD_LL_Init+0x94>)
 800d41e:	f7f6 ff5d 	bl	80042dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	200064b4 	.word	0x200064b4

0800d430 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d446:	4618      	mov	r0, r3
 800d448:	f7f5 fe4b 	bl	80030e2 <HAL_PCD_Start>
 800d44c:	4603      	mov	r3, r0
 800d44e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d450:	7bfb      	ldrb	r3, [r7, #15]
 800d452:	4618      	mov	r0, r3
 800d454:	f000 f942 	bl	800d6dc <USBD_Get_USB_Status>
 800d458:	4603      	mov	r3, r0
 800d45a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d45c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b084      	sub	sp, #16
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
 800d46e:	4608      	mov	r0, r1
 800d470:	4611      	mov	r1, r2
 800d472:	461a      	mov	r2, r3
 800d474:	4603      	mov	r3, r0
 800d476:	70fb      	strb	r3, [r7, #3]
 800d478:	460b      	mov	r3, r1
 800d47a:	70bb      	strb	r3, [r7, #2]
 800d47c:	4613      	mov	r3, r2
 800d47e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d480:	2300      	movs	r3, #0
 800d482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d48e:	78bb      	ldrb	r3, [r7, #2]
 800d490:	883a      	ldrh	r2, [r7, #0]
 800d492:	78f9      	ldrb	r1, [r7, #3]
 800d494:	f7f6 fb1c 	bl	8003ad0 <HAL_PCD_EP_Open>
 800d498:	4603      	mov	r3, r0
 800d49a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f000 f91c 	bl	800d6dc <USBD_Get_USB_Status>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b084      	sub	sp, #16
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d4cc:	78fa      	ldrb	r2, [r7, #3]
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7f6 fb65 	bl	8003ba0 <HAL_PCD_EP_Close>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4da:	7bfb      	ldrb	r3, [r7, #15]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f000 f8fd 	bl	800d6dc <USBD_Get_USB_Status>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d50a:	78fa      	ldrb	r2, [r7, #3]
 800d50c:	4611      	mov	r1, r2
 800d50e:	4618      	mov	r0, r3
 800d510:	f7f6 fc3d 	bl	8003d8e <HAL_PCD_EP_SetStall>
 800d514:	4603      	mov	r3, r0
 800d516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d518:	7bfb      	ldrb	r3, [r7, #15]
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 f8de 	bl	800d6dc <USBD_Get_USB_Status>
 800d520:	4603      	mov	r3, r0
 800d522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d524:	7bbb      	ldrb	r3, [r7, #14]
}
 800d526:	4618      	mov	r0, r3
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d52e:	b580      	push	{r7, lr}
 800d530:	b084      	sub	sp, #16
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
 800d536:	460b      	mov	r3, r1
 800d538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d53a:	2300      	movs	r3, #0
 800d53c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d53e:	2300      	movs	r3, #0
 800d540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d548:	78fa      	ldrb	r2, [r7, #3]
 800d54a:	4611      	mov	r1, r2
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7f6 fc82 	bl	8003e56 <HAL_PCD_EP_ClrStall>
 800d552:	4603      	mov	r3, r0
 800d554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d556:	7bfb      	ldrb	r3, [r7, #15]
 800d558:	4618      	mov	r0, r3
 800d55a:	f000 f8bf 	bl	800d6dc <USBD_Get_USB_Status>
 800d55e:	4603      	mov	r3, r0
 800d560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d562:	7bbb      	ldrb	r3, [r7, #14]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3710      	adds	r7, #16
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d57e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d584:	2b00      	cmp	r3, #0
 800d586:	da0b      	bge.n	800d5a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d588:	78fb      	ldrb	r3, [r7, #3]
 800d58a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d58e:	68f9      	ldr	r1, [r7, #12]
 800d590:	4613      	mov	r3, r2
 800d592:	00db      	lsls	r3, r3, #3
 800d594:	4413      	add	r3, r2
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	440b      	add	r3, r1
 800d59a:	333e      	adds	r3, #62	; 0x3e
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	e00b      	b.n	800d5b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d5a0:	78fb      	ldrb	r3, [r7, #3]
 800d5a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d5a6:	68f9      	ldr	r1, [r7, #12]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	00db      	lsls	r3, r3, #3
 800d5ac:	4413      	add	r3, r2
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	440b      	add	r3, r1
 800d5b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d5b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3714      	adds	r7, #20
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5de:	78fa      	ldrb	r2, [r7, #3]
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7f6 fa4f 	bl	8003a86 <HAL_PCD_SetAddress>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5ec:	7bfb      	ldrb	r3, [r7, #15]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f000 f874 	bl	800d6dc <USBD_Get_USB_Status>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b086      	sub	sp, #24
 800d606:	af00      	add	r7, sp, #0
 800d608:	60f8      	str	r0, [r7, #12]
 800d60a:	607a      	str	r2, [r7, #4]
 800d60c:	603b      	str	r3, [r7, #0]
 800d60e:	460b      	mov	r3, r1
 800d610:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d620:	7af9      	ldrb	r1, [r7, #11]
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	f7f6 fb68 	bl	8003cfa <HAL_PCD_EP_Transmit>
 800d62a:	4603      	mov	r3, r0
 800d62c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d62e:	7dfb      	ldrb	r3, [r7, #23]
 800d630:	4618      	mov	r0, r3
 800d632:	f000 f853 	bl	800d6dc <USBD_Get_USB_Status>
 800d636:	4603      	mov	r3, r0
 800d638:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d63a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3718      	adds	r7, #24
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b086      	sub	sp, #24
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	607a      	str	r2, [r7, #4]
 800d64e:	603b      	str	r3, [r7, #0]
 800d650:	460b      	mov	r3, r1
 800d652:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d654:	2300      	movs	r3, #0
 800d656:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d658:	2300      	movs	r3, #0
 800d65a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d662:	7af9      	ldrb	r1, [r7, #11]
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	f7f6 fae4 	bl	8003c34 <HAL_PCD_EP_Receive>
 800d66c:	4603      	mov	r3, r0
 800d66e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d670:	7dfb      	ldrb	r3, [r7, #23]
 800d672:	4618      	mov	r0, r3
 800d674:	f000 f832 	bl	800d6dc <USBD_Get_USB_Status>
 800d678:	4603      	mov	r3, r0
 800d67a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d67c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3718      	adds	r7, #24
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b082      	sub	sp, #8
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
 800d68e:	460b      	mov	r3, r1
 800d690:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d698:	78fa      	ldrb	r2, [r7, #3]
 800d69a:	4611      	mov	r1, r2
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7f6 fb14 	bl	8003cca <HAL_PCD_EP_GetRxCount>
 800d6a2:	4603      	mov	r3, r0
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d6b4:	4b03      	ldr	r3, [pc, #12]	; (800d6c4 <USBD_static_malloc+0x18>)
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	370c      	adds	r7, #12
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr
 800d6c2:	bf00      	nop
 800d6c4:	200069c0 	.word	0x200069c0

0800d6c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]

}
 800d6d0:	bf00      	nop
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d6ea:	79fb      	ldrb	r3, [r7, #7]
 800d6ec:	2b03      	cmp	r3, #3
 800d6ee:	d817      	bhi.n	800d720 <USBD_Get_USB_Status+0x44>
 800d6f0:	a201      	add	r2, pc, #4	; (adr r2, 800d6f8 <USBD_Get_USB_Status+0x1c>)
 800d6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f6:	bf00      	nop
 800d6f8:	0800d709 	.word	0x0800d709
 800d6fc:	0800d70f 	.word	0x0800d70f
 800d700:	0800d715 	.word	0x0800d715
 800d704:	0800d71b 	.word	0x0800d71b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d708:	2300      	movs	r3, #0
 800d70a:	73fb      	strb	r3, [r7, #15]
    break;
 800d70c:	e00b      	b.n	800d726 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d70e:	2303      	movs	r3, #3
 800d710:	73fb      	strb	r3, [r7, #15]
    break;
 800d712:	e008      	b.n	800d726 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d714:	2301      	movs	r3, #1
 800d716:	73fb      	strb	r3, [r7, #15]
    break;
 800d718:	e005      	b.n	800d726 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d71a:	2303      	movs	r3, #3
 800d71c:	73fb      	strb	r3, [r7, #15]
    break;
 800d71e:	e002      	b.n	800d726 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d720:	2303      	movs	r3, #3
 800d722:	73fb      	strb	r3, [r7, #15]
    break;
 800d724:	bf00      	nop
  }
  return usb_status;
 800d726:	7bfb      	ldrb	r3, [r7, #15]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3714      	adds	r7, #20
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <__libc_init_array>:
 800d734:	b570      	push	{r4, r5, r6, lr}
 800d736:	4d0d      	ldr	r5, [pc, #52]	; (800d76c <__libc_init_array+0x38>)
 800d738:	4c0d      	ldr	r4, [pc, #52]	; (800d770 <__libc_init_array+0x3c>)
 800d73a:	1b64      	subs	r4, r4, r5
 800d73c:	10a4      	asrs	r4, r4, #2
 800d73e:	2600      	movs	r6, #0
 800d740:	42a6      	cmp	r6, r4
 800d742:	d109      	bne.n	800d758 <__libc_init_array+0x24>
 800d744:	4d0b      	ldr	r5, [pc, #44]	; (800d774 <__libc_init_array+0x40>)
 800d746:	4c0c      	ldr	r4, [pc, #48]	; (800d778 <__libc_init_array+0x44>)
 800d748:	f000 f8f2 	bl	800d930 <_init>
 800d74c:	1b64      	subs	r4, r4, r5
 800d74e:	10a4      	asrs	r4, r4, #2
 800d750:	2600      	movs	r6, #0
 800d752:	42a6      	cmp	r6, r4
 800d754:	d105      	bne.n	800d762 <__libc_init_array+0x2e>
 800d756:	bd70      	pop	{r4, r5, r6, pc}
 800d758:	f855 3b04 	ldr.w	r3, [r5], #4
 800d75c:	4798      	blx	r3
 800d75e:	3601      	adds	r6, #1
 800d760:	e7ee      	b.n	800d740 <__libc_init_array+0xc>
 800d762:	f855 3b04 	ldr.w	r3, [r5], #4
 800d766:	4798      	blx	r3
 800d768:	3601      	adds	r6, #1
 800d76a:	e7f2      	b.n	800d752 <__libc_init_array+0x1e>
 800d76c:	0800daa0 	.word	0x0800daa0
 800d770:	0800daa0 	.word	0x0800daa0
 800d774:	0800daa0 	.word	0x0800daa0
 800d778:	0800daa4 	.word	0x0800daa4

0800d77c <__retarget_lock_acquire_recursive>:
 800d77c:	4770      	bx	lr

0800d77e <__retarget_lock_release_recursive>:
 800d77e:	4770      	bx	lr

0800d780 <memcpy>:
 800d780:	440a      	add	r2, r1
 800d782:	4291      	cmp	r1, r2
 800d784:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d788:	d100      	bne.n	800d78c <memcpy+0xc>
 800d78a:	4770      	bx	lr
 800d78c:	b510      	push	{r4, lr}
 800d78e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d792:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d796:	4291      	cmp	r1, r2
 800d798:	d1f9      	bne.n	800d78e <memcpy+0xe>
 800d79a:	bd10      	pop	{r4, pc}

0800d79c <memset>:
 800d79c:	4402      	add	r2, r0
 800d79e:	4603      	mov	r3, r0
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d100      	bne.n	800d7a6 <memset+0xa>
 800d7a4:	4770      	bx	lr
 800d7a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d7aa:	e7f9      	b.n	800d7a0 <memset+0x4>

0800d7ac <cleanup_glue>:
 800d7ac:	b538      	push	{r3, r4, r5, lr}
 800d7ae:	460c      	mov	r4, r1
 800d7b0:	6809      	ldr	r1, [r1, #0]
 800d7b2:	4605      	mov	r5, r0
 800d7b4:	b109      	cbz	r1, 800d7ba <cleanup_glue+0xe>
 800d7b6:	f7ff fff9 	bl	800d7ac <cleanup_glue>
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	4628      	mov	r0, r5
 800d7be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7c2:	f000 b869 	b.w	800d898 <_free_r>
	...

0800d7c8 <_reclaim_reent>:
 800d7c8:	4b2c      	ldr	r3, [pc, #176]	; (800d87c <_reclaim_reent+0xb4>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4283      	cmp	r3, r0
 800d7ce:	b570      	push	{r4, r5, r6, lr}
 800d7d0:	4604      	mov	r4, r0
 800d7d2:	d051      	beq.n	800d878 <_reclaim_reent+0xb0>
 800d7d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d7d6:	b143      	cbz	r3, 800d7ea <_reclaim_reent+0x22>
 800d7d8:	68db      	ldr	r3, [r3, #12]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d14a      	bne.n	800d874 <_reclaim_reent+0xac>
 800d7de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7e0:	6819      	ldr	r1, [r3, #0]
 800d7e2:	b111      	cbz	r1, 800d7ea <_reclaim_reent+0x22>
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	f000 f857 	bl	800d898 <_free_r>
 800d7ea:	6961      	ldr	r1, [r4, #20]
 800d7ec:	b111      	cbz	r1, 800d7f4 <_reclaim_reent+0x2c>
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f000 f852 	bl	800d898 <_free_r>
 800d7f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d7f6:	b111      	cbz	r1, 800d7fe <_reclaim_reent+0x36>
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f000 f84d 	bl	800d898 <_free_r>
 800d7fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d800:	b111      	cbz	r1, 800d808 <_reclaim_reent+0x40>
 800d802:	4620      	mov	r0, r4
 800d804:	f000 f848 	bl	800d898 <_free_r>
 800d808:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d80a:	b111      	cbz	r1, 800d812 <_reclaim_reent+0x4a>
 800d80c:	4620      	mov	r0, r4
 800d80e:	f000 f843 	bl	800d898 <_free_r>
 800d812:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d814:	b111      	cbz	r1, 800d81c <_reclaim_reent+0x54>
 800d816:	4620      	mov	r0, r4
 800d818:	f000 f83e 	bl	800d898 <_free_r>
 800d81c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d81e:	b111      	cbz	r1, 800d826 <_reclaim_reent+0x5e>
 800d820:	4620      	mov	r0, r4
 800d822:	f000 f839 	bl	800d898 <_free_r>
 800d826:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d828:	b111      	cbz	r1, 800d830 <_reclaim_reent+0x68>
 800d82a:	4620      	mov	r0, r4
 800d82c:	f000 f834 	bl	800d898 <_free_r>
 800d830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d832:	b111      	cbz	r1, 800d83a <_reclaim_reent+0x72>
 800d834:	4620      	mov	r0, r4
 800d836:	f000 f82f 	bl	800d898 <_free_r>
 800d83a:	69a3      	ldr	r3, [r4, #24]
 800d83c:	b1e3      	cbz	r3, 800d878 <_reclaim_reent+0xb0>
 800d83e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d840:	4620      	mov	r0, r4
 800d842:	4798      	blx	r3
 800d844:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d846:	b1b9      	cbz	r1, 800d878 <_reclaim_reent+0xb0>
 800d848:	4620      	mov	r0, r4
 800d84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d84e:	f7ff bfad 	b.w	800d7ac <cleanup_glue>
 800d852:	5949      	ldr	r1, [r1, r5]
 800d854:	b941      	cbnz	r1, 800d868 <_reclaim_reent+0xa0>
 800d856:	3504      	adds	r5, #4
 800d858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d85a:	2d80      	cmp	r5, #128	; 0x80
 800d85c:	68d9      	ldr	r1, [r3, #12]
 800d85e:	d1f8      	bne.n	800d852 <_reclaim_reent+0x8a>
 800d860:	4620      	mov	r0, r4
 800d862:	f000 f819 	bl	800d898 <_free_r>
 800d866:	e7ba      	b.n	800d7de <_reclaim_reent+0x16>
 800d868:	680e      	ldr	r6, [r1, #0]
 800d86a:	4620      	mov	r0, r4
 800d86c:	f000 f814 	bl	800d898 <_free_r>
 800d870:	4631      	mov	r1, r6
 800d872:	e7ef      	b.n	800d854 <_reclaim_reent+0x8c>
 800d874:	2500      	movs	r5, #0
 800d876:	e7ef      	b.n	800d858 <_reclaim_reent+0x90>
 800d878:	bd70      	pop	{r4, r5, r6, pc}
 800d87a:	bf00      	nop
 800d87c:	20000100 	.word	0x20000100

0800d880 <__malloc_lock>:
 800d880:	4801      	ldr	r0, [pc, #4]	; (800d888 <__malloc_lock+0x8>)
 800d882:	f7ff bf7b 	b.w	800d77c <__retarget_lock_acquire_recursive>
 800d886:	bf00      	nop
 800d888:	20006be0 	.word	0x20006be0

0800d88c <__malloc_unlock>:
 800d88c:	4801      	ldr	r0, [pc, #4]	; (800d894 <__malloc_unlock+0x8>)
 800d88e:	f7ff bf76 	b.w	800d77e <__retarget_lock_release_recursive>
 800d892:	bf00      	nop
 800d894:	20006be0 	.word	0x20006be0

0800d898 <_free_r>:
 800d898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d89a:	2900      	cmp	r1, #0
 800d89c:	d044      	beq.n	800d928 <_free_r+0x90>
 800d89e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8a2:	9001      	str	r0, [sp, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f1a1 0404 	sub.w	r4, r1, #4
 800d8aa:	bfb8      	it	lt
 800d8ac:	18e4      	addlt	r4, r4, r3
 800d8ae:	f7ff ffe7 	bl	800d880 <__malloc_lock>
 800d8b2:	4a1e      	ldr	r2, [pc, #120]	; (800d92c <_free_r+0x94>)
 800d8b4:	9801      	ldr	r0, [sp, #4]
 800d8b6:	6813      	ldr	r3, [r2, #0]
 800d8b8:	b933      	cbnz	r3, 800d8c8 <_free_r+0x30>
 800d8ba:	6063      	str	r3, [r4, #4]
 800d8bc:	6014      	str	r4, [r2, #0]
 800d8be:	b003      	add	sp, #12
 800d8c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8c4:	f7ff bfe2 	b.w	800d88c <__malloc_unlock>
 800d8c8:	42a3      	cmp	r3, r4
 800d8ca:	d908      	bls.n	800d8de <_free_r+0x46>
 800d8cc:	6825      	ldr	r5, [r4, #0]
 800d8ce:	1961      	adds	r1, r4, r5
 800d8d0:	428b      	cmp	r3, r1
 800d8d2:	bf01      	itttt	eq
 800d8d4:	6819      	ldreq	r1, [r3, #0]
 800d8d6:	685b      	ldreq	r3, [r3, #4]
 800d8d8:	1949      	addeq	r1, r1, r5
 800d8da:	6021      	streq	r1, [r4, #0]
 800d8dc:	e7ed      	b.n	800d8ba <_free_r+0x22>
 800d8de:	461a      	mov	r2, r3
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	b10b      	cbz	r3, 800d8e8 <_free_r+0x50>
 800d8e4:	42a3      	cmp	r3, r4
 800d8e6:	d9fa      	bls.n	800d8de <_free_r+0x46>
 800d8e8:	6811      	ldr	r1, [r2, #0]
 800d8ea:	1855      	adds	r5, r2, r1
 800d8ec:	42a5      	cmp	r5, r4
 800d8ee:	d10b      	bne.n	800d908 <_free_r+0x70>
 800d8f0:	6824      	ldr	r4, [r4, #0]
 800d8f2:	4421      	add	r1, r4
 800d8f4:	1854      	adds	r4, r2, r1
 800d8f6:	42a3      	cmp	r3, r4
 800d8f8:	6011      	str	r1, [r2, #0]
 800d8fa:	d1e0      	bne.n	800d8be <_free_r+0x26>
 800d8fc:	681c      	ldr	r4, [r3, #0]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	6053      	str	r3, [r2, #4]
 800d902:	4421      	add	r1, r4
 800d904:	6011      	str	r1, [r2, #0]
 800d906:	e7da      	b.n	800d8be <_free_r+0x26>
 800d908:	d902      	bls.n	800d910 <_free_r+0x78>
 800d90a:	230c      	movs	r3, #12
 800d90c:	6003      	str	r3, [r0, #0]
 800d90e:	e7d6      	b.n	800d8be <_free_r+0x26>
 800d910:	6825      	ldr	r5, [r4, #0]
 800d912:	1961      	adds	r1, r4, r5
 800d914:	428b      	cmp	r3, r1
 800d916:	bf04      	itt	eq
 800d918:	6819      	ldreq	r1, [r3, #0]
 800d91a:	685b      	ldreq	r3, [r3, #4]
 800d91c:	6063      	str	r3, [r4, #4]
 800d91e:	bf04      	itt	eq
 800d920:	1949      	addeq	r1, r1, r5
 800d922:	6021      	streq	r1, [r4, #0]
 800d924:	6054      	str	r4, [r2, #4]
 800d926:	e7ca      	b.n	800d8be <_free_r+0x26>
 800d928:	b003      	add	sp, #12
 800d92a:	bd30      	pop	{r4, r5, pc}
 800d92c:	20006be4 	.word	0x20006be4

0800d930 <_init>:
 800d930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d932:	bf00      	nop
 800d934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d936:	bc08      	pop	{r3}
 800d938:	469e      	mov	lr, r3
 800d93a:	4770      	bx	lr

0800d93c <_fini>:
 800d93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d93e:	bf00      	nop
 800d940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d942:	bc08      	pop	{r3}
 800d944:	469e      	mov	lr, r3
 800d946:	4770      	bx	lr
