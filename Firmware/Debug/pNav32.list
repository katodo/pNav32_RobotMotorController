
pNav32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019ce8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce0  08019e78  08019e78  00029e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ab58  0801ab58  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  0801ab58  0801ab58  0002ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ab60  0801ab60  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801ab60  0801ab60  0002ab60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ab68  0801ab68  0002ab68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0801ab6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030208  2**0
                  CONTENTS
 10 .bss          00012b28  20000208  20000208  00030208  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20012d30  20012d30  00030208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030f0e  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000709d  00000000  00000000  00061146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002590  00000000  00000000  000681e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022a0  00000000  00000000  0006a778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e160  00000000  00000000  0006ca18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032af7  00000000  00000000  0009ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5a42  00000000  00000000  000cd66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000083  00000000  00000000  001c30b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a9fc  00000000  00000000  001c3134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019e60 	.word	0x08019e60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08019e60 	.word	0x08019e60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002be:	f000 b9bf 	b.w	8000640 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000354:	f000 b974 	b.w	8000640 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	4604      	mov	r4, r0
 8000378:	468e      	mov	lr, r1
 800037a:	2b00      	cmp	r3, #0
 800037c:	d14d      	bne.n	800041a <__udivmoddi4+0xaa>
 800037e:	428a      	cmp	r2, r1
 8000380:	4694      	mov	ip, r2
 8000382:	d969      	bls.n	8000458 <__udivmoddi4+0xe8>
 8000384:	fab2 f282 	clz	r2, r2
 8000388:	b152      	cbz	r2, 80003a0 <__udivmoddi4+0x30>
 800038a:	fa01 f302 	lsl.w	r3, r1, r2
 800038e:	f1c2 0120 	rsb	r1, r2, #32
 8000392:	fa20 f101 	lsr.w	r1, r0, r1
 8000396:	fa0c fc02 	lsl.w	ip, ip, r2
 800039a:	ea41 0e03 	orr.w	lr, r1, r3
 800039e:	4094      	lsls	r4, r2
 80003a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a4:	0c21      	lsrs	r1, r4, #16
 80003a6:	fbbe f6f8 	udiv	r6, lr, r8
 80003aa:	fa1f f78c 	uxth.w	r7, ip
 80003ae:	fb08 e316 	mls	r3, r8, r6, lr
 80003b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003b6:	fb06 f107 	mul.w	r1, r6, r7
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003c6:	f080 811f 	bcs.w	8000608 <__udivmoddi4+0x298>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 811c 	bls.w	8000608 <__udivmoddi4+0x298>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e4:	fb00 f707 	mul.w	r7, r0, r7
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	d90a      	bls.n	8000402 <__udivmoddi4+0x92>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	f080 810a 	bcs.w	800060c <__udivmoddi4+0x29c>
 80003f8:	42a7      	cmp	r7, r4
 80003fa:	f240 8107 	bls.w	800060c <__udivmoddi4+0x29c>
 80003fe:	4464      	add	r4, ip
 8000400:	3802      	subs	r0, #2
 8000402:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000406:	1be4      	subs	r4, r4, r7
 8000408:	2600      	movs	r6, #0
 800040a:	b11d      	cbz	r5, 8000414 <__udivmoddi4+0xa4>
 800040c:	40d4      	lsrs	r4, r2
 800040e:	2300      	movs	r3, #0
 8000410:	e9c5 4300 	strd	r4, r3, [r5]
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0xc2>
 800041e:	2d00      	cmp	r5, #0
 8000420:	f000 80ef 	beq.w	8000602 <__udivmoddi4+0x292>
 8000424:	2600      	movs	r6, #0
 8000426:	e9c5 0100 	strd	r0, r1, [r5]
 800042a:	4630      	mov	r0, r6
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	fab3 f683 	clz	r6, r3
 8000436:	2e00      	cmp	r6, #0
 8000438:	d14a      	bne.n	80004d0 <__udivmoddi4+0x160>
 800043a:	428b      	cmp	r3, r1
 800043c:	d302      	bcc.n	8000444 <__udivmoddi4+0xd4>
 800043e:	4282      	cmp	r2, r0
 8000440:	f200 80f9 	bhi.w	8000636 <__udivmoddi4+0x2c6>
 8000444:	1a84      	subs	r4, r0, r2
 8000446:	eb61 0303 	sbc.w	r3, r1, r3
 800044a:	2001      	movs	r0, #1
 800044c:	469e      	mov	lr, r3
 800044e:	2d00      	cmp	r5, #0
 8000450:	d0e0      	beq.n	8000414 <__udivmoddi4+0xa4>
 8000452:	e9c5 4e00 	strd	r4, lr, [r5]
 8000456:	e7dd      	b.n	8000414 <__udivmoddi4+0xa4>
 8000458:	b902      	cbnz	r2, 800045c <__udivmoddi4+0xec>
 800045a:	deff      	udf	#255	; 0xff
 800045c:	fab2 f282 	clz	r2, r2
 8000460:	2a00      	cmp	r2, #0
 8000462:	f040 8092 	bne.w	800058a <__udivmoddi4+0x21a>
 8000466:	eba1 010c 	sub.w	r1, r1, ip
 800046a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046e:	fa1f fe8c 	uxth.w	lr, ip
 8000472:	2601      	movs	r6, #1
 8000474:	0c20      	lsrs	r0, r4, #16
 8000476:	fbb1 f3f7 	udiv	r3, r1, r7
 800047a:	fb07 1113 	mls	r1, r7, r3, r1
 800047e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000482:	fb0e f003 	mul.w	r0, lr, r3
 8000486:	4288      	cmp	r0, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x12c>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x12a>
 8000494:	4288      	cmp	r0, r1
 8000496:	f200 80cb 	bhi.w	8000630 <__udivmoddi4+0x2c0>
 800049a:	4643      	mov	r3, r8
 800049c:	1a09      	subs	r1, r1, r0
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a4:	fb07 1110 	mls	r1, r7, r0, r1
 80004a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ac:	fb0e fe00 	mul.w	lr, lr, r0
 80004b0:	45a6      	cmp	lr, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x156>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004bc:	d202      	bcs.n	80004c4 <__udivmoddi4+0x154>
 80004be:	45a6      	cmp	lr, r4
 80004c0:	f200 80bb 	bhi.w	800063a <__udivmoddi4+0x2ca>
 80004c4:	4608      	mov	r0, r1
 80004c6:	eba4 040e 	sub.w	r4, r4, lr
 80004ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ce:	e79c      	b.n	800040a <__udivmoddi4+0x9a>
 80004d0:	f1c6 0720 	rsb	r7, r6, #32
 80004d4:	40b3      	lsls	r3, r6
 80004d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004da:	ea4c 0c03 	orr.w	ip, ip, r3
 80004de:	fa20 f407 	lsr.w	r4, r0, r7
 80004e2:	fa01 f306 	lsl.w	r3, r1, r6
 80004e6:	431c      	orrs	r4, r3
 80004e8:	40f9      	lsrs	r1, r7
 80004ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ee:	fa00 f306 	lsl.w	r3, r0, r6
 80004f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004f6:	0c20      	lsrs	r0, r4, #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000500:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000504:	fb08 f00e 	mul.w	r0, r8, lr
 8000508:	4288      	cmp	r0, r1
 800050a:	fa02 f206 	lsl.w	r2, r2, r6
 800050e:	d90b      	bls.n	8000528 <__udivmoddi4+0x1b8>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000518:	f080 8088 	bcs.w	800062c <__udivmoddi4+0x2bc>
 800051c:	4288      	cmp	r0, r1
 800051e:	f240 8085 	bls.w	800062c <__udivmoddi4+0x2bc>
 8000522:	f1a8 0802 	sub.w	r8, r8, #2
 8000526:	4461      	add	r1, ip
 8000528:	1a09      	subs	r1, r1, r0
 800052a:	b2a4      	uxth	r4, r4
 800052c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000530:	fb09 1110 	mls	r1, r9, r0, r1
 8000534:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000538:	fb00 fe0e 	mul.w	lr, r0, lr
 800053c:	458e      	cmp	lr, r1
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x1e2>
 8000540:	eb1c 0101 	adds.w	r1, ip, r1
 8000544:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000548:	d26c      	bcs.n	8000624 <__udivmoddi4+0x2b4>
 800054a:	458e      	cmp	lr, r1
 800054c:	d96a      	bls.n	8000624 <__udivmoddi4+0x2b4>
 800054e:	3802      	subs	r0, #2
 8000550:	4461      	add	r1, ip
 8000552:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000556:	fba0 9402 	umull	r9, r4, r0, r2
 800055a:	eba1 010e 	sub.w	r1, r1, lr
 800055e:	42a1      	cmp	r1, r4
 8000560:	46c8      	mov	r8, r9
 8000562:	46a6      	mov	lr, r4
 8000564:	d356      	bcc.n	8000614 <__udivmoddi4+0x2a4>
 8000566:	d053      	beq.n	8000610 <__udivmoddi4+0x2a0>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x212>
 800056a:	ebb3 0208 	subs.w	r2, r3, r8
 800056e:	eb61 010e 	sbc.w	r1, r1, lr
 8000572:	fa01 f707 	lsl.w	r7, r1, r7
 8000576:	fa22 f306 	lsr.w	r3, r2, r6
 800057a:	40f1      	lsrs	r1, r6
 800057c:	431f      	orrs	r7, r3
 800057e:	e9c5 7100 	strd	r7, r1, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	40d8      	lsrs	r0, r3
 8000590:	fa0c fc02 	lsl.w	ip, ip, r2
 8000594:	fa21 f303 	lsr.w	r3, r1, r3
 8000598:	4091      	lsls	r1, r2
 800059a:	4301      	orrs	r1, r0
 800059c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a0:	fa1f fe8c 	uxth.w	lr, ip
 80005a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005a8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ac:	0c0b      	lsrs	r3, r1, #16
 80005ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005b2:	fb00 f60e 	mul.w	r6, r0, lr
 80005b6:	429e      	cmp	r6, r3
 80005b8:	fa04 f402 	lsl.w	r4, r4, r2
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x260>
 80005be:	eb1c 0303 	adds.w	r3, ip, r3
 80005c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005c6:	d22f      	bcs.n	8000628 <__udivmoddi4+0x2b8>
 80005c8:	429e      	cmp	r6, r3
 80005ca:	d92d      	bls.n	8000628 <__udivmoddi4+0x2b8>
 80005cc:	3802      	subs	r0, #2
 80005ce:	4463      	add	r3, ip
 80005d0:	1b9b      	subs	r3, r3, r6
 80005d2:	b289      	uxth	r1, r1
 80005d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005d8:	fb07 3316 	mls	r3, r7, r6, r3
 80005dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005e0:	fb06 f30e 	mul.w	r3, r6, lr
 80005e4:	428b      	cmp	r3, r1
 80005e6:	d908      	bls.n	80005fa <__udivmoddi4+0x28a>
 80005e8:	eb1c 0101 	adds.w	r1, ip, r1
 80005ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005f0:	d216      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d914      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005f6:	3e02      	subs	r6, #2
 80005f8:	4461      	add	r1, ip
 80005fa:	1ac9      	subs	r1, r1, r3
 80005fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000600:	e738      	b.n	8000474 <__udivmoddi4+0x104>
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e705      	b.n	8000414 <__udivmoddi4+0xa4>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e3      	b.n	80003d4 <__udivmoddi4+0x64>
 800060c:	4618      	mov	r0, r3
 800060e:	e6f8      	b.n	8000402 <__udivmoddi4+0x92>
 8000610:	454b      	cmp	r3, r9
 8000612:	d2a9      	bcs.n	8000568 <__udivmoddi4+0x1f8>
 8000614:	ebb9 0802 	subs.w	r8, r9, r2
 8000618:	eb64 0e0c 	sbc.w	lr, r4, ip
 800061c:	3801      	subs	r0, #1
 800061e:	e7a3      	b.n	8000568 <__udivmoddi4+0x1f8>
 8000620:	4646      	mov	r6, r8
 8000622:	e7ea      	b.n	80005fa <__udivmoddi4+0x28a>
 8000624:	4620      	mov	r0, r4
 8000626:	e794      	b.n	8000552 <__udivmoddi4+0x1e2>
 8000628:	4640      	mov	r0, r8
 800062a:	e7d1      	b.n	80005d0 <__udivmoddi4+0x260>
 800062c:	46d0      	mov	r8, sl
 800062e:	e77b      	b.n	8000528 <__udivmoddi4+0x1b8>
 8000630:	3b02      	subs	r3, #2
 8000632:	4461      	add	r1, ip
 8000634:	e732      	b.n	800049c <__udivmoddi4+0x12c>
 8000636:	4630      	mov	r0, r6
 8000638:	e709      	b.n	800044e <__udivmoddi4+0xde>
 800063a:	4464      	add	r4, ip
 800063c:	3802      	subs	r0, #2
 800063e:	e742      	b.n	80004c6 <__udivmoddi4+0x156>

08000640 <__aeabi_idiv0>:
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop

08000644 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <MX_ADC1_Init+0x98>)
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <MX_ADC1_Init+0x9c>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_ADC1_Init+0x98>)
 800065e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000662:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_ADC1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_ADC1_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_ADC1_Init+0x98>)
 8000686:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <MX_ADC1_Init+0xa0>)
 8000688:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_ADC1_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_ADC1_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_ADC1_Init+0x98>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <MX_ADC1_Init+0x98>)
 80006a6:	f002 faad 	bl	8002c04 <HAL_ADC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006b0:	f000 fff4 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_ADC1_Init+0x98>)
 80006c6:	f002 fae1 	bl	8002c8c <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006d0:	f000 ffe4 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000224 	.word	0x20000224
 80006e0:	40012000 	.word	0x40012000
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006fa:	4b64      	ldr	r3, [pc, #400]	; (800088c <MX_ADC3_Init+0x1a4>)
 80006fc:	4a64      	ldr	r2, [pc, #400]	; (8000890 <MX_ADC3_Init+0x1a8>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000700:	4b62      	ldr	r3, [pc, #392]	; (800088c <MX_ADC3_Init+0x1a4>)
 8000702:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000706:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000708:	4b60      	ldr	r3, [pc, #384]	; (800088c <MX_ADC3_Init+0x1a4>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800070e:	4b5f      	ldr	r3, [pc, #380]	; (800088c <MX_ADC3_Init+0x1a4>)
 8000710:	2201      	movs	r2, #1
 8000712:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000714:	4b5d      	ldr	r3, [pc, #372]	; (800088c <MX_ADC3_Init+0x1a4>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800071a:	4b5c      	ldr	r3, [pc, #368]	; (800088c <MX_ADC3_Init+0x1a4>)
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000722:	4b5a      	ldr	r3, [pc, #360]	; (800088c <MX_ADC3_Init+0x1a4>)
 8000724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 800072a:	4b58      	ldr	r3, [pc, #352]	; (800088c <MX_ADC3_Init+0x1a4>)
 800072c:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000732:	4b56      	ldr	r3, [pc, #344]	; (800088c <MX_ADC3_Init+0x1a4>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 12;
 8000738:	4b54      	ldr	r3, [pc, #336]	; (800088c <MX_ADC3_Init+0x1a4>)
 800073a:	220c      	movs	r2, #12
 800073c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800073e:	4b53      	ldr	r3, [pc, #332]	; (800088c <MX_ADC3_Init+0x1a4>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000746:	4b51      	ldr	r3, [pc, #324]	; (800088c <MX_ADC3_Init+0x1a4>)
 8000748:	2201      	movs	r2, #1
 800074a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800074c:	484f      	ldr	r0, [pc, #316]	; (800088c <MX_ADC3_Init+0x1a4>)
 800074e:	f002 fa59 	bl	8002c04 <HAL_ADC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8000758:	f000 ffa0 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800075c:	230a      	movs	r3, #10
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000768:	463b      	mov	r3, r7
 800076a:	4619      	mov	r1, r3
 800076c:	4847      	ldr	r0, [pc, #284]	; (800088c <MX_ADC3_Init+0x1a4>)
 800076e:	f002 fa8d 	bl	8002c8c <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000778:	f000 ff90 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	4841      	ldr	r0, [pc, #260]	; (800088c <MX_ADC3_Init+0x1a4>)
 8000786:	f002 fa81 	bl	8002c8c <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000790:	f000 ff84 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000794:	2303      	movs	r3, #3
 8000796:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	483b      	ldr	r0, [pc, #236]	; (800088c <MX_ADC3_Init+0x1a4>)
 800079e:	f002 fa75 	bl	8002c8c <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 80007a8:	f000 ff78 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	4835      	ldr	r0, [pc, #212]	; (800088c <MX_ADC3_Init+0x1a4>)
 80007b6:	f002 fa69 	bl	8002c8c <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80007c0:	f000 ff6c 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 80007c4:	2305      	movs	r3, #5
 80007c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	482f      	ldr	r0, [pc, #188]	; (800088c <MX_ADC3_Init+0x1a4>)
 80007ce:	f002 fa5d 	bl	8002c8c <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 80007d8:	f000 ff60 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 80007dc:	2306      	movs	r3, #6
 80007de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4829      	ldr	r0, [pc, #164]	; (800088c <MX_ADC3_Init+0x1a4>)
 80007e6:	f002 fa51 	bl	8002c8c <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC3_Init+0x10c>
  {
    Error_Handler();
 80007f0:	f000 ff54 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 80007f4:	2307      	movs	r3, #7
 80007f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	4823      	ldr	r0, [pc, #140]	; (800088c <MX_ADC3_Init+0x1a4>)
 80007fe:	f002 fa45 	bl	8002c8c <HAL_ADC_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC3_Init+0x124>
  {
    Error_Handler();
 8000808:	f000 ff48 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 800080c:	2308      	movs	r3, #8
 800080e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	481d      	ldr	r0, [pc, #116]	; (800088c <MX_ADC3_Init+0x1a4>)
 8000816:	f002 fa39 	bl	8002c8c <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC3_Init+0x13c>
  {
    Error_Handler();
 8000820:	f000 ff3c 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 9;
 8000824:	2309      	movs	r3, #9
 8000826:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4817      	ldr	r0, [pc, #92]	; (800088c <MX_ADC3_Init+0x1a4>)
 800082e:	f002 fa2d 	bl	8002c8c <HAL_ADC_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC3_Init+0x154>
  {
    Error_Handler();
 8000838:	f000 ff30 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 10;
 800083c:	230a      	movs	r3, #10
 800083e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	4619      	mov	r1, r3
 8000844:	4811      	ldr	r0, [pc, #68]	; (800088c <MX_ADC3_Init+0x1a4>)
 8000846:	f002 fa21 	bl	8002c8c <HAL_ADC_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ADC3_Init+0x16c>
  {
    Error_Handler();
 8000850:	f000 ff24 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 11;
 8000854:	230b      	movs	r3, #11
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	480b      	ldr	r0, [pc, #44]	; (800088c <MX_ADC3_Init+0x1a4>)
 800085e:	f002 fa15 	bl	8002c8c <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC3_Init+0x184>
  {
    Error_Handler();
 8000868:	f000 ff18 	bl	800169c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 12;
 800086c:	230c      	movs	r3, #12
 800086e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_ADC3_Init+0x1a4>)
 8000876:	f002 fa09 	bl	8002c8c <HAL_ADC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC3_Init+0x19c>
  {
    Error_Handler();
 8000880:	f000 ff0c 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000026c 	.word	0x2000026c
 8000890:	40012200 	.word	0x40012200

08000894 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a53      	ldr	r2, [pc, #332]	; (8000a00 <HAL_ADC_MspInit+0x16c>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d142      	bne.n	800093c <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	4b52      	ldr	r3, [pc, #328]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a51      	ldr	r2, [pc, #324]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 80008c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b4f      	ldr	r3, [pc, #316]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	4b4b      	ldr	r3, [pc, #300]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a4a      	ldr	r2, [pc, #296]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a43      	ldr	r2, [pc, #268]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b41      	ldr	r3, [pc, #260]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC_VREF_Pin;
 800090a:	2304      	movs	r3, #4
 800090c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090e:	2303      	movs	r3, #3
 8000910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_VREF_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	483a      	ldr	r0, [pc, #232]	; (8000a08 <HAL_ADC_MspInit+0x174>)
 800091e:	f003 f8d3 	bl	8003ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_TEMP_Pin;
 8000922:	2304      	movs	r3, #4
 8000924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000926:	2303      	movs	r3, #3
 8000928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_TEMP_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4835      	ldr	r0, [pc, #212]	; (8000a0c <HAL_ADC_MspInit+0x178>)
 8000936:	f003 f8c7 	bl	8003ac8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800093a:	e05d      	b.n	80009f8 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC3)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <HAL_ADC_MspInit+0x17c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d158      	bne.n	80009f8 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a2d      	ldr	r2, [pc, #180]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 8000950:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a26      	ldr	r2, [pc, #152]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <HAL_ADC_MspInit+0x170>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_MOT1_CUR_Pin|ADC_MOT2_CUR_Pin|ADC_VREF_Pin;
 800097e:	2307      	movs	r3, #7
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	481d      	ldr	r0, [pc, #116]	; (8000a08 <HAL_ADC_MspInit+0x174>)
 8000992:	f003 f899 	bl	8003ac8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <HAL_ADC_MspInit+0x180>)
 8000998:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <HAL_ADC_MspInit+0x184>)
 800099a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <HAL_ADC_MspInit+0x180>)
 800099e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009a2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <HAL_ADC_MspInit+0x180>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <HAL_ADC_MspInit+0x180>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <HAL_ADC_MspInit+0x180>)
 80009b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_ADC_MspInit+0x180>)
 80009ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009be:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_ADC_MspInit+0x180>)
 80009c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_ADC_MspInit+0x180>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_ADC_MspInit+0x180>)
 80009d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009d4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_ADC_MspInit+0x180>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <HAL_ADC_MspInit+0x180>)
 80009de:	f002 fc71 	bl	80032c4 <HAL_DMA_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <HAL_ADC_MspInit+0x158>
      Error_Handler();
 80009e8:	f000 fe58 	bl	800169c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <HAL_ADC_MspInit+0x180>)
 80009f0:	639a      	str	r2, [r3, #56]	; 0x38
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_ADC_MspInit+0x180>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80009f8:	bf00      	nop
 80009fa:	3730      	adds	r7, #48	; 0x30
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40012000 	.word	0x40012000
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40012200 	.word	0x40012200
 8000a14:	200002b4 	.word	0x200002b4
 8000a18:	40026410 	.word	0x40026410

08000a1c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_CRC_Init+0x20>)
 8000a22:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <MX_CRC_Init+0x24>)
 8000a24:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_CRC_Init+0x20>)
 8000a28:	f002 fc30 	bl	800328c <HAL_CRC_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a32:	f000 fe33 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000314 	.word	0x20000314
 8000a40:	40023000 	.word	0x40023000

08000a44 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <HAL_CRC_MspInit+0x3c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d10d      	bne.n	8000a72 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <HAL_CRC_MspInit+0x40>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <HAL_CRC_MspInit+0x40>)
 8000a60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <HAL_CRC_MspInit+0x40>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023000 	.word	0x40023000
 8000a84:	40023800 	.word	0x40023800

08000a88 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000a94:	f00c fdd8 	bl	800d648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000a98:	4b58      	ldr	r3, [pc, #352]	; (8000bfc <pvPortMallocMicroROS+0x174>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d101      	bne.n	8000aa4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000aa0:	f000 f980 	bl	8000da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000aa4:	4b56      	ldr	r3, [pc, #344]	; (8000c00 <pvPortMallocMicroROS+0x178>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f040 808e 	bne.w	8000bce <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d01d      	beq.n	8000af4 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000ab8:	2208      	movs	r2, #8
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d014      	beq.n	8000af4 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f023 0307 	bic.w	r3, r3, #7
 8000ad0:	3308      	adds	r3, #8
 8000ad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d00a      	beq.n	8000af4 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ae2:	f383 8811 	msr	BASEPRI, r3
 8000ae6:	f3bf 8f6f 	isb	sy
 8000aea:	f3bf 8f4f 	dsb	sy
 8000aee:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000af0:	bf00      	nop
 8000af2:	e7fe      	b.n	8000af2 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d069      	beq.n	8000bce <pvPortMallocMicroROS+0x146>
 8000afa:	4b42      	ldr	r3, [pc, #264]	; (8000c04 <pvPortMallocMicroROS+0x17c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d864      	bhi.n	8000bce <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000b04:	4b40      	ldr	r3, [pc, #256]	; (8000c08 <pvPortMallocMicroROS+0x180>)
 8000b06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000b08:	4b3f      	ldr	r3, [pc, #252]	; (8000c08 <pvPortMallocMicroROS+0x180>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b0e:	e004      	b.n	8000b1a <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d903      	bls.n	8000b2c <pvPortMallocMicroROS+0xa4>
 8000b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1f1      	bne.n	8000b10 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000b2c:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <pvPortMallocMicroROS+0x174>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d04b      	beq.n	8000bce <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000b36:	6a3b      	ldr	r3, [r7, #32]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	4413      	add	r3, r2
 8000b3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	1ad2      	subs	r2, r2, r3
 8000b50:	2308      	movs	r3, #8
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d91f      	bls.n	8000b98 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00a      	beq.n	8000b80 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b6e:	f383 8811 	msr	BASEPRI, r3
 8000b72:	f3bf 8f6f 	isb	sy
 8000b76:	f3bf 8f4f 	dsb	sy
 8000b7a:	613b      	str	r3, [r7, #16]
}
 8000b7c:	bf00      	nop
 8000b7e:	e7fe      	b.n	8000b7e <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	1ad2      	subs	r2, r2, r3
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000b92:	69b8      	ldr	r0, [r7, #24]
 8000b94:	f000 f968 	bl	8000e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <pvPortMallocMicroROS+0x17c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <pvPortMallocMicroROS+0x17c>)
 8000ba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <pvPortMallocMicroROS+0x17c>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <pvPortMallocMicroROS+0x184>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d203      	bcs.n	8000bba <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <pvPortMallocMicroROS+0x17c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a15      	ldr	r2, [pc, #84]	; (8000c0c <pvPortMallocMicroROS+0x184>)
 8000bb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <pvPortMallocMicroROS+0x178>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000bce:	f00c fd49 	bl	800d664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	f003 0307 	and.w	r3, r3, #7
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00a      	beq.n	8000bf2 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000be0:	f383 8811 	msr	BASEPRI, r3
 8000be4:	f3bf 8f6f 	isb	sy
 8000be8:	f3bf 8f4f 	dsb	sy
 8000bec:	60fb      	str	r3, [r7, #12]
}
 8000bee:	bf00      	nop
 8000bf0:	e7fe      	b.n	8000bf0 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8000bf2:	69fb      	ldr	r3, [r7, #28]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20003f24 	.word	0x20003f24
 8000c00:	20003f30 	.word	0x20003f30
 8000c04:	20003f28 	.word	0x20003f28
 8000c08:	20003f1c 	.word	0x20003f1c
 8000c0c:	20003f2c 	.word	0x20003f2c

08000c10 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d048      	beq.n	8000cb4 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000c22:	2308      	movs	r3, #8
 8000c24:	425b      	negs	r3, r3
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	4413      	add	r3, r2
 8000c2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <vPortFreeMicroROS+0xac>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10a      	bne.n	8000c54 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c42:	f383 8811 	msr	BASEPRI, r3
 8000c46:	f3bf 8f6f 	isb	sy
 8000c4a:	f3bf 8f4f 	dsb	sy
 8000c4e:	60fb      	str	r3, [r7, #12]
}
 8000c50:	bf00      	nop
 8000c52:	e7fe      	b.n	8000c52 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d00a      	beq.n	8000c72 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c60:	f383 8811 	msr	BASEPRI, r3
 8000c64:	f3bf 8f6f 	isb	sy
 8000c68:	f3bf 8f4f 	dsb	sy
 8000c6c:	60bb      	str	r3, [r7, #8]
}
 8000c6e:	bf00      	nop
 8000c70:	e7fe      	b.n	8000c70 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <vPortFreeMicroROS+0xac>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d019      	beq.n	8000cb4 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d115      	bne.n	8000cb4 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <vPortFreeMicroROS+0xac>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	401a      	ands	r2, r3
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000c98:	f00c fcd6 	bl	800d648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <vPortFreeMicroROS+0xb0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <vPortFreeMicroROS+0xb0>)
 8000ca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000caa:	6938      	ldr	r0, [r7, #16]
 8000cac:	f000 f8dc 	bl	8000e68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000cb0:	f00c fcd8 	bl	800d664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20003f30 	.word	0x20003f30
 8000cc0:	20003f28 	.word	0x20003f28

08000cc4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	425b      	negs	r3, r3
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <getBlockSize+0x38>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]

	return count;
 8000cec:	68fb      	ldr	r3, [r7, #12]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20003f30 	.word	0x20003f30

08000d00 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000d0a:	f00c fc9d 	bl	800d648 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000d0e:	6838      	ldr	r0, [r7, #0]
 8000d10:	f7ff feba 	bl	8000a88 <pvPortMallocMicroROS>
 8000d14:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d017      	beq.n	8000d4c <pvPortReallocMicroROS+0x4c>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d014      	beq.n	8000d4c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffce 	bl	8000cc4 <getBlockSize>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d201      	bcs.n	8000d3c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	68b8      	ldr	r0, [r7, #8]
 8000d42:	f017 fd93 	bl	801886c <memcpy>

		vPortFreeMicroROS(pv);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff62 	bl	8000c10 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000d4c:	f00c fc8a 	bl	800d664 <xTaskResumeAll>

	return newmem;
 8000d50:	68bb      	ldr	r3, [r7, #8]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000d64:	f00c fc70 	bl	800d648 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	fb02 f303 	mul.w	r3, r2, r3
 8000d70:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000d72:	6978      	ldr	r0, [r7, #20]
 8000d74:	f7ff fe88 	bl	8000a88 <pvPortMallocMicroROS>
 8000d78:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000d7e:	e004      	b.n	8000d8a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	613a      	str	r2, [r7, #16]
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	617a      	str	r2, [r7, #20]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f5      	bne.n	8000d80 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000d94:	f00c fc66 	bl	800d664 <xTaskResumeAll>
  	return mem;
 8000d98:	68fb      	ldr	r3, [r7, #12]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000daa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <prvHeapInit+0xac>)
 8000db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00c      	beq.n	8000dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3307      	adds	r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f023 0307 	bic.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <prvHeapInit+0xac>)
 8000dd4:	4413      	add	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000ddc:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <prvHeapInit+0xb0>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <prvHeapInit+0xb0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	4413      	add	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000df0:	2208      	movs	r2, #8
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	1a9b      	subs	r3, r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f023 0307 	bic.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <prvHeapInit+0xb4>)
 8000e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <prvHeapInit+0xb4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <prvHeapInit+0xb4>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	1ad2      	subs	r2, r2, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <prvHeapInit+0xb4>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <prvHeapInit+0xb8>)
 8000e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <prvHeapInit+0xbc>)
 8000e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <prvHeapInit+0xc0>)
 8000e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000e42:	601a      	str	r2, [r3, #0]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	2000031c 	.word	0x2000031c
 8000e54:	20003f1c 	.word	0x20003f1c
 8000e58:	20003f24 	.word	0x20003f24
 8000e5c:	20003f2c 	.word	0x20003f2c
 8000e60:	20003f28 	.word	0x20003f28
 8000e64:	20003f30 	.word	0x20003f30

08000e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <prvInsertBlockIntoFreeList+0xac>)
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	e002      	b.n	8000e7c <prvInsertBlockIntoFreeList+0x14>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d8f7      	bhi.n	8000e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	4413      	add	r3, r2
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d108      	bne.n	8000eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	441a      	add	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	441a      	add	r2, r3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d118      	bne.n	8000ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <prvInsertBlockIntoFreeList+0xb0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d00d      	beq.n	8000ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	441a      	add	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	e008      	b.n	8000ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <prvInsertBlockIntoFreeList+0xb0>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	e003      	b.n	8000ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d002      	beq.n	8000f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20003f1c 	.word	0x20003f1c
 8000f18:	20003f24 	.word	0x20003f24

08000f1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <MX_DMA_Init+0x98>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <MX_DMA_Init+0x98>)
 8000f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <MX_DMA_Init+0x98>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <MX_DMA_Init+0x98>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <MX_DMA_Init+0x98>)
 8000f48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_DMA_Init+0x98>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	200c      	movs	r0, #12
 8000f60:	f002 f96a 	bl	8003238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f64:	200c      	movs	r0, #12
 8000f66:	f002 f983 	bl	8003270 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2105      	movs	r1, #5
 8000f6e:	200e      	movs	r0, #14
 8000f70:	f002 f962 	bl	8003238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f74:	200e      	movs	r0, #14
 8000f76:	f002 f97b 	bl	8003270 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	2038      	movs	r0, #56	; 0x38
 8000f80:	f002 f95a 	bl	8003238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f84:	2038      	movs	r0, #56	; 0x38
 8000f86:	f002 f973 	bl	8003270 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	203a      	movs	r0, #58	; 0x3a
 8000f90:	f002 f952 	bl	8003238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f94:	203a      	movs	r0, #58	; 0x3a
 8000f96:	f002 f96b 	bl	8003270 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2105      	movs	r1, #5
 8000f9e:	2046      	movs	r0, #70	; 0x46
 8000fa0:	f002 f94a 	bl	8003238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000fa4:	2046      	movs	r0, #70	; 0x46
 8000fa6:	f002 f963 	bl	8003270 <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000fc6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fcc:	4904      	ldr	r1, [pc, #16]	; (8000fe0 <cubemx_transport_open+0x28>)
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f006 fc5a 	bl	8007888 <HAL_UART_Receive_DMA>
    return true;
 8000fd4:	2301      	movs	r3, #1
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20003f34 	.word	0x20003f34

08000fe4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000ff2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f006 fc77 	bl	80078e8 <HAL_UART_DMAStop>
    return true;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001018:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b20      	cmp	r3, #32
 8001024:	d11c      	bne.n	8001060 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	b29b      	uxth	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f006 fbac 	bl	800778c <HAL_UART_Transmit_DMA>
 8001034:	4603      	mov	r3, r0
 8001036:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001038:	e002      	b.n	8001040 <cubemx_transport_write+0x3c>
            osDelay(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f00b fab8 	bl	800c5b0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001040:	7cfb      	ldrb	r3, [r7, #19]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d105      	bne.n	8001052 <cubemx_transport_write+0x4e>
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b20      	cmp	r3, #32
 8001050:	d1f3      	bne.n	800103a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001052:	7cfb      	ldrb	r3, [r7, #19]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <cubemx_transport_write+0x58>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	e002      	b.n	8001062 <cubemx_transport_write+0x5e>
 800105c:	2300      	movs	r3, #0
 800105e:	e000      	b.n	8001062 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001060:	2300      	movs	r3, #0
    }
}
 8001062:	4618      	mov	r0, r3
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001080:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001086:	b672      	cpsid	i
}
 8001088:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <cubemx_transport_read+0x9c>)
 8001098:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800109a:	b662      	cpsie	i
}
 800109c:	bf00      	nop
        __enable_irq();
        ms_used++;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3301      	adds	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f00b fa83 	bl	800c5b0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <cubemx_transport_read+0xa0>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <cubemx_transport_read+0x9c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d103      	bne.n	80010be <cubemx_transport_read+0x52>
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dbe3      	blt.n	8001086 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010c2:	e011      	b.n	80010e8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <cubemx_transport_read+0xa0>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	440b      	add	r3, r1
 80010ce:	4910      	ldr	r1, [pc, #64]	; (8001110 <cubemx_transport_read+0xa4>)
 80010d0:	5c8a      	ldrb	r2, [r1, r2]
 80010d2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <cubemx_transport_read+0xa0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <cubemx_transport_read+0xa0>)
 80010e0:	6013      	str	r3, [r2, #0]
        wrote++;
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	3301      	adds	r3, #1
 80010e6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <cubemx_transport_read+0xa0>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <cubemx_transport_read+0x9c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d003      	beq.n	80010fc <cubemx_transport_read+0x90>
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3e3      	bcc.n	80010c4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80010fc:	69bb      	ldr	r3, [r7, #24]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3720      	adds	r7, #32
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20004738 	.word	0x20004738
 800110c:	20004734 	.word	0x20004734
 8001110:	20003f34 	.word	0x20003f34

08001114 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8001118:	4a0c      	ldr	r2, [pc, #48]	; (800114c <MX_FREERTOS_Init+0x38>)
 800111a:	2100      	movs	r1, #0
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <MX_FREERTOS_Init+0x3c>)
 800111e:	f00b f9b5 	bl	800c48c <osThreadNew>
 8001122:	4603      	mov	r3, r0
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <MX_FREERTOS_Init+0x40>)
 8001126:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8001128:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <MX_FREERTOS_Init+0x44>)
 800112a:	2100      	movs	r1, #0
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <MX_FREERTOS_Init+0x48>)
 800112e:	f00b f9ad 	bl	800c48c <osThreadNew>
 8001132:	4603      	mov	r3, r0
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <MX_FREERTOS_Init+0x4c>)
 8001136:	6013      	str	r3, [r2, #0]

  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <MX_FREERTOS_Init+0x50>)
 800113a:	2100      	movs	r1, #0
 800113c:	480a      	ldr	r0, [pc, #40]	; (8001168 <MX_FREERTOS_Init+0x54>)
 800113e:	f00b f9a5 	bl	800c48c <osThreadNew>
 8001142:	4603      	mov	r3, r0
 8001144:	4a09      	ldr	r2, [pc, #36]	; (800116c <MX_FREERTOS_Init+0x58>)
 8001146:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	08019f50 	.word	0x08019f50
 8001150:	08001171 	.word	0x08001171
 8001154:	2000473c 	.word	0x2000473c
 8001158:	08019f74 	.word	0x08019f74
 800115c:	08001191 	.word	0x08001191
 8001160:	20004740 	.word	0x20004740
 8001164:	08019f98 	.word	0x08019f98
 8001168:	080011b1 	.word	0x080011b1
 800116c:	20004744 	.word	0x20004744

08001170 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001178:	f00d fee0 	bl	800ef3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartBlink01 */
  /* Infinite loop */
  for(;;)
  {   HAL_GPIO_TogglePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin);
 800117c:	2140      	movs	r1, #64	; 0x40
 800117e:	4803      	ldr	r0, [pc, #12]	; (800118c <StartBlink01+0x1c>)
 8001180:	f002 fe57 	bl	8003e32 <HAL_GPIO_TogglePin>
  	  osDelay(100);
 8001184:	2064      	movs	r0, #100	; 0x64
 8001186:	f00b fa13 	bl	800c5b0 <osDelay>
  {   HAL_GPIO_TogglePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin);
 800118a:	e7f7      	b.n	800117c <StartBlink01+0xc>
 800118c:	40020000 	.word	0x40020000

08001190 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_TogglePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin);
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <StartBlink02+0x1c>)
 800119c:	f002 fe49 	bl	8003e32 <HAL_GPIO_TogglePin>
	    osDelay(600);
 80011a0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80011a4:	f00b fa04 	bl	800c5b0 <osDelay>
	    HAL_GPIO_TogglePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin);
 80011a8:	e7f6      	b.n	8001198 <StartBlink02+0x8>
 80011aa:	bf00      	nop
 80011ac:	40020000 	.word	0x40020000

080011b0 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b0a6      	sub	sp, #152	; 0x98
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartDefaultTask */
	  rmw_uros_set_custom_transport(
 80011b8:	4b34      	ldr	r3, [pc, #208]	; (800128c <StartDefaultTask+0xdc>)
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <StartDefaultTask+0xe0>)
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	4b34      	ldr	r3, [pc, #208]	; (8001294 <StartDefaultTask+0xe4>)
 80011c2:	4a35      	ldr	r2, [pc, #212]	; (8001298 <StartDefaultTask+0xe8>)
 80011c4:	4935      	ldr	r1, [pc, #212]	; (800129c <StartDefaultTask+0xec>)
 80011c6:	2001      	movs	r0, #1
 80011c8:	f00e fdda 	bl	800fd80 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80011cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011d0:	4618      	mov	r0, r3
 80011d2:	f00e fd57 	bl	800fc84 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <StartDefaultTask+0xf0>)
 80011d8:	67bb      	str	r3, [r7, #120]	; 0x78
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80011da:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <StartDefaultTask+0xf4>)
 80011dc:	67fb      	str	r3, [r7, #124]	; 0x7c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80011de:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <StartDefaultTask+0xf8>)
 80011e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80011e4:	4b31      	ldr	r3, [pc, #196]	; (80012ac <StartDefaultTask+0xfc>)
 80011e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80011ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011ee:	4618      	mov	r0, r3
 80011f0:	f00e fd56 	bl	800fca0 <rcutils_set_default_allocator>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f083 0301 	eor.w	r3, r3, #1
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <StartDefaultTask+0x58>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001200:	21e0      	movs	r1, #224	; 0xe0
 8001202:	482b      	ldr	r0, [pc, #172]	; (80012b0 <StartDefaultTask+0x100>)
 8001204:	f017 fc3e 	bl	8018a84 <iprintf>
	  std_msgs__msg__Int32 msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8001208:	463b      	mov	r3, r7
 800120a:	4618      	mov	r0, r3
 800120c:	f00e fd66 	bl	800fcdc <rcutils_get_default_allocator>
 8001210:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001214:	463d      	mov	r5, r7
 8001216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121a:	682b      	ldr	r3, [r5, #0]
 800121c:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	f00e fc69 	bl	800fb00 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 800122e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001232:	f107 0020 	add.w	r0, r7, #32
 8001236:	4a1f      	ldr	r2, [pc, #124]	; (80012b4 <StartDefaultTask+0x104>)
 8001238:	491f      	ldr	r1, [pc, #124]	; (80012b8 <StartDefaultTask+0x108>)
 800123a:	f00e fcab 	bl	800fb94 <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 800123e:	f00f fa19 	bl	8010674 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001242:	4602      	mov	r2, r0
 8001244:	f107 0120 	add.w	r1, r7, #32
 8001248:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800124c:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <StartDefaultTask+0x10c>)
 800124e:	f00e fcdd 	bl	800fc0c <rclc_publisher_init_default>
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");

	  msg.data = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	673b      	str	r3, [r7, #112]	; 0x70

	  for(;;)
	  {
	    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8001256:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800125a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800125e:	2200      	movs	r2, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f00e fc29 	bl	800fab8 <rcl_publish>
 8001266:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	    if (ret != RCL_RET_OK)
 800126a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <StartDefaultTask+0xcc>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 8001272:	f240 1101 	movw	r1, #257	; 0x101
 8001276:	4812      	ldr	r0, [pc, #72]	; (80012c0 <StartDefaultTask+0x110>)
 8001278:	f017 fc04 	bl	8018a84 <iprintf>
	    }

	    msg.data++;
 800127c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800127e:	3301      	adds	r3, #1
 8001280:	673b      	str	r3, [r7, #112]	; 0x70
	    osDelay(10);
 8001282:	200a      	movs	r0, #10
 8001284:	f00b f994 	bl	800c5b0 <osDelay>
	  {
 8001288:	e7e5      	b.n	8001256 <StartDefaultTask+0xa6>
 800128a:	bf00      	nop
 800128c:	0800106d 	.word	0x0800106d
 8001290:	08001005 	.word	0x08001005
 8001294:	08000fe5 	.word	0x08000fe5
 8001298:	08000fb9 	.word	0x08000fb9
 800129c:	200079ec 	.word	0x200079ec
 80012a0:	080016a9 	.word	0x080016a9
 80012a4:	080016ed 	.word	0x080016ed
 80012a8:	08001725 	.word	0x08001725
 80012ac:	08001791 	.word	0x08001791
 80012b0:	08019e94 	.word	0x08019e94
 80012b4:	08019ebc 	.word	0x08019ebc
 80012b8:	08019ec0 	.word	0x08019ec0
 80012bc:	08019ecc 	.word	0x08019ecc
 80012c0:	08019ee0 	.word	0x08019ee0

080012c4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> S_TIM11_CH1
*/
void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	; 0x30
 80012c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
 80012de:	4b59      	ldr	r3, [pc, #356]	; (8001444 <MX_GPIO_Init+0x180>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a58      	ldr	r2, [pc, #352]	; (8001444 <MX_GPIO_Init+0x180>)
 80012e4:	f043 0310 	orr.w	r3, r3, #16
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b56      	ldr	r3, [pc, #344]	; (8001444 <MX_GPIO_Init+0x180>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	4b52      	ldr	r3, [pc, #328]	; (8001444 <MX_GPIO_Init+0x180>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a51      	ldr	r2, [pc, #324]	; (8001444 <MX_GPIO_Init+0x180>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <MX_GPIO_Init+0x180>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b4b      	ldr	r3, [pc, #300]	; (8001444 <MX_GPIO_Init+0x180>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a4a      	ldr	r2, [pc, #296]	; (8001444 <MX_GPIO_Init+0x180>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b48      	ldr	r3, [pc, #288]	; (8001444 <MX_GPIO_Init+0x180>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b44      	ldr	r3, [pc, #272]	; (8001444 <MX_GPIO_Init+0x180>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a43      	ldr	r2, [pc, #268]	; (8001444 <MX_GPIO_Init+0x180>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <MX_GPIO_Init+0x180>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <MX_GPIO_Init+0x180>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a3c      	ldr	r2, [pc, #240]	; (8001444 <MX_GPIO_Init+0x180>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <MX_GPIO_Init+0x180>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <MX_GPIO_Init+0x180>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a35      	ldr	r2, [pc, #212]	; (8001444 <MX_GPIO_Init+0x180>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b33      	ldr	r3, [pc, #204]	; (8001444 <MX_GPIO_Init+0x180>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8001388:	482f      	ldr	r0, [pc, #188]	; (8001448 <MX_GPIO_Init+0x184>)
 800138a:	f002 fd39 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_MOT_ENABLE_Pin|O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 6164 	mov.w	r1, #3648	; 0xe40
 8001394:	482d      	ldr	r0, [pc, #180]	; (800144c <MX_GPIO_Init+0x188>)
 8001396:	f002 fd33 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_PWR_REG_EN_GPIO_Port, O_PWR_REG_EN_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a0:	482b      	ldr	r0, [pc, #172]	; (8001450 <MX_GPIO_Init+0x18c>)
 80013a2:	f002 fd2d 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = I_KEY1_Pin|I_KEY0_Pin;
 80013a6:	2318      	movs	r3, #24
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4826      	ldr	r0, [pc, #152]	; (8001454 <MX_GPIO_Init+0x190>)
 80013ba:	f002 fb85 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin;
 80013be:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	481c      	ldr	r0, [pc, #112]	; (8001448 <MX_GPIO_Init+0x184>)
 80013d8:	f002 fb76 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = O_MOT_ENABLE_Pin|O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin;
 80013dc:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4815      	ldr	r0, [pc, #84]	; (800144c <MX_GPIO_Init+0x188>)
 80013f6:	f002 fb67 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_PWR_REG_EN_Pin;
 80013fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(O_PWR_REG_EN_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	480f      	ldr	r0, [pc, #60]	; (8001450 <MX_GPIO_Init+0x18c>)
 8001414:	f002 fb58 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TIM_AUX2_PWM_Pin;
 8001418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800142a:	2303      	movs	r3, #3
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TIM_AUX2_PWM_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <MX_GPIO_Init+0x18c>)
 8001436:	f002 fb47 	bl	8003ac8 <HAL_GPIO_Init>

}
 800143a:	bf00      	nop
 800143c:	3730      	adds	r7, #48	; 0x30
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40020000 	.word	0x40020000
 800144c:	40020800 	.word	0x40020800
 8001450:	40020400 	.word	0x40020400
 8001454:	40021000 	.word	0x40021000

08001458 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_I2C2_Init+0x50>)
 800145e:	4a13      	ldr	r2, [pc, #76]	; (80014ac <MX_I2C2_Init+0x54>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_I2C2_Init+0x50>)
 8001464:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <MX_I2C2_Init+0x58>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_I2C2_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_I2C2_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_I2C2_Init+0x50>)
 8001476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800147a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_I2C2_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_I2C2_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_I2C2_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_I2C2_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_I2C2_Init+0x50>)
 8001496:	f002 fce7 	bl	8003e68 <HAL_I2C_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014a0:	f000 f8fc 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200076e4 	.word	0x200076e4
 80014ac:	40005800 	.word	0x40005800
 80014b0:	000186a0 	.word	0x000186a0

080014b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_I2C_MspInit+0x84>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d12c      	bne.n	8001530 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_I2C_MspInit+0x88>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_I2C_MspInit+0x88>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_I2C_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80014f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f8:	2312      	movs	r3, #18
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001504:	2304      	movs	r3, #4
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	480c      	ldr	r0, [pc, #48]	; (8001540 <HAL_I2C_MspInit+0x8c>)
 8001510:	f002 fada 	bl	8003ac8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_I2C_MspInit+0x88>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a07      	ldr	r2, [pc, #28]	; (800153c <HAL_I2C_MspInit+0x88>)
 800151e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001522:	6413      	str	r3, [r2, #64]	; 0x40
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_I2C_MspInit+0x88>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	; 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40005800 	.word	0x40005800
 800153c:	40023800 	.word	0x40023800
 8001540:	40020400 	.word	0x40020400

08001544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001548:	f001 faf6 	bl	8002b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154c:	f000 f82a 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001550:	f7ff feb8 	bl	80012c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001554:	f000 fc92 	bl	8001e7c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001558:	f000 fce8 	bl	8001f2c <MX_TIM2_Init>
  MX_TIM8_Init();
 800155c:	f000 fe14 	bl	8002188 <MX_TIM8_Init>
  MX_I2C2_Init();
 8001560:	f7ff ff7a 	bl	8001458 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001564:	f000 fa3a 	bl	80019dc <MX_SPI1_Init>
  MX_DMA_Init();
 8001568:	f7ff fcd8 	bl	8000f1c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800156c:	f001 f8ae 	bl	80026cc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001570:	f7ff f868 	bl	8000644 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001574:	f7ff f8b8 	bl	80006e8 <MX_ADC3_Init>
  MX_TIM3_Init();
 8001578:	f000 fd2c 	bl	8001fd4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800157c:	f000 fda6 	bl	80020cc <MX_TIM4_Init>
  MX_UART5_Init();
 8001580:	f001 f87a 	bl	8002678 <MX_UART5_Init>
  MX_CRC_Init();
 8001584:	f7ff fa4a 	bl	8000a1c <MX_CRC_Init>
  MX_RNG_Init();
 8001588:	f000 f9f2 	bl	8001970 <MX_RNG_Init>
  MX_TIM14_Init();
 800158c:	f000 feaa 	bl	80022e4 <MX_TIM14_Init>
  MX_USART3_UART_Init();
 8001590:	f001 f8c6 	bl	8002720 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001594:	f00a ff30 	bl	800c3f8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001598:	f7ff fdbc 	bl	8001114 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800159c:	f00a ff50 	bl	800c440 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <main+0x5c>
	...

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b094      	sub	sp, #80	; 0x50
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0320 	add.w	r3, r7, #32
 80015ae:	2230      	movs	r2, #48	; 0x30
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f017 f968 	bl	8018888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <SystemClock_Config+0xcc>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	4a27      	ldr	r2, [pc, #156]	; (8001670 <SystemClock_Config+0xcc>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	; 0x40
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <SystemClock_Config+0xcc>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <SystemClock_Config+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a21      	ldr	r2, [pc, #132]	; (8001674 <SystemClock_Config+0xd0>)
 80015ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <SystemClock_Config+0xd0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001600:	2301      	movs	r3, #1
 8001602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160a:	2302      	movs	r3, #2
 800160c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800160e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001614:	2304      	movs	r3, #4
 8001616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001618:	23a8      	movs	r3, #168	; 0xa8
 800161a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800161c:	2302      	movs	r3, #2
 800161e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001620:	2307      	movs	r3, #7
 8001622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001624:	f107 0320 	add.w	r3, r7, #32
 8001628:	4618      	mov	r0, r3
 800162a:	f003 ffdf 	bl	80055ec <HAL_RCC_OscConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001634:	f000 f832 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001638:	230f      	movs	r3, #15
 800163a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163c:	2302      	movs	r3, #2
 800163e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001644:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800164a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2105      	movs	r1, #5
 8001656:	4618      	mov	r0, r3
 8001658:	f004 fa40 	bl	8005adc <HAL_RCC_ClockConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001662:	f000 f81b 	bl	800169c <Error_Handler>
  }
}
 8001666:	bf00      	nop
 8001668:	3750      	adds	r7, #80	; 0x50
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000

08001678 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d101      	bne.n	800168e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800168a:	f001 fa77 	bl	8002b7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40014400 	.word	0x40014400

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <microros_allocate+0x3c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <microros_allocate+0x3c>)
 80016c0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <microros_allocate+0x40>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4413      	add	r3, r2
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <microros_allocate+0x40>)
 80016d0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff f9d8 	bl	8000a88 <pvPortMallocMicroROS>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20007738 	.word	0x20007738
 80016e8:	2000773c 	.word	0x2000773c

080016ec <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00c      	beq.n	8001716 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fae1 	bl	8000cc4 <getBlockSize>
 8001702:	4603      	mov	r3, r0
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <microros_deallocate+0x34>)
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	461a      	mov	r2, r3
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <microros_deallocate+0x34>)
 800170e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fa7d 	bl	8000c10 <vPortFreeMicroROS>
  }
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000773c 	.word	0x2000773c

08001724 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <microros_reallocate+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	4413      	add	r3, r2
 800173a:	461a      	mov	r2, r3
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <microros_reallocate+0x64>)
 800173e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <microros_reallocate+0x68>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	4413      	add	r3, r2
 800174a:	461a      	mov	r2, r3
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <microros_reallocate+0x68>)
 800174e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d104      	bne.n	8001760 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001756:	68b8      	ldr	r0, [r7, #8]
 8001758:	f7ff f996 	bl	8000a88 <pvPortMallocMicroROS>
 800175c:	4603      	mov	r3, r0
 800175e:	e00e      	b.n	800177e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff faaf 	bl	8000cc4 <getBlockSize>
 8001766:	4603      	mov	r3, r0
 8001768:	4a08      	ldr	r2, [pc, #32]	; (800178c <microros_reallocate+0x68>)
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	461a      	mov	r2, r3
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <microros_reallocate+0x68>)
 8001772:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f7ff fac2 	bl	8000d00 <pvPortReallocMicroROS>
 800177c:	4603      	mov	r3, r0
  }
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20007738 	.word	0x20007738
 800178c:	2000773c 	.word	0x2000773c

08001790 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	fb02 f303 	mul.w	r3, r2, r3
 80017a4:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <microros_zero_allocate+0x48>)
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <microros_zero_allocate+0x48>)
 80017ae:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	4a08      	ldr	r2, [pc, #32]	; (80017dc <microros_zero_allocate+0x4c>)
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	461a      	mov	r2, r3
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <microros_zero_allocate+0x4c>)
 80017c2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f7ff fac7 	bl	8000d5a <pvPortCallocMicroROS>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20007738 	.word	0x20007738
 80017dc:	2000773c 	.word	0x2000773c

080017e0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80017e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80017f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017f6:	a320      	add	r3, pc, #128	; (adr r3, 8001878 <UTILS_NanosecondsToTimespec+0x98>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7fe fd50 	bl	80002a0 <__aeabi_ldivmod>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800180a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800180e:	a31a      	add	r3, pc, #104	; (adr r3, 8001878 <UTILS_NanosecondsToTimespec+0x98>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fd44 	bl	80002a0 <__aeabi_ldivmod>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	da20      	bge.n	8001866 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	4a11      	ldr	r2, [pc, #68]	; (8001870 <UTILS_NanosecondsToTimespec+0x90>)
 800182a:	fb82 1203 	smull	r1, r2, r2, r3
 800182e:	1712      	asrs	r2, r2, #28
 8001830:	17db      	asrs	r3, r3, #31
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	6979      	ldr	r1, [r7, #20]
 8001840:	17c8      	asrs	r0, r1, #31
 8001842:	460c      	mov	r4, r1
 8001844:	4605      	mov	r5, r0
 8001846:	ebb2 0804 	subs.w	r8, r2, r4
 800184a:	eb63 0905 	sbc.w	r9, r3, r5
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	4906      	ldr	r1, [pc, #24]	; (8001874 <UTILS_NanosecondsToTimespec+0x94>)
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	441a      	add	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	609a      	str	r2, [r3, #8]
    }
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001870:	44b82fa1 	.word	0x44b82fa1
 8001874:	3b9aca00 	.word	0x3b9aca00
 8001878:	3b9aca00 	.word	0x3b9aca00
 800187c:	00000000 	.word	0x00000000

08001880 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001884:	b08e      	sub	sp, #56	; 0x38
 8001886:	af00      	add	r7, sp, #0
 8001888:	6278      	str	r0, [r7, #36]	; 0x24
 800188a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800188c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001890:	2300      	movs	r3, #0
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80018a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a6:	4618      	mov	r0, r3
 80018a8:	f00c f95c 	bl	800db64 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80018ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ae:	17da      	asrs	r2, r3, #31
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	61fa      	str	r2, [r7, #28]
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	69b9      	ldr	r1, [r7, #24]
 80018be:	000b      	movs	r3, r1
 80018c0:	2200      	movs	r2, #0
 80018c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80018c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c8:	2200      	movs	r2, #0
 80018ca:	461c      	mov	r4, r3
 80018cc:	4615      	mov	r5, r2
 80018ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80018d2:	1911      	adds	r1, r2, r4
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	416b      	adcs	r3, r5
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80018de:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80018e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	f04f 0400 	mov.w	r4, #0
 80018ee:	f04f 0500 	mov.w	r5, #0
 80018f2:	015d      	lsls	r5, r3, #5
 80018f4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80018f8:	0154      	lsls	r4, r2, #5
 80018fa:	4622      	mov	r2, r4
 80018fc:	462b      	mov	r3, r5
 80018fe:	ebb2 0800 	subs.w	r8, r2, r0
 8001902:	eb63 0901 	sbc.w	r9, r3, r1
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001912:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001916:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800191a:	4690      	mov	r8, r2
 800191c:	4699      	mov	r9, r3
 800191e:	eb18 0a00 	adds.w	sl, r8, r0
 8001922:	eb49 0b01 	adc.w	fp, r9, r1
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001932:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001936:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800193a:	ebb2 040a 	subs.w	r4, r2, sl
 800193e:	603c      	str	r4, [r7, #0]
 8001940:	eb63 030b 	sbc.w	r3, r3, fp
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800194a:	4623      	mov	r3, r4
 800194c:	181b      	adds	r3, r3, r0
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	462b      	mov	r3, r5
 8001952:	eb41 0303 	adc.w	r3, r1, r3
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	6a3a      	ldr	r2, [r7, #32]
 800195a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800195e:	f7ff ff3f 	bl	80017e0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001962:	2300      	movs	r3, #0
 8001964:	4618      	mov	r0, r3
 8001966:	3738      	adds	r7, #56	; 0x38
 8001968:	46bd      	mov	sp, r7
 800196a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001970 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_RNG_Init+0x20>)
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <MX_RNG_Init+0x24>)
 8001978:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_RNG_Init+0x20>)
 800197c:	f004 fb00 	bl	8005f80 <HAL_RNG_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001986:	f7ff fe89 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20007740 	.word	0x20007740
 8001994:	50060800 	.word	0x50060800

08001998 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <HAL_RNG_MspInit+0x3c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10d      	bne.n	80019c6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_RNG_MspInit+0x40>)
 80019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_RNG_MspInit+0x40>)
 80019b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b8:	6353      	str	r3, [r2, #52]	; 0x34
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <HAL_RNG_MspInit+0x40>)
 80019bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	50060800 	.word	0x50060800
 80019d8:	40023800 	.word	0x40023800

080019dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_SPI1_Init+0x64>)
 80019e2:	4a18      	ldr	r2, [pc, #96]	; (8001a44 <MX_SPI1_Init+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <MX_SPI1_Init+0x64>)
 80019e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_SPI1_Init+0x64>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MX_SPI1_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_SPI1_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a28:	220a      	movs	r2, #10
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <MX_SPI1_Init+0x64>)
 8001a2e:	f004 fad1 	bl	8005fd4 <HAL_SPI_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a38:	f7ff fe30 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20007750 	.word	0x20007750
 8001a44:	40013000 	.word	0x40013000

08001a48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_SPI_MspInit+0x84>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d12b      	bne.n	8001ac2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <HAL_SPI_MspInit+0x88>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <HAL_SPI_MspInit+0x88>)
 8001a74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_SPI_MspInit+0x88>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <HAL_SPI_MspInit+0x88>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_SPI_MspInit+0x88>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_SPI_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001aa2:	2338      	movs	r3, #56	; 0x38
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ab2:	2305      	movs	r3, #5
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <HAL_SPI_MspInit+0x8c>)
 8001abe:	f002 f803 	bl	8003ac8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40013000 	.word	0x40013000
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020400 	.word	0x40020400

08001ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_MspInit+0x54>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <HAL_MspInit+0x54>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_MspInit+0x54>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_MspInit+0x54>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_MspInit+0x54>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_MspInit+0x54>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	210f      	movs	r1, #15
 8001b1a:	f06f 0001 	mvn.w	r0, #1
 8001b1e:	f001 fb8b 	bl	8003238 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800

08001b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	; 0x30
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	2019      	movs	r0, #25
 8001b46:	f001 fb77 	bl	8003238 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b4a:	2019      	movs	r0, #25
 8001b4c:	f001 fb90 	bl	8003270 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <HAL_InitTick+0xa4>)
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <HAL_InitTick+0xa4>)
 8001b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_InitTick+0xa4>)
 8001b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b6c:	f107 0210 	add.w	r2, r7, #16
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 f9d0 	bl	8005f1c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001b7c:	f004 f9ba 	bl	8005ef4 <HAL_RCC_GetPCLK2Freq>
 8001b80:	4603      	mov	r3, r0
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b88:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <HAL_InitTick+0xa8>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0c9b      	lsrs	r3, r3, #18
 8001b90:	3b01      	subs	r3, #1
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_InitTick+0xac>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <HAL_InitTick+0xb0>)
 8001b98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_InitTick+0xac>)
 8001b9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ba0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_InitTick+0xac>)
 8001ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_InitTick+0xac>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_InitTick+0xac>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001bb4:	4809      	ldr	r0, [pc, #36]	; (8001bdc <HAL_InitTick+0xac>)
 8001bb6:	f004 fa96 	bl	80060e6 <HAL_TIM_Base_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d104      	bne.n	8001bca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001bc0:	4806      	ldr	r0, [pc, #24]	; (8001bdc <HAL_InitTick+0xac>)
 8001bc2:	f004 fadf 	bl	8006184 <HAL_TIM_Base_Start_IT>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	e000      	b.n	8001bcc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3730      	adds	r7, #48	; 0x30
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	431bde83 	.word	0x431bde83
 8001bdc:	200077a8 	.word	0x200077a8
 8001be0:	40014400 	.word	0x40014400

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <NMI_Handler+0x4>

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <DMA1_Stream1_IRQHandler+0x10>)
 8001c16:	f001 fced 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20007b34 	.word	0x20007b34

08001c24 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <DMA1_Stream3_IRQHandler+0x10>)
 8001c2a:	f001 fce3 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20007b94 	.word	0x20007b94

08001c38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001c3e:	f004 fcae 	bl	800659e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001c42:	4803      	ldr	r0, [pc, #12]	; (8001c50 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001c44:	f004 fcab 	bl	800659e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200077f8 	.word	0x200077f8
 8001c50:	200077a8 	.word	0x200077a8

08001c54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <USART1_IRQHandler+0x10>)
 8001c5a:	f005 fec5 	bl	80079e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200079ec 	.word	0x200079ec

08001c68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <USART3_IRQHandler+0x10>)
 8001c6e:	f005 febb 	bl	80079e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20007a30 	.word	0x20007a30

08001c7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <DMA2_Stream0_IRQHandler+0x10>)
 8001c82:	f001 fcb7 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200002b4 	.word	0x200002b4

08001c90 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <DMA2_Stream2_IRQHandler+0x10>)
 8001c96:	f001 fcad 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20007a74 	.word	0x20007a74

08001ca4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <OTG_FS_IRQHandler+0x10>)
 8001caa:	f002 fb71 	bl	8004390 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000dae8 	.word	0x2000dae8

08001cb8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <DMA2_Stream7_IRQHandler+0x10>)
 8001cbe:	f001 fc99 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20007ad4 	.word	0x20007ad4

08001ccc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
	return 1;
 8001cd0:	2301      	movs	r3, #1
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_kill>:

int _kill(int pid, int sig)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ce6:	f016 fc45 	bl	8018574 <__errno>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2216      	movs	r2, #22
 8001cee:	601a      	str	r2, [r3, #0]
	return -1;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_exit>:

void _exit (int status)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ffe7 	bl	8001cdc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d0e:	e7fe      	b.n	8001d0e <_exit+0x12>

08001d10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e00a      	b.n	8001d38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d22:	f3af 8000 	nop.w
 8001d26:	4601      	mov	r1, r0
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	60ba      	str	r2, [r7, #8]
 8001d2e:	b2ca      	uxtb	r2, r1
 8001d30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dbf0      	blt.n	8001d22 <_read+0x12>
	}

return len;
 8001d40:	687b      	ldr	r3, [r7, #4]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	e009      	b.n	8001d70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60ba      	str	r2, [r7, #8]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	dbf1      	blt.n	8001d5c <_write+0x12>
	}
	return len;
 8001d78:	687b      	ldr	r3, [r7, #4]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <_sbrk>:

caddr_t _sbrk(int incr) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
    extern char __heap_start__ asm("end");  // Defined by the linker.
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == NULL) heap_end = &__heap_start__;
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <_sbrk+0x5c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x16>
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <_sbrk+0x5c>)
 8001d96:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <_sbrk+0x60>)
 8001d98:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <_sbrk+0x5c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	60fb      	str	r3, [r7, #12]

    if (heap_end + incr > &_estack - _Min_Stack_Size) {
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <_sbrk+0x5c>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	441a      	add	r2, r3
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <_sbrk+0x64>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	425b      	negs	r3, r3
 8001dae:	490f      	ldr	r1, [pc, #60]	; (8001dec <_sbrk+0x68>)
 8001db0:	440b      	add	r3, r1
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d908      	bls.n	8001dc8 <_sbrk+0x44>
    		__asm("BKPT #0\n");
 8001db6:	be00      	bkpt	0x0000
        errno = ENOMEM;
 8001db8:	f016 fbdc 	bl	8018574 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc6:	e006      	b.n	8001dd6 <_sbrk+0x52>

    }

    heap_end += incr;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <_sbrk+0x5c>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a03      	ldr	r2, [pc, #12]	; (8001de0 <_sbrk+0x5c>)
 8001dd2:	6013      	str	r3, [r2, #0]
    return (caddr_t)prev_heap_end;
 8001dd4:	68fb      	ldr	r3, [r7, #12]

}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200077f4 	.word	0x200077f4
 8001de4:	20012d30 	.word	0x20012d30
 8001de8:	00000400 	.word	0x00000400
 8001dec:	20020000 	.word	0x20020000

08001df0 <_close>:

int _close(int file)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	return -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e18:	605a      	str	r2, [r3, #4]
	return 0;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_isatty>:

int _isatty(int file)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	return 1;
 8001e30:	2301      	movs	r3, #1
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
	return 0;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	; 0x30
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	2224      	movs	r2, #36	; 0x24
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f016 fcfc 	bl	8018888 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e98:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <MX_TIM1_Init+0xa8>)
 8001e9a:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <MX_TIM1_Init+0xac>)
 8001e9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e9e:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <MX_TIM1_Init+0xa8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <MX_TIM1_Init+0xa8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <MX_TIM1_Init+0xa8>)
 8001eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <MX_TIM1_Init+0xa8>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <MX_TIM1_Init+0xa8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebe:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <MX_TIM1_Init+0xa8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001edc:	2301      	movs	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	4619      	mov	r1, r3
 8001eee:	480d      	ldr	r0, [pc, #52]	; (8001f24 <MX_TIM1_Init+0xa8>)
 8001ef0:	f004 faaf 	bl	8006452 <HAL_TIM_Encoder_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001efa:	f7ff fbcf 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4806      	ldr	r0, [pc, #24]	; (8001f24 <MX_TIM1_Init+0xa8>)
 8001f0c:	f005 fb0e 	bl	800752c <HAL_TIMEx_MasterConfigSynchronization>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001f16:	f7ff fbc1 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	3730      	adds	r7, #48	; 0x30
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200077f8 	.word	0x200077f8
 8001f28:	40010000 	.word	0x40010000

08001f2c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	; 0x30
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	2224      	movs	r2, #36	; 0x24
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f016 fca4 	bl	8018888 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <MX_TIM2_Init+0xa4>)
 8001f4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <MX_TIM2_Init+0xa4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <MX_TIM2_Init+0xa4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <MX_TIM2_Init+0xa4>)
 8001f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <MX_TIM2_Init+0xa4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <MX_TIM2_Init+0xa4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f70:	2303      	movs	r3, #3
 8001f72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f84:	2300      	movs	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <MX_TIM2_Init+0xa4>)
 8001f9c:	f004 fa59 	bl	8006452 <HAL_TIM_Encoder_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001fa6:	f7ff fb79 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <MX_TIM2_Init+0xa4>)
 8001fb8:	f005 fab8 	bl	800752c <HAL_TIMEx_MasterConfigSynchronization>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001fc2:	f7ff fb6b 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	3730      	adds	r7, #48	; 0x30
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20007840 	.word	0x20007840

08001fd4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08e      	sub	sp, #56	; 0x38
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	615a      	str	r2, [r3, #20]
 8001ff6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002004:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <MX_TIM3_Init+0xf0>)
 8002006:	4a30      	ldr	r2, [pc, #192]	; (80020c8 <MX_TIM3_Init+0xf4>)
 8002008:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800200a:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <MX_TIM3_Init+0xf0>)
 800200c:	2200      	movs	r2, #0
 800200e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002010:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <MX_TIM3_Init+0xf0>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002016:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <MX_TIM3_Init+0xf0>)
 8002018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201e:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <MX_TIM3_Init+0xf0>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <MX_TIM3_Init+0xf0>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800202a:	4826      	ldr	r0, [pc, #152]	; (80020c4 <MX_TIM3_Init+0xf0>)
 800202c:	f004 f969 	bl	8006302 <HAL_TIM_PWM_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002036:	f7ff fb31 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800203a:	4822      	ldr	r0, [pc, #136]	; (80020c4 <MX_TIM3_Init+0xf0>)
 800203c:	f004 f9b0 	bl	80063a0 <HAL_TIM_IC_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002046:	f7ff fb29 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002052:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002056:	4619      	mov	r1, r3
 8002058:	481a      	ldr	r0, [pc, #104]	; (80020c4 <MX_TIM3_Init+0xf0>)
 800205a:	f005 fa67 	bl	800752c <HAL_TIMEx_MasterConfigSynchronization>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002064:	f7ff fb1a 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002068:	2360      	movs	r3, #96	; 0x60
 800206a:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2208      	movs	r2, #8
 800207e:	4619      	mov	r1, r3
 8002080:	4810      	ldr	r0, [pc, #64]	; (80020c4 <MX_TIM3_Init+0xf0>)
 8002082:	f004 fc8d 	bl	80069a0 <HAL_TIM_PWM_ConfigChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 800208c:	f7ff fb06 	bl	800169c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002090:	2300      	movs	r3, #0
 8002092:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002094:	2301      	movs	r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	220c      	movs	r2, #12
 80020a4:	4619      	mov	r1, r3
 80020a6:	4807      	ldr	r0, [pc, #28]	; (80020c4 <MX_TIM3_Init+0xf0>)
 80020a8:	f004 fbde 	bl	8006868 <HAL_TIM_IC_ConfigChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 80020b2:	f7ff faf3 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020b6:	4803      	ldr	r0, [pc, #12]	; (80020c4 <MX_TIM3_Init+0xf0>)
 80020b8:	f000 fa5c 	bl	8002574 <HAL_TIM_MspPostInit>

}
 80020bc:	bf00      	nop
 80020be:	3738      	adds	r7, #56	; 0x38
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20007888 	.word	0x20007888
 80020c8:	40000400 	.word	0x40000400

080020cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d2:	f107 0320 	add.w	r3, r7, #32
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	611a      	str	r2, [r3, #16]
 80020ea:	615a      	str	r2, [r3, #20]
 80020ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020ee:	4b24      	ldr	r3, [pc, #144]	; (8002180 <MX_TIM4_Init+0xb4>)
 80020f0:	4a24      	ldr	r2, [pc, #144]	; (8002184 <MX_TIM4_Init+0xb8>)
 80020f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020f4:	4b22      	ldr	r3, [pc, #136]	; (8002180 <MX_TIM4_Init+0xb4>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fa:	4b21      	ldr	r3, [pc, #132]	; (8002180 <MX_TIM4_Init+0xb4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002100:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <MX_TIM4_Init+0xb4>)
 8002102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002106:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <MX_TIM4_Init+0xb4>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <MX_TIM4_Init+0xb4>)
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002114:	481a      	ldr	r0, [pc, #104]	; (8002180 <MX_TIM4_Init+0xb4>)
 8002116:	f004 f8a5 	bl	8006264 <HAL_TIM_OC_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002120:	f7ff fabc 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800212c:	f107 0320 	add.w	r3, r7, #32
 8002130:	4619      	mov	r1, r3
 8002132:	4813      	ldr	r0, [pc, #76]	; (8002180 <MX_TIM4_Init+0xb4>)
 8002134:	f005 f9fa 	bl	800752c <HAL_TIMEx_MasterConfigSynchronization>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800213e:	f7ff faad 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002152:	1d3b      	adds	r3, r7, #4
 8002154:	220c      	movs	r2, #12
 8002156:	4619      	mov	r1, r3
 8002158:	4809      	ldr	r0, [pc, #36]	; (8002180 <MX_TIM4_Init+0xb4>)
 800215a:	f004 fb29 	bl	80067b0 <HAL_TIM_OC_ConfigChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002164:	f7ff fa9a 	bl	800169c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <MX_TIM4_Init+0xb4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <MX_TIM4_Init+0xb4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002176:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200078d0 	.word	0x200078d0
 8002184:	40000800 	.word	0x40000800

08002188 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b096      	sub	sp, #88	; 0x58
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
 80021b4:	611a      	str	r2, [r3, #16]
 80021b6:	615a      	str	r2, [r3, #20]
 80021b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2220      	movs	r2, #32
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f016 fb61 	bl	8018888 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021c6:	4b45      	ldr	r3, [pc, #276]	; (80022dc <MX_TIM8_Init+0x154>)
 80021c8:	4a45      	ldr	r2, [pc, #276]	; (80022e0 <MX_TIM8_Init+0x158>)
 80021ca:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80021cc:	4b43      	ldr	r3, [pc, #268]	; (80022dc <MX_TIM8_Init+0x154>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d2:	4b42      	ldr	r3, [pc, #264]	; (80022dc <MX_TIM8_Init+0x154>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80021d8:	4b40      	ldr	r3, [pc, #256]	; (80022dc <MX_TIM8_Init+0x154>)
 80021da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021de:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e0:	4b3e      	ldr	r3, [pc, #248]	; (80022dc <MX_TIM8_Init+0x154>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021e6:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <MX_TIM8_Init+0x154>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ec:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <MX_TIM8_Init+0x154>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021f2:	483a      	ldr	r0, [pc, #232]	; (80022dc <MX_TIM8_Init+0x154>)
 80021f4:	f003 ff77 	bl	80060e6 <HAL_TIM_Base_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80021fe:	f7ff fa4d 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002206:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002208:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800220c:	4619      	mov	r1, r3
 800220e:	4833      	ldr	r0, [pc, #204]	; (80022dc <MX_TIM8_Init+0x154>)
 8002210:	f004 fc88 	bl	8006b24 <HAL_TIM_ConfigClockSource>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800221a:	f7ff fa3f 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800221e:	482f      	ldr	r0, [pc, #188]	; (80022dc <MX_TIM8_Init+0x154>)
 8002220:	f004 f86f 	bl	8006302 <HAL_TIM_PWM_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800222a:	f7ff fa37 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002236:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800223a:	4619      	mov	r1, r3
 800223c:	4827      	ldr	r0, [pc, #156]	; (80022dc <MX_TIM8_Init+0x154>)
 800223e:	f005 f975 	bl	800752c <HAL_TIMEx_MasterConfigSynchronization>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002248:	f7ff fa28 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224c:	2360      	movs	r3, #96	; 0x60
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 512;
 8002250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002256:	2300      	movs	r3, #0
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800225a:	2300      	movs	r3, #0
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800226a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800226e:	2204      	movs	r2, #4
 8002270:	4619      	mov	r1, r3
 8002272:	481a      	ldr	r0, [pc, #104]	; (80022dc <MX_TIM8_Init+0x154>)
 8002274:	f004 fb94 	bl	80069a0 <HAL_TIM_PWM_ConfigChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800227e:	f7ff fa0d 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002286:	2208      	movs	r2, #8
 8002288:	4619      	mov	r1, r3
 800228a:	4814      	ldr	r0, [pc, #80]	; (80022dc <MX_TIM8_Init+0x154>)
 800228c:	f004 fb88 	bl	80069a0 <HAL_TIM_PWM_ConfigChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8002296:	f7ff fa01 	bl	800169c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 2;
 80022a6:	2302      	movs	r3, #2
 80022a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	4619      	mov	r1, r3
 80022bc:	4807      	ldr	r0, [pc, #28]	; (80022dc <MX_TIM8_Init+0x154>)
 80022be:	f005 f9b1 	bl	8007624 <HAL_TIMEx_ConfigBreakDeadTime>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 80022c8:	f7ff f9e8 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80022cc:	4803      	ldr	r0, [pc, #12]	; (80022dc <MX_TIM8_Init+0x154>)
 80022ce:	f000 f951 	bl	8002574 <HAL_TIM_MspPostInit>

}
 80022d2:	bf00      	nop
 80022d4:	3758      	adds	r7, #88	; 0x58
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20007918 	.word	0x20007918
 80022e0:	40010400 	.word	0x40010400

080022e4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_TIM14_Init+0x40>)
 80022ea:	4a0f      	ldr	r2, [pc, #60]	; (8002328 <MX_TIM14_Init+0x44>)
 80022ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <MX_TIM14_Init+0x40>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_TIM14_Init+0x40>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <MX_TIM14_Init+0x40>)
 80022fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002300:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_TIM14_Init+0x40>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_TIM14_Init+0x40>)
 800230a:	2200      	movs	r2, #0
 800230c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_TIM14_Init+0x40>)
 8002310:	f003 fee9 	bl	80060e6 <HAL_TIM_Base_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800231a:	f7ff f9bf 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20007960 	.word	0x20007960
 8002328:	40002000 	.word	0x40002000

0800232c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	; 0x30
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a36      	ldr	r2, [pc, #216]	; (8002424 <HAL_TIM_Encoder_MspInit+0xf8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d135      	bne.n	80023ba <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
 8002352:	4b35      	ldr	r3, [pc, #212]	; (8002428 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4a34      	ldr	r2, [pc, #208]	; (8002428 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6453      	str	r3, [r2, #68]	; 0x44
 800235e:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	61bb      	str	r3, [r7, #24]
 8002368:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a2d      	ldr	r2, [pc, #180]	; (8002428 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <HAL_TIM_Encoder_MspInit+0xfc>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM_ENC1_A_Pin|TIM_ENC1_B_Pin;
 8002386:	f44f 7340 	mov.w	r3, #768	; 0x300
 800238a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002398:	2301      	movs	r3, #1
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	4619      	mov	r1, r3
 80023a2:	4822      	ldr	r0, [pc, #136]	; (800242c <HAL_TIM_Encoder_MspInit+0x100>)
 80023a4:	f001 fb90 	bl	8003ac8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2105      	movs	r1, #5
 80023ac:	2019      	movs	r0, #25
 80023ae:	f000 ff43 	bl	8003238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023b2:	2019      	movs	r0, #25
 80023b4:	f000 ff5c 	bl	8003270 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023b8:	e030      	b.n	800241c <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c2:	d12b      	bne.n	800241c <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_TIM_Encoder_MspInit+0xfc>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	4a16      	ldr	r2, [pc, #88]	; (8002428 <HAL_TIM_Encoder_MspInit+0xfc>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6413      	str	r3, [r2, #64]	; 0x40
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <HAL_TIM_Encoder_MspInit+0xfc>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_TIM_Encoder_MspInit+0xfc>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <HAL_TIM_Encoder_MspInit+0xfc>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6313      	str	r3, [r2, #48]	; 0x30
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_TIM_Encoder_MspInit+0xfc>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_ENC2_B_Pin|TIM_ENC2_A_Pin;
 80023fc:	2322      	movs	r3, #34	; 0x22
 80023fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800240c:	2301      	movs	r3, #1
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	f107 031c 	add.w	r3, r7, #28
 8002414:	4619      	mov	r1, r3
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <HAL_TIM_Encoder_MspInit+0x100>)
 8002418:	f001 fb56 	bl	8003ac8 <HAL_GPIO_Init>
}
 800241c:	bf00      	nop
 800241e:	3730      	adds	r7, #48	; 0x30
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40010000 	.word	0x40010000
 8002428:	40023800 	.word	0x40023800
 800242c:	40020000 	.word	0x40020000

08002430 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM3)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a19      	ldr	r2, [pc, #100]	; (80024b4 <HAL_TIM_PWM_MspInit+0x84>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d12b      	bne.n	80024aa <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_TIM_PWM_MspInit+0x88>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <HAL_TIM_PWM_MspInit+0x88>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	6413      	str	r3, [r2, #64]	; 0x40
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_TIM_PWM_MspInit+0x88>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_TIM_PWM_MspInit+0x88>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a10      	ldr	r2, [pc, #64]	; (80024b8 <HAL_TIM_PWM_MspInit+0x88>)
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_TIM_PWM_MspInit+0x88>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_FAN_INDEX_Pin;
 800248a:	2302      	movs	r3, #2
 800248c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002492:	2301      	movs	r3, #1
 8002494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800249a:	2302      	movs	r3, #2
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_FAN_INDEX_GPIO_Port, &GPIO_InitStruct);
 800249e:	f107 0314 	add.w	r3, r7, #20
 80024a2:	4619      	mov	r1, r3
 80024a4:	4805      	ldr	r0, [pc, #20]	; (80024bc <HAL_TIM_PWM_MspInit+0x8c>)
 80024a6:	f001 fb0f 	bl	8003ac8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80024aa:	bf00      	nop
 80024ac:	3728      	adds	r7, #40	; 0x28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40000400 	.word	0x40000400
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020400 	.word	0x40020400

080024c0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0b      	ldr	r2, [pc, #44]	; (80024fc <HAL_TIM_OC_MspInit+0x3c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d10d      	bne.n	80024ee <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_TIM_OC_MspInit+0x40>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <HAL_TIM_OC_MspInit+0x40>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_TIM_OC_MspInit+0x40>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40000800 	.word	0x40000800
 8002500:	40023800 	.word	0x40023800

08002504 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a15      	ldr	r2, [pc, #84]	; (8002568 <HAL_TIM_Base_MspInit+0x64>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d10e      	bne.n	8002534 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_TIM_Base_MspInit+0x68>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	4a13      	ldr	r2, [pc, #76]	; (800256c <HAL_TIM_Base_MspInit+0x68>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	6453      	str	r3, [r2, #68]	; 0x44
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_TIM_Base_MspInit+0x68>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002532:	e012      	b.n	800255a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM14)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <HAL_TIM_Base_MspInit+0x6c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10d      	bne.n	800255a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_TIM_Base_MspInit+0x68>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a09      	ldr	r2, [pc, #36]	; (800256c <HAL_TIM_Base_MspInit+0x68>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
 800254e:	4b07      	ldr	r3, [pc, #28]	; (800256c <HAL_TIM_Base_MspInit+0x68>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40010400 	.word	0x40010400
 800256c:	40023800 	.word	0x40023800
 8002570:	40002000 	.word	0x40002000

08002574 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a34      	ldr	r2, [pc, #208]	; (8002664 <HAL_TIM_MspPostInit+0xf0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d11e      	bne.n	80025d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	4b33      	ldr	r3, [pc, #204]	; (8002668 <HAL_TIM_MspPostInit+0xf4>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a32      	ldr	r2, [pc, #200]	; (8002668 <HAL_TIM_MspPostInit+0xf4>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b30      	ldr	r3, [pc, #192]	; (8002668 <HAL_TIM_MspPostInit+0xf4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = TIM_FAN_PWM_Pin;
 80025b2:	2301      	movs	r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025c2:	2302      	movs	r3, #2
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	4827      	ldr	r0, [pc, #156]	; (800266c <HAL_TIM_MspPostInit+0xf8>)
 80025ce:	f001 fa7b 	bl	8003ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80025d2:	e042      	b.n	800265a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a25      	ldr	r2, [pc, #148]	; (8002670 <HAL_TIM_MspPostInit+0xfc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d13d      	bne.n	800265a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_TIM_MspPostInit+0xf4>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a20      	ldr	r2, [pc, #128]	; (8002668 <HAL_TIM_MspPostInit+0xf4>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <HAL_TIM_MspPostInit+0xf4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <HAL_TIM_MspPostInit+0xf4>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a19      	ldr	r2, [pc, #100]	; (8002668 <HAL_TIM_MspPostInit+0xf4>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_TIM_MspPostInit+0xf4>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM_MOT1_B_Pin|TIM_MOT2_B_Pin;
 8002616:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800261a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002628:	2303      	movs	r3, #3
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	4619      	mov	r1, r3
 8002632:	480e      	ldr	r0, [pc, #56]	; (800266c <HAL_TIM_MspPostInit+0xf8>)
 8002634:	f001 fa48 	bl	8003ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM_MOT1_A_Pin|TIM_MOT2_A_Pin;
 8002638:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800263c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263e:	2302      	movs	r3, #2
 8002640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800264a:	2303      	movs	r3, #3
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	4619      	mov	r1, r3
 8002654:	4807      	ldr	r0, [pc, #28]	; (8002674 <HAL_TIM_MspPostInit+0x100>)
 8002656:	f001 fa37 	bl	8003ac8 <HAL_GPIO_Init>
}
 800265a:	bf00      	nop
 800265c:	3728      	adds	r7, #40	; 0x28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40000400 	.word	0x40000400
 8002668:	40023800 	.word	0x40023800
 800266c:	40020400 	.word	0x40020400
 8002670:	40010400 	.word	0x40010400
 8002674:	40020800 	.word	0x40020800

08002678 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <MX_UART5_Init+0x4c>)
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <MX_UART5_Init+0x50>)
 8002680:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <MX_UART5_Init+0x4c>)
 8002684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002688:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <MX_UART5_Init+0x4c>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <MX_UART5_Init+0x4c>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <MX_UART5_Init+0x4c>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <MX_UART5_Init+0x4c>)
 800269e:	220c      	movs	r2, #12
 80026a0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <MX_UART5_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <MX_UART5_Init+0x4c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80026ae:	4805      	ldr	r0, [pc, #20]	; (80026c4 <MX_UART5_Init+0x4c>)
 80026b0:	f005 f81e 	bl	80076f0 <HAL_UART_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80026ba:	f7fe ffef 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200079a8 	.word	0x200079a8
 80026c8:	40005000 	.word	0x40005000

080026cc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <MX_USART1_UART_Init+0x50>)
 80026d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ea:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026f2:	220c      	movs	r2, #12
 80026f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002702:	4805      	ldr	r0, [pc, #20]	; (8002718 <MX_USART1_UART_Init+0x4c>)
 8002704:	f004 fff4 	bl	80076f0 <HAL_UART_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800270e:	f7fe ffc5 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200079ec 	.word	0x200079ec
 800271c:	40011000 	.word	0x40011000

08002720 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <MX_USART3_UART_Init+0x4c>)
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <MX_USART3_UART_Init+0x50>)
 8002728:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <MX_USART3_UART_Init+0x4c>)
 800272c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002730:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002732:	4b0e      	ldr	r3, [pc, #56]	; (800276c <MX_USART3_UART_Init+0x4c>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <MX_USART3_UART_Init+0x4c>)
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <MX_USART3_UART_Init+0x4c>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <MX_USART3_UART_Init+0x4c>)
 8002746:	220c      	movs	r2, #12
 8002748:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <MX_USART3_UART_Init+0x4c>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <MX_USART3_UART_Init+0x4c>)
 8002752:	2200      	movs	r2, #0
 8002754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002756:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_USART3_UART_Init+0x4c>)
 8002758:	f004 ffca 	bl	80076f0 <HAL_UART_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002762:	f7fe ff9b 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20007a30 	.word	0x20007a30
 8002770:	40004800 	.word	0x40004800

08002774 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08e      	sub	sp, #56	; 0x38
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a74      	ldr	r2, [pc, #464]	; (8002964 <HAL_UART_MspInit+0x1f0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d14b      	bne.n	800282e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
 800279a:	4b73      	ldr	r3, [pc, #460]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a72      	ldr	r2, [pc, #456]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 80027a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b70      	ldr	r3, [pc, #448]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ae:	623b      	str	r3, [r7, #32]
 80027b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	4b6c      	ldr	r3, [pc, #432]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a6b      	ldr	r2, [pc, #428]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b69      	ldr	r3, [pc, #420]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	4b65      	ldr	r3, [pc, #404]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a64      	ldr	r2, [pc, #400]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b62      	ldr	r3, [pc, #392]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	61bb      	str	r3, [r7, #24]
 80027e8:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = SER2_TX_Pin;
 80027ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f8:	2303      	movs	r3, #3
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027fc:	2308      	movs	r3, #8
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SER2_TX_GPIO_Port, &GPIO_InitStruct);
 8002800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002804:	4619      	mov	r1, r3
 8002806:	4859      	ldr	r0, [pc, #356]	; (800296c <HAL_UART_MspInit+0x1f8>)
 8002808:	f001 f95e 	bl	8003ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SER2_RX_Pin;
 800280c:	2304      	movs	r3, #4
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2303      	movs	r3, #3
 800281a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800281c:	2308      	movs	r3, #8
 800281e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SER2_RX_GPIO_Port, &GPIO_InitStruct);
 8002820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002824:	4619      	mov	r1, r3
 8002826:	4852      	ldr	r0, [pc, #328]	; (8002970 <HAL_UART_MspInit+0x1fc>)
 8002828:	f001 f94e 	bl	8003ac8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800282c:	e148      	b.n	8002ac0 <HAL_UART_MspInit+0x34c>
  else if(uartHandle->Instance==USART1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a50      	ldr	r2, [pc, #320]	; (8002974 <HAL_UART_MspInit+0x200>)
 8002834:	4293      	cmp	r3, r2
 8002836:	f040 80a9 	bne.w	800298c <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART1_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	4b4a      	ldr	r3, [pc, #296]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4a49      	ldr	r2, [pc, #292]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 8002844:	f043 0310 	orr.w	r3, r3, #16
 8002848:	6453      	str	r3, [r2, #68]	; 0x44
 800284a:	4b47      	ldr	r3, [pc, #284]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4b43      	ldr	r3, [pc, #268]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a42      	ldr	r2, [pc, #264]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b40      	ldr	r3, [pc, #256]	; (8002968 <HAL_UART_MspInit+0x1f4>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002872:	23c0      	movs	r3, #192	; 0xc0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287e:	2303      	movs	r3, #3
 8002880:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002882:	2307      	movs	r3, #7
 8002884:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288a:	4619      	mov	r1, r3
 800288c:	483a      	ldr	r0, [pc, #232]	; (8002978 <HAL_UART_MspInit+0x204>)
 800288e:	f001 f91b 	bl	8003ac8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002892:	4b3a      	ldr	r3, [pc, #232]	; (800297c <HAL_UART_MspInit+0x208>)
 8002894:	4a3a      	ldr	r2, [pc, #232]	; (8002980 <HAL_UART_MspInit+0x20c>)
 8002896:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002898:	4b38      	ldr	r3, [pc, #224]	; (800297c <HAL_UART_MspInit+0x208>)
 800289a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800289e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a0:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_UART_MspInit+0x208>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a6:	4b35      	ldr	r3, [pc, #212]	; (800297c <HAL_UART_MspInit+0x208>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028ac:	4b33      	ldr	r3, [pc, #204]	; (800297c <HAL_UART_MspInit+0x208>)
 80028ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028b4:	4b31      	ldr	r3, [pc, #196]	; (800297c <HAL_UART_MspInit+0x208>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ba:	4b30      	ldr	r3, [pc, #192]	; (800297c <HAL_UART_MspInit+0x208>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80028c0:	4b2e      	ldr	r3, [pc, #184]	; (800297c <HAL_UART_MspInit+0x208>)
 80028c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028c8:	4b2c      	ldr	r3, [pc, #176]	; (800297c <HAL_UART_MspInit+0x208>)
 80028ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80028ce:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d0:	4b2a      	ldr	r3, [pc, #168]	; (800297c <HAL_UART_MspInit+0x208>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028d6:	4829      	ldr	r0, [pc, #164]	; (800297c <HAL_UART_MspInit+0x208>)
 80028d8:	f000 fcf4 	bl	80032c4 <HAL_DMA_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_UART_MspInit+0x172>
      Error_Handler();
 80028e2:	f7fe fedb 	bl	800169c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a24      	ldr	r2, [pc, #144]	; (800297c <HAL_UART_MspInit+0x208>)
 80028ea:	639a      	str	r2, [r3, #56]	; 0x38
 80028ec:	4a23      	ldr	r2, [pc, #140]	; (800297c <HAL_UART_MspInit+0x208>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <HAL_UART_MspInit+0x210>)
 80028f4:	4a24      	ldr	r2, [pc, #144]	; (8002988 <HAL_UART_MspInit+0x214>)
 80028f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80028f8:	4b22      	ldr	r3, [pc, #136]	; (8002984 <HAL_UART_MspInit+0x210>)
 80028fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002900:	4b20      	ldr	r3, [pc, #128]	; (8002984 <HAL_UART_MspInit+0x210>)
 8002902:	2240      	movs	r2, #64	; 0x40
 8002904:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002906:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <HAL_UART_MspInit+0x210>)
 8002908:	2200      	movs	r2, #0
 800290a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_UART_MspInit+0x210>)
 800290e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002912:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_UART_MspInit+0x210>)
 8002916:	2200      	movs	r2, #0
 8002918:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800291a:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <HAL_UART_MspInit+0x210>)
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <HAL_UART_MspInit+0x210>)
 8002922:	2200      	movs	r2, #0
 8002924:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002926:	4b17      	ldr	r3, [pc, #92]	; (8002984 <HAL_UART_MspInit+0x210>)
 8002928:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800292c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800292e:	4b15      	ldr	r3, [pc, #84]	; (8002984 <HAL_UART_MspInit+0x210>)
 8002930:	2200      	movs	r2, #0
 8002932:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002934:	4813      	ldr	r0, [pc, #76]	; (8002984 <HAL_UART_MspInit+0x210>)
 8002936:	f000 fcc5 	bl	80032c4 <HAL_DMA_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8002940:	f7fe feac 	bl	800169c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <HAL_UART_MspInit+0x210>)
 8002948:	635a      	str	r2, [r3, #52]	; 0x34
 800294a:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <HAL_UART_MspInit+0x210>)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002950:	2200      	movs	r2, #0
 8002952:	2105      	movs	r1, #5
 8002954:	2025      	movs	r0, #37	; 0x25
 8002956:	f000 fc6f 	bl	8003238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800295a:	2025      	movs	r0, #37	; 0x25
 800295c:	f000 fc88 	bl	8003270 <HAL_NVIC_EnableIRQ>
}
 8002960:	e0ae      	b.n	8002ac0 <HAL_UART_MspInit+0x34c>
 8002962:	bf00      	nop
 8002964:	40005000 	.word	0x40005000
 8002968:	40023800 	.word	0x40023800
 800296c:	40020800 	.word	0x40020800
 8002970:	40020c00 	.word	0x40020c00
 8002974:	40011000 	.word	0x40011000
 8002978:	40020400 	.word	0x40020400
 800297c:	20007a74 	.word	0x20007a74
 8002980:	40026440 	.word	0x40026440
 8002984:	20007ad4 	.word	0x20007ad4
 8002988:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART3)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a4d      	ldr	r2, [pc, #308]	; (8002ac8 <HAL_UART_MspInit+0x354>)
 8002992:	4293      	cmp	r3, r2
 8002994:	f040 8094 	bne.w	8002ac0 <HAL_UART_MspInit+0x34c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <HAL_UART_MspInit+0x358>)
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	4a4a      	ldr	r2, [pc, #296]	; (8002acc <HAL_UART_MspInit+0x358>)
 80029a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a6:	6413      	str	r3, [r2, #64]	; 0x40
 80029a8:	4b48      	ldr	r3, [pc, #288]	; (8002acc <HAL_UART_MspInit+0x358>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	4b44      	ldr	r3, [pc, #272]	; (8002acc <HAL_UART_MspInit+0x358>)
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	4a43      	ldr	r2, [pc, #268]	; (8002acc <HAL_UART_MspInit+0x358>)
 80029be:	f043 0308 	orr.w	r3, r3, #8
 80029c2:	6313      	str	r3, [r2, #48]	; 0x30
 80029c4:	4b41      	ldr	r3, [pc, #260]	; (8002acc <HAL_UART_MspInit+0x358>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029e2:	2307      	movs	r3, #7
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ea:	4619      	mov	r1, r3
 80029ec:	4838      	ldr	r0, [pc, #224]	; (8002ad0 <HAL_UART_MspInit+0x35c>)
 80029ee:	f001 f86b 	bl	8003ac8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80029f2:	4b38      	ldr	r3, [pc, #224]	; (8002ad4 <HAL_UART_MspInit+0x360>)
 80029f4:	4a38      	ldr	r2, [pc, #224]	; (8002ad8 <HAL_UART_MspInit+0x364>)
 80029f6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80029f8:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <HAL_UART_MspInit+0x360>)
 80029fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029fe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a00:	4b34      	ldr	r3, [pc, #208]	; (8002ad4 <HAL_UART_MspInit+0x360>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a06:	4b33      	ldr	r3, [pc, #204]	; (8002ad4 <HAL_UART_MspInit+0x360>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a0c:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_UART_MspInit+0x360>)
 8002a0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a12:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a14:	4b2f      	ldr	r3, [pc, #188]	; (8002ad4 <HAL_UART_MspInit+0x360>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <HAL_UART_MspInit+0x360>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002a20:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <HAL_UART_MspInit+0x360>)
 8002a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a26:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a28:	4b2a      	ldr	r3, [pc, #168]	; (8002ad4 <HAL_UART_MspInit+0x360>)
 8002a2a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a2e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a30:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <HAL_UART_MspInit+0x360>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002a36:	4827      	ldr	r0, [pc, #156]	; (8002ad4 <HAL_UART_MspInit+0x360>)
 8002a38:	f000 fc44 	bl	80032c4 <HAL_DMA_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 8002a42:	f7fe fe2b 	bl	800169c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <HAL_UART_MspInit+0x360>)
 8002a4a:	639a      	str	r2, [r3, #56]	; 0x38
 8002a4c:	4a21      	ldr	r2, [pc, #132]	; (8002ad4 <HAL_UART_MspInit+0x360>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_UART_MspInit+0x368>)
 8002a54:	4a22      	ldr	r2, [pc, #136]	; (8002ae0 <HAL_UART_MspInit+0x36c>)
 8002a56:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_UART_MspInit+0x368>)
 8002a5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a5e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a60:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <HAL_UART_MspInit+0x368>)
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a66:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HAL_UART_MspInit+0x368>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <HAL_UART_MspInit+0x368>)
 8002a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a72:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <HAL_UART_MspInit+0x368>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a7a:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_UART_MspInit+0x368>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <HAL_UART_MspInit+0x368>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_UART_MspInit+0x368>)
 8002a88:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a8c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_UART_MspInit+0x368>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002a94:	4811      	ldr	r0, [pc, #68]	; (8002adc <HAL_UART_MspInit+0x368>)
 8002a96:	f000 fc15 	bl	80032c4 <HAL_DMA_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_UART_MspInit+0x330>
      Error_Handler();
 8002aa0:	f7fe fdfc 	bl	800169c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a0d      	ldr	r2, [pc, #52]	; (8002adc <HAL_UART_MspInit+0x368>)
 8002aa8:	635a      	str	r2, [r3, #52]	; 0x34
 8002aaa:	4a0c      	ldr	r2, [pc, #48]	; (8002adc <HAL_UART_MspInit+0x368>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2105      	movs	r1, #5
 8002ab4:	2027      	movs	r0, #39	; 0x27
 8002ab6:	f000 fbbf 	bl	8003238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002aba:	2027      	movs	r0, #39	; 0x27
 8002abc:	f000 fbd8 	bl	8003270 <HAL_NVIC_EnableIRQ>
}
 8002ac0:	bf00      	nop
 8002ac2:	3738      	adds	r7, #56	; 0x38
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40004800 	.word	0x40004800
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40020c00 	.word	0x40020c00
 8002ad4:	20007b34 	.word	0x20007b34
 8002ad8:	40026028 	.word	0x40026028
 8002adc:	20007b94 	.word	0x20007b94
 8002ae0:	40026058 	.word	0x40026058

08002ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ae8:	480d      	ldr	r0, [pc, #52]	; (8002b20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aea:	490e      	ldr	r1, [pc, #56]	; (8002b24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002aec:	4a0e      	ldr	r2, [pc, #56]	; (8002b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af0:	e002      	b.n	8002af8 <LoopCopyDataInit>

08002af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002af6:	3304      	adds	r3, #4

08002af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002afc:	d3f9      	bcc.n	8002af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002afe:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b00:	4c0b      	ldr	r4, [pc, #44]	; (8002b30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b04:	e001      	b.n	8002b0a <LoopFillZerobss>

08002b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b08:	3204      	adds	r2, #4

08002b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b0c:	d3fb      	bcc.n	8002b06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b0e:	f7ff f9a3 	bl	8001e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b12:	f015 fe73 	bl	80187fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b16:	f7fe fd15 	bl	8001544 <main>
  bx  lr    
 8002b1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b24:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002b28:	0801ab6c 	.word	0x0801ab6c
  ldr r2, =_sbss
 8002b2c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002b30:	20012d30 	.word	0x20012d30

08002b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b34:	e7fe      	b.n	8002b34 <ADC_IRQHandler>
	...

08002b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <HAL_Init+0x40>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a0d      	ldr	r2, [pc, #52]	; (8002b78 <HAL_Init+0x40>)
 8002b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_Init+0x40>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <HAL_Init+0x40>)
 8002b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HAL_Init+0x40>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a07      	ldr	r2, [pc, #28]	; (8002b78 <HAL_Init+0x40>)
 8002b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b60:	2003      	movs	r0, #3
 8002b62:	f000 fb5e 	bl	8003222 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b66:	2005      	movs	r0, #5
 8002b68:	f7fe ffe2 	bl	8001b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b6c:	f7fe ffb4 	bl	8001ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00

08002b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_IncTick+0x20>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_IncTick+0x24>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <HAL_IncTick+0x24>)
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	2000000c 	.word	0x2000000c
 8002ba0:	20007bf4 	.word	0x20007bf4

08002ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <HAL_GetTick+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20007bf4 	.word	0x20007bf4

08002bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bc4:	f7ff ffee 	bl	8002ba4 <HAL_GetTick>
 8002bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bd4:	d005      	beq.n	8002be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <HAL_Delay+0x44>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4413      	add	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002be2:	bf00      	nop
 8002be4:	f7ff ffde 	bl	8002ba4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d8f7      	bhi.n	8002be4 <HAL_Delay+0x28>
  {
  }
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	2000000c 	.word	0x2000000c

08002c04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e033      	b.n	8002c82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fd fe36 	bl	8000894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d118      	bne.n	8002c74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c4a:	f023 0302 	bic.w	r3, r3, #2
 8002c4e:	f043 0202 	orr.w	r2, r3, #2
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f93a 	bl	8002ed0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f023 0303 	bic.w	r3, r3, #3
 8002c6a:	f043 0201 	orr.w	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
 8002c72:	e001      	b.n	8002c78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x1c>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e105      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x228>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b09      	cmp	r3, #9
 8002cb6:	d925      	bls.n	8002d04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68d9      	ldr	r1, [r3, #12]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	3b1e      	subs	r3, #30
 8002cce:	2207      	movs	r2, #7
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43da      	mvns	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	400a      	ands	r2, r1
 8002cdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68d9      	ldr	r1, [r3, #12]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4403      	add	r3, r0
 8002cf6:	3b1e      	subs	r3, #30
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	e022      	b.n	8002d4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6919      	ldr	r1, [r3, #16]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	2207      	movs	r2, #7
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	400a      	ands	r2, r1
 8002d26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6919      	ldr	r1, [r3, #16]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4618      	mov	r0, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4403      	add	r3, r0
 8002d40:	409a      	lsls	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d824      	bhi.n	8002d9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	3b05      	subs	r3, #5
 8002d64:	221f      	movs	r2, #31
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	400a      	ands	r2, r1
 8002d72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	4618      	mov	r0, r3
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b05      	subs	r3, #5
 8002d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34
 8002d9a:	e04c      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d824      	bhi.n	8002dee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	3b23      	subs	r3, #35	; 0x23
 8002db6:	221f      	movs	r2, #31
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43da      	mvns	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	3b23      	subs	r3, #35	; 0x23
 8002de0:	fa00 f203 	lsl.w	r2, r0, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
 8002dec:	e023      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3b41      	subs	r3, #65	; 0x41
 8002e00:	221f      	movs	r2, #31
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	3b41      	subs	r3, #65	; 0x41
 8002e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_ADC_ConfigChannel+0x234>)
 8002e38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <HAL_ADC_ConfigChannel+0x238>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d109      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x1cc>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b12      	cmp	r3, #18
 8002e4a:	d105      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a19      	ldr	r2, [pc, #100]	; (8002ec4 <HAL_ADC_ConfigChannel+0x238>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d123      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x21e>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d003      	beq.n	8002e72 <HAL_ADC_ConfigChannel+0x1e6>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b11      	cmp	r3, #17
 8002e70:	d11b      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d111      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_ADC_ConfigChannel+0x23c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <HAL_ADC_ConfigChannel+0x240>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	0c9a      	lsrs	r2, r3, #18
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e9c:	e002      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f9      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40012300 	.word	0x40012300
 8002ec4:	40012000 	.word	0x40012000
 8002ec8:	20000004 	.word	0x20000004
 8002ecc:	431bde83 	.word	0x431bde83

08002ed0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ed8:	4b79      	ldr	r3, [pc, #484]	; (80030c0 <ADC_Init+0x1f0>)
 8002eda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	021a      	lsls	r2, r3, #8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6899      	ldr	r1, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	4a58      	ldr	r2, [pc, #352]	; (80030c4 <ADC_Init+0x1f4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d022      	beq.n	8002fae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6899      	ldr	r1, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	e00f      	b.n	8002fce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0202 	bic.w	r2, r2, #2
 8002fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7e1b      	ldrb	r3, [r3, #24]
 8002fe8:	005a      	lsls	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01b      	beq.n	8003034 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800300a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800301a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	3b01      	subs	r3, #1
 8003028:	035a      	lsls	r2, r3, #13
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	e007      	b.n	8003044 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003042:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	3b01      	subs	r3, #1
 8003060:	051a      	lsls	r2, r3, #20
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003078:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003086:	025a      	lsls	r2, r3, #9
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800309e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6899      	ldr	r1, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	029a      	lsls	r2, r3, #10
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40012300 	.word	0x40012300
 80030c4:	0f000001 	.word	0x0f000001

080030c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <__NVIC_SetPriorityGrouping+0x44>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030e4:	4013      	ands	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030fa:	4a04      	ldr	r2, [pc, #16]	; (800310c <__NVIC_SetPriorityGrouping+0x44>)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	60d3      	str	r3, [r2, #12]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <__NVIC_GetPriorityGrouping+0x18>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	f003 0307 	and.w	r3, r3, #7
}
 800311e:	4618      	mov	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	2b00      	cmp	r3, #0
 800313c:	db0b      	blt.n	8003156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	f003 021f 	and.w	r2, r3, #31
 8003144:	4907      	ldr	r1, [pc, #28]	; (8003164 <__NVIC_EnableIRQ+0x38>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2001      	movs	r0, #1
 800314e:	fa00 f202 	lsl.w	r2, r0, r2
 8003152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e000e100 	.word	0xe000e100

08003168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	6039      	str	r1, [r7, #0]
 8003172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003178:	2b00      	cmp	r3, #0
 800317a:	db0a      	blt.n	8003192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	b2da      	uxtb	r2, r3
 8003180:	490c      	ldr	r1, [pc, #48]	; (80031b4 <__NVIC_SetPriority+0x4c>)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	0112      	lsls	r2, r2, #4
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	440b      	add	r3, r1
 800318c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003190:	e00a      	b.n	80031a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4908      	ldr	r1, [pc, #32]	; (80031b8 <__NVIC_SetPriority+0x50>)
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	3b04      	subs	r3, #4
 80031a0:	0112      	lsls	r2, r2, #4
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	440b      	add	r3, r1
 80031a6:	761a      	strb	r2, [r3, #24]
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000e100 	.word	0xe000e100
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b089      	sub	sp, #36	; 0x24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f1c3 0307 	rsb	r3, r3, #7
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	bf28      	it	cs
 80031da:	2304      	movcs	r3, #4
 80031dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3304      	adds	r3, #4
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d902      	bls.n	80031ec <NVIC_EncodePriority+0x30>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3b03      	subs	r3, #3
 80031ea:	e000      	b.n	80031ee <NVIC_EncodePriority+0x32>
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43da      	mvns	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	401a      	ands	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	43d9      	mvns	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	4313      	orrs	r3, r2
         );
}
 8003216:	4618      	mov	r0, r3
 8003218:	3724      	adds	r7, #36	; 0x24
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff ff4c 	bl	80030c8 <__NVIC_SetPriorityGrouping>
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800324a:	f7ff ff61 	bl	8003110 <__NVIC_GetPriorityGrouping>
 800324e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	6978      	ldr	r0, [r7, #20]
 8003256:	f7ff ffb1 	bl	80031bc <NVIC_EncodePriority>
 800325a:	4602      	mov	r2, r0
 800325c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003260:	4611      	mov	r1, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ff80 	bl	8003168 <__NVIC_SetPriority>
}
 8003268:	bf00      	nop
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff54 	bl	800312c <__NVIC_EnableIRQ>
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e00e      	b.n	80032bc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	795b      	ldrb	r3, [r3, #5]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd fbc8 	bl	8000a44 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032d0:	f7ff fc68 	bl	8002ba4 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e099      	b.n	8003414 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003300:	e00f      	b.n	8003322 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003302:	f7ff fc4f 	bl	8002ba4 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b05      	cmp	r3, #5
 800330e:	d908      	bls.n	8003322 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2203      	movs	r2, #3
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e078      	b.n	8003414 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e8      	bne.n	8003302 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_DMA_Init+0x158>)
 800333c:	4013      	ands	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800334e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800335a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003366:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	2b04      	cmp	r3, #4
 800337a:	d107      	bne.n	800338c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	4313      	orrs	r3, r2
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0307 	bic.w	r3, r3, #7
 80033a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d117      	bne.n	80033e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00e      	beq.n	80033e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fb01 	bl	80039d0 <DMA_CheckFifoParam>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2240      	movs	r2, #64	; 0x40
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033e2:	2301      	movs	r3, #1
 80033e4:	e016      	b.n	8003414 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fab8 	bl	8003964 <DMA_CalcBaseAndBitshift>
 80033f4:	4603      	mov	r3, r0
 80033f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	223f      	movs	r2, #63	; 0x3f
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	f010803f 	.word	0xf010803f

08003420 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_DMA_Start_IT+0x26>
 8003442:	2302      	movs	r3, #2
 8003444:	e040      	b.n	80034c8 <HAL_DMA_Start_IT+0xa8>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d12f      	bne.n	80034ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2202      	movs	r2, #2
 800345e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fa4a 	bl	8003908 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	223f      	movs	r2, #63	; 0x3f
 800347a:	409a      	lsls	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0216 	orr.w	r2, r2, #22
 800348e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0208 	orr.w	r2, r2, #8
 80034a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e005      	b.n	80034c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
 80034c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034de:	f7ff fb61 	bl	8002ba4 <HAL_GetTick>
 80034e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d008      	beq.n	8003502 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2280      	movs	r2, #128	; 0x80
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e052      	b.n	80035a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0216 	bic.w	r2, r2, #22
 8003510:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003520:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <HAL_DMA_Abort+0x62>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003552:	e013      	b.n	800357c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003554:	f7ff fb26 	bl	8002ba4 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b05      	cmp	r3, #5
 8003560:	d90c      	bls.n	800357c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2203      	movs	r2, #3
 800356c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e015      	b.n	80035a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e4      	bne.n	8003554 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	223f      	movs	r2, #63	; 0x3f
 8003590:	409a      	lsls	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d004      	beq.n	80035ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e00c      	b.n	80035e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2205      	movs	r2, #5
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003600:	4b8e      	ldr	r3, [pc, #568]	; (800383c <HAL_DMA_IRQHandler+0x248>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a8e      	ldr	r2, [pc, #568]	; (8003840 <HAL_DMA_IRQHandler+0x24c>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0a9b      	lsrs	r3, r3, #10
 800360c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	2208      	movs	r2, #8
 8003620:	409a      	lsls	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01a      	beq.n	8003660 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0204 	bic.w	r2, r2, #4
 8003646:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	2208      	movs	r2, #8
 800364e:	409a      	lsls	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003664:	2201      	movs	r2, #1
 8003666:	409a      	lsls	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d012      	beq.n	8003696 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003682:	2201      	movs	r2, #1
 8003684:	409a      	lsls	r2, r3
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	f043 0202 	orr.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	2204      	movs	r2, #4
 800369c:	409a      	lsls	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d012      	beq.n	80036cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	2204      	movs	r2, #4
 80036ba:	409a      	lsls	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	f043 0204 	orr.w	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	2210      	movs	r2, #16
 80036d2:	409a      	lsls	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d043      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d03c      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	2210      	movs	r2, #16
 80036f0:	409a      	lsls	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d018      	beq.n	8003736 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d108      	bne.n	8003724 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d024      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
 8003722:	e01f      	b.n	8003764 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
 8003734:	e016      	b.n	8003764 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d107      	bne.n	8003754 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0208 	bic.w	r2, r2, #8
 8003752:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	2220      	movs	r2, #32
 800376a:	409a      	lsls	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 808f 	beq.w	8003894 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8087 	beq.w	8003894 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378a:	2220      	movs	r2, #32
 800378c:	409a      	lsls	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b05      	cmp	r3, #5
 800379c:	d136      	bne.n	800380c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0216 	bic.w	r2, r2, #22
 80037ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_DMA_IRQHandler+0x1da>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0208 	bic.w	r2, r2, #8
 80037dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	223f      	movs	r2, #63	; 0x3f
 80037e4:	409a      	lsls	r2, r3
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d07e      	beq.n	8003900 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
        }
        return;
 800380a:	e079      	b.n	8003900 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01d      	beq.n	8003856 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10d      	bne.n	8003844 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	2b00      	cmp	r3, #0
 800382e:	d031      	beq.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
 8003838:	e02c      	b.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
 800383a:	bf00      	nop
 800383c:	20000004 	.word	0x20000004
 8003840:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d023      	beq.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e01e      	b.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10f      	bne.n	8003884 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0210 	bic.w	r2, r2, #16
 8003872:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	2b00      	cmp	r3, #0
 800389a:	d032      	beq.n	8003902 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d022      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2205      	movs	r2, #5
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d307      	bcc.n	80038dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f2      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x2cc>
 80038da:	e000      	b.n	80038de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	4798      	blx	r3
 80038fe:	e000      	b.n	8003902 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003900:	bf00      	nop
    }
  }
}
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003924:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d108      	bne.n	8003948 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003946:	e007      	b.n	8003958 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	60da      	str	r2, [r3, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	3b10      	subs	r3, #16
 8003974:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	091b      	lsrs	r3, r3, #4
 800397c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800397e:	4a13      	ldr	r2, [pc, #76]	; (80039cc <DMA_CalcBaseAndBitshift+0x68>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d909      	bls.n	80039a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	1d1a      	adds	r2, r3, #4
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	659a      	str	r2, [r3, #88]	; 0x58
 80039a4:	e007      	b.n	80039b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039ae:	f023 0303 	bic.w	r3, r3, #3
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	aaaaaaab 	.word	0xaaaaaaab
 80039cc:	08019fd4 	.word	0x08019fd4

080039d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11f      	bne.n	8003a2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d856      	bhi.n	8003a9e <DMA_CheckFifoParam+0xce>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <DMA_CheckFifoParam+0x28>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a09 	.word	0x08003a09
 80039fc:	08003a1b 	.word	0x08003a1b
 8003a00:	08003a09 	.word	0x08003a09
 8003a04:	08003a9f 	.word	0x08003a9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d046      	beq.n	8003aa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a18:	e043      	b.n	8003aa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a22:	d140      	bne.n	8003aa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a28:	e03d      	b.n	8003aa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a32:	d121      	bne.n	8003a78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d837      	bhi.n	8003aaa <DMA_CheckFifoParam+0xda>
 8003a3a:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <DMA_CheckFifoParam+0x70>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a57 	.word	0x08003a57
 8003a48:	08003a51 	.word	0x08003a51
 8003a4c:	08003a69 	.word	0x08003a69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      break;
 8003a54:	e030      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d025      	beq.n	8003aae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a66:	e022      	b.n	8003aae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a70:	d11f      	bne.n	8003ab2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a76:	e01c      	b.n	8003ab2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d903      	bls.n	8003a86 <DMA_CheckFifoParam+0xb6>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d003      	beq.n	8003a8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a84:	e018      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8a:	e015      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00e      	beq.n	8003ab6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a9c:	e00b      	b.n	8003ab6 <DMA_CheckFifoParam+0xe6>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e00a      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e008      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e006      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e004      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003aae:	bf00      	nop
 8003ab0:	e002      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop

08003ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	e16b      	b.n	8003dbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	f040 815a 	bne.w	8003db6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d005      	beq.n	8003b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d130      	bne.n	8003b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2203      	movs	r2, #3
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b50:	2201      	movs	r2, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 0201 	and.w	r2, r3, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d017      	beq.n	8003bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d123      	bne.n	8003c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	08da      	lsrs	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3208      	adds	r2, #8
 8003bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	220f      	movs	r2, #15
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	08da      	lsrs	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3208      	adds	r2, #8
 8003c06:	69b9      	ldr	r1, [r7, #24]
 8003c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0203 	and.w	r2, r3, #3
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80b4 	beq.w	8003db6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	4b60      	ldr	r3, [pc, #384]	; (8003dd4 <HAL_GPIO_Init+0x30c>)
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	4a5f      	ldr	r2, [pc, #380]	; (8003dd4 <HAL_GPIO_Init+0x30c>)
 8003c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c5e:	4b5d      	ldr	r3, [pc, #372]	; (8003dd4 <HAL_GPIO_Init+0x30c>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c6a:	4a5b      	ldr	r2, [pc, #364]	; (8003dd8 <HAL_GPIO_Init+0x310>)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a52      	ldr	r2, [pc, #328]	; (8003ddc <HAL_GPIO_Init+0x314>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d02b      	beq.n	8003cee <HAL_GPIO_Init+0x226>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a51      	ldr	r2, [pc, #324]	; (8003de0 <HAL_GPIO_Init+0x318>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d025      	beq.n	8003cea <HAL_GPIO_Init+0x222>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a50      	ldr	r2, [pc, #320]	; (8003de4 <HAL_GPIO_Init+0x31c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01f      	beq.n	8003ce6 <HAL_GPIO_Init+0x21e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4f      	ldr	r2, [pc, #316]	; (8003de8 <HAL_GPIO_Init+0x320>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d019      	beq.n	8003ce2 <HAL_GPIO_Init+0x21a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a4e      	ldr	r2, [pc, #312]	; (8003dec <HAL_GPIO_Init+0x324>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_GPIO_Init+0x216>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a4d      	ldr	r2, [pc, #308]	; (8003df0 <HAL_GPIO_Init+0x328>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00d      	beq.n	8003cda <HAL_GPIO_Init+0x212>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a4c      	ldr	r2, [pc, #304]	; (8003df4 <HAL_GPIO_Init+0x32c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d007      	beq.n	8003cd6 <HAL_GPIO_Init+0x20e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a4b      	ldr	r2, [pc, #300]	; (8003df8 <HAL_GPIO_Init+0x330>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d101      	bne.n	8003cd2 <HAL_GPIO_Init+0x20a>
 8003cce:	2307      	movs	r3, #7
 8003cd0:	e00e      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	e00c      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003cd6:	2306      	movs	r3, #6
 8003cd8:	e00a      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003cda:	2305      	movs	r3, #5
 8003cdc:	e008      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003cde:	2304      	movs	r3, #4
 8003ce0:	e006      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e004      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e002      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	f002 0203 	and.w	r2, r2, #3
 8003cf6:	0092      	lsls	r2, r2, #2
 8003cf8:	4093      	lsls	r3, r2
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d00:	4935      	ldr	r1, [pc, #212]	; (8003dd8 <HAL_GPIO_Init+0x310>)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	089b      	lsrs	r3, r3, #2
 8003d06:	3302      	adds	r3, #2
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d0e:	4b3b      	ldr	r3, [pc, #236]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d32:	4a32      	ldr	r2, [pc, #200]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d38:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d5c:	4a27      	ldr	r2, [pc, #156]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d62:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d86:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003db0:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3301      	adds	r3, #1
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b0f      	cmp	r3, #15
 8003dc0:	f67f ae90 	bls.w	8003ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	3724      	adds	r7, #36	; 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40013800 	.word	0x40013800
 8003ddc:	40020000 	.word	0x40020000
 8003de0:	40020400 	.word	0x40020400
 8003de4:	40020800 	.word	0x40020800
 8003de8:	40020c00 	.word	0x40020c00
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40021400 	.word	0x40021400
 8003df4:	40021800 	.word	0x40021800
 8003df8:	40021c00 	.word	0x40021c00
 8003dfc:	40013c00 	.word	0x40013c00

08003e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	807b      	strh	r3, [r7, #2]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e10:	787b      	ldrb	r3, [r7, #1]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e16:	887a      	ldrh	r2, [r7, #2]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e1c:	e003      	b.n	8003e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	041a      	lsls	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	619a      	str	r2, [r3, #24]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b085      	sub	sp, #20
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e44:	887a      	ldrh	r2, [r7, #2]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	041a      	lsls	r2, r3, #16
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	43d9      	mvns	r1, r3
 8003e50:	887b      	ldrh	r3, [r7, #2]
 8003e52:	400b      	ands	r3, r1
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	619a      	str	r2, [r3, #24]
}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e12b      	b.n	80040d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fd fb10 	bl	80014b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2224      	movs	r2, #36	; 0x24
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f001 fffe 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 8003ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4a81      	ldr	r2, [pc, #516]	; (80040dc <HAL_I2C_Init+0x274>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d807      	bhi.n	8003eec <HAL_I2C_Init+0x84>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a80      	ldr	r2, [pc, #512]	; (80040e0 <HAL_I2C_Init+0x278>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	bf94      	ite	ls
 8003ee4:	2301      	movls	r3, #1
 8003ee6:	2300      	movhi	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	e006      	b.n	8003efa <HAL_I2C_Init+0x92>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a7d      	ldr	r2, [pc, #500]	; (80040e4 <HAL_I2C_Init+0x27c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	bf94      	ite	ls
 8003ef4:	2301      	movls	r3, #1
 8003ef6:	2300      	movhi	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e0e7      	b.n	80040d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a78      	ldr	r2, [pc, #480]	; (80040e8 <HAL_I2C_Init+0x280>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	0c9b      	lsrs	r3, r3, #18
 8003f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	4a6a      	ldr	r2, [pc, #424]	; (80040dc <HAL_I2C_Init+0x274>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d802      	bhi.n	8003f3c <HAL_I2C_Init+0xd4>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	e009      	b.n	8003f50 <HAL_I2C_Init+0xe8>
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	4a69      	ldr	r2, [pc, #420]	; (80040ec <HAL_I2C_Init+0x284>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	3301      	adds	r3, #1
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	495c      	ldr	r1, [pc, #368]	; (80040dc <HAL_I2C_Init+0x274>)
 8003f6c:	428b      	cmp	r3, r1
 8003f6e:	d819      	bhi.n	8003fa4 <HAL_I2C_Init+0x13c>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1e59      	subs	r1, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f7e:	1c59      	adds	r1, r3, #1
 8003f80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f84:	400b      	ands	r3, r1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_I2C_Init+0x138>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1e59      	subs	r1, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f9e:	e051      	b.n	8004044 <HAL_I2C_Init+0x1dc>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	e04f      	b.n	8004044 <HAL_I2C_Init+0x1dc>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d111      	bne.n	8003fd0 <HAL_I2C_Init+0x168>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1e58      	subs	r0, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6859      	ldr	r1, [r3, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	440b      	add	r3, r1
 8003fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	e012      	b.n	8003ff6 <HAL_I2C_Init+0x18e>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1e58      	subs	r0, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6859      	ldr	r1, [r3, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	0099      	lsls	r1, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_Init+0x196>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e022      	b.n	8004044 <HAL_I2C_Init+0x1dc>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10e      	bne.n	8004024 <HAL_I2C_Init+0x1bc>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1e58      	subs	r0, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6859      	ldr	r1, [r3, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	440b      	add	r3, r1
 8004014:	fbb0 f3f3 	udiv	r3, r0, r3
 8004018:	3301      	adds	r3, #1
 800401a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004022:	e00f      	b.n	8004044 <HAL_I2C_Init+0x1dc>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1e58      	subs	r0, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6859      	ldr	r1, [r3, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	0099      	lsls	r1, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	fbb0 f3f3 	udiv	r3, r0, r3
 800403a:	3301      	adds	r3, #1
 800403c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	6809      	ldr	r1, [r1, #0]
 8004048:	4313      	orrs	r3, r2
 800404a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69da      	ldr	r2, [r3, #28]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6911      	ldr	r1, [r2, #16]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68d2      	ldr	r2, [r2, #12]
 800407e:	4311      	orrs	r1, r2
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	430b      	orrs	r3, r1
 8004086:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	000186a0 	.word	0x000186a0
 80040e0:	001e847f 	.word	0x001e847f
 80040e4:	003d08ff 	.word	0x003d08ff
 80040e8:	431bde83 	.word	0x431bde83
 80040ec:	10624dd3 	.word	0x10624dd3

080040f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040f2:	b08f      	sub	sp, #60	; 0x3c
 80040f4:	af0a      	add	r7, sp, #40	; 0x28
 80040f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e10f      	b.n	8004322 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f00b f8ed 	bl	800f2fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2203      	movs	r2, #3
 8004126:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f004 fe5a 	bl	8008dfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	687e      	ldr	r6, [r7, #4]
 800414e:	466d      	mov	r5, sp
 8004150:	f106 0410 	add.w	r4, r6, #16
 8004154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800415a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800415c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004160:	e885 0003 	stmia.w	r5, {r0, r1}
 8004164:	1d33      	adds	r3, r6, #4
 8004166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004168:	6838      	ldr	r0, [r7, #0]
 800416a:	f004 fd31 	bl	8008bd0 <USB_CoreInit>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0d0      	b.n	8004322 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2100      	movs	r1, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f004 fe48 	bl	8008e1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418c:	2300      	movs	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	e04a      	b.n	8004228 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	333d      	adds	r3, #61	; 0x3d
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041a6:	7bfa      	ldrb	r2, [r7, #15]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	4413      	add	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	333c      	adds	r3, #60	; 0x3c
 80041b6:	7bfa      	ldrb	r2, [r7, #15]
 80041b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	b298      	uxth	r0, r3
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	3344      	adds	r3, #68	; 0x44
 80041ce:	4602      	mov	r2, r0
 80041d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041d2:	7bfa      	ldrb	r2, [r7, #15]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	3340      	adds	r3, #64	; 0x40
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041e6:	7bfa      	ldrb	r2, [r7, #15]
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	4613      	mov	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	440b      	add	r3, r1
 80041f4:	3348      	adds	r3, #72	; 0x48
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041fa:	7bfa      	ldrb	r2, [r7, #15]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	334c      	adds	r3, #76	; 0x4c
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800420e:	7bfa      	ldrb	r2, [r7, #15]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	3354      	adds	r3, #84	; 0x54
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	3301      	adds	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	7bfa      	ldrb	r2, [r7, #15]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	429a      	cmp	r2, r3
 8004230:	d3af      	bcc.n	8004192 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
 8004236:	e044      	b.n	80042c2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800424e:	7bfa      	ldrb	r2, [r7, #15]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004276:	2200      	movs	r2, #0
 8004278:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800427a:	7bfa      	ldrb	r2, [r7, #15]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	4413      	add	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	3301      	adds	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
 80042c2:	7bfa      	ldrb	r2, [r7, #15]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d3b5      	bcc.n	8004238 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	687e      	ldr	r6, [r7, #4]
 80042d4:	466d      	mov	r5, sp
 80042d6:	f106 0410 	add.w	r4, r6, #16
 80042da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80042ea:	1d33      	adds	r3, r6, #4
 80042ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042ee:	6838      	ldr	r0, [r7, #0]
 80042f0:	f004 fde0 	bl	8008eb4 <USB_DevInit>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2202      	movs	r2, #2
 80042fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e00d      	b.n	8004322 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f005 ff2f 	bl	800a17e <USB_DevDisconnect>

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800432a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_PCD_Start+0x1c>
 8004342:	2302      	movs	r3, #2
 8004344:	e020      	b.n	8004388 <HAL_PCD_Start+0x5e>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	2b01      	cmp	r3, #1
 8004354:	d109      	bne.n	800436a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800435a:	2b01      	cmp	r3, #1
 800435c:	d005      	beq.n	800436a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f004 fd32 	bl	8008dd8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f005 fedf 	bl	800a13c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b08d      	sub	sp, #52	; 0x34
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f005 ff9d 	bl	800a2e6 <USB_GetMode>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f040 848a 	bne.w	8004cc8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f005 ff01 	bl	800a1c0 <USB_ReadInterrupts>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8480 	beq.w	8004cc6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f005 feee 	bl	800a1c0 <USB_ReadInterrupts>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d107      	bne.n	80043fe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695a      	ldr	r2, [r3, #20]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f002 0202 	and.w	r2, r2, #2
 80043fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f005 fedc 	bl	800a1c0 <USB_ReadInterrupts>
 8004408:	4603      	mov	r3, r0
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	2b10      	cmp	r3, #16
 8004410:	d161      	bne.n	80044d6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699a      	ldr	r2, [r3, #24]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0210 	bic.w	r2, r2, #16
 8004420:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f003 020f 	and.w	r2, r3, #15
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	4413      	add	r3, r2
 800443e:	3304      	adds	r3, #4
 8004440:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	0c5b      	lsrs	r3, r3, #17
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	2b02      	cmp	r3, #2
 800444c:	d124      	bne.n	8004498 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004454:	4013      	ands	r3, r2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d035      	beq.n	80044c6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004468:	b29b      	uxth	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	6a38      	ldr	r0, [r7, #32]
 800446e:	f005 fd13 	bl	8009e98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800447e:	441a      	add	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	6a1a      	ldr	r2, [r3, #32]
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	091b      	lsrs	r3, r3, #4
 800448c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004490:	441a      	add	r2, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	621a      	str	r2, [r3, #32]
 8004496:	e016      	b.n	80044c6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	0c5b      	lsrs	r3, r3, #17
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	2b06      	cmp	r3, #6
 80044a2:	d110      	bne.n	80044c6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044aa:	2208      	movs	r2, #8
 80044ac:	4619      	mov	r1, r3
 80044ae:	6a38      	ldr	r0, [r7, #32]
 80044b0:	f005 fcf2 	bl	8009e98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	6a1a      	ldr	r2, [r3, #32]
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044c0:	441a      	add	r2, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0210 	orr.w	r2, r2, #16
 80044d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f005 fe70 	bl	800a1c0 <USB_ReadInterrupts>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044ea:	f040 80a7 	bne.w	800463c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f005 fe75 	bl	800a1e6 <USB_ReadDevAllOutEpInterrupt>
 80044fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80044fe:	e099      	b.n	8004634 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 808e 	beq.w	8004628 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f005 fe99 	bl	800a24e <USB_ReadDevOutEPInterrupt>
 800451c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00c      	beq.n	8004542 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004534:	461a      	mov	r2, r3
 8004536:	2301      	movs	r3, #1
 8004538:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800453a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fec3 	bl	80052c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00c      	beq.n	8004566 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004558:	461a      	mov	r2, r3
 800455a:	2308      	movs	r3, #8
 800455c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800455e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 ff99 	bl	8005498 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	d008      	beq.n	8004582 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457c:	461a      	mov	r2, r3
 800457e:	2310      	movs	r3, #16
 8004580:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d030      	beq.n	80045ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004594:	2b80      	cmp	r3, #128	; 0x80
 8004596:	d109      	bne.n	80045ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80045ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ae:	4613      	mov	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	3304      	adds	r3, #4
 80045c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	78db      	ldrb	r3, [r3, #3]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d108      	bne.n	80045dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2200      	movs	r2, #0
 80045ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	4619      	mov	r1, r3
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f00a ff96 	bl	800f508 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e8:	461a      	mov	r2, r3
 80045ea:	2302      	movs	r3, #2
 80045ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004604:	461a      	mov	r2, r3
 8004606:	2320      	movs	r3, #32
 8004608:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	015a      	lsls	r2, r3, #5
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	4413      	add	r3, r2
 800461c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004620:	461a      	mov	r2, r3
 8004622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004626:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	3301      	adds	r3, #1
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	f47f af62 	bne.w	8004500 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f005 fdbd 	bl	800a1c0 <USB_ReadInterrupts>
 8004646:	4603      	mov	r3, r0
 8004648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004650:	f040 80db 	bne.w	800480a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f005 fdde 	bl	800a21a <USB_ReadDevAllInEpInterrupt>
 800465e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004664:	e0cd      	b.n	8004802 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80c2 	beq.w	80047f6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f005 fe04 	bl	800a28a <USB_ReadDevInEPInterrupt>
 8004682:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d057      	beq.n	800473e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	2201      	movs	r2, #1
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	43db      	mvns	r3, r3
 80046a8:	69f9      	ldr	r1, [r7, #28]
 80046aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ae:	4013      	ands	r3, r2
 80046b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046be:	461a      	mov	r2, r3
 80046c0:	2301      	movs	r3, #1
 80046c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d132      	bne.n	8004732 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	334c      	adds	r3, #76	; 0x4c
 80046dc:	6819      	ldr	r1, [r3, #0]
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4403      	add	r3, r0
 80046ec:	3348      	adds	r3, #72	; 0x48
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4419      	add	r1, r3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f6:	4613      	mov	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4403      	add	r3, r0
 8004700:	334c      	adds	r3, #76	; 0x4c
 8004702:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	2b00      	cmp	r3, #0
 8004708:	d113      	bne.n	8004732 <HAL_PCD_IRQHandler+0x3a2>
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	3354      	adds	r3, #84	; 0x54
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d108      	bne.n	8004732 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6818      	ldr	r0, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800472a:	461a      	mov	r2, r3
 800472c:	2101      	movs	r1, #1
 800472e:	f005 fe0b 	bl	800a348 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	b2db      	uxtb	r3, r3
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f00a fe60 	bl	800f3fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004754:	461a      	mov	r2, r3
 8004756:	2308      	movs	r3, #8
 8004758:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004770:	461a      	mov	r2, r3
 8004772:	2310      	movs	r3, #16
 8004774:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478c:	461a      	mov	r2, r3
 800478e:	2340      	movs	r3, #64	; 0x40
 8004790:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d023      	beq.n	80047e4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800479c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800479e:	6a38      	ldr	r0, [r7, #32]
 80047a0:	f004 fcec 	bl	800917c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80047a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	3338      	adds	r3, #56	; 0x38
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	3304      	adds	r3, #4
 80047b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	78db      	ldrb	r3, [r3, #3]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d108      	bne.n	80047d2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2200      	movs	r2, #0
 80047c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	4619      	mov	r1, r3
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f00a fead 	bl	800f52c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047de:	461a      	mov	r2, r3
 80047e0:	2302      	movs	r3, #2
 80047e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80047ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fcdb 	bl	80051ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	3301      	adds	r3, #1
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	2b00      	cmp	r3, #0
 8004806:	f47f af2e 	bne.w	8004666 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f005 fcd6 	bl	800a1c0 <USB_ReadInterrupts>
 8004814:	4603      	mov	r3, r0
 8004816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800481a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800481e:	d122      	bne.n	8004866 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800483a:	2b01      	cmp	r3, #1
 800483c:	d108      	bne.n	8004850 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004846:	2100      	movs	r1, #0
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fec3 	bl	80055d4 <HAL_PCDEx_LPM_Callback>
 800484e:	e002      	b.n	8004856 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f00a fe4b 	bl	800f4ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004864:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f005 fca8 	bl	800a1c0 <USB_ReadInterrupts>
 8004870:	4603      	mov	r3, r0
 8004872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487a:	d112      	bne.n	80048a2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	d102      	bne.n	8004892 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f00a fe07 	bl	800f4a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80048a0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f005 fc8a 	bl	800a1c0 <USB_ReadInterrupts>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b6:	f040 80b7 	bne.w	8004a28 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2110      	movs	r1, #16
 80048d4:	4618      	mov	r0, r3
 80048d6:	f004 fc51 	bl	800917c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048da:	2300      	movs	r3, #0
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048de:	e046      	b.n	800496e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	461a      	mov	r2, r3
 80048ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	440a      	add	r2, r1
 800490a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800490e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004912:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004920:	461a      	mov	r2, r3
 8004922:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004926:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004946:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004962:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004966:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496a:	3301      	adds	r3, #1
 800496c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004974:	429a      	cmp	r2, r3
 8004976:	d3b3      	bcc.n	80048e0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004986:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800498a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	2b00      	cmp	r3, #0
 8004992:	d016      	beq.n	80049c2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a4:	f043 030b 	orr.w	r3, r3, #11
 80049a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ba:	f043 030b 	orr.w	r3, r3, #11
 80049be:	6453      	str	r3, [r2, #68]	; 0x44
 80049c0:	e015      	b.n	80049ee <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80049d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049e8:	f043 030b 	orr.w	r3, r3, #11
 80049ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a00:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a12:	461a      	mov	r2, r3
 8004a14:	f005 fc98 	bl	800a348 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004a26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f005 fbc7 	bl	800a1c0 <USB_ReadInterrupts>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a3c:	d124      	bne.n	8004a88 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f005 fc5d 	bl	800a302 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f004 fc12 	bl	8009276 <USB_GetDevSpeed>
 8004a52:	4603      	mov	r3, r0
 8004a54:	461a      	mov	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681c      	ldr	r4, [r3, #0]
 8004a5e:	f001 fa29 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 8004a62:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f004 f911 	bl	8008c94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f00a fceb 	bl	800f44e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695a      	ldr	r2, [r3, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f005 fb97 	bl	800a1c0 <USB_ReadInterrupts>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d10a      	bne.n	8004ab2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f00a fcc8 	bl	800f432 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f002 0208 	and.w	r2, r2, #8
 8004ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f005 fb82 	bl	800a1c0 <USB_ReadInterrupts>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac2:	2b80      	cmp	r3, #128	; 0x80
 8004ac4:	d122      	bne.n	8004b0c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad6:	e014      	b.n	8004b02 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d105      	bne.n	8004afc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	4619      	mov	r1, r3
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fb27 	bl	800514a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	3301      	adds	r3, #1
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d3e5      	bcc.n	8004ad8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f005 fb55 	bl	800a1c0 <USB_ReadInterrupts>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b20:	d13b      	bne.n	8004b9a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b22:	2301      	movs	r3, #1
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
 8004b26:	e02b      	b.n	8004b80 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	3340      	adds	r3, #64	; 0x40
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d115      	bne.n	8004b7a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004b4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	da12      	bge.n	8004b7a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b58:	4613      	mov	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	333f      	adds	r3, #63	; 0x3f
 8004b64:	2201      	movs	r2, #1
 8004b66:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	4619      	mov	r1, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fae8 	bl	800514a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d3ce      	bcc.n	8004b28 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695a      	ldr	r2, [r3, #20]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f005 fb0e 	bl	800a1c0 <USB_ReadInterrupts>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004baa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bae:	d155      	bne.n	8004c5c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb4:	e045      	b.n	8004c42 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bca:	4613      	mov	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d12e      	bne.n	8004c3c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004bde:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	da2b      	bge.n	8004c3c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004bf0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d121      	bne.n	8004c3c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10a      	bne.n	8004c3c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c38:	6053      	str	r3, [r2, #4]
            break;
 8004c3a:	e007      	b.n	8004c4c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	3301      	adds	r3, #1
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d3b4      	bcc.n	8004bb6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f005 faad 	bl	800a1c0 <USB_ReadInterrupts>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c70:	d10a      	bne.n	8004c88 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f00a fc6c 	bl	800f550 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695a      	ldr	r2, [r3, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f005 fa97 	bl	800a1c0 <USB_ReadInterrupts>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d115      	bne.n	8004cc8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f00a fc5c 	bl	800f56c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6859      	ldr	r1, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
 8004cc4:	e000      	b.n	8004cc8 <HAL_PCD_IRQHandler+0x938>
      return;
 8004cc6:	bf00      	nop
    }
  }
}
 8004cc8:	3734      	adds	r7, #52	; 0x34
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd90      	pop	{r4, r7, pc}

08004cce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_PCD_SetAddress+0x1a>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e013      	b.n	8004d10 <HAL_PCD_SetAddress+0x42>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	78fa      	ldrb	r2, [r7, #3]
 8004cf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f005 f9f5 	bl	800a0f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	4608      	mov	r0, r1
 8004d22:	4611      	mov	r1, r2
 8004d24:	461a      	mov	r2, r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	70fb      	strb	r3, [r7, #3]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	803b      	strh	r3, [r7, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	da0f      	bge.n	8004d5e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	f003 020f 	and.w	r2, r3, #15
 8004d44:	4613      	mov	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	3338      	adds	r3, #56	; 0x38
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	4413      	add	r3, r2
 8004d52:	3304      	adds	r3, #4
 8004d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	705a      	strb	r2, [r3, #1]
 8004d5c:	e00f      	b.n	8004d7e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	f003 020f 	and.w	r2, r3, #15
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	4413      	add	r3, r2
 8004d74:	3304      	adds	r3, #4
 8004d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d8a:	883a      	ldrh	r2, [r7, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	78ba      	ldrb	r2, [r7, #2]
 8004d94:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	785b      	ldrb	r3, [r3, #1]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d004      	beq.n	8004da8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004da8:	78bb      	ldrb	r3, [r7, #2]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d102      	bne.n	8004db4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_PCD_EP_Open+0xaa>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e00e      	b.n	8004de0 <HAL_PCD_EP_Open+0xc8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68f9      	ldr	r1, [r7, #12]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f004 fa75 	bl	80092c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004dde:	7afb      	ldrb	r3, [r7, #11]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	da0f      	bge.n	8004e1c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	f003 020f 	and.w	r2, r3, #15
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	3338      	adds	r3, #56	; 0x38
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4413      	add	r3, r2
 8004e10:	3304      	adds	r3, #4
 8004e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	705a      	strb	r2, [r3, #1]
 8004e1a:	e00f      	b.n	8004e3c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	f003 020f 	and.w	r2, r3, #15
 8004e22:	4613      	mov	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4413      	add	r3, r2
 8004e32:	3304      	adds	r3, #4
 8004e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_PCD_EP_Close+0x6e>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e00e      	b.n	8004e74 <HAL_PCD_EP_Close+0x8c>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68f9      	ldr	r1, [r7, #12]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f004 fab3 	bl	80093d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e8c:	7afb      	ldrb	r3, [r7, #11]
 8004e8e:	f003 020f 	and.w	r2, r3, #15
 8004e92:	4613      	mov	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ebe:	7afb      	ldrb	r3, [r7, #11]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d102      	bne.n	8004ed8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ed8:	7afb      	ldrb	r3, [r7, #11]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d109      	bne.n	8004ef6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	461a      	mov	r2, r3
 8004eee:	6979      	ldr	r1, [r7, #20]
 8004ef0:	f004 fd92 	bl	8009a18 <USB_EP0StartXfer>
 8004ef4:	e008      	b.n	8004f08 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	6979      	ldr	r1, [r7, #20]
 8004f04:	f004 fb40 	bl	8009588 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	f003 020f 	and.w	r2, r3, #15
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004f34:	681b      	ldr	r3, [r3, #0]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b086      	sub	sp, #24
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f52:	7afb      	ldrb	r3, [r7, #11]
 8004f54:	f003 020f 	and.w	r2, r3, #15
 8004f58:	4613      	mov	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	3338      	adds	r3, #56	; 0x38
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	3304      	adds	r3, #4
 8004f68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f82:	7afb      	ldrb	r3, [r7, #11]
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d102      	bne.n	8004f9c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f9c:	7afb      	ldrb	r3, [r7, #11]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6979      	ldr	r1, [r7, #20]
 8004fb4:	f004 fd30 	bl	8009a18 <USB_EP0StartXfer>
 8004fb8:	e008      	b.n	8004fcc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6979      	ldr	r1, [r7, #20]
 8004fc8:	f004 fade 	bl	8009588 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	f003 020f 	and.w	r2, r3, #15
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d901      	bls.n	8004ff4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e050      	b.n	8005096 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	da0f      	bge.n	800501c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	f003 020f 	and.w	r2, r3, #15
 8005002:	4613      	mov	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	3338      	adds	r3, #56	; 0x38
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	4413      	add	r3, r2
 8005010:	3304      	adds	r3, #4
 8005012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	705a      	strb	r2, [r3, #1]
 800501a:	e00d      	b.n	8005038 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	4613      	mov	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	4413      	add	r3, r2
 800502e:	3304      	adds	r3, #4
 8005030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	b2da      	uxtb	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_PCD_EP_SetStall+0x82>
 8005054:	2302      	movs	r3, #2
 8005056:	e01e      	b.n	8005096 <HAL_PCD_EP_SetStall+0xc0>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68f9      	ldr	r1, [r7, #12]
 8005066:	4618      	mov	r0, r3
 8005068:	f004 ff6e 	bl	8009f48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10a      	bne.n	800508c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	b2d9      	uxtb	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005086:	461a      	mov	r2, r3
 8005088:	f005 f95e 	bl	800a348 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	460b      	mov	r3, r1
 80050a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050aa:	78fb      	ldrb	r3, [r7, #3]
 80050ac:	f003 020f 	and.w	r2, r3, #15
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d901      	bls.n	80050bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e042      	b.n	8005142 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	da0f      	bge.n	80050e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	f003 020f 	and.w	r2, r3, #15
 80050ca:	4613      	mov	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	3338      	adds	r3, #56	; 0x38
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	4413      	add	r3, r2
 80050d8:	3304      	adds	r3, #4
 80050da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	705a      	strb	r2, [r3, #1]
 80050e2:	e00f      	b.n	8005104 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	f003 020f 	and.w	r2, r3, #15
 80050ea:	4613      	mov	r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	3304      	adds	r3, #4
 80050fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	b2da      	uxtb	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_PCD_EP_ClrStall+0x86>
 8005120:	2302      	movs	r3, #2
 8005122:	e00e      	b.n	8005142 <HAL_PCD_EP_ClrStall+0xa4>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68f9      	ldr	r1, [r7, #12]
 8005132:	4618      	mov	r0, r3
 8005134:	f004 ff76 	bl	800a024 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	460b      	mov	r3, r1
 8005154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800515a:	2b00      	cmp	r3, #0
 800515c:	da0c      	bge.n	8005178 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	f003 020f 	and.w	r2, r3, #15
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	3338      	adds	r3, #56	; 0x38
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4413      	add	r3, r2
 8005172:	3304      	adds	r3, #4
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e00c      	b.n	8005192 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005178:	78fb      	ldrb	r3, [r7, #3]
 800517a:	f003 020f 	and.w	r2, r3, #15
 800517e:	4613      	mov	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	3304      	adds	r3, #4
 8005190:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68f9      	ldr	r1, [r7, #12]
 8005198:	4618      	mov	r0, r3
 800519a:	f004 fd95 	bl	8009cc8 <USB_EPStopXfer>
 800519e:	4603      	mov	r3, r0
 80051a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80051a2:	7afb      	ldrb	r3, [r7, #11]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	4613      	mov	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	3338      	adds	r3, #56	; 0x38
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	4413      	add	r3, r2
 80051d0:	3304      	adds	r3, #4
 80051d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a1a      	ldr	r2, [r3, #32]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d901      	bls.n	80051e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e06c      	b.n	80052be <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d902      	bls.n	8005200 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	3303      	adds	r3, #3
 8005204:	089b      	lsrs	r3, r3, #2
 8005206:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005208:	e02b      	b.n	8005262 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	429a      	cmp	r2, r3
 800521e:	d902      	bls.n	8005226 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	3303      	adds	r3, #3
 800522a:	089b      	lsrs	r3, r3, #2
 800522c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6919      	ldr	r1, [r3, #16]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800523e:	b2db      	uxtb	r3, r3
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	4603      	mov	r3, r0
 8005244:	6978      	ldr	r0, [r7, #20]
 8005246:	f004 fde9 	bl	8009e1c <USB_WritePacket>

    ep->xfer_buff  += len;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	441a      	add	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1a      	ldr	r2, [r3, #32]
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	441a      	add	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	b29b      	uxth	r3, r3
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	429a      	cmp	r2, r3
 8005276:	d809      	bhi.n	800528c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1a      	ldr	r2, [r3, #32]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005280:	429a      	cmp	r2, r3
 8005282:	d203      	bcs.n	800528c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1be      	bne.n	800520a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	429a      	cmp	r2, r3
 8005296:	d811      	bhi.n	80052bc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f003 030f 	and.w	r3, r3, #15
 800529e:	2201      	movs	r2, #1
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	6939      	ldr	r1, [r7, #16]
 80052b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052b8:	4013      	ands	r3, r2
 80052ba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	333c      	adds	r3, #60	; 0x3c
 80052e0:	3304      	adds	r3, #4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d17b      	bne.n	80053f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d015      	beq.n	8005334 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4a61      	ldr	r2, [pc, #388]	; (8005490 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	f240 80b9 	bls.w	8005484 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80b3 	beq.w	8005484 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532a:	461a      	mov	r2, r3
 800532c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005330:	6093      	str	r3, [r2, #8]
 8005332:	e0a7      	b.n	8005484 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d009      	beq.n	8005352 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	461a      	mov	r2, r3
 800534c:	2320      	movs	r3, #32
 800534e:	6093      	str	r3, [r2, #8]
 8005350:	e098      	b.n	8005484 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005358:	2b00      	cmp	r3, #0
 800535a:	f040 8093 	bne.w	8005484 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	4a4b      	ldr	r2, [pc, #300]	; (8005490 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d90f      	bls.n	8005386 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537c:	461a      	mov	r2, r3
 800537e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005382:	6093      	str	r3, [r2, #8]
 8005384:	e07e      	b.n	8005484 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	4413      	add	r3, r2
 8005398:	3304      	adds	r3, #4
 800539a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	0159      	lsls	r1, r3, #5
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	440b      	add	r3, r1
 80053a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d114      	bne.n	80053e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053d0:	461a      	mov	r2, r3
 80053d2:	2101      	movs	r1, #1
 80053d4:	f004 ffb8 	bl	800a348 <USB_EP0_OutStart>
 80053d8:	e006      	b.n	80053e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	441a      	add	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f009 ffea 	bl	800f3c8 <HAL_PCD_DataOutStageCallback>
 80053f4:	e046      	b.n	8005484 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	4a26      	ldr	r2, [pc, #152]	; (8005494 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d124      	bne.n	8005448 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005414:	461a      	mov	r2, r3
 8005416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800541a:	6093      	str	r3, [r2, #8]
 800541c:	e032      	b.n	8005484 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005434:	461a      	mov	r2, r3
 8005436:	2320      	movs	r3, #32
 8005438:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	b2db      	uxtb	r3, r3
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f009 ffc1 	bl	800f3c8 <HAL_PCD_DataOutStageCallback>
 8005446:	e01d      	b.n	8005484 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d114      	bne.n	8005478 <PCD_EP_OutXfrComplete_int+0x1b0>
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	4613      	mov	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d108      	bne.n	8005478 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005470:	461a      	mov	r2, r3
 8005472:	2100      	movs	r1, #0
 8005474:	f004 ff68 	bl	800a348 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	b2db      	uxtb	r3, r3
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f009 ffa2 	bl	800f3c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3720      	adds	r7, #32
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	4f54300a 	.word	0x4f54300a
 8005494:	4f54310a 	.word	0x4f54310a

08005498 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	333c      	adds	r3, #60	; 0x3c
 80054b0:	3304      	adds	r3, #4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4a15      	ldr	r2, [pc, #84]	; (8005520 <PCD_EP_OutSetupPacket_int+0x88>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d90e      	bls.n	80054ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d009      	beq.n	80054ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e4:	461a      	mov	r2, r3
 80054e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f009 ff59 	bl	800f3a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <PCD_EP_OutSetupPacket_int+0x88>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d90c      	bls.n	8005514 <PCD_EP_OutSetupPacket_int+0x7c>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d108      	bne.n	8005514 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800550c:	461a      	mov	r2, r3
 800550e:	2101      	movs	r1, #1
 8005510:	f004 ff1a 	bl	800a348 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	4f54300a 	.word	0x4f54300a

08005524 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	70fb      	strb	r3, [r7, #3]
 8005530:	4613      	mov	r3, r2
 8005532:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d107      	bne.n	8005552 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005542:	883b      	ldrh	r3, [r7, #0]
 8005544:	0419      	lsls	r1, r3, #16
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	430a      	orrs	r2, r1
 800554e:	629a      	str	r2, [r3, #40]	; 0x28
 8005550:	e028      	b.n	80055a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	4413      	add	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005560:	2300      	movs	r3, #0
 8005562:	73fb      	strb	r3, [r7, #15]
 8005564:	e00d      	b.n	8005582 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	7bfb      	ldrb	r3, [r7, #15]
 800556c:	3340      	adds	r3, #64	; 0x40
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	0c1b      	lsrs	r3, r3, #16
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	4413      	add	r3, r2
 800557a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	3301      	adds	r3, #1
 8005580:	73fb      	strb	r3, [r7, #15]
 8005582:	7bfa      	ldrb	r2, [r7, #15]
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	3b01      	subs	r3, #1
 8005588:	429a      	cmp	r2, r3
 800558a:	d3ec      	bcc.n	8005566 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800558c:	883b      	ldrh	r3, [r7, #0]
 800558e:	0418      	lsls	r0, r3, #16
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	3b01      	subs	r3, #1
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	4302      	orrs	r2, r0
 800559c:	3340      	adds	r3, #64	; 0x40
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	460b      	mov	r3, r1
 80055bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	887a      	ldrh	r2, [r7, #2]
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e267      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d075      	beq.n	80056f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800560a:	4b88      	ldr	r3, [pc, #544]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 030c 	and.w	r3, r3, #12
 8005612:	2b04      	cmp	r3, #4
 8005614:	d00c      	beq.n	8005630 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005616:	4b85      	ldr	r3, [pc, #532]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800561e:	2b08      	cmp	r3, #8
 8005620:	d112      	bne.n	8005648 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005622:	4b82      	ldr	r3, [pc, #520]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800562e:	d10b      	bne.n	8005648 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005630:	4b7e      	ldr	r3, [pc, #504]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d05b      	beq.n	80056f4 <HAL_RCC_OscConfig+0x108>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d157      	bne.n	80056f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e242      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005650:	d106      	bne.n	8005660 <HAL_RCC_OscConfig+0x74>
 8005652:	4b76      	ldr	r3, [pc, #472]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a75      	ldr	r2, [pc, #468]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	e01d      	b.n	800569c <HAL_RCC_OscConfig+0xb0>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005668:	d10c      	bne.n	8005684 <HAL_RCC_OscConfig+0x98>
 800566a:	4b70      	ldr	r3, [pc, #448]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a6f      	ldr	r2, [pc, #444]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	4b6d      	ldr	r3, [pc, #436]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a6c      	ldr	r2, [pc, #432]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800567c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e00b      	b.n	800569c <HAL_RCC_OscConfig+0xb0>
 8005684:	4b69      	ldr	r3, [pc, #420]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a68      	ldr	r2, [pc, #416]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800568a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	4b66      	ldr	r3, [pc, #408]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a65      	ldr	r2, [pc, #404]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800569a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d013      	beq.n	80056cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a4:	f7fd fa7e 	bl	8002ba4 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ac:	f7fd fa7a 	bl	8002ba4 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b64      	cmp	r3, #100	; 0x64
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e207      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056be:	4b5b      	ldr	r3, [pc, #364]	; (800582c <HAL_RCC_OscConfig+0x240>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f0      	beq.n	80056ac <HAL_RCC_OscConfig+0xc0>
 80056ca:	e014      	b.n	80056f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056cc:	f7fd fa6a 	bl	8002ba4 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056d4:	f7fd fa66 	bl	8002ba4 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b64      	cmp	r3, #100	; 0x64
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e1f3      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056e6:	4b51      	ldr	r3, [pc, #324]	; (800582c <HAL_RCC_OscConfig+0x240>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <HAL_RCC_OscConfig+0xe8>
 80056f2:	e000      	b.n	80056f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d063      	beq.n	80057ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005702:	4b4a      	ldr	r3, [pc, #296]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 030c 	and.w	r3, r3, #12
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00b      	beq.n	8005726 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800570e:	4b47      	ldr	r3, [pc, #284]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005716:	2b08      	cmp	r3, #8
 8005718:	d11c      	bne.n	8005754 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800571a:	4b44      	ldr	r3, [pc, #272]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d116      	bne.n	8005754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005726:	4b41      	ldr	r3, [pc, #260]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_RCC_OscConfig+0x152>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d001      	beq.n	800573e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e1c7      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800573e:	4b3b      	ldr	r3, [pc, #236]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	4937      	ldr	r1, [pc, #220]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800574e:	4313      	orrs	r3, r2
 8005750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005752:	e03a      	b.n	80057ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d020      	beq.n	800579e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800575c:	4b34      	ldr	r3, [pc, #208]	; (8005830 <HAL_RCC_OscConfig+0x244>)
 800575e:	2201      	movs	r2, #1
 8005760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005762:	f7fd fa1f 	bl	8002ba4 <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800576a:	f7fd fa1b 	bl	8002ba4 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e1a8      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577c:	4b2b      	ldr	r3, [pc, #172]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0f0      	beq.n	800576a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005788:	4b28      	ldr	r3, [pc, #160]	; (800582c <HAL_RCC_OscConfig+0x240>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4925      	ldr	r1, [pc, #148]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005798:	4313      	orrs	r3, r2
 800579a:	600b      	str	r3, [r1, #0]
 800579c:	e015      	b.n	80057ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800579e:	4b24      	ldr	r3, [pc, #144]	; (8005830 <HAL_RCC_OscConfig+0x244>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fd f9fe 	bl	8002ba4 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ac:	f7fd f9fa 	bl	8002ba4 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e187      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057be:	4b1b      	ldr	r3, [pc, #108]	; (800582c <HAL_RCC_OscConfig+0x240>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d036      	beq.n	8005844 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d016      	beq.n	800580c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057de:	4b15      	ldr	r3, [pc, #84]	; (8005834 <HAL_RCC_OscConfig+0x248>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e4:	f7fd f9de 	bl	8002ba4 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ec:	f7fd f9da 	bl	8002ba4 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e167      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057fe:	4b0b      	ldr	r3, [pc, #44]	; (800582c <HAL_RCC_OscConfig+0x240>)
 8005800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0x200>
 800580a:	e01b      	b.n	8005844 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800580c:	4b09      	ldr	r3, [pc, #36]	; (8005834 <HAL_RCC_OscConfig+0x248>)
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005812:	f7fd f9c7 	bl	8002ba4 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005818:	e00e      	b.n	8005838 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800581a:	f7fd f9c3 	bl	8002ba4 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d907      	bls.n	8005838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e150      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
 800582c:	40023800 	.word	0x40023800
 8005830:	42470000 	.word	0x42470000
 8005834:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005838:	4b88      	ldr	r3, [pc, #544]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 800583a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1ea      	bne.n	800581a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8097 	beq.w	8005980 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005856:	4b81      	ldr	r3, [pc, #516]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10f      	bne.n	8005882 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005862:	2300      	movs	r3, #0
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	4b7d      	ldr	r3, [pc, #500]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	4a7c      	ldr	r2, [pc, #496]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 800586c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005870:	6413      	str	r3, [r2, #64]	; 0x40
 8005872:	4b7a      	ldr	r3, [pc, #488]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800587e:	2301      	movs	r3, #1
 8005880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005882:	4b77      	ldr	r3, [pc, #476]	; (8005a60 <HAL_RCC_OscConfig+0x474>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d118      	bne.n	80058c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800588e:	4b74      	ldr	r3, [pc, #464]	; (8005a60 <HAL_RCC_OscConfig+0x474>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a73      	ldr	r2, [pc, #460]	; (8005a60 <HAL_RCC_OscConfig+0x474>)
 8005894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800589a:	f7fd f983 	bl	8002ba4 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a2:	f7fd f97f 	bl	8002ba4 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e10c      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b4:	4b6a      	ldr	r3, [pc, #424]	; (8005a60 <HAL_RCC_OscConfig+0x474>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d106      	bne.n	80058d6 <HAL_RCC_OscConfig+0x2ea>
 80058c8:	4b64      	ldr	r3, [pc, #400]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058cc:	4a63      	ldr	r2, [pc, #396]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058ce:	f043 0301 	orr.w	r3, r3, #1
 80058d2:	6713      	str	r3, [r2, #112]	; 0x70
 80058d4:	e01c      	b.n	8005910 <HAL_RCC_OscConfig+0x324>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2b05      	cmp	r3, #5
 80058dc:	d10c      	bne.n	80058f8 <HAL_RCC_OscConfig+0x30c>
 80058de:	4b5f      	ldr	r3, [pc, #380]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	4a5e      	ldr	r2, [pc, #376]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058e4:	f043 0304 	orr.w	r3, r3, #4
 80058e8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ea:	4b5c      	ldr	r3, [pc, #368]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	4a5b      	ldr	r2, [pc, #364]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	6713      	str	r3, [r2, #112]	; 0x70
 80058f6:	e00b      	b.n	8005910 <HAL_RCC_OscConfig+0x324>
 80058f8:	4b58      	ldr	r3, [pc, #352]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fc:	4a57      	ldr	r2, [pc, #348]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	6713      	str	r3, [r2, #112]	; 0x70
 8005904:	4b55      	ldr	r3, [pc, #340]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	4a54      	ldr	r2, [pc, #336]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 800590a:	f023 0304 	bic.w	r3, r3, #4
 800590e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d015      	beq.n	8005944 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005918:	f7fd f944 	bl	8002ba4 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591e:	e00a      	b.n	8005936 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005920:	f7fd f940 	bl	8002ba4 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f241 3288 	movw	r2, #5000	; 0x1388
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e0cb      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005936:	4b49      	ldr	r3, [pc, #292]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0ee      	beq.n	8005920 <HAL_RCC_OscConfig+0x334>
 8005942:	e014      	b.n	800596e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005944:	f7fd f92e 	bl	8002ba4 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800594a:	e00a      	b.n	8005962 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800594c:	f7fd f92a 	bl	8002ba4 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	f241 3288 	movw	r2, #5000	; 0x1388
 800595a:	4293      	cmp	r3, r2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e0b5      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005962:	4b3e      	ldr	r3, [pc, #248]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1ee      	bne.n	800594c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d105      	bne.n	8005980 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005974:	4b39      	ldr	r3, [pc, #228]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	4a38      	ldr	r2, [pc, #224]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 800597a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800597e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 80a1 	beq.w	8005acc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800598a:	4b34      	ldr	r3, [pc, #208]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 030c 	and.w	r3, r3, #12
 8005992:	2b08      	cmp	r3, #8
 8005994:	d05c      	beq.n	8005a50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d141      	bne.n	8005a22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599e:	4b31      	ldr	r3, [pc, #196]	; (8005a64 <HAL_RCC_OscConfig+0x478>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a4:	f7fd f8fe 	bl	8002ba4 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ac:	f7fd f8fa 	bl	8002ba4 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e087      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059be:	4b27      	ldr	r3, [pc, #156]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	019b      	lsls	r3, r3, #6
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	3b01      	subs	r3, #1
 80059e4:	041b      	lsls	r3, r3, #16
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	061b      	lsls	r3, r3, #24
 80059ee:	491b      	ldr	r1, [pc, #108]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f4:	4b1b      	ldr	r3, [pc, #108]	; (8005a64 <HAL_RCC_OscConfig+0x478>)
 80059f6:	2201      	movs	r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fa:	f7fd f8d3 	bl	8002ba4 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a00:	e008      	b.n	8005a14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a02:	f7fd f8cf 	bl	8002ba4 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e05c      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a14:	4b11      	ldr	r3, [pc, #68]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0f0      	beq.n	8005a02 <HAL_RCC_OscConfig+0x416>
 8005a20:	e054      	b.n	8005acc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a22:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <HAL_RCC_OscConfig+0x478>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a28:	f7fd f8bc 	bl	8002ba4 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a30:	f7fd f8b8 	bl	8002ba4 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e045      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a42:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <HAL_RCC_OscConfig+0x470>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f0      	bne.n	8005a30 <HAL_RCC_OscConfig+0x444>
 8005a4e:	e03d      	b.n	8005acc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d107      	bne.n	8005a68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e038      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	40007000 	.word	0x40007000
 8005a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a68:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <HAL_RCC_OscConfig+0x4ec>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d028      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d121      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d11a      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a98:	4013      	ands	r3, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d111      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d107      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d001      	beq.n	8005acc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40023800 	.word	0x40023800

08005adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e0cc      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005af0:	4b68      	ldr	r3, [pc, #416]	; (8005c94 <HAL_RCC_ClockConfig+0x1b8>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d90c      	bls.n	8005b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afe:	4b65      	ldr	r3, [pc, #404]	; (8005c94 <HAL_RCC_ClockConfig+0x1b8>)
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b06:	4b63      	ldr	r3, [pc, #396]	; (8005c94 <HAL_RCC_ClockConfig+0x1b8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d001      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0b8      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d020      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b30:	4b59      	ldr	r3, [pc, #356]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	4a58      	ldr	r2, [pc, #352]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d005      	beq.n	8005b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b48:	4b53      	ldr	r3, [pc, #332]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	4a52      	ldr	r2, [pc, #328]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b54:	4b50      	ldr	r3, [pc, #320]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	494d      	ldr	r1, [pc, #308]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d044      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d107      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7a:	4b47      	ldr	r3, [pc, #284]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d119      	bne.n	8005bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e07f      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d003      	beq.n	8005b9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d107      	bne.n	8005baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9a:	4b3f      	ldr	r3, [pc, #252]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e06f      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005baa:	4b3b      	ldr	r3, [pc, #236]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e067      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bba:	4b37      	ldr	r3, [pc, #220]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f023 0203 	bic.w	r2, r3, #3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	4934      	ldr	r1, [pc, #208]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bcc:	f7fc ffea 	bl	8002ba4 <HAL_GetTick>
 8005bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd2:	e00a      	b.n	8005bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd4:	f7fc ffe6 	bl	8002ba4 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e04f      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bea:	4b2b      	ldr	r3, [pc, #172]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 020c 	and.w	r2, r3, #12
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d1eb      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bfc:	4b25      	ldr	r3, [pc, #148]	; (8005c94 <HAL_RCC_ClockConfig+0x1b8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d20c      	bcs.n	8005c24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	4b22      	ldr	r3, [pc, #136]	; (8005c94 <HAL_RCC_ClockConfig+0x1b8>)
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c12:	4b20      	ldr	r3, [pc, #128]	; (8005c94 <HAL_RCC_ClockConfig+0x1b8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e032      	b.n	8005c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c30:	4b19      	ldr	r3, [pc, #100]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	4916      	ldr	r1, [pc, #88]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d009      	beq.n	8005c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c4e:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	490e      	ldr	r1, [pc, #56]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c62:	f000 f821 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8005c66:	4602      	mov	r2, r0
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	091b      	lsrs	r3, r3, #4
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	490a      	ldr	r1, [pc, #40]	; (8005c9c <HAL_RCC_ClockConfig+0x1c0>)
 8005c74:	5ccb      	ldrb	r3, [r1, r3]
 8005c76:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7a:	4a09      	ldr	r2, [pc, #36]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c7e:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fb ff54 	bl	8001b30 <HAL_InitTick>

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	40023c00 	.word	0x40023c00
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	08019fbc 	.word	0x08019fbc
 8005ca0:	20000004 	.word	0x20000004
 8005ca4:	20000008 	.word	0x20000008

08005ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cac:	b094      	sub	sp, #80	; 0x50
 8005cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb8:	2300      	movs	r3, #0
 8005cba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cc0:	4b79      	ldr	r3, [pc, #484]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 030c 	and.w	r3, r3, #12
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d00d      	beq.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	f200 80e1 	bhi.w	8005e94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_RCC_GetSysClockFreq+0x34>
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d003      	beq.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cda:	e0db      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cdc:	4b73      	ldr	r3, [pc, #460]	; (8005eac <HAL_RCC_GetSysClockFreq+0x204>)
 8005cde:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ce0:	e0db      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ce2:	4b73      	ldr	r3, [pc, #460]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ce4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ce6:	e0d8      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ce8:	4b6f      	ldr	r3, [pc, #444]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cf0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cf2:	4b6d      	ldr	r3, [pc, #436]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d063      	beq.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cfe:	4b6a      	ldr	r3, [pc, #424]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	099b      	lsrs	r3, r3, #6
 8005d04:	2200      	movs	r2, #0
 8005d06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d10:	633b      	str	r3, [r7, #48]	; 0x30
 8005d12:	2300      	movs	r3, #0
 8005d14:	637b      	str	r3, [r7, #52]	; 0x34
 8005d16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	f04f 0000 	mov.w	r0, #0
 8005d22:	f04f 0100 	mov.w	r1, #0
 8005d26:	0159      	lsls	r1, r3, #5
 8005d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d2c:	0150      	lsls	r0, r2, #5
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4621      	mov	r1, r4
 8005d34:	1a51      	subs	r1, r2, r1
 8005d36:	6139      	str	r1, [r7, #16]
 8005d38:	4629      	mov	r1, r5
 8005d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d3e:	617b      	str	r3, [r7, #20]
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d4c:	4659      	mov	r1, fp
 8005d4e:	018b      	lsls	r3, r1, #6
 8005d50:	4651      	mov	r1, sl
 8005d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d56:	4651      	mov	r1, sl
 8005d58:	018a      	lsls	r2, r1, #6
 8005d5a:	4651      	mov	r1, sl
 8005d5c:	ebb2 0801 	subs.w	r8, r2, r1
 8005d60:	4659      	mov	r1, fp
 8005d62:	eb63 0901 	sbc.w	r9, r3, r1
 8005d66:	f04f 0200 	mov.w	r2, #0
 8005d6a:	f04f 0300 	mov.w	r3, #0
 8005d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d7a:	4690      	mov	r8, r2
 8005d7c:	4699      	mov	r9, r3
 8005d7e:	4623      	mov	r3, r4
 8005d80:	eb18 0303 	adds.w	r3, r8, r3
 8005d84:	60bb      	str	r3, [r7, #8]
 8005d86:	462b      	mov	r3, r5
 8005d88:	eb49 0303 	adc.w	r3, r9, r3
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	024b      	lsls	r3, r1, #9
 8005d9e:	4621      	mov	r1, r4
 8005da0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005da4:	4621      	mov	r1, r4
 8005da6:	024a      	lsls	r2, r1, #9
 8005da8:	4610      	mov	r0, r2
 8005daa:	4619      	mov	r1, r3
 8005dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dae:	2200      	movs	r2, #0
 8005db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005db4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005db8:	f7fa fac2 	bl	8000340 <__aeabi_uldivmod>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dc4:	e058      	b.n	8005e78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dc6:	4b38      	ldr	r3, [pc, #224]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	099b      	lsrs	r3, r3, #6
 8005dcc:	2200      	movs	r2, #0
 8005dce:	4618      	mov	r0, r3
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005dd6:	623b      	str	r3, [r7, #32]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24
 8005ddc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005de0:	4642      	mov	r2, r8
 8005de2:	464b      	mov	r3, r9
 8005de4:	f04f 0000 	mov.w	r0, #0
 8005de8:	f04f 0100 	mov.w	r1, #0
 8005dec:	0159      	lsls	r1, r3, #5
 8005dee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005df2:	0150      	lsls	r0, r2, #5
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4641      	mov	r1, r8
 8005dfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8005dfe:	4649      	mov	r1, r9
 8005e00:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e18:	ebb2 040a 	subs.w	r4, r2, sl
 8005e1c:	eb63 050b 	sbc.w	r5, r3, fp
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	00eb      	lsls	r3, r5, #3
 8005e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e2e:	00e2      	lsls	r2, r4, #3
 8005e30:	4614      	mov	r4, r2
 8005e32:	461d      	mov	r5, r3
 8005e34:	4643      	mov	r3, r8
 8005e36:	18e3      	adds	r3, r4, r3
 8005e38:	603b      	str	r3, [r7, #0]
 8005e3a:	464b      	mov	r3, r9
 8005e3c:	eb45 0303 	adc.w	r3, r5, r3
 8005e40:	607b      	str	r3, [r7, #4]
 8005e42:	f04f 0200 	mov.w	r2, #0
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e4e:	4629      	mov	r1, r5
 8005e50:	028b      	lsls	r3, r1, #10
 8005e52:	4621      	mov	r1, r4
 8005e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e58:	4621      	mov	r1, r4
 8005e5a:	028a      	lsls	r2, r1, #10
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e62:	2200      	movs	r2, #0
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	61fa      	str	r2, [r7, #28]
 8005e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e6c:	f7fa fa68 	bl	8000340 <__aeabi_uldivmod>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4613      	mov	r3, r2
 8005e76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e78:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	0c1b      	lsrs	r3, r3, #16
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	3301      	adds	r3, #1
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005e88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e92:	e002      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <HAL_RCC_GetSysClockFreq+0x204>)
 8005e96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3750      	adds	r7, #80	; 0x50
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	00f42400 	.word	0x00f42400
 8005eb0:	007a1200 	.word	0x007a1200

08005eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eb8:	4b03      	ldr	r3, [pc, #12]	; (8005ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005eba:	681b      	ldr	r3, [r3, #0]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	20000004 	.word	0x20000004

08005ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ed0:	f7ff fff0 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	4b05      	ldr	r3, [pc, #20]	; (8005eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	0a9b      	lsrs	r3, r3, #10
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	4903      	ldr	r1, [pc, #12]	; (8005ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ee2:	5ccb      	ldrb	r3, [r1, r3]
 8005ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	08019fcc 	.word	0x08019fcc

08005ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ef8:	f7ff ffdc 	bl	8005eb4 <HAL_RCC_GetHCLKFreq>
 8005efc:	4602      	mov	r2, r0
 8005efe:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	0b5b      	lsrs	r3, r3, #13
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	4903      	ldr	r1, [pc, #12]	; (8005f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f0a:	5ccb      	ldrb	r3, [r1, r3]
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40023800 	.word	0x40023800
 8005f18:	08019fcc 	.word	0x08019fcc

08005f1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	220f      	movs	r2, #15
 8005f2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f2c:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <HAL_RCC_GetClockConfig+0x5c>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 0203 	and.w	r2, r3, #3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f38:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <HAL_RCC_GetClockConfig+0x5c>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <HAL_RCC_GetClockConfig+0x5c>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005f50:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <HAL_RCC_GetClockConfig+0x5c>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	08db      	lsrs	r3, r3, #3
 8005f56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f5e:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <HAL_RCC_GetClockConfig+0x60>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0207 	and.w	r2, r3, #7
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	601a      	str	r2, [r3, #0]
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	40023c00 	.word	0x40023c00

08005f80 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e01c      	b.n	8005fcc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	795b      	ldrb	r3, [r3, #5]
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d105      	bne.n	8005fa8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fb fcf8 	bl	8001998 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f042 0204 	orr.w	r2, r2, #4
 8005fbc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e07b      	b.n	80060de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d108      	bne.n	8006000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ff6:	d009      	beq.n	800600c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	61da      	str	r2, [r3, #28]
 8005ffe:	e005      	b.n	800600c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d106      	bne.n	800602c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7fb fd0e 	bl	8001a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006090:	ea42 0103 	orr.w	r1, r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006098:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	0c1b      	lsrs	r3, r3, #16
 80060aa:	f003 0104 	and.w	r1, r3, #4
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	f003 0210 	and.w	r2, r3, #16
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e041      	b.n	800617c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d106      	bne.n	8006112 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7fc f9f9 	bl	8002504 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3304      	adds	r3, #4
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f000 fded 	bl	8006d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	d001      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e04e      	b.n	800623a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0201 	orr.w	r2, r2, #1
 80061b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a23      	ldr	r2, [pc, #140]	; (8006248 <HAL_TIM_Base_Start_IT+0xc4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d022      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c6:	d01d      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a1f      	ldr	r2, [pc, #124]	; (800624c <HAL_TIM_Base_Start_IT+0xc8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d018      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a1e      	ldr	r2, [pc, #120]	; (8006250 <HAL_TIM_Base_Start_IT+0xcc>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d013      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1c      	ldr	r2, [pc, #112]	; (8006254 <HAL_TIM_Base_Start_IT+0xd0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00e      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1b      	ldr	r2, [pc, #108]	; (8006258 <HAL_TIM_Base_Start_IT+0xd4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d009      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a19      	ldr	r2, [pc, #100]	; (800625c <HAL_TIM_Base_Start_IT+0xd8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <HAL_TIM_Base_Start_IT+0x80>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a18      	ldr	r2, [pc, #96]	; (8006260 <HAL_TIM_Base_Start_IT+0xdc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d111      	bne.n	8006228 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b06      	cmp	r3, #6
 8006214:	d010      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0201 	orr.w	r2, r2, #1
 8006224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006226:	e007      	b.n	8006238 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40010000 	.word	0x40010000
 800624c:	40000400 	.word	0x40000400
 8006250:	40000800 	.word	0x40000800
 8006254:	40000c00 	.word	0x40000c00
 8006258:	40010400 	.word	0x40010400
 800625c:	40014000 	.word	0x40014000
 8006260:	40001800 	.word	0x40001800

08006264 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e041      	b.n	80062fa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d106      	bne.n	8006290 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fc f918 	bl	80024c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3304      	adds	r3, #4
 80062a0:	4619      	mov	r1, r3
 80062a2:	4610      	mov	r0, r2
 80062a4:	f000 fd2e 	bl	8006d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e041      	b.n	8006398 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d106      	bne.n	800632e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7fc f881 	bl	8002430 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2202      	movs	r2, #2
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	3304      	adds	r3, #4
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f000 fcdf 	bl	8006d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e041      	b.n	8006436 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f839 	bl	800643e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3304      	adds	r3, #4
 80063dc:	4619      	mov	r1, r3
 80063de:	4610      	mov	r0, r2
 80063e0:	f000 fc90 	bl	8006d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e097      	b.n	8006596 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fb ff56 	bl	800232c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6812      	ldr	r2, [r2, #0]
 8006492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006496:	f023 0307 	bic.w	r3, r3, #7
 800649a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4619      	mov	r1, r3
 80064a6:	4610      	mov	r0, r2
 80064a8:	f000 fc2c 	bl	8006d04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d4:	f023 0303 	bic.w	r3, r3, #3
 80064d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	4313      	orrs	r3, r2
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80064f2:	f023 030c 	bic.w	r3, r3, #12
 80064f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	4313      	orrs	r3, r2
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	011a      	lsls	r2, r3, #4
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	031b      	lsls	r3, r3, #12
 8006522:	4313      	orrs	r3, r2
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006530:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006538:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	4313      	orrs	r3, r2
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d122      	bne.n	80065fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d11b      	bne.n	80065fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f06f 0202 	mvn.w	r2, #2
 80065ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	f003 0303 	and.w	r3, r3, #3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fb70 	bl	8006cc6 <HAL_TIM_IC_CaptureCallback>
 80065e6:	e005      	b.n	80065f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fb62 	bl	8006cb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fb73 	bl	8006cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b04      	cmp	r3, #4
 8006606:	d122      	bne.n	800664e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b04      	cmp	r3, #4
 8006614:	d11b      	bne.n	800664e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f06f 0204 	mvn.w	r2, #4
 800661e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fb46 	bl	8006cc6 <HAL_TIM_IC_CaptureCallback>
 800663a:	e005      	b.n	8006648 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fb38 	bl	8006cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fb49 	bl	8006cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b08      	cmp	r3, #8
 800665a:	d122      	bne.n	80066a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b08      	cmp	r3, #8
 8006668:	d11b      	bne.n	80066a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f06f 0208 	mvn.w	r2, #8
 8006672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2204      	movs	r2, #4
 8006678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	f003 0303 	and.w	r3, r3, #3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d003      	beq.n	8006690 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fb1c 	bl	8006cc6 <HAL_TIM_IC_CaptureCallback>
 800668e:	e005      	b.n	800669c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fb0e 	bl	8006cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fb1f 	bl	8006cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b10      	cmp	r3, #16
 80066ae:	d122      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f003 0310 	and.w	r3, r3, #16
 80066ba:	2b10      	cmp	r3, #16
 80066bc:	d11b      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f06f 0210 	mvn.w	r2, #16
 80066c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2208      	movs	r2, #8
 80066cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 faf2 	bl	8006cc6 <HAL_TIM_IC_CaptureCallback>
 80066e2:	e005      	b.n	80066f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fae4 	bl	8006cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 faf5 	bl	8006cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b01      	cmp	r3, #1
 8006702:	d10e      	bne.n	8006722 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b01      	cmp	r3, #1
 8006710:	d107      	bne.n	8006722 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f06f 0201 	mvn.w	r2, #1
 800671a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7fa ffab 	bl	8001678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672c:	2b80      	cmp	r3, #128	; 0x80
 800672e:	d10e      	bne.n	800674e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673a:	2b80      	cmp	r3, #128	; 0x80
 800673c:	d107      	bne.n	800674e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 ffc7 	bl	80076dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006758:	2b40      	cmp	r3, #64	; 0x40
 800675a:	d10e      	bne.n	800677a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006766:	2b40      	cmp	r3, #64	; 0x40
 8006768:	d107      	bne.n	800677a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 faba 	bl	8006cee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f003 0320 	and.w	r3, r3, #32
 8006784:	2b20      	cmp	r3, #32
 8006786:	d10e      	bne.n	80067a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b20      	cmp	r3, #32
 8006794:	d107      	bne.n	80067a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f06f 0220 	mvn.w	r2, #32
 800679e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 ff91 	bl	80076c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067a6:	bf00      	nop
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d101      	bne.n	80067ce <HAL_TIM_OC_ConfigChannel+0x1e>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e048      	b.n	8006860 <HAL_TIM_OC_ConfigChannel+0xb0>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b0c      	cmp	r3, #12
 80067da:	d839      	bhi.n	8006850 <HAL_TIM_OC_ConfigChannel+0xa0>
 80067dc:	a201      	add	r2, pc, #4	; (adr r2, 80067e4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80067de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e2:	bf00      	nop
 80067e4:	08006819 	.word	0x08006819
 80067e8:	08006851 	.word	0x08006851
 80067ec:	08006851 	.word	0x08006851
 80067f0:	08006851 	.word	0x08006851
 80067f4:	08006827 	.word	0x08006827
 80067f8:	08006851 	.word	0x08006851
 80067fc:	08006851 	.word	0x08006851
 8006800:	08006851 	.word	0x08006851
 8006804:	08006835 	.word	0x08006835
 8006808:	08006851 	.word	0x08006851
 800680c:	08006851 	.word	0x08006851
 8006810:	08006851 	.word	0x08006851
 8006814:	08006843 	.word	0x08006843
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fb10 	bl	8006e44 <TIM_OC1_SetConfig>
      break;
 8006824:	e017      	b.n	8006856 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68b9      	ldr	r1, [r7, #8]
 800682c:	4618      	mov	r0, r3
 800682e:	f000 fb79 	bl	8006f24 <TIM_OC2_SetConfig>
      break;
 8006832:	e010      	b.n	8006856 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fbe8 	bl	8007010 <TIM_OC3_SetConfig>
      break;
 8006840:	e009      	b.n	8006856 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fc55 	bl	80070f8 <TIM_OC4_SetConfig>
      break;
 800684e:	e002      	b.n	8006856 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	75fb      	strb	r3, [r7, #23]
      break;
 8006854:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800685e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006882:	2302      	movs	r3, #2
 8006884:	e088      	b.n	8006998 <HAL_TIM_IC_ConfigChannel+0x130>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d11b      	bne.n	80068cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	6819      	ldr	r1, [r3, #0]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f000 fc7e 	bl	80071a4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 020c 	bic.w	r2, r2, #12
 80068b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6999      	ldr	r1, [r3, #24]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	619a      	str	r2, [r3, #24]
 80068ca:	e060      	b.n	800698e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d11c      	bne.n	800690c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	6819      	ldr	r1, [r3, #0]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f000 fd02 	bl	80072ea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	699a      	ldr	r2, [r3, #24]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6999      	ldr	r1, [r3, #24]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	021a      	lsls	r2, r3, #8
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	619a      	str	r2, [r3, #24]
 800690a:	e040      	b.n	800698e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b08      	cmp	r3, #8
 8006910:	d11b      	bne.n	800694a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	6819      	ldr	r1, [r3, #0]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f000 fd4f 	bl	80073c4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69da      	ldr	r2, [r3, #28]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 020c 	bic.w	r2, r2, #12
 8006934:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69d9      	ldr	r1, [r3, #28]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	61da      	str	r2, [r3, #28]
 8006948:	e021      	b.n	800698e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b0c      	cmp	r3, #12
 800694e:	d11c      	bne.n	800698a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6819      	ldr	r1, [r3, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f000 fd6c 	bl	800743c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	69da      	ldr	r2, [r3, #28]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006972:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	69d9      	ldr	r1, [r3, #28]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	021a      	lsls	r2, r3, #8
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	61da      	str	r2, [r3, #28]
 8006988:	e001      	b.n	800698e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006996:	7dfb      	ldrb	r3, [r7, #23]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d101      	bne.n	80069be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069ba:	2302      	movs	r3, #2
 80069bc:	e0ae      	b.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b0c      	cmp	r3, #12
 80069ca:	f200 809f 	bhi.w	8006b0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069ce:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	08006a09 	.word	0x08006a09
 80069d8:	08006b0d 	.word	0x08006b0d
 80069dc:	08006b0d 	.word	0x08006b0d
 80069e0:	08006b0d 	.word	0x08006b0d
 80069e4:	08006a49 	.word	0x08006a49
 80069e8:	08006b0d 	.word	0x08006b0d
 80069ec:	08006b0d 	.word	0x08006b0d
 80069f0:	08006b0d 	.word	0x08006b0d
 80069f4:	08006a8b 	.word	0x08006a8b
 80069f8:	08006b0d 	.word	0x08006b0d
 80069fc:	08006b0d 	.word	0x08006b0d
 8006a00:	08006b0d 	.word	0x08006b0d
 8006a04:	08006acb 	.word	0x08006acb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68b9      	ldr	r1, [r7, #8]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fa18 	bl	8006e44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0208 	orr.w	r2, r2, #8
 8006a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0204 	bic.w	r2, r2, #4
 8006a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6999      	ldr	r1, [r3, #24]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	619a      	str	r2, [r3, #24]
      break;
 8006a46:	e064      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fa68 	bl	8006f24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6999      	ldr	r1, [r3, #24]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	021a      	lsls	r2, r3, #8
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	619a      	str	r2, [r3, #24]
      break;
 8006a88:	e043      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68b9      	ldr	r1, [r7, #8]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 fabd 	bl	8007010 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69da      	ldr	r2, [r3, #28]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f042 0208 	orr.w	r2, r2, #8
 8006aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	69da      	ldr	r2, [r3, #28]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0204 	bic.w	r2, r2, #4
 8006ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69d9      	ldr	r1, [r3, #28]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	691a      	ldr	r2, [r3, #16]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	61da      	str	r2, [r3, #28]
      break;
 8006ac8:	e023      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 fb11 	bl	80070f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69da      	ldr	r2, [r3, #28]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69d9      	ldr	r1, [r3, #28]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	021a      	lsls	r2, r3, #8
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	61da      	str	r2, [r3, #28]
      break;
 8006b0a:	e002      	b.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_TIM_ConfigClockSource+0x1c>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e0b4      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x186>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b78:	d03e      	beq.n	8006bf8 <HAL_TIM_ConfigClockSource+0xd4>
 8006b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7e:	f200 8087 	bhi.w	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b86:	f000 8086 	beq.w	8006c96 <HAL_TIM_ConfigClockSource+0x172>
 8006b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8e:	d87f      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006b90:	2b70      	cmp	r3, #112	; 0x70
 8006b92:	d01a      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0xa6>
 8006b94:	2b70      	cmp	r3, #112	; 0x70
 8006b96:	d87b      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006b98:	2b60      	cmp	r3, #96	; 0x60
 8006b9a:	d050      	beq.n	8006c3e <HAL_TIM_ConfigClockSource+0x11a>
 8006b9c:	2b60      	cmp	r3, #96	; 0x60
 8006b9e:	d877      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba0:	2b50      	cmp	r3, #80	; 0x50
 8006ba2:	d03c      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0xfa>
 8006ba4:	2b50      	cmp	r3, #80	; 0x50
 8006ba6:	d873      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba8:	2b40      	cmp	r3, #64	; 0x40
 8006baa:	d058      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x13a>
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d86f      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb0:	2b30      	cmp	r3, #48	; 0x30
 8006bb2:	d064      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x15a>
 8006bb4:	2b30      	cmp	r3, #48	; 0x30
 8006bb6:	d86b      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d060      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x15a>
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d867      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d05c      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x15a>
 8006bc4:	2b10      	cmp	r3, #16
 8006bc6:	d05a      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x15a>
 8006bc8:	e062      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6899      	ldr	r1, [r3, #8]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f000 fc87 	bl	80074ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	609a      	str	r2, [r3, #8]
      break;
 8006bf6:	e04f      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	6899      	ldr	r1, [r3, #8]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f000 fc70 	bl	80074ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c1a:	609a      	str	r2, [r3, #8]
      break;
 8006c1c:	e03c      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	6859      	ldr	r1, [r3, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f000 fb2e 	bl	800728c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2150      	movs	r1, #80	; 0x50
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fc3d 	bl	80074b6 <TIM_ITRx_SetConfig>
      break;
 8006c3c:	e02c      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	6859      	ldr	r1, [r3, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f000 fb8a 	bl	8007364 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2160      	movs	r1, #96	; 0x60
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fc2d 	bl	80074b6 <TIM_ITRx_SetConfig>
      break;
 8006c5c:	e01c      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f000 fb0e 	bl	800728c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2140      	movs	r1, #64	; 0x40
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fc1d 	bl	80074b6 <TIM_ITRx_SetConfig>
      break;
 8006c7c:	e00c      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4619      	mov	r1, r3
 8006c88:	4610      	mov	r0, r2
 8006c8a:	f000 fc14 	bl	80074b6 <TIM_ITRx_SetConfig>
      break;
 8006c8e:	e003      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	73fb      	strb	r3, [r7, #15]
      break;
 8006c94:	e000      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a40      	ldr	r2, [pc, #256]	; (8006e18 <TIM_Base_SetConfig+0x114>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d013      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d22:	d00f      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a3d      	ldr	r2, [pc, #244]	; (8006e1c <TIM_Base_SetConfig+0x118>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00b      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a3c      	ldr	r2, [pc, #240]	; (8006e20 <TIM_Base_SetConfig+0x11c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a3b      	ldr	r2, [pc, #236]	; (8006e24 <TIM_Base_SetConfig+0x120>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a3a      	ldr	r2, [pc, #232]	; (8006e28 <TIM_Base_SetConfig+0x124>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d108      	bne.n	8006d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a2f      	ldr	r2, [pc, #188]	; (8006e18 <TIM_Base_SetConfig+0x114>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d02b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d64:	d027      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a2c      	ldr	r2, [pc, #176]	; (8006e1c <TIM_Base_SetConfig+0x118>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d023      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a2b      	ldr	r2, [pc, #172]	; (8006e20 <TIM_Base_SetConfig+0x11c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d01f      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a2a      	ldr	r2, [pc, #168]	; (8006e24 <TIM_Base_SetConfig+0x120>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d01b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a29      	ldr	r2, [pc, #164]	; (8006e28 <TIM_Base_SetConfig+0x124>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d017      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a28      	ldr	r2, [pc, #160]	; (8006e2c <TIM_Base_SetConfig+0x128>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d013      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a27      	ldr	r2, [pc, #156]	; (8006e30 <TIM_Base_SetConfig+0x12c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00f      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a26      	ldr	r2, [pc, #152]	; (8006e34 <TIM_Base_SetConfig+0x130>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d00b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a25      	ldr	r2, [pc, #148]	; (8006e38 <TIM_Base_SetConfig+0x134>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d007      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a24      	ldr	r2, [pc, #144]	; (8006e3c <TIM_Base_SetConfig+0x138>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a23      	ldr	r2, [pc, #140]	; (8006e40 <TIM_Base_SetConfig+0x13c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d108      	bne.n	8006dc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a0a      	ldr	r2, [pc, #40]	; (8006e18 <TIM_Base_SetConfig+0x114>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_Base_SetConfig+0xf8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a0c      	ldr	r2, [pc, #48]	; (8006e28 <TIM_Base_SetConfig+0x124>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d103      	bne.n	8006e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	615a      	str	r2, [r3, #20]
}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40000c00 	.word	0x40000c00
 8006e28:	40010400 	.word	0x40010400
 8006e2c:	40014000 	.word	0x40014000
 8006e30:	40014400 	.word	0x40014400
 8006e34:	40014800 	.word	0x40014800
 8006e38:	40001800 	.word	0x40001800
 8006e3c:	40001c00 	.word	0x40001c00
 8006e40:	40002000 	.word	0x40002000

08006e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f023 0201 	bic.w	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0303 	bic.w	r3, r3, #3
 8006e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f023 0302 	bic.w	r3, r3, #2
 8006e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a20      	ldr	r2, [pc, #128]	; (8006f1c <TIM_OC1_SetConfig+0xd8>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d003      	beq.n	8006ea8 <TIM_OC1_SetConfig+0x64>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <TIM_OC1_SetConfig+0xdc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d10c      	bne.n	8006ec2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f023 0308 	bic.w	r3, r3, #8
 8006eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f023 0304 	bic.w	r3, r3, #4
 8006ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a15      	ldr	r2, [pc, #84]	; (8006f1c <TIM_OC1_SetConfig+0xd8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d003      	beq.n	8006ed2 <TIM_OC1_SetConfig+0x8e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a14      	ldr	r2, [pc, #80]	; (8006f20 <TIM_OC1_SetConfig+0xdc>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d111      	bne.n	8006ef6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	621a      	str	r2, [r3, #32]
}
 8006f10:	bf00      	nop
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	40010000 	.word	0x40010000
 8006f20:	40010400 	.word	0x40010400

08006f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f023 0210 	bic.w	r2, r3, #16
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	021b      	lsls	r3, r3, #8
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	f023 0320 	bic.w	r3, r3, #32
 8006f6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a22      	ldr	r2, [pc, #136]	; (8007008 <TIM_OC2_SetConfig+0xe4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d003      	beq.n	8006f8c <TIM_OC2_SetConfig+0x68>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a21      	ldr	r2, [pc, #132]	; (800700c <TIM_OC2_SetConfig+0xe8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d10d      	bne.n	8006fa8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a17      	ldr	r2, [pc, #92]	; (8007008 <TIM_OC2_SetConfig+0xe4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_OC2_SetConfig+0x94>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a16      	ldr	r2, [pc, #88]	; (800700c <TIM_OC2_SetConfig+0xe8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d113      	bne.n	8006fe0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40010000 	.word	0x40010000
 800700c:	40010400 	.word	0x40010400

08007010 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 0303 	bic.w	r3, r3, #3
 8007046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	021b      	lsls	r3, r3, #8
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a21      	ldr	r2, [pc, #132]	; (80070f0 <TIM_OC3_SetConfig+0xe0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d003      	beq.n	8007076 <TIM_OC3_SetConfig+0x66>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a20      	ldr	r2, [pc, #128]	; (80070f4 <TIM_OC3_SetConfig+0xe4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d10d      	bne.n	8007092 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800707c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	021b      	lsls	r3, r3, #8
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a16      	ldr	r2, [pc, #88]	; (80070f0 <TIM_OC3_SetConfig+0xe0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d003      	beq.n	80070a2 <TIM_OC3_SetConfig+0x92>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a15      	ldr	r2, [pc, #84]	; (80070f4 <TIM_OC3_SetConfig+0xe4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d113      	bne.n	80070ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	621a      	str	r2, [r3, #32]
}
 80070e4:	bf00      	nop
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	40010000 	.word	0x40010000
 80070f4:	40010400 	.word	0x40010400

080070f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	031b      	lsls	r3, r3, #12
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a12      	ldr	r2, [pc, #72]	; (800719c <TIM_OC4_SetConfig+0xa4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d003      	beq.n	8007160 <TIM_OC4_SetConfig+0x68>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a11      	ldr	r2, [pc, #68]	; (80071a0 <TIM_OC4_SetConfig+0xa8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d109      	bne.n	8007174 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	019b      	lsls	r3, r3, #6
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	621a      	str	r2, [r3, #32]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	40010000 	.word	0x40010000
 80071a0:	40010400 	.word	0x40010400

080071a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	f023 0201 	bic.w	r2, r3, #1
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4a28      	ldr	r2, [pc, #160]	; (8007270 <TIM_TI1_SetConfig+0xcc>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d01b      	beq.n	800720a <TIM_TI1_SetConfig+0x66>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d8:	d017      	beq.n	800720a <TIM_TI1_SetConfig+0x66>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4a25      	ldr	r2, [pc, #148]	; (8007274 <TIM_TI1_SetConfig+0xd0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <TIM_TI1_SetConfig+0x66>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4a24      	ldr	r2, [pc, #144]	; (8007278 <TIM_TI1_SetConfig+0xd4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00f      	beq.n	800720a <TIM_TI1_SetConfig+0x66>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4a23      	ldr	r2, [pc, #140]	; (800727c <TIM_TI1_SetConfig+0xd8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00b      	beq.n	800720a <TIM_TI1_SetConfig+0x66>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4a22      	ldr	r2, [pc, #136]	; (8007280 <TIM_TI1_SetConfig+0xdc>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d007      	beq.n	800720a <TIM_TI1_SetConfig+0x66>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4a21      	ldr	r2, [pc, #132]	; (8007284 <TIM_TI1_SetConfig+0xe0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d003      	beq.n	800720a <TIM_TI1_SetConfig+0x66>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4a20      	ldr	r2, [pc, #128]	; (8007288 <TIM_TI1_SetConfig+0xe4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d101      	bne.n	800720e <TIM_TI1_SetConfig+0x6a>
 800720a:	2301      	movs	r3, #1
 800720c:	e000      	b.n	8007210 <TIM_TI1_SetConfig+0x6c>
 800720e:	2300      	movs	r3, #0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d008      	beq.n	8007226 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f023 0303 	bic.w	r3, r3, #3
 800721a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	e003      	b.n	800722e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	b2db      	uxtb	r3, r3
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	4313      	orrs	r3, r2
 8007240:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f023 030a 	bic.w	r3, r3, #10
 8007248:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f003 030a 	and.w	r3, r3, #10
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	4313      	orrs	r3, r2
 8007254:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	621a      	str	r2, [r3, #32]
}
 8007262:	bf00      	nop
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	40010000 	.word	0x40010000
 8007274:	40000400 	.word	0x40000400
 8007278:	40000800 	.word	0x40000800
 800727c:	40000c00 	.word	0x40000c00
 8007280:	40010400 	.word	0x40010400
 8007284:	40014000 	.word	0x40014000
 8007288:	40001800 	.word	0x40001800

0800728c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	f023 0201 	bic.w	r2, r3, #1
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	4313      	orrs	r3, r2
 80072c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f023 030a 	bic.w	r3, r3, #10
 80072c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	621a      	str	r2, [r3, #32]
}
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b087      	sub	sp, #28
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
 80072f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	f023 0210 	bic.w	r2, r3, #16
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007316:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	021b      	lsls	r3, r3, #8
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	4313      	orrs	r3, r2
 8007320:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	031b      	lsls	r3, r3, #12
 800732e:	b29b      	uxth	r3, r3
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800733c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	4313      	orrs	r3, r2
 800734a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	621a      	str	r2, [r3, #32]
}
 8007358:	bf00      	nop
 800735a:	371c      	adds	r7, #28
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	f023 0210 	bic.w	r2, r3, #16
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800738e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	031b      	lsls	r3, r3, #12
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	011b      	lsls	r3, r3, #4
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	621a      	str	r2, [r3, #32]
}
 80073b8:	bf00      	nop
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f023 0303 	bic.w	r3, r3, #3
 80073f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007400:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	b2db      	uxtb	r3, r3
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007414:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	621a      	str	r2, [r3, #32]
}
 8007430:	bf00      	nop
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007468:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800747a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	031b      	lsls	r3, r3, #12
 8007480:	b29b      	uxth	r3, r3
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800748e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	031b      	lsls	r3, r3, #12
 8007494:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	4313      	orrs	r3, r2
 800749c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	621a      	str	r2, [r3, #32]
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f043 0307 	orr.w	r3, r3, #7
 80074d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	609a      	str	r2, [r3, #8]
}
 80074e0:	bf00      	nop
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007506:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	021a      	lsls	r2, r3, #8
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	431a      	orrs	r2, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	4313      	orrs	r3, r2
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	609a      	str	r2, [r3, #8]
}
 8007520:	bf00      	nop
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007540:	2302      	movs	r3, #2
 8007542:	e05a      	b.n	80075fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a21      	ldr	r2, [pc, #132]	; (8007608 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d022      	beq.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007590:	d01d      	beq.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1d      	ldr	r2, [pc, #116]	; (800760c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d018      	beq.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a1b      	ldr	r2, [pc, #108]	; (8007610 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d013      	beq.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a1a      	ldr	r2, [pc, #104]	; (8007614 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00e      	beq.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a18      	ldr	r2, [pc, #96]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d009      	beq.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a17      	ldr	r2, [pc, #92]	; (800761c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d004      	beq.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a15      	ldr	r2, [pc, #84]	; (8007620 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d10c      	bne.n	80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	4313      	orrs	r3, r2
 80075de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	40010000 	.word	0x40010000
 800760c:	40000400 	.word	0x40000400
 8007610:	40000800 	.word	0x40000800
 8007614:	40000c00 	.word	0x40000c00
 8007618:	40010400 	.word	0x40010400
 800761c:	40014000 	.word	0x40014000
 8007620:	40001800 	.word	0x40001800

08007624 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800763c:	2302      	movs	r3, #2
 800763e:	e03d      	b.n	80076bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	4313      	orrs	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	4313      	orrs	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e03f      	b.n	8007782 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d106      	bne.n	800771c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7fb f82c 	bl	8002774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2224      	movs	r2, #36	; 0x24
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 ffd7 	bl	80086e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	691a      	ldr	r2, [r3, #16]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	695a      	ldr	r2, [r3, #20]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2220      	movs	r2, #32
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2220      	movs	r2, #32
 800777c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b08c      	sub	sp, #48	; 0x30
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	4613      	mov	r3, r2
 8007798:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d165      	bne.n	8007872 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <HAL_UART_Transmit_DMA+0x26>
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e05e      	b.n	8007874 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d101      	bne.n	80077c4 <HAL_UART_Transmit_DMA+0x38>
 80077c0:	2302      	movs	r3, #2
 80077c2:	e057      	b.n	8007874 <HAL_UART_Transmit_DMA+0xe8>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	88fa      	ldrh	r2, [r7, #6]
 80077d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	88fa      	ldrh	r2, [r7, #6]
 80077dc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2221      	movs	r2, #33	; 0x21
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f0:	4a22      	ldr	r2, [pc, #136]	; (800787c <HAL_UART_Transmit_DMA+0xf0>)
 80077f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f8:	4a21      	ldr	r2, [pc, #132]	; (8007880 <HAL_UART_Transmit_DMA+0xf4>)
 80077fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007800:	4a20      	ldr	r2, [pc, #128]	; (8007884 <HAL_UART_Transmit_DMA+0xf8>)
 8007802:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007808:	2200      	movs	r2, #0
 800780a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800780c:	f107 0308 	add.w	r3, r7, #8
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007818:	6819      	ldr	r1, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3304      	adds	r3, #4
 8007820:	461a      	mov	r2, r3
 8007822:	88fb      	ldrh	r3, [r7, #6]
 8007824:	f7fb fdfc 	bl	8003420 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007830:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3314      	adds	r3, #20
 8007840:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	617b      	str	r3, [r7, #20]
   return(result);
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007850:	62bb      	str	r3, [r7, #40]	; 0x28
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3314      	adds	r3, #20
 8007858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800785a:	627a      	str	r2, [r7, #36]	; 0x24
 800785c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	6a39      	ldr	r1, [r7, #32]
 8007860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	61fb      	str	r3, [r7, #28]
   return(result);
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e5      	bne.n	800783a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	e000      	b.n	8007874 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007872:	2302      	movs	r3, #2
  }
}
 8007874:	4618      	mov	r0, r3
 8007876:	3730      	adds	r7, #48	; 0x30
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	08007f81 	.word	0x08007f81
 8007880:	0800801b 	.word	0x0800801b
 8007884:	08008193 	.word	0x08008193

08007888 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4613      	mov	r3, r2
 8007894:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b20      	cmp	r3, #32
 80078a0:	d11d      	bne.n	80078de <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <HAL_UART_Receive_DMA+0x26>
 80078a8:	88fb      	ldrh	r3, [r7, #6]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e016      	b.n	80078e0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d101      	bne.n	80078c0 <HAL_UART_Receive_DMA+0x38>
 80078bc:	2302      	movs	r3, #2
 80078be:	e00f      	b.n	80078e0 <HAL_UART_Receive_DMA+0x58>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80078ce:	88fb      	ldrh	r3, [r7, #6]
 80078d0:	461a      	mov	r2, r3
 80078d2:	68b9      	ldr	r1, [r7, #8]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 fca7 	bl	8008228 <UART_Start_Receive_DMA>
 80078da:	4603      	mov	r3, r0
 80078dc:	e000      	b.n	80078e0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80078de:	2302      	movs	r3, #2
  }
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b090      	sub	sp, #64	; 0x40
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078fe:	2b80      	cmp	r3, #128	; 0x80
 8007900:	bf0c      	ite	eq
 8007902:	2301      	moveq	r3, #1
 8007904:	2300      	movne	r3, #0
 8007906:	b2db      	uxtb	r3, r3
 8007908:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b21      	cmp	r3, #33	; 0x21
 8007914:	d128      	bne.n	8007968 <HAL_UART_DMAStop+0x80>
 8007916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d025      	beq.n	8007968 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3314      	adds	r3, #20
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	623b      	str	r3, [r7, #32]
   return(result);
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007932:	63bb      	str	r3, [r7, #56]	; 0x38
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3314      	adds	r3, #20
 800793a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800793c:	633a      	str	r2, [r7, #48]	; 0x30
 800793e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e5      	bne.n	800791c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007954:	2b00      	cmp	r3, #0
 8007956:	d004      	beq.n	8007962 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795c:	4618      	mov	r0, r3
 800795e:	f7fb fdb7 	bl	80034d0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fcfe 	bl	8008364 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007972:	2b40      	cmp	r3, #64	; 0x40
 8007974:	bf0c      	ite	eq
 8007976:	2301      	moveq	r3, #1
 8007978:	2300      	movne	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b22      	cmp	r3, #34	; 0x22
 8007988:	d128      	bne.n	80079dc <HAL_UART_DMAStop+0xf4>
 800798a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798c:	2b00      	cmp	r3, #0
 800798e:	d025      	beq.n	80079dc <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3314      	adds	r3, #20
 8007996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	60fb      	str	r3, [r7, #12]
   return(result);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a6:	637b      	str	r3, [r7, #52]	; 0x34
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3314      	adds	r3, #20
 80079ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079b0:	61fa      	str	r2, [r7, #28]
 80079b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	69b9      	ldr	r1, [r7, #24]
 80079b6:	69fa      	ldr	r2, [r7, #28]
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	617b      	str	r3, [r7, #20]
   return(result);
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e5      	bne.n	8007990 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d004      	beq.n	80079d6 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fb fd7d 	bl	80034d0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fcec 	bl	80083b4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3740      	adds	r7, #64	; 0x40
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b0ba      	sub	sp, #232	; 0xe8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1e:	f003 030f 	and.w	r3, r3, #15
 8007a22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10f      	bne.n	8007a4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d009      	beq.n	8007a4e <HAL_UART_IRQHandler+0x66>
 8007a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a3e:	f003 0320 	and.w	r3, r3, #32
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fd93 	bl	8008572 <UART_Receive_IT>
      return;
 8007a4c:	e256      	b.n	8007efc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 80de 	beq.w	8007c14 <HAL_UART_IRQHandler+0x22c>
 8007a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d106      	bne.n	8007a72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 80d1 	beq.w	8007c14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00b      	beq.n	8007a96 <HAL_UART_IRQHandler+0xae>
 8007a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d005      	beq.n	8007a96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	f043 0201 	orr.w	r2, r3, #1
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a9a:	f003 0304 	and.w	r3, r3, #4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <HAL_UART_IRQHandler+0xd2>
 8007aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d005      	beq.n	8007aba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	f043 0202 	orr.w	r2, r3, #2
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <HAL_UART_IRQHandler+0xf6>
 8007ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	f043 0204 	orr.w	r2, r3, #4
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae2:	f003 0308 	and.w	r3, r3, #8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d011      	beq.n	8007b0e <HAL_UART_IRQHandler+0x126>
 8007aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d105      	bne.n	8007b02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d005      	beq.n	8007b0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	f043 0208 	orr.w	r2, r3, #8
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 81ed 	beq.w	8007ef2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d008      	beq.n	8007b36 <HAL_UART_IRQHandler+0x14e>
 8007b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b28:	f003 0320 	and.w	r3, r3, #32
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d002      	beq.n	8007b36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fd1e 	bl	8008572 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b40:	2b40      	cmp	r3, #64	; 0x40
 8007b42:	bf0c      	ite	eq
 8007b44:	2301      	moveq	r3, #1
 8007b46:	2300      	movne	r3, #0
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	f003 0308 	and.w	r3, r3, #8
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d103      	bne.n	8007b62 <HAL_UART_IRQHandler+0x17a>
 8007b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d04f      	beq.n	8007c02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fc26 	bl	80083b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b72:	2b40      	cmp	r3, #64	; 0x40
 8007b74:	d141      	bne.n	8007bfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3314      	adds	r3, #20
 8007b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3314      	adds	r3, #20
 8007b9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ba2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1d9      	bne.n	8007b76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d013      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	4a7d      	ldr	r2, [pc, #500]	; (8007dc4 <HAL_UART_IRQHandler+0x3dc>)
 8007bd0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fb fcea 	bl	80035b0 <HAL_DMA_Abort_IT>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d016      	beq.n	8007c10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf0:	e00e      	b.n	8007c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f9ae 	bl	8007f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf8:	e00a      	b.n	8007c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f9aa 	bl	8007f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c00:	e006      	b.n	8007c10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f9a6 	bl	8007f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c0e:	e170      	b.n	8007ef2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	bf00      	nop
    return;
 8007c12:	e16e      	b.n	8007ef2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	f040 814a 	bne.w	8007eb2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c22:	f003 0310 	and.w	r3, r3, #16
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 8143 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c30:	f003 0310 	and.w	r3, r3, #16
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 813c 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60bb      	str	r3, [r7, #8]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	60bb      	str	r3, [r7, #8]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	60bb      	str	r3, [r7, #8]
 8007c4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5a:	2b40      	cmp	r3, #64	; 0x40
 8007c5c:	f040 80b4 	bne.w	8007dc8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 8140 	beq.w	8007ef6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	f080 8139 	bcs.w	8007ef6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c96:	f000 8088 	beq.w	8007daa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1d9      	bne.n	8007c9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3314      	adds	r3, #20
 8007cec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cf8:	f023 0301 	bic.w	r3, r3, #1
 8007cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3314      	adds	r3, #20
 8007d06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d16:	e841 2300 	strex	r3, r2, [r1]
 8007d1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e1      	bne.n	8007ce6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3314      	adds	r3, #20
 8007d28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3314      	adds	r3, #20
 8007d42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e3      	bne.n	8007d22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	330c      	adds	r3, #12
 8007d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d7a:	f023 0310 	bic.w	r3, r3, #16
 8007d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	330c      	adds	r3, #12
 8007d88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d94:	e841 2300 	strex	r3, r2, [r1]
 8007d98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e3      	bne.n	8007d68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fb fb93 	bl	80034d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f8d4 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dc0:	e099      	b.n	8007ef6 <HAL_UART_IRQHandler+0x50e>
 8007dc2:	bf00      	nop
 8007dc4:	0800847b 	.word	0x0800847b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 808b 	beq.w	8007efa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 8086 	beq.w	8007efa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	330c      	adds	r3, #12
 8007df4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	330c      	adds	r3, #12
 8007e0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e12:	647a      	str	r2, [r7, #68]	; 0x44
 8007e14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e3      	bne.n	8007dee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3314      	adds	r3, #20
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	e853 3f00 	ldrex	r3, [r3]
 8007e34:	623b      	str	r3, [r7, #32]
   return(result);
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	f023 0301 	bic.w	r3, r3, #1
 8007e3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3314      	adds	r3, #20
 8007e46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e4a:	633a      	str	r2, [r7, #48]	; 0x30
 8007e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e3      	bne.n	8007e26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	330c      	adds	r3, #12
 8007e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	e853 3f00 	ldrex	r3, [r3]
 8007e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 0310 	bic.w	r3, r3, #16
 8007e82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	330c      	adds	r3, #12
 8007e8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e90:	61fa      	str	r2, [r7, #28]
 8007e92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e94:	69b9      	ldr	r1, [r7, #24]
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	e841 2300 	strex	r3, r2, [r1]
 8007e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1e3      	bne.n	8007e6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f85c 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007eb0:	e023      	b.n	8007efa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d009      	beq.n	8007ed2 <HAL_UART_IRQHandler+0x4ea>
 8007ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fae9 	bl	80084a2 <UART_Transmit_IT>
    return;
 8007ed0:	e014      	b.n	8007efc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00e      	beq.n	8007efc <HAL_UART_IRQHandler+0x514>
 8007ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d008      	beq.n	8007efc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fb29 	bl	8008542 <UART_EndTransmit_IT>
    return;
 8007ef0:	e004      	b.n	8007efc <HAL_UART_IRQHandler+0x514>
    return;
 8007ef2:	bf00      	nop
 8007ef4:	e002      	b.n	8007efc <HAL_UART_IRQHandler+0x514>
      return;
 8007ef6:	bf00      	nop
 8007ef8:	e000      	b.n	8007efc <HAL_UART_IRQHandler+0x514>
      return;
 8007efa:	bf00      	nop
  }
}
 8007efc:	37e8      	adds	r7, #232	; 0xe8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop

08007f04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b090      	sub	sp, #64	; 0x40
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d137      	bne.n	800800c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3314      	adds	r3, #20
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3314      	adds	r3, #20
 8007fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fc2:	633a      	str	r2, [r7, #48]	; 0x30
 8007fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e5      	bne.n	8007fa2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	330c      	adds	r3, #12
 8007fdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
 8007fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	330c      	adds	r3, #12
 8007ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ff6:	61fa      	str	r2, [r7, #28]
 8007ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	69b9      	ldr	r1, [r7, #24]
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	617b      	str	r3, [r7, #20]
   return(result);
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e5      	bne.n	8007fd6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800800a:	e002      	b.n	8008012 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800800c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800800e:	f7ff ff79 	bl	8007f04 <HAL_UART_TxCpltCallback>
}
 8008012:	bf00      	nop
 8008014:	3740      	adds	r7, #64	; 0x40
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008026:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f7ff ff75 	bl	8007f18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b09c      	sub	sp, #112	; 0x70
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804e:	2b00      	cmp	r3, #0
 8008050:	d172      	bne.n	8008138 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008054:	2200      	movs	r2, #0
 8008056:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	330c      	adds	r3, #12
 800805e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800806a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800806e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	330c      	adds	r3, #12
 8008076:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008078:	65ba      	str	r2, [r7, #88]	; 0x58
 800807a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800807e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e5      	bne.n	8008058 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3314      	adds	r3, #20
 8008092:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800809c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809e:	f023 0301 	bic.w	r3, r3, #1
 80080a2:	667b      	str	r3, [r7, #100]	; 0x64
 80080a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3314      	adds	r3, #20
 80080aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080ac:	647a      	str	r2, [r7, #68]	; 0x44
 80080ae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080b4:	e841 2300 	strex	r3, r2, [r1]
 80080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e5      	bne.n	800808c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	3314      	adds	r3, #20
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	623b      	str	r3, [r7, #32]
   return(result);
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080d6:	663b      	str	r3, [r7, #96]	; 0x60
 80080d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3314      	adds	r3, #20
 80080de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080e0:	633a      	str	r2, [r7, #48]	; 0x30
 80080e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e5      	bne.n	80080c0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008100:	2b01      	cmp	r3, #1
 8008102:	d119      	bne.n	8008138 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	330c      	adds	r3, #12
 800810a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	60fb      	str	r3, [r7, #12]
   return(result);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0310 	bic.w	r3, r3, #16
 800811a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800811c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	330c      	adds	r3, #12
 8008122:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008124:	61fa      	str	r2, [r7, #28]
 8008126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	69b9      	ldr	r1, [r7, #24]
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	617b      	str	r3, [r7, #20]
   return(result);
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e5      	bne.n	8008104 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813c:	2b01      	cmp	r3, #1
 800813e:	d106      	bne.n	800814e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008142:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008144:	4619      	mov	r1, r3
 8008146:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008148:	f7ff ff0e 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800814c:	e002      	b.n	8008154 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800814e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008150:	f7ff feec 	bl	8007f2c <HAL_UART_RxCpltCallback>
}
 8008154:	bf00      	nop
 8008156:	3770      	adds	r7, #112	; 0x70
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008168:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816e:	2b01      	cmp	r3, #1
 8008170:	d108      	bne.n	8008184 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008176:	085b      	lsrs	r3, r3, #1
 8008178:	b29b      	uxth	r3, r3
 800817a:	4619      	mov	r1, r3
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7ff fef3 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008182:	e002      	b.n	800818a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f7ff fedb 	bl	8007f40 <HAL_UART_RxHalfCpltCallback>
}
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ae:	2b80      	cmp	r3, #128	; 0x80
 80081b0:	bf0c      	ite	eq
 80081b2:	2301      	moveq	r3, #1
 80081b4:	2300      	movne	r3, #0
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b21      	cmp	r3, #33	; 0x21
 80081c4:	d108      	bne.n	80081d8 <UART_DMAError+0x46>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d005      	beq.n	80081d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2200      	movs	r2, #0
 80081d0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80081d2:	68b8      	ldr	r0, [r7, #8]
 80081d4:	f000 f8c6 	bl	8008364 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e2:	2b40      	cmp	r3, #64	; 0x40
 80081e4:	bf0c      	ite	eq
 80081e6:	2301      	moveq	r3, #1
 80081e8:	2300      	movne	r3, #0
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b22      	cmp	r3, #34	; 0x22
 80081f8:	d108      	bne.n	800820c <UART_DMAError+0x7a>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d005      	beq.n	800820c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2200      	movs	r2, #0
 8008204:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008206:	68b8      	ldr	r0, [r7, #8]
 8008208:	f000 f8d4 	bl	80083b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008210:	f043 0210 	orr.w	r2, r3, #16
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008218:	68b8      	ldr	r0, [r7, #8]
 800821a:	f7ff fe9b 	bl	8007f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800821e:	bf00      	nop
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b098      	sub	sp, #96	; 0x60
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	4613      	mov	r3, r2
 8008234:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	88fa      	ldrh	r2, [r7, #6]
 8008240:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2222      	movs	r2, #34	; 0x22
 800824c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008254:	4a40      	ldr	r2, [pc, #256]	; (8008358 <UART_Start_Receive_DMA+0x130>)
 8008256:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825c:	4a3f      	ldr	r2, [pc, #252]	; (800835c <UART_Start_Receive_DMA+0x134>)
 800825e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008264:	4a3e      	ldr	r2, [pc, #248]	; (8008360 <UART_Start_Receive_DMA+0x138>)
 8008266:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826c:	2200      	movs	r2, #0
 800826e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008270:	f107 0308 	add.w	r3, r7, #8
 8008274:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3304      	adds	r3, #4
 8008280:	4619      	mov	r1, r3
 8008282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	88fb      	ldrh	r3, [r7, #6]
 8008288:	f7fb f8ca 	bl	8003420 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800828c:	2300      	movs	r3, #0
 800828e:	613b      	str	r3, [r7, #16]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	613b      	str	r3, [r7, #16]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	613b      	str	r3, [r7, #16]
 80082a0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d019      	beq.n	80082e6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	330c      	adds	r3, #12
 80082b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	330c      	adds	r3, #12
 80082d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80082d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80082d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80082e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e5      	bne.n	80082b2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3314      	adds	r3, #20
 80082ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	e853 3f00 	ldrex	r3, [r3]
 80082f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	f043 0301 	orr.w	r3, r3, #1
 80082fc:	657b      	str	r3, [r7, #84]	; 0x54
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	3314      	adds	r3, #20
 8008304:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008306:	63ba      	str	r2, [r7, #56]	; 0x38
 8008308:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800830c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800830e:	e841 2300 	strex	r3, r2, [r1]
 8008312:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1e5      	bne.n	80082e6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	3314      	adds	r3, #20
 8008320:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	617b      	str	r3, [r7, #20]
   return(result);
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008330:	653b      	str	r3, [r7, #80]	; 0x50
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3314      	adds	r3, #20
 8008338:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800833a:	627a      	str	r2, [r7, #36]	; 0x24
 800833c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833e:	6a39      	ldr	r1, [r7, #32]
 8008340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008342:	e841 2300 	strex	r3, r2, [r1]
 8008346:	61fb      	str	r3, [r7, #28]
   return(result);
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1e5      	bne.n	800831a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3760      	adds	r7, #96	; 0x60
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	08008037 	.word	0x08008037
 800835c:	0800815d 	.word	0x0800815d
 8008360:	08008193 	.word	0x08008193

08008364 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008364:	b480      	push	{r7}
 8008366:	b089      	sub	sp, #36	; 0x24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	330c      	adds	r3, #12
 8008372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	e853 3f00 	ldrex	r3, [r3]
 800837a:	60bb      	str	r3, [r7, #8]
   return(result);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	330c      	adds	r3, #12
 800838a:	69fa      	ldr	r2, [r7, #28]
 800838c:	61ba      	str	r2, [r7, #24]
 800838e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008390:	6979      	ldr	r1, [r7, #20]
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	e841 2300 	strex	r3, r2, [r1]
 8008398:	613b      	str	r3, [r7, #16]
   return(result);
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1e5      	bne.n	800836c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80083a8:	bf00      	nop
 80083aa:	3724      	adds	r7, #36	; 0x24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b095      	sub	sp, #84	; 0x54
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	330c      	adds	r3, #12
 80083c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c6:	e853 3f00 	ldrex	r3, [r3]
 80083ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	330c      	adds	r3, #12
 80083da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083dc:	643a      	str	r2, [r7, #64]	; 0x40
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e5      	bne.n	80083bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3314      	adds	r3, #20
 80083f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	e853 3f00 	ldrex	r3, [r3]
 80083fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	f023 0301 	bic.w	r3, r3, #1
 8008406:	64bb      	str	r3, [r7, #72]	; 0x48
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3314      	adds	r3, #20
 800840e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008410:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008418:	e841 2300 	strex	r3, r2, [r1]
 800841c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e5      	bne.n	80083f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008428:	2b01      	cmp	r3, #1
 800842a:	d119      	bne.n	8008460 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	330c      	adds	r3, #12
 8008432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	e853 3f00 	ldrex	r3, [r3]
 800843a:	60bb      	str	r3, [r7, #8]
   return(result);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	f023 0310 	bic.w	r3, r3, #16
 8008442:	647b      	str	r3, [r7, #68]	; 0x44
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	330c      	adds	r3, #12
 800844a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800844c:	61ba      	str	r2, [r7, #24]
 800844e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008450:	6979      	ldr	r1, [r7, #20]
 8008452:	69ba      	ldr	r2, [r7, #24]
 8008454:	e841 2300 	strex	r3, r2, [r1]
 8008458:	613b      	str	r3, [r7, #16]
   return(result);
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1e5      	bne.n	800842c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2220      	movs	r2, #32
 8008464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800846e:	bf00      	nop
 8008470:	3754      	adds	r7, #84	; 0x54
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008486:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f7ff fd5d 	bl	8007f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800849a:	bf00      	nop
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b085      	sub	sp, #20
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b21      	cmp	r3, #33	; 0x21
 80084b4:	d13e      	bne.n	8008534 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084be:	d114      	bne.n	80084ea <UART_Transmit_IT+0x48>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d110      	bne.n	80084ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	1c9a      	adds	r2, r3, #2
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	621a      	str	r2, [r3, #32]
 80084e8:	e008      	b.n	80084fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	1c59      	adds	r1, r3, #1
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	6211      	str	r1, [r2, #32]
 80084f4:	781a      	ldrb	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008500:	b29b      	uxth	r3, r3
 8008502:	3b01      	subs	r3, #1
 8008504:	b29b      	uxth	r3, r3
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	4619      	mov	r1, r3
 800850a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10f      	bne.n	8008530 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800851e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68da      	ldr	r2, [r3, #12]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800852e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	e000      	b.n	8008536 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008534:	2302      	movs	r3, #2
  }
}
 8008536:	4618      	mov	r0, r3
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008558:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2220      	movs	r2, #32
 800855e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff fcce 	bl	8007f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b08c      	sub	sp, #48	; 0x30
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b22      	cmp	r3, #34	; 0x22
 8008584:	f040 80ab 	bne.w	80086de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008590:	d117      	bne.n	80085c2 <UART_Receive_IT+0x50>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d113      	bne.n	80085c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ba:	1c9a      	adds	r2, r3, #2
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	629a      	str	r2, [r3, #40]	; 0x28
 80085c0:	e026      	b.n	8008610 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80085c8:	2300      	movs	r3, #0
 80085ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d4:	d007      	beq.n	80085e6 <UART_Receive_IT+0x74>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10a      	bne.n	80085f4 <UART_Receive_IT+0x82>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d106      	bne.n	80085f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	e008      	b.n	8008606 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008600:	b2da      	uxtb	r2, r3
 8008602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008604:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008614:	b29b      	uxth	r3, r3
 8008616:	3b01      	subs	r3, #1
 8008618:	b29b      	uxth	r3, r3
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	4619      	mov	r1, r3
 800861e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008620:	2b00      	cmp	r3, #0
 8008622:	d15a      	bne.n	80086da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68da      	ldr	r2, [r3, #12]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0220 	bic.w	r2, r2, #32
 8008632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68da      	ldr	r2, [r3, #12]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008642:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	695a      	ldr	r2, [r3, #20]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f022 0201 	bic.w	r2, r2, #1
 8008652:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2220      	movs	r2, #32
 8008658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008660:	2b01      	cmp	r3, #1
 8008662:	d135      	bne.n	80086d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	330c      	adds	r3, #12
 8008670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	e853 3f00 	ldrex	r3, [r3]
 8008678:	613b      	str	r3, [r7, #16]
   return(result);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f023 0310 	bic.w	r3, r3, #16
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	330c      	adds	r3, #12
 8008688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868a:	623a      	str	r2, [r7, #32]
 800868c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868e:	69f9      	ldr	r1, [r7, #28]
 8008690:	6a3a      	ldr	r2, [r7, #32]
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	61bb      	str	r3, [r7, #24]
   return(result);
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1e5      	bne.n	800866a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b10      	cmp	r3, #16
 80086aa:	d10a      	bne.n	80086c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff fc4d 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
 80086ce:	e002      	b.n	80086d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff fc2b 	bl	8007f2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	e002      	b.n	80086e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	e000      	b.n	80086e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80086de:	2302      	movs	r3, #2
  }
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3730      	adds	r7, #48	; 0x30
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086ec:	b0c0      	sub	sp, #256	; 0x100
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008704:	68d9      	ldr	r1, [r3, #12]
 8008706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	ea40 0301 	orr.w	r3, r0, r1
 8008710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008716:	689a      	ldr	r2, [r3, #8]
 8008718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	431a      	orrs	r2, r3
 8008720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	431a      	orrs	r2, r3
 8008728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008740:	f021 010c 	bic.w	r1, r1, #12
 8008744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800874e:	430b      	orrs	r3, r1
 8008750:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800875e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008762:	6999      	ldr	r1, [r3, #24]
 8008764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	ea40 0301 	orr.w	r3, r0, r1
 800876e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	4b8f      	ldr	r3, [pc, #572]	; (80089b4 <UART_SetConfig+0x2cc>)
 8008778:	429a      	cmp	r2, r3
 800877a:	d005      	beq.n	8008788 <UART_SetConfig+0xa0>
 800877c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4b8d      	ldr	r3, [pc, #564]	; (80089b8 <UART_SetConfig+0x2d0>)
 8008784:	429a      	cmp	r2, r3
 8008786:	d104      	bne.n	8008792 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008788:	f7fd fbb4 	bl	8005ef4 <HAL_RCC_GetPCLK2Freq>
 800878c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008790:	e003      	b.n	800879a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008792:	f7fd fb9b 	bl	8005ecc <HAL_RCC_GetPCLK1Freq>
 8008796:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800879a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087a4:	f040 810c 	bne.w	80089c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087ac:	2200      	movs	r2, #0
 80087ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80087b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80087ba:	4622      	mov	r2, r4
 80087bc:	462b      	mov	r3, r5
 80087be:	1891      	adds	r1, r2, r2
 80087c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80087c2:	415b      	adcs	r3, r3
 80087c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80087ca:	4621      	mov	r1, r4
 80087cc:	eb12 0801 	adds.w	r8, r2, r1
 80087d0:	4629      	mov	r1, r5
 80087d2:	eb43 0901 	adc.w	r9, r3, r1
 80087d6:	f04f 0200 	mov.w	r2, #0
 80087da:	f04f 0300 	mov.w	r3, #0
 80087de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087ea:	4690      	mov	r8, r2
 80087ec:	4699      	mov	r9, r3
 80087ee:	4623      	mov	r3, r4
 80087f0:	eb18 0303 	adds.w	r3, r8, r3
 80087f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80087f8:	462b      	mov	r3, r5
 80087fa:	eb49 0303 	adc.w	r3, r9, r3
 80087fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800880e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008812:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008816:	460b      	mov	r3, r1
 8008818:	18db      	adds	r3, r3, r3
 800881a:	653b      	str	r3, [r7, #80]	; 0x50
 800881c:	4613      	mov	r3, r2
 800881e:	eb42 0303 	adc.w	r3, r2, r3
 8008822:	657b      	str	r3, [r7, #84]	; 0x54
 8008824:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008828:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800882c:	f7f7 fd88 	bl	8000340 <__aeabi_uldivmod>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	4b61      	ldr	r3, [pc, #388]	; (80089bc <UART_SetConfig+0x2d4>)
 8008836:	fba3 2302 	umull	r2, r3, r3, r2
 800883a:	095b      	lsrs	r3, r3, #5
 800883c:	011c      	lsls	r4, r3, #4
 800883e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008842:	2200      	movs	r2, #0
 8008844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008848:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800884c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008850:	4642      	mov	r2, r8
 8008852:	464b      	mov	r3, r9
 8008854:	1891      	adds	r1, r2, r2
 8008856:	64b9      	str	r1, [r7, #72]	; 0x48
 8008858:	415b      	adcs	r3, r3
 800885a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800885c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008860:	4641      	mov	r1, r8
 8008862:	eb12 0a01 	adds.w	sl, r2, r1
 8008866:	4649      	mov	r1, r9
 8008868:	eb43 0b01 	adc.w	fp, r3, r1
 800886c:	f04f 0200 	mov.w	r2, #0
 8008870:	f04f 0300 	mov.w	r3, #0
 8008874:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008878:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800887c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008880:	4692      	mov	sl, r2
 8008882:	469b      	mov	fp, r3
 8008884:	4643      	mov	r3, r8
 8008886:	eb1a 0303 	adds.w	r3, sl, r3
 800888a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800888e:	464b      	mov	r3, r9
 8008890:	eb4b 0303 	adc.w	r3, fp, r3
 8008894:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80088a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80088ac:	460b      	mov	r3, r1
 80088ae:	18db      	adds	r3, r3, r3
 80088b0:	643b      	str	r3, [r7, #64]	; 0x40
 80088b2:	4613      	mov	r3, r2
 80088b4:	eb42 0303 	adc.w	r3, r2, r3
 80088b8:	647b      	str	r3, [r7, #68]	; 0x44
 80088ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80088be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80088c2:	f7f7 fd3d 	bl	8000340 <__aeabi_uldivmod>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4611      	mov	r1, r2
 80088cc:	4b3b      	ldr	r3, [pc, #236]	; (80089bc <UART_SetConfig+0x2d4>)
 80088ce:	fba3 2301 	umull	r2, r3, r3, r1
 80088d2:	095b      	lsrs	r3, r3, #5
 80088d4:	2264      	movs	r2, #100	; 0x64
 80088d6:	fb02 f303 	mul.w	r3, r2, r3
 80088da:	1acb      	subs	r3, r1, r3
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80088e2:	4b36      	ldr	r3, [pc, #216]	; (80089bc <UART_SetConfig+0x2d4>)
 80088e4:	fba3 2302 	umull	r2, r3, r3, r2
 80088e8:	095b      	lsrs	r3, r3, #5
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088f0:	441c      	add	r4, r3
 80088f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008900:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008904:	4642      	mov	r2, r8
 8008906:	464b      	mov	r3, r9
 8008908:	1891      	adds	r1, r2, r2
 800890a:	63b9      	str	r1, [r7, #56]	; 0x38
 800890c:	415b      	adcs	r3, r3
 800890e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008914:	4641      	mov	r1, r8
 8008916:	1851      	adds	r1, r2, r1
 8008918:	6339      	str	r1, [r7, #48]	; 0x30
 800891a:	4649      	mov	r1, r9
 800891c:	414b      	adcs	r3, r1
 800891e:	637b      	str	r3, [r7, #52]	; 0x34
 8008920:	f04f 0200 	mov.w	r2, #0
 8008924:	f04f 0300 	mov.w	r3, #0
 8008928:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800892c:	4659      	mov	r1, fp
 800892e:	00cb      	lsls	r3, r1, #3
 8008930:	4651      	mov	r1, sl
 8008932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008936:	4651      	mov	r1, sl
 8008938:	00ca      	lsls	r2, r1, #3
 800893a:	4610      	mov	r0, r2
 800893c:	4619      	mov	r1, r3
 800893e:	4603      	mov	r3, r0
 8008940:	4642      	mov	r2, r8
 8008942:	189b      	adds	r3, r3, r2
 8008944:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008948:	464b      	mov	r3, r9
 800894a:	460a      	mov	r2, r1
 800894c:	eb42 0303 	adc.w	r3, r2, r3
 8008950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008960:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008968:	460b      	mov	r3, r1
 800896a:	18db      	adds	r3, r3, r3
 800896c:	62bb      	str	r3, [r7, #40]	; 0x28
 800896e:	4613      	mov	r3, r2
 8008970:	eb42 0303 	adc.w	r3, r2, r3
 8008974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800897a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800897e:	f7f7 fcdf 	bl	8000340 <__aeabi_uldivmod>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4b0d      	ldr	r3, [pc, #52]	; (80089bc <UART_SetConfig+0x2d4>)
 8008988:	fba3 1302 	umull	r1, r3, r3, r2
 800898c:	095b      	lsrs	r3, r3, #5
 800898e:	2164      	movs	r1, #100	; 0x64
 8008990:	fb01 f303 	mul.w	r3, r1, r3
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	3332      	adds	r3, #50	; 0x32
 800899a:	4a08      	ldr	r2, [pc, #32]	; (80089bc <UART_SetConfig+0x2d4>)
 800899c:	fba2 2303 	umull	r2, r3, r2, r3
 80089a0:	095b      	lsrs	r3, r3, #5
 80089a2:	f003 0207 	and.w	r2, r3, #7
 80089a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4422      	add	r2, r4
 80089ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80089b0:	e105      	b.n	8008bbe <UART_SetConfig+0x4d6>
 80089b2:	bf00      	nop
 80089b4:	40011000 	.word	0x40011000
 80089b8:	40011400 	.word	0x40011400
 80089bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089c4:	2200      	movs	r2, #0
 80089c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80089ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80089d2:	4642      	mov	r2, r8
 80089d4:	464b      	mov	r3, r9
 80089d6:	1891      	adds	r1, r2, r2
 80089d8:	6239      	str	r1, [r7, #32]
 80089da:	415b      	adcs	r3, r3
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
 80089de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089e2:	4641      	mov	r1, r8
 80089e4:	1854      	adds	r4, r2, r1
 80089e6:	4649      	mov	r1, r9
 80089e8:	eb43 0501 	adc.w	r5, r3, r1
 80089ec:	f04f 0200 	mov.w	r2, #0
 80089f0:	f04f 0300 	mov.w	r3, #0
 80089f4:	00eb      	lsls	r3, r5, #3
 80089f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089fa:	00e2      	lsls	r2, r4, #3
 80089fc:	4614      	mov	r4, r2
 80089fe:	461d      	mov	r5, r3
 8008a00:	4643      	mov	r3, r8
 8008a02:	18e3      	adds	r3, r4, r3
 8008a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a08:	464b      	mov	r3, r9
 8008a0a:	eb45 0303 	adc.w	r3, r5, r3
 8008a0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a22:	f04f 0200 	mov.w	r2, #0
 8008a26:	f04f 0300 	mov.w	r3, #0
 8008a2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008a2e:	4629      	mov	r1, r5
 8008a30:	008b      	lsls	r3, r1, #2
 8008a32:	4621      	mov	r1, r4
 8008a34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a38:	4621      	mov	r1, r4
 8008a3a:	008a      	lsls	r2, r1, #2
 8008a3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008a40:	f7f7 fc7e 	bl	8000340 <__aeabi_uldivmod>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	4b60      	ldr	r3, [pc, #384]	; (8008bcc <UART_SetConfig+0x4e4>)
 8008a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8008a4e:	095b      	lsrs	r3, r3, #5
 8008a50:	011c      	lsls	r4, r3, #4
 8008a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008a64:	4642      	mov	r2, r8
 8008a66:	464b      	mov	r3, r9
 8008a68:	1891      	adds	r1, r2, r2
 8008a6a:	61b9      	str	r1, [r7, #24]
 8008a6c:	415b      	adcs	r3, r3
 8008a6e:	61fb      	str	r3, [r7, #28]
 8008a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a74:	4641      	mov	r1, r8
 8008a76:	1851      	adds	r1, r2, r1
 8008a78:	6139      	str	r1, [r7, #16]
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	414b      	adcs	r3, r1
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	f04f 0200 	mov.w	r2, #0
 8008a84:	f04f 0300 	mov.w	r3, #0
 8008a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a8c:	4659      	mov	r1, fp
 8008a8e:	00cb      	lsls	r3, r1, #3
 8008a90:	4651      	mov	r1, sl
 8008a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a96:	4651      	mov	r1, sl
 8008a98:	00ca      	lsls	r2, r1, #3
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	4642      	mov	r2, r8
 8008aa2:	189b      	adds	r3, r3, r2
 8008aa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008aa8:	464b      	mov	r3, r9
 8008aaa:	460a      	mov	r2, r1
 8008aac:	eb42 0303 	adc.w	r3, r2, r3
 8008ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008abe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	f04f 0300 	mov.w	r3, #0
 8008ac8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008acc:	4649      	mov	r1, r9
 8008ace:	008b      	lsls	r3, r1, #2
 8008ad0:	4641      	mov	r1, r8
 8008ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ad6:	4641      	mov	r1, r8
 8008ad8:	008a      	lsls	r2, r1, #2
 8008ada:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008ade:	f7f7 fc2f 	bl	8000340 <__aeabi_uldivmod>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4b39      	ldr	r3, [pc, #228]	; (8008bcc <UART_SetConfig+0x4e4>)
 8008ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8008aec:	095b      	lsrs	r3, r3, #5
 8008aee:	2164      	movs	r1, #100	; 0x64
 8008af0:	fb01 f303 	mul.w	r3, r1, r3
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	011b      	lsls	r3, r3, #4
 8008af8:	3332      	adds	r3, #50	; 0x32
 8008afa:	4a34      	ldr	r2, [pc, #208]	; (8008bcc <UART_SetConfig+0x4e4>)
 8008afc:	fba2 2303 	umull	r2, r3, r2, r3
 8008b00:	095b      	lsrs	r3, r3, #5
 8008b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b06:	441c      	add	r4, r3
 8008b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	673b      	str	r3, [r7, #112]	; 0x70
 8008b10:	677a      	str	r2, [r7, #116]	; 0x74
 8008b12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008b16:	4642      	mov	r2, r8
 8008b18:	464b      	mov	r3, r9
 8008b1a:	1891      	adds	r1, r2, r2
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	415b      	adcs	r3, r3
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b26:	4641      	mov	r1, r8
 8008b28:	1851      	adds	r1, r2, r1
 8008b2a:	6039      	str	r1, [r7, #0]
 8008b2c:	4649      	mov	r1, r9
 8008b2e:	414b      	adcs	r3, r1
 8008b30:	607b      	str	r3, [r7, #4]
 8008b32:	f04f 0200 	mov.w	r2, #0
 8008b36:	f04f 0300 	mov.w	r3, #0
 8008b3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b3e:	4659      	mov	r1, fp
 8008b40:	00cb      	lsls	r3, r1, #3
 8008b42:	4651      	mov	r1, sl
 8008b44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b48:	4651      	mov	r1, sl
 8008b4a:	00ca      	lsls	r2, r1, #3
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	4619      	mov	r1, r3
 8008b50:	4603      	mov	r3, r0
 8008b52:	4642      	mov	r2, r8
 8008b54:	189b      	adds	r3, r3, r2
 8008b56:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b58:	464b      	mov	r3, r9
 8008b5a:	460a      	mov	r2, r1
 8008b5c:	eb42 0303 	adc.w	r3, r2, r3
 8008b60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	663b      	str	r3, [r7, #96]	; 0x60
 8008b6c:	667a      	str	r2, [r7, #100]	; 0x64
 8008b6e:	f04f 0200 	mov.w	r2, #0
 8008b72:	f04f 0300 	mov.w	r3, #0
 8008b76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	008b      	lsls	r3, r1, #2
 8008b7e:	4641      	mov	r1, r8
 8008b80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b84:	4641      	mov	r1, r8
 8008b86:	008a      	lsls	r2, r1, #2
 8008b88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008b8c:	f7f7 fbd8 	bl	8000340 <__aeabi_uldivmod>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4b0d      	ldr	r3, [pc, #52]	; (8008bcc <UART_SetConfig+0x4e4>)
 8008b96:	fba3 1302 	umull	r1, r3, r3, r2
 8008b9a:	095b      	lsrs	r3, r3, #5
 8008b9c:	2164      	movs	r1, #100	; 0x64
 8008b9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	3332      	adds	r3, #50	; 0x32
 8008ba8:	4a08      	ldr	r2, [pc, #32]	; (8008bcc <UART_SetConfig+0x4e4>)
 8008baa:	fba2 2303 	umull	r2, r3, r2, r3
 8008bae:	095b      	lsrs	r3, r3, #5
 8008bb0:	f003 020f 	and.w	r2, r3, #15
 8008bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4422      	add	r2, r4
 8008bbc:	609a      	str	r2, [r3, #8]
}
 8008bbe:	bf00      	nop
 8008bc0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bca:	bf00      	nop
 8008bcc:	51eb851f 	.word	0x51eb851f

08008bd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b084      	sub	sp, #16
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	f107 001c 	add.w	r0, r7, #28
 8008bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d122      	bne.n	8008c2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d105      	bne.n	8008c22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 fbee 	bl	800a404 <USB_CoreReset>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73fb      	strb	r3, [r7, #15]
 8008c2c:	e01a      	b.n	8008c64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 fbe2 	bl	800a404 <USB_CoreReset>
 8008c40:	4603      	mov	r3, r0
 8008c42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d106      	bne.n	8008c58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	639a      	str	r2, [r3, #56]	; 0x38
 8008c56:	e005      	b.n	8008c64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d10b      	bne.n	8008c82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f043 0206 	orr.w	r2, r3, #6
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f043 0220 	orr.w	r2, r3, #32
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c8e:	b004      	add	sp, #16
 8008c90:	4770      	bx	lr
	...

08008c94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d165      	bne.n	8008d74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	4a41      	ldr	r2, [pc, #260]	; (8008db0 <USB_SetTurnaroundTime+0x11c>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d906      	bls.n	8008cbe <USB_SetTurnaroundTime+0x2a>
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	4a40      	ldr	r2, [pc, #256]	; (8008db4 <USB_SetTurnaroundTime+0x120>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d202      	bcs.n	8008cbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008cb8:	230f      	movs	r3, #15
 8008cba:	617b      	str	r3, [r7, #20]
 8008cbc:	e062      	b.n	8008d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	4a3c      	ldr	r2, [pc, #240]	; (8008db4 <USB_SetTurnaroundTime+0x120>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d306      	bcc.n	8008cd4 <USB_SetTurnaroundTime+0x40>
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	4a3b      	ldr	r2, [pc, #236]	; (8008db8 <USB_SetTurnaroundTime+0x124>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d202      	bcs.n	8008cd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008cce:	230e      	movs	r3, #14
 8008cd0:	617b      	str	r3, [r7, #20]
 8008cd2:	e057      	b.n	8008d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	4a38      	ldr	r2, [pc, #224]	; (8008db8 <USB_SetTurnaroundTime+0x124>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d306      	bcc.n	8008cea <USB_SetTurnaroundTime+0x56>
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	4a37      	ldr	r2, [pc, #220]	; (8008dbc <USB_SetTurnaroundTime+0x128>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d202      	bcs.n	8008cea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008ce4:	230d      	movs	r3, #13
 8008ce6:	617b      	str	r3, [r7, #20]
 8008ce8:	e04c      	b.n	8008d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	4a33      	ldr	r2, [pc, #204]	; (8008dbc <USB_SetTurnaroundTime+0x128>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d306      	bcc.n	8008d00 <USB_SetTurnaroundTime+0x6c>
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	4a32      	ldr	r2, [pc, #200]	; (8008dc0 <USB_SetTurnaroundTime+0x12c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d802      	bhi.n	8008d00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008cfa:	230c      	movs	r3, #12
 8008cfc:	617b      	str	r3, [r7, #20]
 8008cfe:	e041      	b.n	8008d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	4a2f      	ldr	r2, [pc, #188]	; (8008dc0 <USB_SetTurnaroundTime+0x12c>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d906      	bls.n	8008d16 <USB_SetTurnaroundTime+0x82>
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	4a2e      	ldr	r2, [pc, #184]	; (8008dc4 <USB_SetTurnaroundTime+0x130>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d802      	bhi.n	8008d16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008d10:	230b      	movs	r3, #11
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	e036      	b.n	8008d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	4a2a      	ldr	r2, [pc, #168]	; (8008dc4 <USB_SetTurnaroundTime+0x130>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d906      	bls.n	8008d2c <USB_SetTurnaroundTime+0x98>
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	4a29      	ldr	r2, [pc, #164]	; (8008dc8 <USB_SetTurnaroundTime+0x134>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d802      	bhi.n	8008d2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008d26:	230a      	movs	r3, #10
 8008d28:	617b      	str	r3, [r7, #20]
 8008d2a:	e02b      	b.n	8008d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	4a26      	ldr	r2, [pc, #152]	; (8008dc8 <USB_SetTurnaroundTime+0x134>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d906      	bls.n	8008d42 <USB_SetTurnaroundTime+0xae>
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	4a25      	ldr	r2, [pc, #148]	; (8008dcc <USB_SetTurnaroundTime+0x138>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d202      	bcs.n	8008d42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008d3c:	2309      	movs	r3, #9
 8008d3e:	617b      	str	r3, [r7, #20]
 8008d40:	e020      	b.n	8008d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	4a21      	ldr	r2, [pc, #132]	; (8008dcc <USB_SetTurnaroundTime+0x138>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d306      	bcc.n	8008d58 <USB_SetTurnaroundTime+0xc4>
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	4a20      	ldr	r2, [pc, #128]	; (8008dd0 <USB_SetTurnaroundTime+0x13c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d802      	bhi.n	8008d58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008d52:	2308      	movs	r3, #8
 8008d54:	617b      	str	r3, [r7, #20]
 8008d56:	e015      	b.n	8008d84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	4a1d      	ldr	r2, [pc, #116]	; (8008dd0 <USB_SetTurnaroundTime+0x13c>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d906      	bls.n	8008d6e <USB_SetTurnaroundTime+0xda>
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	4a1c      	ldr	r2, [pc, #112]	; (8008dd4 <USB_SetTurnaroundTime+0x140>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d202      	bcs.n	8008d6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008d68:	2307      	movs	r3, #7
 8008d6a:	617b      	str	r3, [r7, #20]
 8008d6c:	e00a      	b.n	8008d84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008d6e:	2306      	movs	r3, #6
 8008d70:	617b      	str	r3, [r7, #20]
 8008d72:	e007      	b.n	8008d84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008d74:	79fb      	ldrb	r3, [r7, #7]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d102      	bne.n	8008d80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008d7a:	2309      	movs	r3, #9
 8008d7c:	617b      	str	r3, [r7, #20]
 8008d7e:	e001      	b.n	8008d84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008d80:	2309      	movs	r3, #9
 8008d82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	029b      	lsls	r3, r3, #10
 8008d98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	371c      	adds	r7, #28
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	00d8acbf 	.word	0x00d8acbf
 8008db4:	00e4e1c0 	.word	0x00e4e1c0
 8008db8:	00f42400 	.word	0x00f42400
 8008dbc:	01067380 	.word	0x01067380
 8008dc0:	011a499f 	.word	0x011a499f
 8008dc4:	01312cff 	.word	0x01312cff
 8008dc8:	014ca43f 	.word	0x014ca43f
 8008dcc:	016e3600 	.word	0x016e3600
 8008dd0:	01a6ab1f 	.word	0x01a6ab1f
 8008dd4:	01e84800 	.word	0x01e84800

08008dd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f043 0201 	orr.w	r2, r3, #1
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	f023 0201 	bic.w	r2, r3, #1
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e38:	78fb      	ldrb	r3, [r7, #3]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d115      	bne.n	8008e6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	f7f9 feb6 	bl	8002bbc <HAL_Delay>
      ms++;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3301      	adds	r3, #1
 8008e54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f001 fa45 	bl	800a2e6 <USB_GetMode>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d01e      	beq.n	8008ea0 <USB_SetCurrentMode+0x84>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b31      	cmp	r3, #49	; 0x31
 8008e66:	d9f0      	bls.n	8008e4a <USB_SetCurrentMode+0x2e>
 8008e68:	e01a      	b.n	8008ea0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e6a:	78fb      	ldrb	r3, [r7, #3]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d115      	bne.n	8008e9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e7c:	2001      	movs	r0, #1
 8008e7e:	f7f9 fe9d 	bl	8002bbc <HAL_Delay>
      ms++;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3301      	adds	r3, #1
 8008e86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 fa2c 	bl	800a2e6 <USB_GetMode>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d005      	beq.n	8008ea0 <USB_SetCurrentMode+0x84>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b31      	cmp	r3, #49	; 0x31
 8008e98:	d9f0      	bls.n	8008e7c <USB_SetCurrentMode+0x60>
 8008e9a:	e001      	b.n	8008ea0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e005      	b.n	8008eac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2b32      	cmp	r3, #50	; 0x32
 8008ea4:	d101      	bne.n	8008eaa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e000      	b.n	8008eac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008eb4:	b084      	sub	sp, #16
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b086      	sub	sp, #24
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008ece:	2300      	movs	r3, #0
 8008ed0:	613b      	str	r3, [r7, #16]
 8008ed2:	e009      	b.n	8008ee8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	3340      	adds	r3, #64	; 0x40
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4413      	add	r3, r2
 8008ede:	2200      	movs	r2, #0
 8008ee0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	613b      	str	r3, [r7, #16]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	2b0e      	cmp	r3, #14
 8008eec:	d9f2      	bls.n	8008ed4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d11c      	bne.n	8008f2e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f02:	f043 0302 	orr.w	r3, r3, #2
 8008f06:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f18:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f24:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	639a      	str	r2, [r3, #56]	; 0x38
 8008f2c:	e00b      	b.n	8008f46 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f58:	4619      	mov	r1, r3
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f60:	461a      	mov	r2, r3
 8008f62:	680b      	ldr	r3, [r1, #0]
 8008f64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d10c      	bne.n	8008f86 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d104      	bne.n	8008f7c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f72:	2100      	movs	r1, #0
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f965 	bl	8009244 <USB_SetDevSpeed>
 8008f7a:	e008      	b.n	8008f8e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f960 	bl	8009244 <USB_SetDevSpeed>
 8008f84:	e003      	b.n	8008f8e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f86:	2103      	movs	r1, #3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f95b 	bl	8009244 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f8e:	2110      	movs	r1, #16
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f8f3 	bl	800917c <USB_FlushTxFifo>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f91f 	bl	80091e4 <USB_FlushRxFifo>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	2300      	movs	r3, #0
 8008fba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fce:	461a      	mov	r2, r3
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	613b      	str	r3, [r7, #16]
 8008fd8:	e043      	b.n	8009062 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	015a      	lsls	r2, r3, #5
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ff0:	d118      	bne.n	8009024 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10a      	bne.n	800900e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009004:	461a      	mov	r2, r3
 8009006:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	e013      	b.n	8009036 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4413      	add	r3, r2
 8009016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800901a:	461a      	mov	r2, r3
 800901c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009020:	6013      	str	r3, [r2, #0]
 8009022:	e008      	b.n	8009036 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009030:	461a      	mov	r2, r3
 8009032:	2300      	movs	r3, #0
 8009034:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	015a      	lsls	r2, r3, #5
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	4413      	add	r3, r2
 800903e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009042:	461a      	mov	r2, r3
 8009044:	2300      	movs	r3, #0
 8009046:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009054:	461a      	mov	r2, r3
 8009056:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800905a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	3301      	adds	r3, #1
 8009060:	613b      	str	r3, [r7, #16]
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	429a      	cmp	r2, r3
 8009068:	d3b7      	bcc.n	8008fda <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800906a:	2300      	movs	r3, #0
 800906c:	613b      	str	r3, [r7, #16]
 800906e:	e043      	b.n	80090f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4413      	add	r3, r2
 8009078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009086:	d118      	bne.n	80090ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10a      	bne.n	80090a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	015a      	lsls	r2, r3, #5
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	4413      	add	r3, r2
 8009096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909a:	461a      	mov	r2, r3
 800909c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	e013      	b.n	80090cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b0:	461a      	mov	r2, r3
 80090b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	e008      	b.n	80090cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c6:	461a      	mov	r2, r3
 80090c8:	2300      	movs	r3, #0
 80090ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d8:	461a      	mov	r2, r3
 80090da:	2300      	movs	r3, #0
 80090dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	015a      	lsls	r2, r3, #5
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	4413      	add	r3, r2
 80090e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ea:	461a      	mov	r2, r3
 80090ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	3301      	adds	r3, #1
 80090f6:	613b      	str	r3, [r7, #16]
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d3b7      	bcc.n	8009070 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800910e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009112:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009120:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009124:	2b00      	cmp	r3, #0
 8009126:	d105      	bne.n	8009134 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	f043 0210 	orr.w	r2, r3, #16
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	699a      	ldr	r2, [r3, #24]
 8009138:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <USB_DevInit+0x2c4>)
 800913a:	4313      	orrs	r3, r2
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009142:	2b00      	cmp	r3, #0
 8009144:	d005      	beq.n	8009152 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	f043 0208 	orr.w	r2, r3, #8
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009154:	2b01      	cmp	r3, #1
 8009156:	d107      	bne.n	8009168 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009160:	f043 0304 	orr.w	r3, r3, #4
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009168:	7dfb      	ldrb	r3, [r7, #23]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009174:	b004      	add	sp, #16
 8009176:	4770      	bx	lr
 8009178:	803c3800 	.word	0x803c3800

0800917c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3301      	adds	r3, #1
 800918e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4a13      	ldr	r2, [pc, #76]	; (80091e0 <USB_FlushTxFifo+0x64>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d901      	bls.n	800919c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e01b      	b.n	80091d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	daf2      	bge.n	800918a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	019b      	lsls	r3, r3, #6
 80091ac:	f043 0220 	orr.w	r2, r3, #32
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	3301      	adds	r3, #1
 80091b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	4a08      	ldr	r2, [pc, #32]	; (80091e0 <USB_FlushTxFifo+0x64>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d901      	bls.n	80091c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	e006      	b.n	80091d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	f003 0320 	and.w	r3, r3, #32
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d0f0      	beq.n	80091b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3714      	adds	r7, #20
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	00030d40 	.word	0x00030d40

080091e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3301      	adds	r3, #1
 80091f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	4a11      	ldr	r2, [pc, #68]	; (8009240 <USB_FlushRxFifo+0x5c>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d901      	bls.n	8009202 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e018      	b.n	8009234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	daf2      	bge.n	80091f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800920a:	2300      	movs	r3, #0
 800920c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2210      	movs	r2, #16
 8009212:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3301      	adds	r3, #1
 8009218:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	4a08      	ldr	r2, [pc, #32]	; (8009240 <USB_FlushRxFifo+0x5c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d901      	bls.n	8009226 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009222:	2303      	movs	r3, #3
 8009224:	e006      	b.n	8009234 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	f003 0310 	and.w	r3, r3, #16
 800922e:	2b10      	cmp	r3, #16
 8009230:	d0f0      	beq.n	8009214 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	00030d40 	.word	0x00030d40

08009244 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	78fb      	ldrb	r3, [r7, #3]
 800925e:	68f9      	ldr	r1, [r7, #12]
 8009260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009264:	4313      	orrs	r3, r2
 8009266:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009276:	b480      	push	{r7}
 8009278:	b087      	sub	sp, #28
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f003 0306 	and.w	r3, r3, #6
 800928e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d102      	bne.n	800929c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]
 800929a:	e00a      	b.n	80092b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d002      	beq.n	80092a8 <USB_GetDevSpeed+0x32>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b06      	cmp	r3, #6
 80092a6:	d102      	bne.n	80092ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80092a8:	2302      	movs	r3, #2
 80092aa:	75fb      	strb	r3, [r7, #23]
 80092ac:	e001      	b.n	80092b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80092ae:	230f      	movs	r3, #15
 80092b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	371c      	adds	r7, #28
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	785b      	ldrb	r3, [r3, #1]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d13a      	bne.n	8009352 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092e2:	69da      	ldr	r2, [r3, #28]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	f003 030f 	and.w	r3, r3, #15
 80092ec:	2101      	movs	r1, #1
 80092ee:	fa01 f303 	lsl.w	r3, r1, r3
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	68f9      	ldr	r1, [r7, #12]
 80092f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092fa:	4313      	orrs	r3, r2
 80092fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	015a      	lsls	r2, r3, #5
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	4413      	add	r3, r2
 8009306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d155      	bne.n	80093c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	015a      	lsls	r2, r3, #5
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4413      	add	r3, r2
 800931c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	791b      	ldrb	r3, [r3, #4]
 800932e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009330:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	059b      	lsls	r3, r3, #22
 8009336:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009338:	4313      	orrs	r3, r2
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	0151      	lsls	r1, r2, #5
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	440a      	add	r2, r1
 8009342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800934a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800934e:	6013      	str	r3, [r2, #0]
 8009350:	e036      	b.n	80093c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009358:	69da      	ldr	r2, [r3, #28]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	f003 030f 	and.w	r3, r3, #15
 8009362:	2101      	movs	r1, #1
 8009364:	fa01 f303 	lsl.w	r3, r1, r3
 8009368:	041b      	lsls	r3, r3, #16
 800936a:	68f9      	ldr	r1, [r7, #12]
 800936c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009370:	4313      	orrs	r3, r2
 8009372:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	4413      	add	r3, r2
 800937c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d11a      	bne.n	80093c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	4413      	add	r3, r2
 8009392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	791b      	ldrb	r3, [r3, #4]
 80093a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80093a6:	430b      	orrs	r3, r1
 80093a8:	4313      	orrs	r3, r2
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	0151      	lsls	r1, r2, #5
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	440a      	add	r2, r1
 80093b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
	...

080093d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	785b      	ldrb	r3, [r3, #1]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d161      	bne.n	80094b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009402:	d11f      	bne.n	8009444 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	015a      	lsls	r2, r3, #5
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	4413      	add	r3, r2
 800940c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	0151      	lsls	r1, r2, #5
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	440a      	add	r2, r1
 800941a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800941e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009422:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	0151      	lsls	r1, r2, #5
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	440a      	add	r2, r1
 800943a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800943e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009442:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	f003 030f 	and.w	r3, r3, #15
 8009454:	2101      	movs	r1, #1
 8009456:	fa01 f303 	lsl.w	r3, r1, r3
 800945a:	b29b      	uxth	r3, r3
 800945c:	43db      	mvns	r3, r3
 800945e:	68f9      	ldr	r1, [r7, #12]
 8009460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009464:	4013      	ands	r3, r2
 8009466:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800946e:	69da      	ldr	r2, [r3, #28]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	f003 030f 	and.w	r3, r3, #15
 8009478:	2101      	movs	r1, #1
 800947a:	fa01 f303 	lsl.w	r3, r1, r3
 800947e:	b29b      	uxth	r3, r3
 8009480:	43db      	mvns	r3, r3
 8009482:	68f9      	ldr	r1, [r7, #12]
 8009484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009488:	4013      	ands	r3, r2
 800948a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	0159      	lsls	r1, r3, #5
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	440b      	add	r3, r1
 80094a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a6:	4619      	mov	r1, r3
 80094a8:	4b35      	ldr	r3, [pc, #212]	; (8009580 <USB_DeactivateEndpoint+0x1b0>)
 80094aa:	4013      	ands	r3, r2
 80094ac:	600b      	str	r3, [r1, #0]
 80094ae:	e060      	b.n	8009572 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	015a      	lsls	r2, r3, #5
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094c6:	d11f      	bne.n	8009508 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	0151      	lsls	r1, r2, #5
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	440a      	add	r2, r1
 80094de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	015a      	lsls	r2, r3, #5
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4413      	add	r3, r2
 80094f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	0151      	lsls	r1, r2, #5
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	440a      	add	r2, r1
 80094fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009502:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009506:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	f003 030f 	and.w	r3, r3, #15
 8009518:	2101      	movs	r1, #1
 800951a:	fa01 f303 	lsl.w	r3, r1, r3
 800951e:	041b      	lsls	r3, r3, #16
 8009520:	43db      	mvns	r3, r3
 8009522:	68f9      	ldr	r1, [r7, #12]
 8009524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009528:	4013      	ands	r3, r2
 800952a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009532:	69da      	ldr	r2, [r3, #28]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	f003 030f 	and.w	r3, r3, #15
 800953c:	2101      	movs	r1, #1
 800953e:	fa01 f303 	lsl.w	r3, r1, r3
 8009542:	041b      	lsls	r3, r3, #16
 8009544:	43db      	mvns	r3, r3
 8009546:	68f9      	ldr	r1, [r7, #12]
 8009548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800954c:	4013      	ands	r3, r2
 800954e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4413      	add	r3, r2
 8009558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	0159      	lsls	r1, r3, #5
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	440b      	add	r3, r1
 8009566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800956a:	4619      	mov	r1, r3
 800956c:	4b05      	ldr	r3, [pc, #20]	; (8009584 <USB_DeactivateEndpoint+0x1b4>)
 800956e:	4013      	ands	r3, r2
 8009570:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	ec337800 	.word	0xec337800
 8009584:	eff37800 	.word	0xeff37800

08009588 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b08a      	sub	sp, #40	; 0x28
 800958c:	af02      	add	r7, sp, #8
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	4613      	mov	r3, r2
 8009594:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	785b      	ldrb	r3, [r3, #1]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	f040 815c 	bne.w	8009862 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d132      	bne.n	8009618 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095be:	691b      	ldr	r3, [r3, #16]
 80095c0:	69ba      	ldr	r2, [r7, #24]
 80095c2:	0151      	lsls	r1, r2, #5
 80095c4:	69fa      	ldr	r2, [r7, #28]
 80095c6:	440a      	add	r2, r1
 80095c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	0151      	lsls	r1, r2, #5
 80095e8:	69fa      	ldr	r2, [r7, #28]
 80095ea:	440a      	add	r2, r1
 80095ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	0151      	lsls	r1, r2, #5
 8009608:	69fa      	ldr	r2, [r7, #28]
 800960a:	440a      	add	r2, r1
 800960c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009610:	0cdb      	lsrs	r3, r3, #19
 8009612:	04db      	lsls	r3, r3, #19
 8009614:	6113      	str	r3, [r2, #16]
 8009616:	e074      	b.n	8009702 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	0151      	lsls	r1, r2, #5
 800962a:	69fa      	ldr	r2, [r7, #28]
 800962c:	440a      	add	r2, r1
 800962e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009632:	0cdb      	lsrs	r3, r3, #19
 8009634:	04db      	lsls	r3, r3, #19
 8009636:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	015a      	lsls	r2, r3, #5
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	4413      	add	r3, r2
 8009640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	69ba      	ldr	r2, [r7, #24]
 8009648:	0151      	lsls	r1, r2, #5
 800964a:	69fa      	ldr	r2, [r7, #28]
 800964c:	440a      	add	r2, r1
 800964e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009652:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009656:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800965a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009668:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	6999      	ldr	r1, [r3, #24]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	440b      	add	r3, r1
 8009674:	1e59      	subs	r1, r3, #1
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	fbb1 f3f3 	udiv	r3, r1, r3
 800967e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009680:	4b9d      	ldr	r3, [pc, #628]	; (80098f8 <USB_EPStartXfer+0x370>)
 8009682:	400b      	ands	r3, r1
 8009684:	69b9      	ldr	r1, [r7, #24]
 8009686:	0148      	lsls	r0, r1, #5
 8009688:	69f9      	ldr	r1, [r7, #28]
 800968a:	4401      	add	r1, r0
 800968c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009690:	4313      	orrs	r3, r2
 8009692:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	4413      	add	r3, r2
 800969c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a0:	691a      	ldr	r2, [r3, #16]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096aa:	69b9      	ldr	r1, [r7, #24]
 80096ac:	0148      	lsls	r0, r1, #5
 80096ae:	69f9      	ldr	r1, [r7, #28]
 80096b0:	4401      	add	r1, r0
 80096b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80096b6:	4313      	orrs	r3, r2
 80096b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	791b      	ldrb	r3, [r3, #4]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d11f      	bne.n	8009702 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	015a      	lsls	r2, r3, #5
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	4413      	add	r3, r2
 80096ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	0151      	lsls	r1, r2, #5
 80096d4:	69fa      	ldr	r2, [r7, #28]
 80096d6:	440a      	add	r2, r1
 80096d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80096e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	015a      	lsls	r2, r3, #5
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	69ba      	ldr	r2, [r7, #24]
 80096f2:	0151      	lsls	r1, r2, #5
 80096f4:	69fa      	ldr	r2, [r7, #28]
 80096f6:	440a      	add	r2, r1
 80096f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009700:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009702:	79fb      	ldrb	r3, [r7, #7]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d14b      	bne.n	80097a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d009      	beq.n	8009724 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800971c:	461a      	mov	r2, r3
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	791b      	ldrb	r3, [r3, #4]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d128      	bne.n	800977e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009738:	2b00      	cmp	r3, #0
 800973a:	d110      	bne.n	800975e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	015a      	lsls	r2, r3, #5
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	4413      	add	r3, r2
 8009744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	0151      	lsls	r1, r2, #5
 800974e:	69fa      	ldr	r2, [r7, #28]
 8009750:	440a      	add	r2, r1
 8009752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009756:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	e00f      	b.n	800977e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	015a      	lsls	r2, r3, #5
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	4413      	add	r3, r2
 8009766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	69ba      	ldr	r2, [r7, #24]
 800976e:	0151      	lsls	r1, r2, #5
 8009770:	69fa      	ldr	r2, [r7, #28]
 8009772:	440a      	add	r2, r1
 8009774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800977c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	015a      	lsls	r2, r3, #5
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	4413      	add	r3, r2
 8009786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	0151      	lsls	r1, r2, #5
 8009790:	69fa      	ldr	r2, [r7, #28]
 8009792:	440a      	add	r2, r1
 8009794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009798:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800979c:	6013      	str	r3, [r2, #0]
 800979e:	e133      	b.n	8009a08 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	015a      	lsls	r2, r3, #5
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	4413      	add	r3, r2
 80097a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	0151      	lsls	r1, r2, #5
 80097b2:	69fa      	ldr	r2, [r7, #28]
 80097b4:	440a      	add	r2, r1
 80097b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80097be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	791b      	ldrb	r3, [r3, #4]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d015      	beq.n	80097f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 811b 	beq.w	8009a08 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	f003 030f 	and.w	r3, r3, #15
 80097e2:	2101      	movs	r1, #1
 80097e4:	fa01 f303 	lsl.w	r3, r1, r3
 80097e8:	69f9      	ldr	r1, [r7, #28]
 80097ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097ee:	4313      	orrs	r3, r2
 80097f0:	634b      	str	r3, [r1, #52]	; 0x34
 80097f2:	e109      	b.n	8009a08 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009800:	2b00      	cmp	r3, #0
 8009802:	d110      	bne.n	8009826 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	015a      	lsls	r2, r3, #5
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	4413      	add	r3, r2
 800980c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	69ba      	ldr	r2, [r7, #24]
 8009814:	0151      	lsls	r1, r2, #5
 8009816:	69fa      	ldr	r2, [r7, #28]
 8009818:	440a      	add	r2, r1
 800981a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800981e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	e00f      	b.n	8009846 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	69ba      	ldr	r2, [r7, #24]
 8009836:	0151      	lsls	r1, r2, #5
 8009838:	69fa      	ldr	r2, [r7, #28]
 800983a:	440a      	add	r2, r1
 800983c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009844:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	6919      	ldr	r1, [r3, #16]
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	781a      	ldrb	r2, [r3, #0]
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	b298      	uxth	r0, r3
 8009854:	79fb      	ldrb	r3, [r7, #7]
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	4603      	mov	r3, r0
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f000 fade 	bl	8009e1c <USB_WritePacket>
 8009860:	e0d2      	b.n	8009a08 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	015a      	lsls	r2, r3, #5
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	4413      	add	r3, r2
 800986a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	69ba      	ldr	r2, [r7, #24]
 8009872:	0151      	lsls	r1, r2, #5
 8009874:	69fa      	ldr	r2, [r7, #28]
 8009876:	440a      	add	r2, r1
 8009878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800987c:	0cdb      	lsrs	r3, r3, #19
 800987e:	04db      	lsls	r3, r3, #19
 8009880:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	0151      	lsls	r1, r2, #5
 8009894:	69fa      	ldr	r2, [r7, #28]
 8009896:	440a      	add	r2, r1
 8009898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800989c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d126      	bne.n	80098fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ba:	691a      	ldr	r2, [r3, #16]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098c4:	69b9      	ldr	r1, [r7, #24]
 80098c6:	0148      	lsls	r0, r1, #5
 80098c8:	69f9      	ldr	r1, [r7, #28]
 80098ca:	4401      	add	r1, r0
 80098cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80098d0:	4313      	orrs	r3, r2
 80098d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	0151      	lsls	r1, r2, #5
 80098e6:	69fa      	ldr	r2, [r7, #28]
 80098e8:	440a      	add	r2, r1
 80098ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098f2:	6113      	str	r3, [r2, #16]
 80098f4:	e03a      	b.n	800996c <USB_EPStartXfer+0x3e4>
 80098f6:	bf00      	nop
 80098f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	699a      	ldr	r2, [r3, #24]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	4413      	add	r3, r2
 8009906:	1e5a      	subs	r2, r3, #1
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009910:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	8afa      	ldrh	r2, [r7, #22]
 8009918:	fb03 f202 	mul.w	r2, r3, r2
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	4413      	add	r3, r2
 8009928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800992c:	691a      	ldr	r2, [r3, #16]
 800992e:	8afb      	ldrh	r3, [r7, #22]
 8009930:	04d9      	lsls	r1, r3, #19
 8009932:	4b38      	ldr	r3, [pc, #224]	; (8009a14 <USB_EPStartXfer+0x48c>)
 8009934:	400b      	ands	r3, r1
 8009936:	69b9      	ldr	r1, [r7, #24]
 8009938:	0148      	lsls	r0, r1, #5
 800993a:	69f9      	ldr	r1, [r7, #28]
 800993c:	4401      	add	r1, r0
 800993e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009942:	4313      	orrs	r3, r2
 8009944:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	015a      	lsls	r2, r3, #5
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	4413      	add	r3, r2
 800994e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009952:	691a      	ldr	r2, [r3, #16]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	69db      	ldr	r3, [r3, #28]
 8009958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800995c:	69b9      	ldr	r1, [r7, #24]
 800995e:	0148      	lsls	r0, r1, #5
 8009960:	69f9      	ldr	r1, [r7, #28]
 8009962:	4401      	add	r1, r0
 8009964:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009968:	4313      	orrs	r3, r2
 800996a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800996c:	79fb      	ldrb	r3, [r7, #7]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d10d      	bne.n	800998e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d009      	beq.n	800998e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	6919      	ldr	r1, [r3, #16]
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	015a      	lsls	r2, r3, #5
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	4413      	add	r3, r2
 8009986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998a:	460a      	mov	r2, r1
 800998c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	791b      	ldrb	r3, [r3, #4]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d128      	bne.n	80099e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d110      	bne.n	80099c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	0151      	lsls	r1, r2, #5
 80099b8:	69fa      	ldr	r2, [r7, #28]
 80099ba:	440a      	add	r2, r1
 80099bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099c4:	6013      	str	r3, [r2, #0]
 80099c6:	e00f      	b.n	80099e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	0151      	lsls	r1, r2, #5
 80099da:	69fa      	ldr	r2, [r7, #28]
 80099dc:	440a      	add	r2, r1
 80099de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	69ba      	ldr	r2, [r7, #24]
 80099f8:	0151      	lsls	r1, r2, #5
 80099fa:	69fa      	ldr	r2, [r7, #28]
 80099fc:	440a      	add	r2, r1
 80099fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3720      	adds	r7, #32
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	1ff80000 	.word	0x1ff80000

08009a18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	4613      	mov	r3, r2
 8009a24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	785b      	ldrb	r3, [r3, #1]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	f040 80ce 	bne.w	8009bd6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d132      	bne.n	8009aa8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	0151      	lsls	r1, r2, #5
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	440a      	add	r2, r1
 8009a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	0151      	lsls	r1, r2, #5
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	440a      	add	r2, r1
 8009a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	0151      	lsls	r1, r2, #5
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	440a      	add	r2, r1
 8009a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aa0:	0cdb      	lsrs	r3, r3, #19
 8009aa2:	04db      	lsls	r3, r3, #19
 8009aa4:	6113      	str	r3, [r2, #16]
 8009aa6:	e04e      	b.n	8009b46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	0151      	lsls	r1, r2, #5
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	440a      	add	r2, r1
 8009abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ac2:	0cdb      	lsrs	r3, r3, #19
 8009ac4:	04db      	lsls	r3, r3, #19
 8009ac6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	0151      	lsls	r1, r2, #5
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	440a      	add	r2, r1
 8009ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ae2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ae6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009aea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	699a      	ldr	r2, [r3, #24]
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d903      	bls.n	8009b00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	68da      	ldr	r2, [r3, #12]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	015a      	lsls	r2, r3, #5
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	4413      	add	r3, r2
 8009b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	0151      	lsls	r1, r2, #5
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	440a      	add	r2, r1
 8009b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b2c:	691a      	ldr	r2, [r3, #16]
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b36:	6939      	ldr	r1, [r7, #16]
 8009b38:	0148      	lsls	r0, r1, #5
 8009b3a:	6979      	ldr	r1, [r7, #20]
 8009b3c:	4401      	add	r1, r0
 8009b3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009b42:	4313      	orrs	r3, r2
 8009b44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009b46:	79fb      	ldrb	r3, [r7, #7]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d11e      	bne.n	8009b8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d009      	beq.n	8009b68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	015a      	lsls	r2, r3, #5
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b60:	461a      	mov	r2, r3
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	015a      	lsls	r2, r3, #5
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	0151      	lsls	r1, r2, #5
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	440a      	add	r2, r1
 8009b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	e097      	b.n	8009cba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	0151      	lsls	r1, r2, #5
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	440a      	add	r2, r1
 8009ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ba8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 8083 	beq.w	8009cba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	f003 030f 	and.w	r3, r3, #15
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8009bca:	6979      	ldr	r1, [r7, #20]
 8009bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	634b      	str	r3, [r1, #52]	; 0x34
 8009bd4:	e071      	b.n	8009cba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	0151      	lsls	r1, r2, #5
 8009be8:	697a      	ldr	r2, [r7, #20]
 8009bea:	440a      	add	r2, r1
 8009bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bf0:	0cdb      	lsrs	r3, r3, #19
 8009bf2:	04db      	lsls	r3, r3, #19
 8009bf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	0151      	lsls	r1, r2, #5
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	440a      	add	r2, r1
 8009c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d003      	beq.n	8009c2a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	68da      	ldr	r2, [r3, #12]
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	015a      	lsls	r2, r3, #5
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	0151      	lsls	r1, r2, #5
 8009c44:	697a      	ldr	r2, [r7, #20]
 8009c46:	440a      	add	r2, r1
 8009c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5e:	691a      	ldr	r2, [r3, #16]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	69db      	ldr	r3, [r3, #28]
 8009c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c68:	6939      	ldr	r1, [r7, #16]
 8009c6a:	0148      	lsls	r0, r1, #5
 8009c6c:	6979      	ldr	r1, [r7, #20]
 8009c6e:	4401      	add	r1, r0
 8009c70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c74:	4313      	orrs	r3, r2
 8009c76:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d10d      	bne.n	8009c9a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d009      	beq.n	8009c9a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	6919      	ldr	r1, [r3, #16]
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c96:	460a      	mov	r2, r1
 8009c98:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	015a      	lsls	r2, r3, #5
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	0151      	lsls	r1, r2, #5
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	440a      	add	r2, r1
 8009cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009cb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	371c      	adds	r7, #28
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	785b      	ldrb	r3, [r3, #1]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d14a      	bne.n	8009d7c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cfe:	f040 8086 	bne.w	8009e0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	7812      	ldrb	r2, [r2, #0]
 8009d16:	0151      	lsls	r1, r2, #5
 8009d18:	693a      	ldr	r2, [r7, #16]
 8009d1a:	440a      	add	r2, r1
 8009d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d24:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	015a      	lsls	r2, r3, #5
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	7812      	ldrb	r2, [r2, #0]
 8009d3a:	0151      	lsls	r1, r2, #5
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	440a      	add	r2, r1
 8009d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f242 7210 	movw	r2, #10000	; 0x2710
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d902      	bls.n	8009d60 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8009d5e:	e056      	b.n	8009e0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	015a      	lsls	r2, r3, #5
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	4413      	add	r3, r2
 8009d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d78:	d0e7      	beq.n	8009d4a <USB_EPStopXfer+0x82>
 8009d7a:	e048      	b.n	8009e0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	015a      	lsls	r2, r3, #5
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	4413      	add	r3, r2
 8009d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d94:	d13b      	bne.n	8009e0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	7812      	ldrb	r2, [r2, #0]
 8009daa:	0151      	lsls	r1, r2, #5
 8009dac:	693a      	ldr	r2, [r7, #16]
 8009dae:	440a      	add	r2, r1
 8009db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009db8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	7812      	ldrb	r2, [r2, #0]
 8009dce:	0151      	lsls	r1, r2, #5
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	440a      	add	r2, r1
 8009dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ddc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3301      	adds	r3, #1
 8009de2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f242 7210 	movw	r2, #10000	; 0x2710
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d902      	bls.n	8009df4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	75fb      	strb	r3, [r7, #23]
          break;
 8009df2:	e00c      	b.n	8009e0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e0c:	d0e7      	beq.n	8009dde <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	371c      	adds	r7, #28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b089      	sub	sp, #36	; 0x24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	4611      	mov	r1, r2
 8009e28:	461a      	mov	r2, r3
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	71fb      	strb	r3, [r7, #7]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009e3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d123      	bne.n	8009e8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009e42:	88bb      	ldrh	r3, [r7, #4]
 8009e44:	3303      	adds	r3, #3
 8009e46:	089b      	lsrs	r3, r3, #2
 8009e48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	61bb      	str	r3, [r7, #24]
 8009e4e:	e018      	b.n	8009e82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	031a      	lsls	r2, r3, #12
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	3301      	adds	r3, #1
 8009e68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	3301      	adds	r3, #1
 8009e74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	61bb      	str	r3, [r7, #24]
 8009e82:	69ba      	ldr	r2, [r7, #24]
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d3e2      	bcc.n	8009e50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3724      	adds	r7, #36	; 0x24
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b08b      	sub	sp, #44	; 0x2c
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009eae:	88fb      	ldrh	r3, [r7, #6]
 8009eb0:	089b      	lsrs	r3, r3, #2
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009eb6:	88fb      	ldrh	r3, [r7, #6]
 8009eb8:	f003 0303 	and.w	r3, r3, #3
 8009ebc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	623b      	str	r3, [r7, #32]
 8009ec2:	e014      	b.n	8009eee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ece:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed8:	3301      	adds	r3, #1
 8009eda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	3301      	adds	r3, #1
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	3301      	adds	r3, #1
 8009eec:	623b      	str	r3, [r7, #32]
 8009eee:	6a3a      	ldr	r2, [r7, #32]
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d3e6      	bcc.n	8009ec4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009ef6:	8bfb      	ldrh	r3, [r7, #30]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d01e      	beq.n	8009f3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f06:	461a      	mov	r2, r3
 8009f08:	f107 0310 	add.w	r3, r7, #16
 8009f0c:	6812      	ldr	r2, [r2, #0]
 8009f0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009f10:	693a      	ldr	r2, [r7, #16]
 8009f12:	6a3b      	ldr	r3, [r7, #32]
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	fa22 f303 	lsr.w	r3, r2, r3
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	701a      	strb	r2, [r3, #0]
      i++;
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	3301      	adds	r3, #1
 8009f26:	623b      	str	r3, [r7, #32]
      pDest++;
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009f2e:	8bfb      	ldrh	r3, [r7, #30]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009f34:	8bfb      	ldrh	r3, [r7, #30]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1ea      	bne.n	8009f10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	372c      	adds	r7, #44	; 0x2c
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	785b      	ldrb	r3, [r3, #1]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d12c      	bne.n	8009fbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	015a      	lsls	r2, r3, #5
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	db12      	blt.n	8009f9c <USB_EPSetStall+0x54>
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00f      	beq.n	8009f9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	0151      	lsls	r1, r2, #5
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	440a      	add	r2, r1
 8009f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	0151      	lsls	r1, r2, #5
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	440a      	add	r2, r1
 8009fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	e02b      	b.n	800a016 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	db12      	blt.n	8009ff6 <USB_EPSetStall+0xae>
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00f      	beq.n	8009ff6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	015a      	lsls	r2, r3, #5
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	4413      	add	r3, r2
 8009fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	0151      	lsls	r1, r2, #5
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	440a      	add	r2, r1
 8009fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ff0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ff4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	0151      	lsls	r1, r2, #5
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	440a      	add	r2, r1
 800a00c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a014:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3714      	adds	r7, #20
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	785b      	ldrb	r3, [r3, #1]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d128      	bne.n	800a092 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	0151      	lsls	r1, r2, #5
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	440a      	add	r2, r1
 800a056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a05a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a05e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	791b      	ldrb	r3, [r3, #4]
 800a064:	2b03      	cmp	r3, #3
 800a066:	d003      	beq.n	800a070 <USB_EPClearStall+0x4c>
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	791b      	ldrb	r3, [r3, #4]
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d138      	bne.n	800a0e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	015a      	lsls	r2, r3, #5
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	4413      	add	r3, r2
 800a078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	0151      	lsls	r1, r2, #5
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	440a      	add	r2, r1
 800a086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a08a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	e027      	b.n	800a0e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	015a      	lsls	r2, r3, #5
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	4413      	add	r3, r2
 800a09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	0151      	lsls	r1, r2, #5
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	440a      	add	r2, r1
 800a0a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	791b      	ldrb	r3, [r3, #4]
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d003      	beq.n	800a0c2 <USB_EPClearStall+0x9e>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	791b      	ldrb	r3, [r3, #4]
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d10f      	bne.n	800a0e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	015a      	lsls	r2, r3, #5
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	0151      	lsls	r1, r2, #5
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	440a      	add	r2, r1
 800a0d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3714      	adds	r7, #20
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a10e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a112:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	78fb      	ldrb	r3, [r7, #3]
 800a11e:	011b      	lsls	r3, r3, #4
 800a120:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a124:	68f9      	ldr	r1, [r7, #12]
 800a126:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a12a:	4313      	orrs	r3, r2
 800a12c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3714      	adds	r7, #20
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a156:	f023 0303 	bic.w	r3, r3, #3
 800a15a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a16a:	f023 0302 	bic.w	r3, r3, #2
 800a16e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3714      	adds	r7, #20
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a17e:	b480      	push	{r7}
 800a180:	b085      	sub	sp, #20
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a198:	f023 0303 	bic.w	r3, r3, #3
 800a19c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1ac:	f043 0302 	orr.w	r3, r3, #2
 800a1b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b085      	sub	sp, #20
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a202:	69db      	ldr	r3, [r3, #28]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	4013      	ands	r3, r2
 800a208:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	0c1b      	lsrs	r3, r3, #16
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b085      	sub	sp, #20
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	4013      	ands	r3, r2
 800a23c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	b29b      	uxth	r3, r3
}
 800a242:	4618      	mov	r0, r3
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a24e:	b480      	push	{r7}
 800a250:	b085      	sub	sp, #20
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	460b      	mov	r3, r1
 800a258:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a25e:	78fb      	ldrb	r3, [r7, #3]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	4013      	ands	r3, r2
 800a27a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a27c:	68bb      	ldr	r3, [r7, #8]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b087      	sub	sp, #28
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	460b      	mov	r3, r1
 800a294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a2ae:	78fb      	ldrb	r3, [r7, #3]
 800a2b0:	f003 030f 	and.w	r3, r3, #15
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ba:	01db      	lsls	r3, r3, #7
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2c4:	78fb      	ldrb	r3, [r7, #3]
 800a2c6:	015a      	lsls	r2, r3, #5
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2d8:	68bb      	ldr	r3, [r7, #8]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	371c      	adds	r7, #28
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b083      	sub	sp, #12
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	f003 0301 	and.w	r3, r3, #1
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a302:	b480      	push	{r7}
 800a304:	b085      	sub	sp, #20
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a31c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a320:	f023 0307 	bic.w	r3, r3, #7
 800a324:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a338:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	460b      	mov	r3, r1
 800a352:	607a      	str	r2, [r7, #4]
 800a354:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	333c      	adds	r3, #60	; 0x3c
 800a35e:	3304      	adds	r3, #4
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	4a26      	ldr	r2, [pc, #152]	; (800a400 <USB_EP0_OutStart+0xb8>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d90a      	bls.n	800a382 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a37c:	d101      	bne.n	800a382 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	e037      	b.n	800a3f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a388:	461a      	mov	r2, r3
 800a38a:	2300      	movs	r3, #0
 800a38c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a39c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3b0:	f043 0318 	orr.w	r3, r3, #24
 800a3b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a3c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a3ca:	7afb      	ldrb	r3, [r7, #11]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d10f      	bne.n	800a3f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a3ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	371c      	adds	r7, #28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	4f54300a 	.word	0x4f54300a

0800a404 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a40c:	2300      	movs	r3, #0
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3301      	adds	r3, #1
 800a414:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	4a13      	ldr	r2, [pc, #76]	; (800a468 <USB_CoreReset+0x64>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d901      	bls.n	800a422 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e01b      	b.n	800a45a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	2b00      	cmp	r3, #0
 800a428:	daf2      	bge.n	800a410 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	f043 0201 	orr.w	r2, r3, #1
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	3301      	adds	r3, #1
 800a43e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	4a09      	ldr	r2, [pc, #36]	; (800a468 <USB_CoreReset+0x64>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d901      	bls.n	800a44c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e006      	b.n	800a45a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	f003 0301 	and.w	r3, r3, #1
 800a454:	2b01      	cmp	r3, #1
 800a456:	d0f0      	beq.n	800a43a <USB_CoreReset+0x36>

  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	00030d40 	.word	0x00030d40

0800a46c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	460b      	mov	r3, r1
 800a476:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a478:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a47c:	f005 fa0e 	bl	800f89c <USBD_static_malloc>
 800a480:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d109      	bne.n	800a49c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	32b0      	adds	r2, #176	; 0xb0
 800a492:	2100      	movs	r1, #0
 800a494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a498:	2302      	movs	r3, #2
 800a49a:	e0d4      	b.n	800a646 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a49c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f00e f9f0 	bl	8018888 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	32b0      	adds	r2, #176	; 0xb0
 800a4b2:	68f9      	ldr	r1, [r7, #12]
 800a4b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	32b0      	adds	r2, #176	; 0xb0
 800a4c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	7c1b      	ldrb	r3, [r3, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d138      	bne.n	800a546 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a4d4:	4b5e      	ldr	r3, [pc, #376]	; (800a650 <USBD_CDC_Init+0x1e4>)
 800a4d6:	7819      	ldrb	r1, [r3, #0]
 800a4d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4dc:	2202      	movs	r2, #2
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f005 f8b9 	bl	800f656 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a4e4:	4b5a      	ldr	r3, [pc, #360]	; (800a650 <USBD_CDC_Init+0x1e4>)
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	f003 020f 	and.w	r2, r3, #15
 800a4ec:	6879      	ldr	r1, [r7, #4]
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4413      	add	r3, r2
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	440b      	add	r3, r1
 800a4f8:	3324      	adds	r3, #36	; 0x24
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a4fe:	4b55      	ldr	r3, [pc, #340]	; (800a654 <USBD_CDC_Init+0x1e8>)
 800a500:	7819      	ldrb	r1, [r3, #0]
 800a502:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a506:	2202      	movs	r2, #2
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f005 f8a4 	bl	800f656 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a50e:	4b51      	ldr	r3, [pc, #324]	; (800a654 <USBD_CDC_Init+0x1e8>)
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	f003 020f 	and.w	r2, r3, #15
 800a516:	6879      	ldr	r1, [r7, #4]
 800a518:	4613      	mov	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	440b      	add	r3, r1
 800a522:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a526:	2201      	movs	r2, #1
 800a528:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a52a:	4b4b      	ldr	r3, [pc, #300]	; (800a658 <USBD_CDC_Init+0x1ec>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	f003 020f 	and.w	r2, r3, #15
 800a532:	6879      	ldr	r1, [r7, #4]
 800a534:	4613      	mov	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4413      	add	r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	440b      	add	r3, r1
 800a53e:	3326      	adds	r3, #38	; 0x26
 800a540:	2210      	movs	r2, #16
 800a542:	801a      	strh	r2, [r3, #0]
 800a544:	e035      	b.n	800a5b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a546:	4b42      	ldr	r3, [pc, #264]	; (800a650 <USBD_CDC_Init+0x1e4>)
 800a548:	7819      	ldrb	r1, [r3, #0]
 800a54a:	2340      	movs	r3, #64	; 0x40
 800a54c:	2202      	movs	r2, #2
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f005 f881 	bl	800f656 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a554:	4b3e      	ldr	r3, [pc, #248]	; (800a650 <USBD_CDC_Init+0x1e4>)
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	f003 020f 	and.w	r2, r3, #15
 800a55c:	6879      	ldr	r1, [r7, #4]
 800a55e:	4613      	mov	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4413      	add	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	440b      	add	r3, r1
 800a568:	3324      	adds	r3, #36	; 0x24
 800a56a:	2201      	movs	r2, #1
 800a56c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a56e:	4b39      	ldr	r3, [pc, #228]	; (800a654 <USBD_CDC_Init+0x1e8>)
 800a570:	7819      	ldrb	r1, [r3, #0]
 800a572:	2340      	movs	r3, #64	; 0x40
 800a574:	2202      	movs	r2, #2
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f005 f86d 	bl	800f656 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a57c:	4b35      	ldr	r3, [pc, #212]	; (800a654 <USBD_CDC_Init+0x1e8>)
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	f003 020f 	and.w	r2, r3, #15
 800a584:	6879      	ldr	r1, [r7, #4]
 800a586:	4613      	mov	r3, r2
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	4413      	add	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	440b      	add	r3, r1
 800a590:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a594:	2201      	movs	r2, #1
 800a596:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a598:	4b2f      	ldr	r3, [pc, #188]	; (800a658 <USBD_CDC_Init+0x1ec>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	f003 020f 	and.w	r2, r3, #15
 800a5a0:	6879      	ldr	r1, [r7, #4]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	4413      	add	r3, r2
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	440b      	add	r3, r1
 800a5ac:	3326      	adds	r3, #38	; 0x26
 800a5ae:	2210      	movs	r2, #16
 800a5b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a5b2:	4b29      	ldr	r3, [pc, #164]	; (800a658 <USBD_CDC_Init+0x1ec>)
 800a5b4:	7819      	ldrb	r1, [r3, #0]
 800a5b6:	2308      	movs	r3, #8
 800a5b8:	2203      	movs	r2, #3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f005 f84b 	bl	800f656 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a5c0:	4b25      	ldr	r3, [pc, #148]	; (800a658 <USBD_CDC_Init+0x1ec>)
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	f003 020f 	and.w	r2, r3, #15
 800a5c8:	6879      	ldr	r1, [r7, #4]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	440b      	add	r3, r1
 800a5d4:	3324      	adds	r3, #36	; 0x24
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	33b0      	adds	r3, #176	; 0xb0
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a610:	2302      	movs	r3, #2
 800a612:	e018      	b.n	800a646 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	7c1b      	ldrb	r3, [r3, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10a      	bne.n	800a632 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a61c:	4b0d      	ldr	r3, [pc, #52]	; (800a654 <USBD_CDC_Init+0x1e8>)
 800a61e:	7819      	ldrb	r1, [r3, #0]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f005 f902 	bl	800f834 <USBD_LL_PrepareReceive>
 800a630:	e008      	b.n	800a644 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a632:	4b08      	ldr	r3, [pc, #32]	; (800a654 <USBD_CDC_Init+0x1e8>)
 800a634:	7819      	ldrb	r1, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a63c:	2340      	movs	r3, #64	; 0x40
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f005 f8f8 	bl	800f834 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	20000097 	.word	0x20000097
 800a654:	20000098 	.word	0x20000098
 800a658:	20000099 	.word	0x20000099

0800a65c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a668:	4b3a      	ldr	r3, [pc, #232]	; (800a754 <USBD_CDC_DeInit+0xf8>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	4619      	mov	r1, r3
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f005 f817 	bl	800f6a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a674:	4b37      	ldr	r3, [pc, #220]	; (800a754 <USBD_CDC_DeInit+0xf8>)
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	f003 020f 	and.w	r2, r3, #15
 800a67c:	6879      	ldr	r1, [r7, #4]
 800a67e:	4613      	mov	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	440b      	add	r3, r1
 800a688:	3324      	adds	r3, #36	; 0x24
 800a68a:	2200      	movs	r2, #0
 800a68c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a68e:	4b32      	ldr	r3, [pc, #200]	; (800a758 <USBD_CDC_DeInit+0xfc>)
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f005 f804 	bl	800f6a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a69a:	4b2f      	ldr	r3, [pc, #188]	; (800a758 <USBD_CDC_DeInit+0xfc>)
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	f003 020f 	and.w	r2, r3, #15
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	440b      	add	r3, r1
 800a6ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a6b6:	4b29      	ldr	r3, [pc, #164]	; (800a75c <USBD_CDC_DeInit+0x100>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f004 fff0 	bl	800f6a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a6c2:	4b26      	ldr	r3, [pc, #152]	; (800a75c <USBD_CDC_DeInit+0x100>)
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	f003 020f 	and.w	r2, r3, #15
 800a6ca:	6879      	ldr	r1, [r7, #4]
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4413      	add	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	440b      	add	r3, r1
 800a6d6:	3324      	adds	r3, #36	; 0x24
 800a6d8:	2200      	movs	r2, #0
 800a6da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a6dc:	4b1f      	ldr	r3, [pc, #124]	; (800a75c <USBD_CDC_DeInit+0x100>)
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	f003 020f 	and.w	r2, r3, #15
 800a6e4:	6879      	ldr	r1, [r7, #4]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4413      	add	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	440b      	add	r3, r1
 800a6f0:	3326      	adds	r3, #38	; 0x26
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	32b0      	adds	r2, #176	; 0xb0
 800a700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d01f      	beq.n	800a748 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	33b0      	adds	r3, #176	; 0xb0
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	4413      	add	r3, r2
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	32b0      	adds	r2, #176	; 0xb0
 800a726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f005 f8c4 	bl	800f8b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	32b0      	adds	r2, #176	; 0xb0
 800a73a:	2100      	movs	r1, #0
 800a73c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	20000097 	.word	0x20000097
 800a758:	20000098 	.word	0x20000098
 800a75c:	20000099 	.word	0x20000099

0800a760 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	32b0      	adds	r2, #176	; 0xb0
 800a774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a778:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a77a:	2300      	movs	r3, #0
 800a77c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e0bf      	b.n	800a910 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d050      	beq.n	800a83e <USBD_CDC_Setup+0xde>
 800a79c:	2b20      	cmp	r3, #32
 800a79e:	f040 80af 	bne.w	800a900 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	88db      	ldrh	r3, [r3, #6]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d03a      	beq.n	800a820 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	b25b      	sxtb	r3, r3
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	da1b      	bge.n	800a7ec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	33b0      	adds	r3, #176	; 0xb0
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a7ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	88d2      	ldrh	r2, [r2, #6]
 800a7d0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	88db      	ldrh	r3, [r3, #6]
 800a7d6:	2b07      	cmp	r3, #7
 800a7d8:	bf28      	it	cs
 800a7da:	2307      	movcs	r3, #7
 800a7dc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	89fa      	ldrh	r2, [r7, #14]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f001 fd43 	bl	800c270 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a7ea:	e090      	b.n	800a90e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	785a      	ldrb	r2, [r3, #1]
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	88db      	ldrh	r3, [r3, #6]
 800a7fa:	2b3f      	cmp	r3, #63	; 0x3f
 800a7fc:	d803      	bhi.n	800a806 <USBD_CDC_Setup+0xa6>
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	88db      	ldrh	r3, [r3, #6]
 800a802:	b2da      	uxtb	r2, r3
 800a804:	e000      	b.n	800a808 <USBD_CDC_Setup+0xa8>
 800a806:	2240      	movs	r2, #64	; 0x40
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a80e:	6939      	ldr	r1, [r7, #16]
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a816:	461a      	mov	r2, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f001 fd55 	bl	800c2c8 <USBD_CtlPrepareRx>
      break;
 800a81e:	e076      	b.n	800a90e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	33b0      	adds	r3, #176	; 0xb0
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4413      	add	r3, r2
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	7850      	ldrb	r0, [r2, #1]
 800a836:	2200      	movs	r2, #0
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	4798      	blx	r3
      break;
 800a83c:	e067      	b.n	800a90e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	785b      	ldrb	r3, [r3, #1]
 800a842:	2b0b      	cmp	r3, #11
 800a844:	d851      	bhi.n	800a8ea <USBD_CDC_Setup+0x18a>
 800a846:	a201      	add	r2, pc, #4	; (adr r2, 800a84c <USBD_CDC_Setup+0xec>)
 800a848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84c:	0800a87d 	.word	0x0800a87d
 800a850:	0800a8f9 	.word	0x0800a8f9
 800a854:	0800a8eb 	.word	0x0800a8eb
 800a858:	0800a8eb 	.word	0x0800a8eb
 800a85c:	0800a8eb 	.word	0x0800a8eb
 800a860:	0800a8eb 	.word	0x0800a8eb
 800a864:	0800a8eb 	.word	0x0800a8eb
 800a868:	0800a8eb 	.word	0x0800a8eb
 800a86c:	0800a8eb 	.word	0x0800a8eb
 800a870:	0800a8eb 	.word	0x0800a8eb
 800a874:	0800a8a7 	.word	0x0800a8a7
 800a878:	0800a8d1 	.word	0x0800a8d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b03      	cmp	r3, #3
 800a886:	d107      	bne.n	800a898 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a888:	f107 030a 	add.w	r3, r7, #10
 800a88c:	2202      	movs	r2, #2
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f001 fced 	bl	800c270 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a896:	e032      	b.n	800a8fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f001 fc77 	bl	800c18e <USBD_CtlError>
            ret = USBD_FAIL;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	75fb      	strb	r3, [r7, #23]
          break;
 800a8a4:	e02b      	b.n	800a8fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d107      	bne.n	800a8c2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a8b2:	f107 030d 	add.w	r3, r7, #13
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f001 fcd8 	bl	800c270 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a8c0:	e01d      	b.n	800a8fe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a8c2:	6839      	ldr	r1, [r7, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f001 fc62 	bl	800c18e <USBD_CtlError>
            ret = USBD_FAIL;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	75fb      	strb	r3, [r7, #23]
          break;
 800a8ce:	e016      	b.n	800a8fe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2b03      	cmp	r3, #3
 800a8da:	d00f      	beq.n	800a8fc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a8dc:	6839      	ldr	r1, [r7, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f001 fc55 	bl	800c18e <USBD_CtlError>
            ret = USBD_FAIL;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a8e8:	e008      	b.n	800a8fc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f001 fc4e 	bl	800c18e <USBD_CtlError>
          ret = USBD_FAIL;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	75fb      	strb	r3, [r7, #23]
          break;
 800a8f6:	e002      	b.n	800a8fe <USBD_CDC_Setup+0x19e>
          break;
 800a8f8:	bf00      	nop
 800a8fa:	e008      	b.n	800a90e <USBD_CDC_Setup+0x1ae>
          break;
 800a8fc:	bf00      	nop
      }
      break;
 800a8fe:	e006      	b.n	800a90e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f001 fc43 	bl	800c18e <USBD_CtlError>
      ret = USBD_FAIL;
 800a908:	2303      	movs	r3, #3
 800a90a:	75fb      	strb	r3, [r7, #23]
      break;
 800a90c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	460b      	mov	r3, r1
 800a922:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a92a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	32b0      	adds	r2, #176	; 0xb0
 800a936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a93e:	2303      	movs	r3, #3
 800a940:	e065      	b.n	800aa0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	32b0      	adds	r2, #176	; 0xb0
 800a94c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a950:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a952:	78fb      	ldrb	r3, [r7, #3]
 800a954:	f003 020f 	and.w	r2, r3, #15
 800a958:	6879      	ldr	r1, [r7, #4]
 800a95a:	4613      	mov	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4413      	add	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	440b      	add	r3, r1
 800a964:	3318      	adds	r3, #24
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d02f      	beq.n	800a9cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a96c:	78fb      	ldrb	r3, [r7, #3]
 800a96e:	f003 020f 	and.w	r2, r3, #15
 800a972:	6879      	ldr	r1, [r7, #4]
 800a974:	4613      	mov	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	440b      	add	r3, r1
 800a97e:	3318      	adds	r3, #24
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	78fb      	ldrb	r3, [r7, #3]
 800a984:	f003 010f 	and.w	r1, r3, #15
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	460b      	mov	r3, r1
 800a98c:	00db      	lsls	r3, r3, #3
 800a98e:	440b      	add	r3, r1
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	4403      	add	r3, r0
 800a994:	3348      	adds	r3, #72	; 0x48
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	fbb2 f1f3 	udiv	r1, r2, r3
 800a99c:	fb01 f303 	mul.w	r3, r1, r3
 800a9a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d112      	bne.n	800a9cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a9a6:	78fb      	ldrb	r3, [r7, #3]
 800a9a8:	f003 020f 	and.w	r2, r3, #15
 800a9ac:	6879      	ldr	r1, [r7, #4]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	440b      	add	r3, r1
 800a9b8:	3318      	adds	r3, #24
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a9be:	78f9      	ldrb	r1, [r7, #3]
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f004 ff14 	bl	800f7f2 <USBD_LL_Transmit>
 800a9ca:	e01f      	b.n	800aa0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	33b0      	adds	r3, #176	; 0xb0
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d010      	beq.n	800aa0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	33b0      	adds	r3, #176	; 0xb0
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4413      	add	r3, r2
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800aa02:	68ba      	ldr	r2, [r7, #8]
 800aa04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800aa08:	78fa      	ldrb	r2, [r7, #3]
 800aa0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b084      	sub	sp, #16
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
 800aa1e:	460b      	mov	r3, r1
 800aa20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	32b0      	adds	r2, #176	; 0xb0
 800aa2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	32b0      	adds	r2, #176	; 0xb0
 800aa3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d101      	bne.n	800aa48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e01a      	b.n	800aa7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa48:	78fb      	ldrb	r3, [r7, #3]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f004 ff12 	bl	800f876 <USBD_LL_GetRxDataSize>
 800aa52:	4602      	mov	r2, r0
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	33b0      	adds	r3, #176	; 0xb0
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4413      	add	r3, r2
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aa78:	4611      	mov	r1, r2
 800aa7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b084      	sub	sp, #16
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	32b0      	adds	r2, #176	; 0xb0
 800aa98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d101      	bne.n	800aaa8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e025      	b.n	800aaf4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	33b0      	adds	r3, #176	; 0xb0
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4413      	add	r3, r2
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d01a      	beq.n	800aaf2 <USBD_CDC_EP0_RxReady+0x6c>
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aac2:	2bff      	cmp	r3, #255	; 0xff
 800aac4:	d015      	beq.n	800aaf2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	33b0      	adds	r3, #176	; 0xb0
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800aade:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aae6:	b292      	uxth	r2, r2
 800aae8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	22ff      	movs	r2, #255	; 0xff
 800aaee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab04:	2182      	movs	r1, #130	; 0x82
 800ab06:	4818      	ldr	r0, [pc, #96]	; (800ab68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ab08:	f000 fd09 	bl	800b51e <USBD_GetEpDesc>
 800ab0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab0e:	2101      	movs	r1, #1
 800ab10:	4815      	ldr	r0, [pc, #84]	; (800ab68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ab12:	f000 fd04 	bl	800b51e <USBD_GetEpDesc>
 800ab16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab18:	2181      	movs	r1, #129	; 0x81
 800ab1a:	4813      	ldr	r0, [pc, #76]	; (800ab68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ab1c:	f000 fcff 	bl	800b51e <USBD_GetEpDesc>
 800ab20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	2210      	movs	r2, #16
 800ab2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d006      	beq.n	800ab42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab3c:	711a      	strb	r2, [r3, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d006      	beq.n	800ab56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab50:	711a      	strb	r2, [r3, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2243      	movs	r2, #67	; 0x43
 800ab5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ab5c:	4b02      	ldr	r3, [pc, #8]	; (800ab68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	20000054 	.word	0x20000054

0800ab6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b086      	sub	sp, #24
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ab74:	2182      	movs	r1, #130	; 0x82
 800ab76:	4818      	ldr	r0, [pc, #96]	; (800abd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab78:	f000 fcd1 	bl	800b51e <USBD_GetEpDesc>
 800ab7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ab7e:	2101      	movs	r1, #1
 800ab80:	4815      	ldr	r0, [pc, #84]	; (800abd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab82:	f000 fccc 	bl	800b51e <USBD_GetEpDesc>
 800ab86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ab88:	2181      	movs	r1, #129	; 0x81
 800ab8a:	4813      	ldr	r0, [pc, #76]	; (800abd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ab8c:	f000 fcc7 	bl	800b51e <USBD_GetEpDesc>
 800ab90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d002      	beq.n	800ab9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	2210      	movs	r2, #16
 800ab9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d006      	beq.n	800abb2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	2200      	movs	r2, #0
 800aba8:	711a      	strb	r2, [r3, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f042 0202 	orr.w	r2, r2, #2
 800abb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d006      	beq.n	800abc6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	711a      	strb	r2, [r3, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f042 0202 	orr.w	r2, r2, #2
 800abc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2243      	movs	r2, #67	; 0x43
 800abca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800abcc:	4b02      	ldr	r3, [pc, #8]	; (800abd8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20000054 	.word	0x20000054

0800abdc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800abe4:	2182      	movs	r1, #130	; 0x82
 800abe6:	4818      	ldr	r0, [pc, #96]	; (800ac48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abe8:	f000 fc99 	bl	800b51e <USBD_GetEpDesc>
 800abec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800abee:	2101      	movs	r1, #1
 800abf0:	4815      	ldr	r0, [pc, #84]	; (800ac48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abf2:	f000 fc94 	bl	800b51e <USBD_GetEpDesc>
 800abf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800abf8:	2181      	movs	r1, #129	; 0x81
 800abfa:	4813      	ldr	r0, [pc, #76]	; (800ac48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800abfc:	f000 fc8f 	bl	800b51e <USBD_GetEpDesc>
 800ac00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d002      	beq.n	800ac0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	2210      	movs	r2, #16
 800ac0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d006      	beq.n	800ac22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac1c:	711a      	strb	r2, [r3, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d006      	beq.n	800ac36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac30:	711a      	strb	r2, [r3, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2243      	movs	r2, #67	; 0x43
 800ac3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac3c:	4b02      	ldr	r3, [pc, #8]	; (800ac48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3718      	adds	r7, #24
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	20000054 	.word	0x20000054

0800ac4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	220a      	movs	r2, #10
 800ac58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ac5a:	4b03      	ldr	r3, [pc, #12]	; (800ac68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	20000010 	.word	0x20000010

0800ac6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	e009      	b.n	800ac94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	33b0      	adds	r3, #176	; 0xb0
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4413      	add	r3, r2
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b087      	sub	sp, #28
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	32b0      	adds	r2, #176	; 0xb0
 800acb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800acc2:	2303      	movs	r3, #3
 800acc4:	e008      	b.n	800acd8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	371c      	adds	r7, #28
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	32b0      	adds	r2, #176	; 0xb0
 800acf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acfc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e004      	b.n	800ad12 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
	...

0800ad20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	32b0      	adds	r2, #176	; 0xb0
 800ad32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	32b0      	adds	r2, #176	; 0xb0
 800ad42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d101      	bne.n	800ad4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	e018      	b.n	800ad80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	7c1b      	ldrb	r3, [r3, #16]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10a      	bne.n	800ad6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad56:	4b0c      	ldr	r3, [pc, #48]	; (800ad88 <USBD_CDC_ReceivePacket+0x68>)
 800ad58:	7819      	ldrb	r1, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f004 fd65 	bl	800f834 <USBD_LL_PrepareReceive>
 800ad6a:	e008      	b.n	800ad7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad6c:	4b06      	ldr	r3, [pc, #24]	; (800ad88 <USBD_CDC_ReceivePacket+0x68>)
 800ad6e:	7819      	ldrb	r1, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ad76:	2340      	movs	r3, #64	; 0x40
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f004 fd5b 	bl	800f834 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	20000098 	.word	0x20000098

0800ad8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	4613      	mov	r3, r2
 800ad98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e01f      	b.n	800ade4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2200      	movs	r2, #0
 800adb0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	79fa      	ldrb	r2, [r7, #7]
 800add6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f004 fbd5 	bl	800f588 <USBD_LL_Init>
 800adde:	4603      	mov	r3, r0
 800ade0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800adf6:	2300      	movs	r3, #0
 800adf8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e025      	b.n	800ae50 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	32ae      	adds	r2, #174	; 0xae
 800ae16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00f      	beq.n	800ae40 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	32ae      	adds	r2, #174	; 0xae
 800ae2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae30:	f107 020e 	add.w	r2, r7, #14
 800ae34:	4610      	mov	r0, r2
 800ae36:	4798      	blx	r3
 800ae38:	4602      	mov	r2, r0
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ae46:	1c5a      	adds	r2, r3, #1
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f004 fbdd 	bl	800f620 <USBD_LL_Start>
 800ae66:	4603      	mov	r3, r0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b084      	sub	sp, #16
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	460b      	mov	r3, r1
 800ae90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae92:	2300      	movs	r3, #0
 800ae94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d009      	beq.n	800aeb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	78fa      	ldrb	r2, [r7, #3]
 800aeaa:	4611      	mov	r1, r2
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	4798      	blx	r3
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b084      	sub	sp, #16
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	460b      	mov	r3, r1
 800aec8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeca:	2300      	movs	r3, #0
 800aecc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	78fa      	ldrb	r2, [r7, #3]
 800aed8:	4611      	mov	r1, r2
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	4798      	blx	r3
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aee4:	2303      	movs	r3, #3
 800aee6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af02:	6839      	ldr	r1, [r7, #0]
 800af04:	4618      	mov	r0, r3
 800af06:	f001 f908 	bl	800c11a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800af18:	461a      	mov	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af26:	f003 031f 	and.w	r3, r3, #31
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d01a      	beq.n	800af64 <USBD_LL_SetupStage+0x72>
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d822      	bhi.n	800af78 <USBD_LL_SetupStage+0x86>
 800af32:	2b00      	cmp	r3, #0
 800af34:	d002      	beq.n	800af3c <USBD_LL_SetupStage+0x4a>
 800af36:	2b01      	cmp	r3, #1
 800af38:	d00a      	beq.n	800af50 <USBD_LL_SetupStage+0x5e>
 800af3a:	e01d      	b.n	800af78 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fb5f 	bl	800b608 <USBD_StdDevReq>
 800af4a:	4603      	mov	r3, r0
 800af4c:	73fb      	strb	r3, [r7, #15]
      break;
 800af4e:	e020      	b.n	800af92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af56:	4619      	mov	r1, r3
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 fbc7 	bl	800b6ec <USBD_StdItfReq>
 800af5e:	4603      	mov	r3, r0
 800af60:	73fb      	strb	r3, [r7, #15]
      break;
 800af62:	e016      	b.n	800af92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 fc29 	bl	800b7c4 <USBD_StdEPReq>
 800af72:	4603      	mov	r3, r0
 800af74:	73fb      	strb	r3, [r7, #15]
      break;
 800af76:	e00c      	b.n	800af92 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800af82:	b2db      	uxtb	r3, r3
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f004 fbaa 	bl	800f6e0 <USBD_LL_StallEP>
 800af8c:	4603      	mov	r3, r0
 800af8e:	73fb      	strb	r3, [r7, #15]
      break;
 800af90:	bf00      	nop
  }

  return ret;
 800af92:	7bfb      	ldrb	r3, [r7, #15]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	460b      	mov	r3, r1
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800afae:	7afb      	ldrb	r3, [r7, #11]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d16e      	bne.n	800b092 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800afba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	f040 8098 	bne.w	800b0f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d913      	bls.n	800affc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	689a      	ldr	r2, [r3, #8]
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	1ad2      	subs	r2, r2, r3
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	68da      	ldr	r2, [r3, #12]
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	4293      	cmp	r3, r2
 800afec:	bf28      	it	cs
 800afee:	4613      	movcs	r3, r2
 800aff0:	461a      	mov	r2, r3
 800aff2:	6879      	ldr	r1, [r7, #4]
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f001 f984 	bl	800c302 <USBD_CtlContinueRx>
 800affa:	e07d      	b.n	800b0f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b002:	f003 031f 	and.w	r3, r3, #31
 800b006:	2b02      	cmp	r3, #2
 800b008:	d014      	beq.n	800b034 <USBD_LL_DataOutStage+0x98>
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d81d      	bhi.n	800b04a <USBD_LL_DataOutStage+0xae>
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d002      	beq.n	800b018 <USBD_LL_DataOutStage+0x7c>
 800b012:	2b01      	cmp	r3, #1
 800b014:	d003      	beq.n	800b01e <USBD_LL_DataOutStage+0x82>
 800b016:	e018      	b.n	800b04a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b018:	2300      	movs	r3, #0
 800b01a:	75bb      	strb	r3, [r7, #22]
            break;
 800b01c:	e018      	b.n	800b050 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b024:	b2db      	uxtb	r3, r3
 800b026:	4619      	mov	r1, r3
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 fa5e 	bl	800b4ea <USBD_CoreFindIF>
 800b02e:	4603      	mov	r3, r0
 800b030:	75bb      	strb	r3, [r7, #22]
            break;
 800b032:	e00d      	b.n	800b050 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	4619      	mov	r1, r3
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f000 fa60 	bl	800b504 <USBD_CoreFindEP>
 800b044:	4603      	mov	r3, r0
 800b046:	75bb      	strb	r3, [r7, #22]
            break;
 800b048:	e002      	b.n	800b050 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b04a:	2300      	movs	r3, #0
 800b04c:	75bb      	strb	r3, [r7, #22]
            break;
 800b04e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b050:	7dbb      	ldrb	r3, [r7, #22]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d119      	bne.n	800b08a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	2b03      	cmp	r3, #3
 800b060:	d113      	bne.n	800b08a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b062:	7dba      	ldrb	r2, [r7, #22]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	32ae      	adds	r2, #174	; 0xae
 800b068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00b      	beq.n	800b08a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b072:	7dba      	ldrb	r2, [r7, #22]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b07a:	7dba      	ldrb	r2, [r7, #22]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	32ae      	adds	r2, #174	; 0xae
 800b080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f001 f94a 	bl	800c324 <USBD_CtlSendStatus>
 800b090:	e032      	b.n	800b0f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b092:	7afb      	ldrb	r3, [r7, #11]
 800b094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	4619      	mov	r1, r3
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f000 fa31 	bl	800b504 <USBD_CoreFindEP>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0a6:	7dbb      	ldrb	r3, [r7, #22]
 800b0a8:	2bff      	cmp	r3, #255	; 0xff
 800b0aa:	d025      	beq.n	800b0f8 <USBD_LL_DataOutStage+0x15c>
 800b0ac:	7dbb      	ldrb	r3, [r7, #22]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d122      	bne.n	800b0f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b03      	cmp	r3, #3
 800b0bc:	d117      	bne.n	800b0ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b0be:	7dba      	ldrb	r2, [r7, #22]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	32ae      	adds	r2, #174	; 0xae
 800b0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00f      	beq.n	800b0ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b0ce:	7dba      	ldrb	r2, [r7, #22]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b0d6:	7dba      	ldrb	r2, [r7, #22]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	32ae      	adds	r2, #174	; 0xae
 800b0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	7afa      	ldrb	r2, [r7, #11]
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	4798      	blx	r3
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d001      	beq.n	800b0f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
 800b0f6:	e000      	b.n	800b0fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b086      	sub	sp, #24
 800b106:	af00      	add	r7, sp, #0
 800b108:	60f8      	str	r0, [r7, #12]
 800b10a:	460b      	mov	r3, r1
 800b10c:	607a      	str	r2, [r7, #4]
 800b10e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b110:	7afb      	ldrb	r3, [r7, #11]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d16f      	bne.n	800b1f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	3314      	adds	r3, #20
 800b11a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b122:	2b02      	cmp	r3, #2
 800b124:	d15a      	bne.n	800b1dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	689a      	ldr	r2, [r3, #8]
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d914      	bls.n	800b15c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	689a      	ldr	r2, [r3, #8]
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	1ad2      	subs	r2, r2, r3
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	461a      	mov	r2, r3
 800b146:	6879      	ldr	r1, [r7, #4]
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f001 f8ac 	bl	800c2a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b14e:	2300      	movs	r3, #0
 800b150:	2200      	movs	r2, #0
 800b152:	2100      	movs	r1, #0
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f004 fb6d 	bl	800f834 <USBD_LL_PrepareReceive>
 800b15a:	e03f      	b.n	800b1dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	68da      	ldr	r2, [r3, #12]
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	429a      	cmp	r2, r3
 800b166:	d11c      	bne.n	800b1a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b170:	429a      	cmp	r2, r3
 800b172:	d316      	bcc.n	800b1a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	685a      	ldr	r2, [r3, #4]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b17e:	429a      	cmp	r2, r3
 800b180:	d20f      	bcs.n	800b1a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b182:	2200      	movs	r2, #0
 800b184:	2100      	movs	r1, #0
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f001 f88d 	bl	800c2a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b194:	2300      	movs	r3, #0
 800b196:	2200      	movs	r2, #0
 800b198:	2100      	movs	r1, #0
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f004 fb4a 	bl	800f834 <USBD_LL_PrepareReceive>
 800b1a0:	e01c      	b.n	800b1dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	2b03      	cmp	r3, #3
 800b1ac:	d10f      	bne.n	800b1ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d009      	beq.n	800b1ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1ce:	2180      	movs	r1, #128	; 0x80
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f004 fa85 	bl	800f6e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f001 f8b7 	bl	800c34a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d03a      	beq.n	800b25c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f7ff fe42 	bl	800ae70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b1f4:	e032      	b.n	800b25c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b1f6:	7afb      	ldrb	r3, [r7, #11]
 800b1f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	4619      	mov	r1, r3
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f000 f97f 	bl	800b504 <USBD_CoreFindEP>
 800b206:	4603      	mov	r3, r0
 800b208:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	2bff      	cmp	r3, #255	; 0xff
 800b20e:	d025      	beq.n	800b25c <USBD_LL_DataInStage+0x15a>
 800b210:	7dfb      	ldrb	r3, [r7, #23]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d122      	bne.n	800b25c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d11c      	bne.n	800b25c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b222:	7dfa      	ldrb	r2, [r7, #23]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	32ae      	adds	r2, #174	; 0xae
 800b228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d014      	beq.n	800b25c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b232:	7dfa      	ldrb	r2, [r7, #23]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b23a:	7dfa      	ldrb	r2, [r7, #23]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	32ae      	adds	r2, #174	; 0xae
 800b240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	7afa      	ldrb	r2, [r7, #11]
 800b248:	4611      	mov	r1, r2
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	4798      	blx	r3
 800b24e:	4603      	mov	r3, r0
 800b250:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b252:	7dbb      	ldrb	r3, [r7, #22]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d001      	beq.n	800b25c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b258:	7dbb      	ldrb	r3, [r7, #22]
 800b25a:	e000      	b.n	800b25e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b084      	sub	sp, #16
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2201      	movs	r2, #1
 800b276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d014      	beq.n	800b2cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00e      	beq.n	800b2cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	6852      	ldr	r2, [r2, #4]
 800b2ba:	b2d2      	uxtb	r2, r2
 800b2bc:	4611      	mov	r1, r2
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	4798      	blx	r3
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b2cc:	2340      	movs	r3, #64	; 0x40
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f004 f9bf 	bl	800f656 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2240      	movs	r2, #64	; 0x40
 800b2e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b2e8:	2340      	movs	r3, #64	; 0x40
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	2180      	movs	r1, #128	; 0x80
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f004 f9b1 	bl	800f656 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2240      	movs	r2, #64	; 0x40
 800b2fe:	621a      	str	r2, [r3, #32]

  return ret;
 800b300:	7bfb      	ldrb	r3, [r7, #15]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b30a:	b480      	push	{r7}
 800b30c:	b083      	sub	sp, #12
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	460b      	mov	r3, r1
 800b314:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	78fa      	ldrb	r2, [r7, #3]
 800b31a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2204      	movs	r2, #4
 800b344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b356:	b480      	push	{r7}
 800b358:	b083      	sub	sp, #12
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b04      	cmp	r3, #4
 800b368:	d106      	bne.n	800b378 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b370:	b2da      	uxtb	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b03      	cmp	r3, #3
 800b398:	d110      	bne.n	800b3bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00b      	beq.n	800b3bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3aa:	69db      	ldr	r3, [r3, #28]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d005      	beq.n	800b3bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b6:	69db      	ldr	r3, [r3, #28]
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	b082      	sub	sp, #8
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	32ae      	adds	r2, #174	; 0xae
 800b3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e01c      	b.n	800b422 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d115      	bne.n	800b420 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	32ae      	adds	r2, #174	; 0xae
 800b3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b402:	6a1b      	ldr	r3, [r3, #32]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	32ae      	adds	r2, #174	; 0xae
 800b412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b416:	6a1b      	ldr	r3, [r3, #32]
 800b418:	78fa      	ldrb	r2, [r7, #3]
 800b41a:	4611      	mov	r1, r2
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b082      	sub	sp, #8
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	460b      	mov	r3, r1
 800b434:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	32ae      	adds	r2, #174	; 0xae
 800b440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b448:	2303      	movs	r3, #3
 800b44a:	e01c      	b.n	800b486 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b03      	cmp	r3, #3
 800b456:	d115      	bne.n	800b484 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	32ae      	adds	r2, #174	; 0xae
 800b462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00b      	beq.n	800b484 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	32ae      	adds	r2, #174	; 0xae
 800b476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47c:	78fa      	ldrb	r2, [r7, #3]
 800b47e:	4611      	mov	r1, r2
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b48e:	b480      	push	{r7}
 800b490:	b083      	sub	sp, #12
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00e      	beq.n	800b4e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	6852      	ldr	r2, [r2, #4]
 800b4ce:	b2d2      	uxtb	r2, r2
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	4798      	blx	r3
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b083      	sub	sp, #12
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b4f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	370c      	adds	r7, #12
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b504:	b480      	push	{r7}
 800b506:	b083      	sub	sp, #12
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	460b      	mov	r3, r1
 800b50e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b510:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b086      	sub	sp, #24
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	460b      	mov	r3, r1
 800b528:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b532:	2300      	movs	r3, #0
 800b534:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	885b      	ldrh	r3, [r3, #2]
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	b29b      	uxth	r3, r3
 800b542:	429a      	cmp	r2, r3
 800b544:	d920      	bls.n	800b588 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b54e:	e013      	b.n	800b578 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b550:	f107 030a 	add.w	r3, r7, #10
 800b554:	4619      	mov	r1, r3
 800b556:	6978      	ldr	r0, [r7, #20]
 800b558:	f000 f81b 	bl	800b592 <USBD_GetNextDesc>
 800b55c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	785b      	ldrb	r3, [r3, #1]
 800b562:	2b05      	cmp	r3, #5
 800b564:	d108      	bne.n	800b578 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	789b      	ldrb	r3, [r3, #2]
 800b56e:	78fa      	ldrb	r2, [r7, #3]
 800b570:	429a      	cmp	r2, r3
 800b572:	d008      	beq.n	800b586 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b574:	2300      	movs	r3, #0
 800b576:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	885b      	ldrh	r3, [r3, #2]
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	897b      	ldrh	r3, [r7, #10]
 800b580:	429a      	cmp	r2, r3
 800b582:	d8e5      	bhi.n	800b550 <USBD_GetEpDesc+0x32>
 800b584:	e000      	b.n	800b588 <USBD_GetEpDesc+0x6a>
          break;
 800b586:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b588:	693b      	ldr	r3, [r7, #16]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3718      	adds	r7, #24
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b592:	b480      	push	{r7}
 800b594:	b085      	sub	sp, #20
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	881a      	ldrh	r2, [r3, #0]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	4413      	add	r3, r2
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b5be:	68fb      	ldr	r3, [r7, #12]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b5ea:	8a3b      	ldrh	r3, [r7, #16]
 800b5ec:	021b      	lsls	r3, r3, #8
 800b5ee:	b21a      	sxth	r2, r3
 800b5f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	b21b      	sxth	r3, r3
 800b5f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b5fa:	89fb      	ldrh	r3, [r7, #14]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	371c      	adds	r7, #28
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b61e:	2b40      	cmp	r3, #64	; 0x40
 800b620:	d005      	beq.n	800b62e <USBD_StdDevReq+0x26>
 800b622:	2b40      	cmp	r3, #64	; 0x40
 800b624:	d857      	bhi.n	800b6d6 <USBD_StdDevReq+0xce>
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00f      	beq.n	800b64a <USBD_StdDevReq+0x42>
 800b62a:	2b20      	cmp	r3, #32
 800b62c:	d153      	bne.n	800b6d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	32ae      	adds	r2, #174	; 0xae
 800b638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	4798      	blx	r3
 800b644:	4603      	mov	r3, r0
 800b646:	73fb      	strb	r3, [r7, #15]
      break;
 800b648:	e04a      	b.n	800b6e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	785b      	ldrb	r3, [r3, #1]
 800b64e:	2b09      	cmp	r3, #9
 800b650:	d83b      	bhi.n	800b6ca <USBD_StdDevReq+0xc2>
 800b652:	a201      	add	r2, pc, #4	; (adr r2, 800b658 <USBD_StdDevReq+0x50>)
 800b654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b658:	0800b6ad 	.word	0x0800b6ad
 800b65c:	0800b6c1 	.word	0x0800b6c1
 800b660:	0800b6cb 	.word	0x0800b6cb
 800b664:	0800b6b7 	.word	0x0800b6b7
 800b668:	0800b6cb 	.word	0x0800b6cb
 800b66c:	0800b68b 	.word	0x0800b68b
 800b670:	0800b681 	.word	0x0800b681
 800b674:	0800b6cb 	.word	0x0800b6cb
 800b678:	0800b6a3 	.word	0x0800b6a3
 800b67c:	0800b695 	.word	0x0800b695
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fa3c 	bl	800bb00 <USBD_GetDescriptor>
          break;
 800b688:	e024      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fba1 	bl	800bdd4 <USBD_SetAddress>
          break;
 800b692:	e01f      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b694:	6839      	ldr	r1, [r7, #0]
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fbe0 	bl	800be5c <USBD_SetConfig>
 800b69c:	4603      	mov	r3, r0
 800b69e:	73fb      	strb	r3, [r7, #15]
          break;
 800b6a0:	e018      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fc83 	bl	800bfb0 <USBD_GetConfig>
          break;
 800b6aa:	e013      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fcb4 	bl	800c01c <USBD_GetStatus>
          break;
 800b6b4:	e00e      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fce3 	bl	800c084 <USBD_SetFeature>
          break;
 800b6be:	e009      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6c0:	6839      	ldr	r1, [r7, #0]
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 fd07 	bl	800c0d6 <USBD_ClrFeature>
          break;
 800b6c8:	e004      	b.n	800b6d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 fd5e 	bl	800c18e <USBD_CtlError>
          break;
 800b6d2:	bf00      	nop
      }
      break;
 800b6d4:	e004      	b.n	800b6e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 fd58 	bl	800c18e <USBD_CtlError>
      break;
 800b6de:	bf00      	nop
  }

  return ret;
 800b6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop

0800b6ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b702:	2b40      	cmp	r3, #64	; 0x40
 800b704:	d005      	beq.n	800b712 <USBD_StdItfReq+0x26>
 800b706:	2b40      	cmp	r3, #64	; 0x40
 800b708:	d852      	bhi.n	800b7b0 <USBD_StdItfReq+0xc4>
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <USBD_StdItfReq+0x26>
 800b70e:	2b20      	cmp	r3, #32
 800b710:	d14e      	bne.n	800b7b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	3b01      	subs	r3, #1
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d840      	bhi.n	800b7a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	889b      	ldrh	r3, [r3, #4]
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b01      	cmp	r3, #1
 800b728:	d836      	bhi.n	800b798 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	889b      	ldrh	r3, [r3, #4]
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7ff fed9 	bl	800b4ea <USBD_CoreFindIF>
 800b738:	4603      	mov	r3, r0
 800b73a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b73c:	7bbb      	ldrb	r3, [r7, #14]
 800b73e:	2bff      	cmp	r3, #255	; 0xff
 800b740:	d01d      	beq.n	800b77e <USBD_StdItfReq+0x92>
 800b742:	7bbb      	ldrb	r3, [r7, #14]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d11a      	bne.n	800b77e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b748:	7bba      	ldrb	r2, [r7, #14]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	32ae      	adds	r2, #174	; 0xae
 800b74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00f      	beq.n	800b778 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b758:	7bba      	ldrb	r2, [r7, #14]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b760:	7bba      	ldrb	r2, [r7, #14]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	32ae      	adds	r2, #174	; 0xae
 800b766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	4798      	blx	r3
 800b772:	4603      	mov	r3, r0
 800b774:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b776:	e004      	b.n	800b782 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b778:	2303      	movs	r3, #3
 800b77a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b77c:	e001      	b.n	800b782 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b77e:	2303      	movs	r3, #3
 800b780:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	88db      	ldrh	r3, [r3, #6]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d110      	bne.n	800b7ac <USBD_StdItfReq+0xc0>
 800b78a:	7bfb      	ldrb	r3, [r7, #15]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10d      	bne.n	800b7ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 fdc7 	bl	800c324 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b796:	e009      	b.n	800b7ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b798:	6839      	ldr	r1, [r7, #0]
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 fcf7 	bl	800c18e <USBD_CtlError>
          break;
 800b7a0:	e004      	b.n	800b7ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fcf2 	bl	800c18e <USBD_CtlError>
          break;
 800b7aa:	e000      	b.n	800b7ae <USBD_StdItfReq+0xc2>
          break;
 800b7ac:	bf00      	nop
      }
      break;
 800b7ae:	e004      	b.n	800b7ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fceb 	bl	800c18e <USBD_CtlError>
      break;
 800b7b8:	bf00      	nop
  }

  return ret;
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	889b      	ldrh	r3, [r3, #4]
 800b7d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7e0:	2b40      	cmp	r3, #64	; 0x40
 800b7e2:	d007      	beq.n	800b7f4 <USBD_StdEPReq+0x30>
 800b7e4:	2b40      	cmp	r3, #64	; 0x40
 800b7e6:	f200 817f 	bhi.w	800bae8 <USBD_StdEPReq+0x324>
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d02a      	beq.n	800b844 <USBD_StdEPReq+0x80>
 800b7ee:	2b20      	cmp	r3, #32
 800b7f0:	f040 817a 	bne.w	800bae8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b7f4:	7bbb      	ldrb	r3, [r7, #14]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7ff fe83 	bl	800b504 <USBD_CoreFindEP>
 800b7fe:	4603      	mov	r3, r0
 800b800:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b802:	7b7b      	ldrb	r3, [r7, #13]
 800b804:	2bff      	cmp	r3, #255	; 0xff
 800b806:	f000 8174 	beq.w	800baf2 <USBD_StdEPReq+0x32e>
 800b80a:	7b7b      	ldrb	r3, [r7, #13]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f040 8170 	bne.w	800baf2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b812:	7b7a      	ldrb	r2, [r7, #13]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b81a:	7b7a      	ldrb	r2, [r7, #13]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	32ae      	adds	r2, #174	; 0xae
 800b820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 8163 	beq.w	800baf2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b82c:	7b7a      	ldrb	r2, [r7, #13]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	32ae      	adds	r2, #174	; 0xae
 800b832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	4798      	blx	r3
 800b83e:	4603      	mov	r3, r0
 800b840:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b842:	e156      	b.n	800baf2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	785b      	ldrb	r3, [r3, #1]
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d008      	beq.n	800b85e <USBD_StdEPReq+0x9a>
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	f300 8145 	bgt.w	800badc <USBD_StdEPReq+0x318>
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 809b 	beq.w	800b98e <USBD_StdEPReq+0x1ca>
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d03c      	beq.n	800b8d6 <USBD_StdEPReq+0x112>
 800b85c:	e13e      	b.n	800badc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b02      	cmp	r3, #2
 800b868:	d002      	beq.n	800b870 <USBD_StdEPReq+0xac>
 800b86a:	2b03      	cmp	r3, #3
 800b86c:	d016      	beq.n	800b89c <USBD_StdEPReq+0xd8>
 800b86e:	e02c      	b.n	800b8ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b870:	7bbb      	ldrb	r3, [r7, #14]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00d      	beq.n	800b892 <USBD_StdEPReq+0xce>
 800b876:	7bbb      	ldrb	r3, [r7, #14]
 800b878:	2b80      	cmp	r3, #128	; 0x80
 800b87a:	d00a      	beq.n	800b892 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b87c:	7bbb      	ldrb	r3, [r7, #14]
 800b87e:	4619      	mov	r1, r3
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f003 ff2d 	bl	800f6e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b886:	2180      	movs	r1, #128	; 0x80
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f003 ff29 	bl	800f6e0 <USBD_LL_StallEP>
 800b88e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b890:	e020      	b.n	800b8d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b892:	6839      	ldr	r1, [r7, #0]
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 fc7a 	bl	800c18e <USBD_CtlError>
              break;
 800b89a:	e01b      	b.n	800b8d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	885b      	ldrh	r3, [r3, #2]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10e      	bne.n	800b8c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8a4:	7bbb      	ldrb	r3, [r7, #14]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00b      	beq.n	800b8c2 <USBD_StdEPReq+0xfe>
 800b8aa:	7bbb      	ldrb	r3, [r7, #14]
 800b8ac:	2b80      	cmp	r3, #128	; 0x80
 800b8ae:	d008      	beq.n	800b8c2 <USBD_StdEPReq+0xfe>
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	88db      	ldrh	r3, [r3, #6]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d104      	bne.n	800b8c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f003 ff0f 	bl	800f6e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fd2e 	bl	800c324 <USBD_CtlSendStatus>

              break;
 800b8c8:	e004      	b.n	800b8d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fc5e 	bl	800c18e <USBD_CtlError>
              break;
 800b8d2:	bf00      	nop
          }
          break;
 800b8d4:	e107      	b.n	800bae6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d002      	beq.n	800b8e8 <USBD_StdEPReq+0x124>
 800b8e2:	2b03      	cmp	r3, #3
 800b8e4:	d016      	beq.n	800b914 <USBD_StdEPReq+0x150>
 800b8e6:	e04b      	b.n	800b980 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00d      	beq.n	800b90a <USBD_StdEPReq+0x146>
 800b8ee:	7bbb      	ldrb	r3, [r7, #14]
 800b8f0:	2b80      	cmp	r3, #128	; 0x80
 800b8f2:	d00a      	beq.n	800b90a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8f4:	7bbb      	ldrb	r3, [r7, #14]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f003 fef1 	bl	800f6e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8fe:	2180      	movs	r1, #128	; 0x80
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f003 feed 	bl	800f6e0 <USBD_LL_StallEP>
 800b906:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b908:	e040      	b.n	800b98c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b90a:	6839      	ldr	r1, [r7, #0]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fc3e 	bl	800c18e <USBD_CtlError>
              break;
 800b912:	e03b      	b.n	800b98c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	885b      	ldrh	r3, [r3, #2]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d136      	bne.n	800b98a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b91c:	7bbb      	ldrb	r3, [r7, #14]
 800b91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b922:	2b00      	cmp	r3, #0
 800b924:	d004      	beq.n	800b930 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	4619      	mov	r1, r3
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f003 fef7 	bl	800f71e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fcf7 	bl	800c324 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b936:	7bbb      	ldrb	r3, [r7, #14]
 800b938:	4619      	mov	r1, r3
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7ff fde2 	bl	800b504 <USBD_CoreFindEP>
 800b940:	4603      	mov	r3, r0
 800b942:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b944:	7b7b      	ldrb	r3, [r7, #13]
 800b946:	2bff      	cmp	r3, #255	; 0xff
 800b948:	d01f      	beq.n	800b98a <USBD_StdEPReq+0x1c6>
 800b94a:	7b7b      	ldrb	r3, [r7, #13]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d11c      	bne.n	800b98a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b950:	7b7a      	ldrb	r2, [r7, #13]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b958:	7b7a      	ldrb	r2, [r7, #13]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	32ae      	adds	r2, #174	; 0xae
 800b95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d010      	beq.n	800b98a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b968:	7b7a      	ldrb	r2, [r7, #13]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	32ae      	adds	r2, #174	; 0xae
 800b96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	4798      	blx	r3
 800b97a:	4603      	mov	r3, r0
 800b97c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b97e:	e004      	b.n	800b98a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fc03 	bl	800c18e <USBD_CtlError>
              break;
 800b988:	e000      	b.n	800b98c <USBD_StdEPReq+0x1c8>
              break;
 800b98a:	bf00      	nop
          }
          break;
 800b98c:	e0ab      	b.n	800bae6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b02      	cmp	r3, #2
 800b998:	d002      	beq.n	800b9a0 <USBD_StdEPReq+0x1dc>
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	d032      	beq.n	800ba04 <USBD_StdEPReq+0x240>
 800b99e:	e097      	b.n	800bad0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9a0:	7bbb      	ldrb	r3, [r7, #14]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d007      	beq.n	800b9b6 <USBD_StdEPReq+0x1f2>
 800b9a6:	7bbb      	ldrb	r3, [r7, #14]
 800b9a8:	2b80      	cmp	r3, #128	; 0x80
 800b9aa:	d004      	beq.n	800b9b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b9ac:	6839      	ldr	r1, [r7, #0]
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fbed 	bl	800c18e <USBD_CtlError>
                break;
 800b9b4:	e091      	b.n	800bada <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	da0b      	bge.n	800b9d6 <USBD_StdEPReq+0x212>
 800b9be:	7bbb      	ldrb	r3, [r7, #14]
 800b9c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4413      	add	r3, r2
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	3310      	adds	r3, #16
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	e00b      	b.n	800b9ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9d6:	7bbb      	ldrb	r3, [r7, #14]
 800b9d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9dc:	4613      	mov	r3, r2
 800b9de:	009b      	lsls	r3, r3, #2
 800b9e0:	4413      	add	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	2202      	movs	r2, #2
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fc37 	bl	800c270 <USBD_CtlSendData>
              break;
 800ba02:	e06a      	b.n	800bada <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	da11      	bge.n	800ba30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba0c:	7bbb      	ldrb	r3, [r7, #14]
 800ba0e:	f003 020f 	and.w	r2, r3, #15
 800ba12:	6879      	ldr	r1, [r7, #4]
 800ba14:	4613      	mov	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	4413      	add	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	440b      	add	r3, r1
 800ba1e:	3324      	adds	r3, #36	; 0x24
 800ba20:	881b      	ldrh	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d117      	bne.n	800ba56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 fbb0 	bl	800c18e <USBD_CtlError>
                  break;
 800ba2e:	e054      	b.n	800bada <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba30:	7bbb      	ldrb	r3, [r7, #14]
 800ba32:	f003 020f 	and.w	r2, r3, #15
 800ba36:	6879      	ldr	r1, [r7, #4]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	440b      	add	r3, r1
 800ba42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba46:	881b      	ldrh	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d104      	bne.n	800ba56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fb9d 	bl	800c18e <USBD_CtlError>
                  break;
 800ba54:	e041      	b.n	800bada <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	da0b      	bge.n	800ba76 <USBD_StdEPReq+0x2b2>
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
 800ba60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba64:	4613      	mov	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4413      	add	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	3310      	adds	r3, #16
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	4413      	add	r3, r2
 800ba72:	3304      	adds	r3, #4
 800ba74:	e00b      	b.n	800ba8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba76:	7bbb      	ldrb	r3, [r7, #14]
 800ba78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba90:	7bbb      	ldrb	r3, [r7, #14]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d002      	beq.n	800ba9c <USBD_StdEPReq+0x2d8>
 800ba96:	7bbb      	ldrb	r3, [r7, #14]
 800ba98:	2b80      	cmp	r3, #128	; 0x80
 800ba9a:	d103      	bne.n	800baa4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	601a      	str	r2, [r3, #0]
 800baa2:	e00e      	b.n	800bac2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800baa4:	7bbb      	ldrb	r3, [r7, #14]
 800baa6:	4619      	mov	r1, r3
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f003 fe57 	bl	800f75c <USBD_LL_IsStallEP>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d003      	beq.n	800babc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	2201      	movs	r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
 800baba:	e002      	b.n	800bac2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2200      	movs	r2, #0
 800bac0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	2202      	movs	r2, #2
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 fbd1 	bl	800c270 <USBD_CtlSendData>
              break;
 800bace:	e004      	b.n	800bada <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bad0:	6839      	ldr	r1, [r7, #0]
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fb5b 	bl	800c18e <USBD_CtlError>
              break;
 800bad8:	bf00      	nop
          }
          break;
 800bada:	e004      	b.n	800bae6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fb55 	bl	800c18e <USBD_CtlError>
          break;
 800bae4:	bf00      	nop
      }
      break;
 800bae6:	e005      	b.n	800baf4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fb4f 	bl	800c18e <USBD_CtlError>
      break;
 800baf0:	e000      	b.n	800baf4 <USBD_StdEPReq+0x330>
      break;
 800baf2:	bf00      	nop
  }

  return ret;
 800baf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
	...

0800bb00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb12:	2300      	movs	r3, #0
 800bb14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	885b      	ldrh	r3, [r3, #2]
 800bb1a:	0a1b      	lsrs	r3, r3, #8
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	2b06      	cmp	r3, #6
 800bb22:	f200 8128 	bhi.w	800bd76 <USBD_GetDescriptor+0x276>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <USBD_GetDescriptor+0x2c>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb49 	.word	0x0800bb49
 800bb30:	0800bb61 	.word	0x0800bb61
 800bb34:	0800bba1 	.word	0x0800bba1
 800bb38:	0800bd77 	.word	0x0800bd77
 800bb3c:	0800bd77 	.word	0x0800bd77
 800bb40:	0800bd17 	.word	0x0800bd17
 800bb44:	0800bd43 	.word	0x0800bd43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	7c12      	ldrb	r2, [r2, #16]
 800bb54:	f107 0108 	add.w	r1, r7, #8
 800bb58:	4610      	mov	r0, r2
 800bb5a:	4798      	blx	r3
 800bb5c:	60f8      	str	r0, [r7, #12]
      break;
 800bb5e:	e112      	b.n	800bd86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	7c1b      	ldrb	r3, [r3, #16]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10d      	bne.n	800bb84 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb70:	f107 0208 	add.w	r2, r7, #8
 800bb74:	4610      	mov	r0, r2
 800bb76:	4798      	blx	r3
 800bb78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	2202      	movs	r2, #2
 800bb80:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bb82:	e100      	b.n	800bd86 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8c:	f107 0208 	add.w	r2, r7, #8
 800bb90:	4610      	mov	r0, r2
 800bb92:	4798      	blx	r3
 800bb94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	701a      	strb	r2, [r3, #0]
      break;
 800bb9e:	e0f2      	b.n	800bd86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	885b      	ldrh	r3, [r3, #2]
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b05      	cmp	r3, #5
 800bba8:	f200 80ac 	bhi.w	800bd04 <USBD_GetDescriptor+0x204>
 800bbac:	a201      	add	r2, pc, #4	; (adr r2, 800bbb4 <USBD_GetDescriptor+0xb4>)
 800bbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb2:	bf00      	nop
 800bbb4:	0800bbcd 	.word	0x0800bbcd
 800bbb8:	0800bc01 	.word	0x0800bc01
 800bbbc:	0800bc35 	.word	0x0800bc35
 800bbc0:	0800bc69 	.word	0x0800bc69
 800bbc4:	0800bc9d 	.word	0x0800bc9d
 800bbc8:	0800bcd1 	.word	0x0800bcd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00b      	beq.n	800bbf0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	7c12      	ldrb	r2, [r2, #16]
 800bbe4:	f107 0108 	add.w	r1, r7, #8
 800bbe8:	4610      	mov	r0, r2
 800bbea:	4798      	blx	r3
 800bbec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbee:	e091      	b.n	800bd14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbf0:	6839      	ldr	r1, [r7, #0]
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 facb 	bl	800c18e <USBD_CtlError>
            err++;
 800bbf8:	7afb      	ldrb	r3, [r7, #11]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	72fb      	strb	r3, [r7, #11]
          break;
 800bbfe:	e089      	b.n	800bd14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00b      	beq.n	800bc24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	7c12      	ldrb	r2, [r2, #16]
 800bc18:	f107 0108 	add.w	r1, r7, #8
 800bc1c:	4610      	mov	r0, r2
 800bc1e:	4798      	blx	r3
 800bc20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc22:	e077      	b.n	800bd14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc24:	6839      	ldr	r1, [r7, #0]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fab1 	bl	800c18e <USBD_CtlError>
            err++;
 800bc2c:	7afb      	ldrb	r3, [r7, #11]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	72fb      	strb	r3, [r7, #11]
          break;
 800bc32:	e06f      	b.n	800bd14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00b      	beq.n	800bc58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	7c12      	ldrb	r2, [r2, #16]
 800bc4c:	f107 0108 	add.w	r1, r7, #8
 800bc50:	4610      	mov	r0, r2
 800bc52:	4798      	blx	r3
 800bc54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc56:	e05d      	b.n	800bd14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc58:	6839      	ldr	r1, [r7, #0]
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 fa97 	bl	800c18e <USBD_CtlError>
            err++;
 800bc60:	7afb      	ldrb	r3, [r7, #11]
 800bc62:	3301      	adds	r3, #1
 800bc64:	72fb      	strb	r3, [r7, #11]
          break;
 800bc66:	e055      	b.n	800bd14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00b      	beq.n	800bc8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	7c12      	ldrb	r2, [r2, #16]
 800bc80:	f107 0108 	add.w	r1, r7, #8
 800bc84:	4610      	mov	r0, r2
 800bc86:	4798      	blx	r3
 800bc88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc8a:	e043      	b.n	800bd14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc8c:	6839      	ldr	r1, [r7, #0]
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fa7d 	bl	800c18e <USBD_CtlError>
            err++;
 800bc94:	7afb      	ldrb	r3, [r7, #11]
 800bc96:	3301      	adds	r3, #1
 800bc98:	72fb      	strb	r3, [r7, #11]
          break;
 800bc9a:	e03b      	b.n	800bd14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00b      	beq.n	800bcc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcae:	695b      	ldr	r3, [r3, #20]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	7c12      	ldrb	r2, [r2, #16]
 800bcb4:	f107 0108 	add.w	r1, r7, #8
 800bcb8:	4610      	mov	r0, r2
 800bcba:	4798      	blx	r3
 800bcbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcbe:	e029      	b.n	800bd14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fa63 	bl	800c18e <USBD_CtlError>
            err++;
 800bcc8:	7afb      	ldrb	r3, [r7, #11]
 800bcca:	3301      	adds	r3, #1
 800bccc:	72fb      	strb	r3, [r7, #11]
          break;
 800bcce:	e021      	b.n	800bd14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00b      	beq.n	800bcf4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	7c12      	ldrb	r2, [r2, #16]
 800bce8:	f107 0108 	add.w	r1, r7, #8
 800bcec:	4610      	mov	r0, r2
 800bcee:	4798      	blx	r3
 800bcf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcf2:	e00f      	b.n	800bd14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fa49 	bl	800c18e <USBD_CtlError>
            err++;
 800bcfc:	7afb      	ldrb	r3, [r7, #11]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	72fb      	strb	r3, [r7, #11]
          break;
 800bd02:	e007      	b.n	800bd14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bd04:	6839      	ldr	r1, [r7, #0]
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fa41 	bl	800c18e <USBD_CtlError>
          err++;
 800bd0c:	7afb      	ldrb	r3, [r7, #11]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bd12:	bf00      	nop
      }
      break;
 800bd14:	e037      	b.n	800bd86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	7c1b      	ldrb	r3, [r3, #16]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d109      	bne.n	800bd32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd26:	f107 0208 	add.w	r2, r7, #8
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	4798      	blx	r3
 800bd2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd30:	e029      	b.n	800bd86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd32:	6839      	ldr	r1, [r7, #0]
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fa2a 	bl	800c18e <USBD_CtlError>
        err++;
 800bd3a:	7afb      	ldrb	r3, [r7, #11]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	72fb      	strb	r3, [r7, #11]
      break;
 800bd40:	e021      	b.n	800bd86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	7c1b      	ldrb	r3, [r3, #16]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d10d      	bne.n	800bd66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd52:	f107 0208 	add.w	r2, r7, #8
 800bd56:	4610      	mov	r0, r2
 800bd58:	4798      	blx	r3
 800bd5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	2207      	movs	r2, #7
 800bd62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd64:	e00f      	b.n	800bd86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 fa10 	bl	800c18e <USBD_CtlError>
        err++;
 800bd6e:	7afb      	ldrb	r3, [r7, #11]
 800bd70:	3301      	adds	r3, #1
 800bd72:	72fb      	strb	r3, [r7, #11]
      break;
 800bd74:	e007      	b.n	800bd86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fa08 	bl	800c18e <USBD_CtlError>
      err++;
 800bd7e:	7afb      	ldrb	r3, [r7, #11]
 800bd80:	3301      	adds	r3, #1
 800bd82:	72fb      	strb	r3, [r7, #11]
      break;
 800bd84:	bf00      	nop
  }

  if (err != 0U)
 800bd86:	7afb      	ldrb	r3, [r7, #11]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d11e      	bne.n	800bdca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	88db      	ldrh	r3, [r3, #6]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d016      	beq.n	800bdc2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bd94:	893b      	ldrh	r3, [r7, #8]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00e      	beq.n	800bdb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	88da      	ldrh	r2, [r3, #6]
 800bd9e:	893b      	ldrh	r3, [r7, #8]
 800bda0:	4293      	cmp	r3, r2
 800bda2:	bf28      	it	cs
 800bda4:	4613      	movcs	r3, r2
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bdaa:	893b      	ldrh	r3, [r7, #8]
 800bdac:	461a      	mov	r2, r3
 800bdae:	68f9      	ldr	r1, [r7, #12]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fa5d 	bl	800c270 <USBD_CtlSendData>
 800bdb6:	e009      	b.n	800bdcc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bdb8:	6839      	ldr	r1, [r7, #0]
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 f9e7 	bl	800c18e <USBD_CtlError>
 800bdc0:	e004      	b.n	800bdcc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 faae 	bl	800c324 <USBD_CtlSendStatus>
 800bdc8:	e000      	b.n	800bdcc <USBD_GetDescriptor+0x2cc>
    return;
 800bdca:	bf00      	nop
  }
}
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop

0800bdd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	889b      	ldrh	r3, [r3, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d131      	bne.n	800be4a <USBD_SetAddress+0x76>
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	88db      	ldrh	r3, [r3, #6]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d12d      	bne.n	800be4a <USBD_SetAddress+0x76>
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	885b      	ldrh	r3, [r3, #2]
 800bdf2:	2b7f      	cmp	r3, #127	; 0x7f
 800bdf4:	d829      	bhi.n	800be4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	885b      	ldrh	r3, [r3, #2]
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	d104      	bne.n	800be18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f9bc 	bl	800c18e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be16:	e01d      	b.n	800be54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	7bfa      	ldrb	r2, [r7, #15]
 800be1c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f003 fcc5 	bl	800f7b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fa7a 	bl	800c324 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800be30:	7bfb      	ldrb	r3, [r7, #15]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d004      	beq.n	800be40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2202      	movs	r2, #2
 800be3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be3e:	e009      	b.n	800be54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2201      	movs	r2, #1
 800be44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be48:	e004      	b.n	800be54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be4a:	6839      	ldr	r1, [r7, #0]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 f99e 	bl	800c18e <USBD_CtlError>
  }
}
 800be52:	bf00      	nop
 800be54:	bf00      	nop
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	885b      	ldrh	r3, [r3, #2]
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	4b4e      	ldr	r3, [pc, #312]	; (800bfac <USBD_SetConfig+0x150>)
 800be72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be74:	4b4d      	ldr	r3, [pc, #308]	; (800bfac <USBD_SetConfig+0x150>)
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d905      	bls.n	800be88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 f985 	bl	800c18e <USBD_CtlError>
    return USBD_FAIL;
 800be84:	2303      	movs	r3, #3
 800be86:	e08c      	b.n	800bfa2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	2b02      	cmp	r3, #2
 800be92:	d002      	beq.n	800be9a <USBD_SetConfig+0x3e>
 800be94:	2b03      	cmp	r3, #3
 800be96:	d029      	beq.n	800beec <USBD_SetConfig+0x90>
 800be98:	e075      	b.n	800bf86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800be9a:	4b44      	ldr	r3, [pc, #272]	; (800bfac <USBD_SetConfig+0x150>)
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d020      	beq.n	800bee4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bea2:	4b42      	ldr	r3, [pc, #264]	; (800bfac <USBD_SetConfig+0x150>)
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	461a      	mov	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800beac:	4b3f      	ldr	r3, [pc, #252]	; (800bfac <USBD_SetConfig+0x150>)
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	4619      	mov	r1, r3
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7fe ffe7 	bl	800ae86 <USBD_SetClassConfig>
 800beb8:	4603      	mov	r3, r0
 800beba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bebc:	7bfb      	ldrb	r3, [r7, #15]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d008      	beq.n	800bed4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f962 	bl	800c18e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2202      	movs	r2, #2
 800bece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bed2:	e065      	b.n	800bfa0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fa25 	bl	800c324 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2203      	movs	r2, #3
 800bede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bee2:	e05d      	b.n	800bfa0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fa1d 	bl	800c324 <USBD_CtlSendStatus>
      break;
 800beea:	e059      	b.n	800bfa0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800beec:	4b2f      	ldr	r3, [pc, #188]	; (800bfac <USBD_SetConfig+0x150>)
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d112      	bne.n	800bf1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2202      	movs	r2, #2
 800bef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800befc:	4b2b      	ldr	r3, [pc, #172]	; (800bfac <USBD_SetConfig+0x150>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	461a      	mov	r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf06:	4b29      	ldr	r3, [pc, #164]	; (800bfac <USBD_SetConfig+0x150>)
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7fe ffd6 	bl	800aebe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fa06 	bl	800c324 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf18:	e042      	b.n	800bfa0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bf1a:	4b24      	ldr	r3, [pc, #144]	; (800bfac <USBD_SetConfig+0x150>)
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d02a      	beq.n	800bf7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	4619      	mov	r1, r3
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f7fe ffc4 	bl	800aebe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bf36:	4b1d      	ldr	r3, [pc, #116]	; (800bfac <USBD_SetConfig+0x150>)
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf40:	4b1a      	ldr	r3, [pc, #104]	; (800bfac <USBD_SetConfig+0x150>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7fe ff9d 	bl	800ae86 <USBD_SetClassConfig>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bf50:	7bfb      	ldrb	r3, [r7, #15]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00f      	beq.n	800bf76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 f918 	bl	800c18e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	4619      	mov	r1, r3
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7fe ffa9 	bl	800aebe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2202      	movs	r2, #2
 800bf70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bf74:	e014      	b.n	800bfa0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f9d4 	bl	800c324 <USBD_CtlSendStatus>
      break;
 800bf7c:	e010      	b.n	800bfa0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f9d0 	bl	800c324 <USBD_CtlSendStatus>
      break;
 800bf84:	e00c      	b.n	800bfa0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f900 	bl	800c18e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf8e:	4b07      	ldr	r3, [pc, #28]	; (800bfac <USBD_SetConfig+0x150>)
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7fe ff92 	bl	800aebe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	73fb      	strb	r3, [r7, #15]
      break;
 800bf9e:	bf00      	nop
  }

  return ret;
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	20007bf8 	.word	0x20007bf8

0800bfb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	88db      	ldrh	r3, [r3, #6]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d004      	beq.n	800bfcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bfc2:	6839      	ldr	r1, [r7, #0]
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 f8e2 	bl	800c18e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bfca:	e023      	b.n	800c014 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	dc02      	bgt.n	800bfde <USBD_GetConfig+0x2e>
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	dc03      	bgt.n	800bfe4 <USBD_GetConfig+0x34>
 800bfdc:	e015      	b.n	800c00a <USBD_GetConfig+0x5a>
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d00b      	beq.n	800bffa <USBD_GetConfig+0x4a>
 800bfe2:	e012      	b.n	800c00a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3308      	adds	r3, #8
 800bfee:	2201      	movs	r2, #1
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f93c 	bl	800c270 <USBD_CtlSendData>
        break;
 800bff8:	e00c      	b.n	800c014 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	3304      	adds	r3, #4
 800bffe:	2201      	movs	r2, #1
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 f934 	bl	800c270 <USBD_CtlSendData>
        break;
 800c008:	e004      	b.n	800c014 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c00a:	6839      	ldr	r1, [r7, #0]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 f8be 	bl	800c18e <USBD_CtlError>
        break;
 800c012:	bf00      	nop
}
 800c014:	bf00      	nop
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	3b01      	subs	r3, #1
 800c030:	2b02      	cmp	r3, #2
 800c032:	d81e      	bhi.n	800c072 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	88db      	ldrh	r3, [r3, #6]
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d004      	beq.n	800c046 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 f8a5 	bl	800c18e <USBD_CtlError>
        break;
 800c044:	e01a      	b.n	800c07c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2201      	movs	r2, #1
 800c04a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c052:	2b00      	cmp	r3, #0
 800c054:	d005      	beq.n	800c062 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	f043 0202 	orr.w	r2, r3, #2
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	330c      	adds	r3, #12
 800c066:	2202      	movs	r2, #2
 800c068:	4619      	mov	r1, r3
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f900 	bl	800c270 <USBD_CtlSendData>
      break;
 800c070:	e004      	b.n	800c07c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c072:	6839      	ldr	r1, [r7, #0]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 f88a 	bl	800c18e <USBD_CtlError>
      break;
 800c07a:	bf00      	nop
  }
}
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	885b      	ldrh	r3, [r3, #2]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d107      	bne.n	800c0a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 f940 	bl	800c324 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c0a4:	e013      	b.n	800c0ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	885b      	ldrh	r3, [r3, #2]
 800c0aa:	2b02      	cmp	r3, #2
 800c0ac:	d10b      	bne.n	800c0c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	889b      	ldrh	r3, [r3, #4]
 800c0b2:	0a1b      	lsrs	r3, r3, #8
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f930 	bl	800c324 <USBD_CtlSendStatus>
}
 800c0c4:	e003      	b.n	800c0ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 f860 	bl	800c18e <USBD_CtlError>
}
 800c0ce:	bf00      	nop
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b082      	sub	sp, #8
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d80b      	bhi.n	800c106 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	885b      	ldrh	r3, [r3, #2]
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d10c      	bne.n	800c110 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f910 	bl	800c324 <USBD_CtlSendStatus>
      }
      break;
 800c104:	e004      	b.n	800c110 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 f840 	bl	800c18e <USBD_CtlError>
      break;
 800c10e:	e000      	b.n	800c112 <USBD_ClrFeature+0x3c>
      break;
 800c110:	bf00      	nop
  }
}
 800c112:	bf00      	nop
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	781a      	ldrb	r2, [r3, #0]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	3301      	adds	r3, #1
 800c134:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	781a      	ldrb	r2, [r3, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	3301      	adds	r3, #1
 800c142:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f7ff fa41 	bl	800b5cc <SWAPBYTE>
 800c14a:	4603      	mov	r3, r0
 800c14c:	461a      	mov	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	3301      	adds	r3, #1
 800c156:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	3301      	adds	r3, #1
 800c15c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f7ff fa34 	bl	800b5cc <SWAPBYTE>
 800c164:	4603      	mov	r3, r0
 800c166:	461a      	mov	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	3301      	adds	r3, #1
 800c170:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3301      	adds	r3, #1
 800c176:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f7ff fa27 	bl	800b5cc <SWAPBYTE>
 800c17e:	4603      	mov	r3, r0
 800c180:	461a      	mov	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	80da      	strh	r2, [r3, #6]
}
 800c186:	bf00      	nop
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b082      	sub	sp, #8
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c198:	2180      	movs	r1, #128	; 0x80
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f003 faa0 	bl	800f6e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f003 fa9c 	bl	800f6e0 <USBD_LL_StallEP>
}
 800c1a8:	bf00      	nop
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d036      	beq.n	800c234 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c1ca:	6938      	ldr	r0, [r7, #16]
 800c1cc:	f000 f836 	bl	800c23c <USBD_GetLen>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	005b      	lsls	r3, r3, #1
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c1de:	7dfb      	ldrb	r3, [r7, #23]
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	7812      	ldrb	r2, [r2, #0]
 800c1e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1ea:	7dfb      	ldrb	r3, [r7, #23]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c1f0:	7dfb      	ldrb	r3, [r7, #23]
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	4413      	add	r3, r2
 800c1f6:	2203      	movs	r2, #3
 800c1f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c1fa:	7dfb      	ldrb	r3, [r7, #23]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c200:	e013      	b.n	800c22a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c202:	7dfb      	ldrb	r3, [r7, #23]
 800c204:	68ba      	ldr	r2, [r7, #8]
 800c206:	4413      	add	r3, r2
 800c208:	693a      	ldr	r2, [r7, #16]
 800c20a:	7812      	ldrb	r2, [r2, #0]
 800c20c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	3301      	adds	r3, #1
 800c212:	613b      	str	r3, [r7, #16]
    idx++;
 800c214:	7dfb      	ldrb	r3, [r7, #23]
 800c216:	3301      	adds	r3, #1
 800c218:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c21a:	7dfb      	ldrb	r3, [r7, #23]
 800c21c:	68ba      	ldr	r2, [r7, #8]
 800c21e:	4413      	add	r3, r2
 800c220:	2200      	movs	r2, #0
 800c222:	701a      	strb	r2, [r3, #0]
    idx++;
 800c224:	7dfb      	ldrb	r3, [r7, #23]
 800c226:	3301      	adds	r3, #1
 800c228:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1e7      	bne.n	800c202 <USBD_GetString+0x52>
 800c232:	e000      	b.n	800c236 <USBD_GetString+0x86>
    return;
 800c234:	bf00      	nop
  }
}
 800c236:	3718      	adds	r7, #24
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b085      	sub	sp, #20
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c24c:	e005      	b.n	800c25a <USBD_GetLen+0x1e>
  {
    len++;
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
 800c250:	3301      	adds	r3, #1
 800c252:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	3301      	adds	r3, #1
 800c258:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1f5      	bne.n	800c24e <USBD_GetLen+0x12>
  }

  return len;
 800c262:	7bfb      	ldrb	r3, [r7, #15]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3714      	adds	r7, #20
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2202      	movs	r2, #2
 800c280:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	2100      	movs	r1, #0
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f003 faab 	bl	800f7f2 <USBD_LL_Transmit>

  return USBD_OK;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3710      	adds	r7, #16
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c2a6:	b580      	push	{r7, lr}
 800c2a8:	b084      	sub	sp, #16
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	60f8      	str	r0, [r7, #12]
 800c2ae:	60b9      	str	r1, [r7, #8]
 800c2b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	2100      	movs	r1, #0
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f003 fa9a 	bl	800f7f2 <USBD_LL_Transmit>

  return USBD_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3710      	adds	r7, #16
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2203      	movs	r2, #3
 800c2d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f003 fa9e 	bl	800f834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b084      	sub	sp, #16
 800c306:	af00      	add	r7, sp, #0
 800c308:	60f8      	str	r0, [r7, #12]
 800c30a:	60b9      	str	r1, [r7, #8]
 800c30c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	2100      	movs	r1, #0
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f003 fa8d 	bl	800f834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2204      	movs	r2, #4
 800c330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c334:	2300      	movs	r3, #0
 800c336:	2200      	movs	r2, #0
 800c338:	2100      	movs	r1, #0
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f003 fa59 	bl	800f7f2 <USBD_LL_Transmit>

  return USBD_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b082      	sub	sp, #8
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2205      	movs	r2, #5
 800c356:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c35a:	2300      	movs	r3, #0
 800c35c:	2200      	movs	r2, #0
 800c35e:	2100      	movs	r1, #0
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f003 fa67 	bl	800f834 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <__NVIC_SetPriority>:
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	4603      	mov	r3, r0
 800c378:	6039      	str	r1, [r7, #0]
 800c37a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c37c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c380:	2b00      	cmp	r3, #0
 800c382:	db0a      	blt.n	800c39a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	b2da      	uxtb	r2, r3
 800c388:	490c      	ldr	r1, [pc, #48]	; (800c3bc <__NVIC_SetPriority+0x4c>)
 800c38a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c38e:	0112      	lsls	r2, r2, #4
 800c390:	b2d2      	uxtb	r2, r2
 800c392:	440b      	add	r3, r1
 800c394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c398:	e00a      	b.n	800c3b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	b2da      	uxtb	r2, r3
 800c39e:	4908      	ldr	r1, [pc, #32]	; (800c3c0 <__NVIC_SetPriority+0x50>)
 800c3a0:	79fb      	ldrb	r3, [r7, #7]
 800c3a2:	f003 030f 	and.w	r3, r3, #15
 800c3a6:	3b04      	subs	r3, #4
 800c3a8:	0112      	lsls	r2, r2, #4
 800c3aa:	b2d2      	uxtb	r2, r2
 800c3ac:	440b      	add	r3, r1
 800c3ae:	761a      	strb	r2, [r3, #24]
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	e000e100 	.word	0xe000e100
 800c3c0:	e000ed00 	.word	0xe000ed00

0800c3c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c3c8:	4b05      	ldr	r3, [pc, #20]	; (800c3e0 <SysTick_Handler+0x1c>)
 800c3ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c3cc:	f001 fd4e 	bl	800de6c <xTaskGetSchedulerState>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d001      	beq.n	800c3da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c3d6:	f002 fb37 	bl	800ea48 <xPortSysTickHandler>
  }
}
 800c3da:	bf00      	nop
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	e000e010 	.word	0xe000e010

0800c3e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	f06f 0004 	mvn.w	r0, #4
 800c3ee:	f7ff ffbf 	bl	800c370 <__NVIC_SetPriority>
#endif
}
 800c3f2:	bf00      	nop
 800c3f4:	bd80      	pop	{r7, pc}
	...

0800c3f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3fe:	f3ef 8305 	mrs	r3, IPSR
 800c402:	603b      	str	r3, [r7, #0]
  return(result);
 800c404:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c406:	2b00      	cmp	r3, #0
 800c408:	d003      	beq.n	800c412 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c40a:	f06f 0305 	mvn.w	r3, #5
 800c40e:	607b      	str	r3, [r7, #4]
 800c410:	e00c      	b.n	800c42c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c412:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <osKernelInitialize+0x44>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d105      	bne.n	800c426 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c41a:	4b08      	ldr	r3, [pc, #32]	; (800c43c <osKernelInitialize+0x44>)
 800c41c:	2201      	movs	r2, #1
 800c41e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c420:	2300      	movs	r3, #0
 800c422:	607b      	str	r3, [r7, #4]
 800c424:	e002      	b.n	800c42c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c42a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c42c:	687b      	ldr	r3, [r7, #4]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	370c      	adds	r7, #12
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	20007bfc 	.word	0x20007bfc

0800c440 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c446:	f3ef 8305 	mrs	r3, IPSR
 800c44a:	603b      	str	r3, [r7, #0]
  return(result);
 800c44c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d003      	beq.n	800c45a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c452:	f06f 0305 	mvn.w	r3, #5
 800c456:	607b      	str	r3, [r7, #4]
 800c458:	e010      	b.n	800c47c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c45a:	4b0b      	ldr	r3, [pc, #44]	; (800c488 <osKernelStart+0x48>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d109      	bne.n	800c476 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c462:	f7ff ffbf 	bl	800c3e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c466:	4b08      	ldr	r3, [pc, #32]	; (800c488 <osKernelStart+0x48>)
 800c468:	2202      	movs	r2, #2
 800c46a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c46c:	f001 f87c 	bl	800d568 <vTaskStartScheduler>
      stat = osOK;
 800c470:	2300      	movs	r3, #0
 800c472:	607b      	str	r3, [r7, #4]
 800c474:	e002      	b.n	800c47c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c47a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c47c:	687b      	ldr	r3, [r7, #4]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	20007bfc 	.word	0x20007bfc

0800c48c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b08e      	sub	sp, #56	; 0x38
 800c490:	af04      	add	r7, sp, #16
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c498:	2300      	movs	r3, #0
 800c49a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c49c:	f3ef 8305 	mrs	r3, IPSR
 800c4a0:	617b      	str	r3, [r7, #20]
  return(result);
 800c4a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d17e      	bne.n	800c5a6 <osThreadNew+0x11a>
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d07b      	beq.n	800c5a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c4ae:	2380      	movs	r3, #128	; 0x80
 800c4b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c4b2:	2318      	movs	r3, #24
 800c4b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c4ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d045      	beq.n	800c552 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d002      	beq.n	800c4d4 <osThreadNew+0x48>
        name = attr->name;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	699b      	ldr	r3, [r3, #24]
 800c4e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d008      	beq.n	800c4fa <osThreadNew+0x6e>
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	2b38      	cmp	r3, #56	; 0x38
 800c4ec:	d805      	bhi.n	800c4fa <osThreadNew+0x6e>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d001      	beq.n	800c4fe <osThreadNew+0x72>
        return (NULL);
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	e054      	b.n	800c5a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	695b      	ldr	r3, [r3, #20]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d003      	beq.n	800c50e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	089b      	lsrs	r3, r3, #2
 800c50c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00e      	beq.n	800c534 <osThreadNew+0xa8>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	2bbb      	cmp	r3, #187	; 0xbb
 800c51c:	d90a      	bls.n	800c534 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c522:	2b00      	cmp	r3, #0
 800c524:	d006      	beq.n	800c534 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	695b      	ldr	r3, [r3, #20]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d002      	beq.n	800c534 <osThreadNew+0xa8>
        mem = 1;
 800c52e:	2301      	movs	r3, #1
 800c530:	61bb      	str	r3, [r7, #24]
 800c532:	e010      	b.n	800c556 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10c      	bne.n	800c556 <osThreadNew+0xca>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d108      	bne.n	800c556 <osThreadNew+0xca>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	691b      	ldr	r3, [r3, #16]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d104      	bne.n	800c556 <osThreadNew+0xca>
          mem = 0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	61bb      	str	r3, [r7, #24]
 800c550:	e001      	b.n	800c556 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c552:	2300      	movs	r3, #0
 800c554:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	2b01      	cmp	r3, #1
 800c55a:	d110      	bne.n	800c57e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c564:	9202      	str	r2, [sp, #8]
 800c566:	9301      	str	r3, [sp, #4]
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	9300      	str	r3, [sp, #0]
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	6a3a      	ldr	r2, [r7, #32]
 800c570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c572:	68f8      	ldr	r0, [r7, #12]
 800c574:	f000 fe0c 	bl	800d190 <xTaskCreateStatic>
 800c578:	4603      	mov	r3, r0
 800c57a:	613b      	str	r3, [r7, #16]
 800c57c:	e013      	b.n	800c5a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d110      	bne.n	800c5a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c584:	6a3b      	ldr	r3, [r7, #32]
 800c586:	b29a      	uxth	r2, r3
 800c588:	f107 0310 	add.w	r3, r7, #16
 800c58c:	9301      	str	r3, [sp, #4]
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f000 fe57 	bl	800d24a <xTaskCreate>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d001      	beq.n	800c5a6 <osThreadNew+0x11a>
            hTask = NULL;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c5a6:	693b      	ldr	r3, [r7, #16]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3728      	adds	r7, #40	; 0x28
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5b8:	f3ef 8305 	mrs	r3, IPSR
 800c5bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800c5be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d003      	beq.n	800c5cc <osDelay+0x1c>
    stat = osErrorISR;
 800c5c4:	f06f 0305 	mvn.w	r3, #5
 800c5c8:	60fb      	str	r3, [r7, #12]
 800c5ca:	e007      	b.n	800c5dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d002      	beq.n	800c5dc <osDelay+0x2c>
      vTaskDelay(ticks);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 ff92 	bl	800d500 <vTaskDelay>
    }
  }

  return (stat);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
	...

0800c5e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	4a07      	ldr	r2, [pc, #28]	; (800c614 <vApplicationGetIdleTaskMemory+0x2c>)
 800c5f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	4a06      	ldr	r2, [pc, #24]	; (800c618 <vApplicationGetIdleTaskMemory+0x30>)
 800c5fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2280      	movs	r2, #128	; 0x80
 800c604:	601a      	str	r2, [r3, #0]
}
 800c606:	bf00      	nop
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	20007c00 	.word	0x20007c00
 800c618:	20007cbc 	.word	0x20007cbc

0800c61c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c61c:	b480      	push	{r7}
 800c61e:	b085      	sub	sp, #20
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	4a07      	ldr	r2, [pc, #28]	; (800c648 <vApplicationGetTimerTaskMemory+0x2c>)
 800c62c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	4a06      	ldr	r2, [pc, #24]	; (800c64c <vApplicationGetTimerTaskMemory+0x30>)
 800c632:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c63a:	601a      	str	r2, [r3, #0]
}
 800c63c:	bf00      	nop
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr
 800c648:	20007ebc 	.word	0x20007ebc
 800c64c:	20007f78 	.word	0x20007f78

0800c650 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f103 0208 	add.w	r2, r3, #8
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c668:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f103 0208 	add.w	r2, r3, #8
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f103 0208 	add.w	r2, r3, #8
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c684:	bf00      	nop
 800c686:	370c      	adds	r7, #12
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c69e:	bf00      	nop
 800c6a0:	370c      	adds	r7, #12
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr

0800c6aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6aa:	b480      	push	{r7}
 800c6ac:	b085      	sub	sp, #20
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	689a      	ldr	r2, [r3, #8]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	683a      	ldr	r2, [r7, #0]
 800c6ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	1c5a      	adds	r2, r3, #1
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	601a      	str	r2, [r3, #0]
}
 800c6e6:	bf00      	nop
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6f2:	b480      	push	{r7}
 800c6f4:	b085      	sub	sp, #20
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c708:	d103      	bne.n	800c712 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	60fb      	str	r3, [r7, #12]
 800c710:	e00c      	b.n	800c72c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	3308      	adds	r3, #8
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	e002      	b.n	800c720 <vListInsert+0x2e>
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	60fb      	str	r3, [r7, #12]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	68ba      	ldr	r2, [r7, #8]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d2f6      	bcs.n	800c71a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	685a      	ldr	r2, [r3, #4]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	683a      	ldr	r2, [r7, #0]
 800c73a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	1c5a      	adds	r2, r3, #1
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	601a      	str	r2, [r3, #0]
}
 800c758:	bf00      	nop
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c764:	b480      	push	{r7}
 800c766:	b085      	sub	sp, #20
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	691b      	ldr	r3, [r3, #16]
 800c770:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	6892      	ldr	r2, [r2, #8]
 800c77a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	6852      	ldr	r2, [r2, #4]
 800c784:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d103      	bne.n	800c798 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	689a      	ldr	r2, [r3, #8]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	1e5a      	subs	r2, r3, #1
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3714      	adds	r7, #20
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d10a      	bne.n	800c7e2 <xQueueGenericReset+0x2a>
	__asm volatile
 800c7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d0:	f383 8811 	msr	BASEPRI, r3
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	60bb      	str	r3, [r7, #8]
}
 800c7de:	bf00      	nop
 800c7e0:	e7fe      	b.n	800c7e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c7e2:	f002 f89f 	bl	800e924 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7ee:	68f9      	ldr	r1, [r7, #12]
 800c7f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c7f2:	fb01 f303 	mul.w	r3, r1, r3
 800c7f6:	441a      	add	r2, r3
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2200      	movs	r2, #0
 800c800:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c812:	3b01      	subs	r3, #1
 800c814:	68f9      	ldr	r1, [r7, #12]
 800c816:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c818:	fb01 f303 	mul.w	r3, r1, r3
 800c81c:	441a      	add	r2, r3
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	22ff      	movs	r2, #255	; 0xff
 800c826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	22ff      	movs	r2, #255	; 0xff
 800c82e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d114      	bne.n	800c862 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d01a      	beq.n	800c876 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	3310      	adds	r3, #16
 800c844:	4618      	mov	r0, r3
 800c846:	f001 f929 	bl	800da9c <xTaskRemoveFromEventList>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d012      	beq.n	800c876 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c850:	4b0c      	ldr	r3, [pc, #48]	; (800c884 <xQueueGenericReset+0xcc>)
 800c852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c856:	601a      	str	r2, [r3, #0]
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	e009      	b.n	800c876 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	3310      	adds	r3, #16
 800c866:	4618      	mov	r0, r3
 800c868:	f7ff fef2 	bl	800c650 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	3324      	adds	r3, #36	; 0x24
 800c870:	4618      	mov	r0, r3
 800c872:	f7ff feed 	bl	800c650 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c876:	f002 f885 	bl	800e984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c87a:	2301      	movs	r3, #1
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	e000ed04 	.word	0xe000ed04

0800c888 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b08e      	sub	sp, #56	; 0x38
 800c88c:	af02      	add	r7, sp, #8
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
 800c894:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d10a      	bne.n	800c8b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a0:	f383 8811 	msr	BASEPRI, r3
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c8ae:	bf00      	nop
 800c8b0:	e7fe      	b.n	800c8b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d10a      	bne.n	800c8ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c8ca:	bf00      	nop
 800c8cc:	e7fe      	b.n	800c8cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d002      	beq.n	800c8da <xQueueGenericCreateStatic+0x52>
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d001      	beq.n	800c8de <xQueueGenericCreateStatic+0x56>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e000      	b.n	800c8e0 <xQueueGenericCreateStatic+0x58>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d10a      	bne.n	800c8fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e8:	f383 8811 	msr	BASEPRI, r3
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f3bf 8f4f 	dsb	sy
 800c8f4:	623b      	str	r3, [r7, #32]
}
 800c8f6:	bf00      	nop
 800c8f8:	e7fe      	b.n	800c8f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d102      	bne.n	800c906 <xQueueGenericCreateStatic+0x7e>
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d101      	bne.n	800c90a <xQueueGenericCreateStatic+0x82>
 800c906:	2301      	movs	r3, #1
 800c908:	e000      	b.n	800c90c <xQueueGenericCreateStatic+0x84>
 800c90a:	2300      	movs	r3, #0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d10a      	bne.n	800c926 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c914:	f383 8811 	msr	BASEPRI, r3
 800c918:	f3bf 8f6f 	isb	sy
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	61fb      	str	r3, [r7, #28]
}
 800c922:	bf00      	nop
 800c924:	e7fe      	b.n	800c924 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c926:	2350      	movs	r3, #80	; 0x50
 800c928:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	2b50      	cmp	r3, #80	; 0x50
 800c92e:	d00a      	beq.n	800c946 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	61bb      	str	r3, [r7, #24]
}
 800c942:	bf00      	nop
 800c944:	e7fe      	b.n	800c944 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c946:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00d      	beq.n	800c96e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c954:	2201      	movs	r2, #1
 800c956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c95a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	4613      	mov	r3, r2
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	68b9      	ldr	r1, [r7, #8]
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f000 f805 	bl	800c978 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c970:	4618      	mov	r0, r3
 800c972:	3730      	adds	r7, #48	; 0x30
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	607a      	str	r2, [r7, #4]
 800c984:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d103      	bne.n	800c994 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	69ba      	ldr	r2, [r7, #24]
 800c990:	601a      	str	r2, [r3, #0]
 800c992:	e002      	b.n	800c99a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c9a6:	2101      	movs	r1, #1
 800c9a8:	69b8      	ldr	r0, [r7, #24]
 800c9aa:	f7ff ff05 	bl	800c7b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	78fa      	ldrb	r2, [r7, #3]
 800c9b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c9b6:	bf00      	nop
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
	...

0800c9c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b08e      	sub	sp, #56	; 0x38
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]
 800c9cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10a      	bne.n	800c9f2 <xQueueGenericSend+0x32>
	__asm volatile
 800c9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c9ee:	bf00      	nop
 800c9f0:	e7fe      	b.n	800c9f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d103      	bne.n	800ca00 <xQueueGenericSend+0x40>
 800c9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d101      	bne.n	800ca04 <xQueueGenericSend+0x44>
 800ca00:	2301      	movs	r3, #1
 800ca02:	e000      	b.n	800ca06 <xQueueGenericSend+0x46>
 800ca04:	2300      	movs	r3, #0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d10a      	bne.n	800ca20 <xQueueGenericSend+0x60>
	__asm volatile
 800ca0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0e:	f383 8811 	msr	BASEPRI, r3
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca1c:	bf00      	nop
 800ca1e:	e7fe      	b.n	800ca1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d103      	bne.n	800ca2e <xQueueGenericSend+0x6e>
 800ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d101      	bne.n	800ca32 <xQueueGenericSend+0x72>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e000      	b.n	800ca34 <xQueueGenericSend+0x74>
 800ca32:	2300      	movs	r3, #0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d10a      	bne.n	800ca4e <xQueueGenericSend+0x8e>
	__asm volatile
 800ca38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3c:	f383 8811 	msr	BASEPRI, r3
 800ca40:	f3bf 8f6f 	isb	sy
 800ca44:	f3bf 8f4f 	dsb	sy
 800ca48:	623b      	str	r3, [r7, #32]
}
 800ca4a:	bf00      	nop
 800ca4c:	e7fe      	b.n	800ca4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca4e:	f001 fa0d 	bl	800de6c <xTaskGetSchedulerState>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d102      	bne.n	800ca5e <xQueueGenericSend+0x9e>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d101      	bne.n	800ca62 <xQueueGenericSend+0xa2>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e000      	b.n	800ca64 <xQueueGenericSend+0xa4>
 800ca62:	2300      	movs	r3, #0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10a      	bne.n	800ca7e <xQueueGenericSend+0xbe>
	__asm volatile
 800ca68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	61fb      	str	r3, [r7, #28]
}
 800ca7a:	bf00      	nop
 800ca7c:	e7fe      	b.n	800ca7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca7e:	f001 ff51 	bl	800e924 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d302      	bcc.n	800ca94 <xQueueGenericSend+0xd4>
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d129      	bne.n	800cae8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca94:	683a      	ldr	r2, [r7, #0]
 800ca96:	68b9      	ldr	r1, [r7, #8]
 800ca98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca9a:	f000 fa0b 	bl	800ceb4 <prvCopyDataToQueue>
 800ca9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d010      	beq.n	800caca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800caa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caaa:	3324      	adds	r3, #36	; 0x24
 800caac:	4618      	mov	r0, r3
 800caae:	f000 fff5 	bl	800da9c <xTaskRemoveFromEventList>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d013      	beq.n	800cae0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cab8:	4b3f      	ldr	r3, [pc, #252]	; (800cbb8 <xQueueGenericSend+0x1f8>)
 800caba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cabe:	601a      	str	r2, [r3, #0]
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	f3bf 8f6f 	isb	sy
 800cac8:	e00a      	b.n	800cae0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800caca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d007      	beq.n	800cae0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cad0:	4b39      	ldr	r3, [pc, #228]	; (800cbb8 <xQueueGenericSend+0x1f8>)
 800cad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cad6:	601a      	str	r2, [r3, #0]
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cae0:	f001 ff50 	bl	800e984 <vPortExitCritical>
				return pdPASS;
 800cae4:	2301      	movs	r3, #1
 800cae6:	e063      	b.n	800cbb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d103      	bne.n	800caf6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800caee:	f001 ff49 	bl	800e984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	e05c      	b.n	800cbb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800caf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d106      	bne.n	800cb0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cafc:	f107 0314 	add.w	r3, r7, #20
 800cb00:	4618      	mov	r0, r3
 800cb02:	f001 f855 	bl	800dbb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb06:	2301      	movs	r3, #1
 800cb08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb0a:	f001 ff3b 	bl	800e984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb0e:	f000 fd9b 	bl	800d648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb12:	f001 ff07 	bl	800e924 <vPortEnterCritical>
 800cb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb1c:	b25b      	sxtb	r3, r3
 800cb1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb22:	d103      	bne.n	800cb2c <xQueueGenericSend+0x16c>
 800cb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb26:	2200      	movs	r2, #0
 800cb28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb32:	b25b      	sxtb	r3, r3
 800cb34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb38:	d103      	bne.n	800cb42 <xQueueGenericSend+0x182>
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb42:	f001 ff1f 	bl	800e984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb46:	1d3a      	adds	r2, r7, #4
 800cb48:	f107 0314 	add.w	r3, r7, #20
 800cb4c:	4611      	mov	r1, r2
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f001 f844 	bl	800dbdc <xTaskCheckForTimeOut>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d124      	bne.n	800cba4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cb5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb5c:	f000 faa2 	bl	800d0a4 <prvIsQueueFull>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d018      	beq.n	800cb98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb68:	3310      	adds	r3, #16
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f000 ff44 	bl	800d9fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb76:	f000 fa2d 	bl	800cfd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cb7a:	f000 fd73 	bl	800d664 <xTaskResumeAll>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f47f af7c 	bne.w	800ca7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cb86:	4b0c      	ldr	r3, [pc, #48]	; (800cbb8 <xQueueGenericSend+0x1f8>)
 800cb88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb8c:	601a      	str	r2, [r3, #0]
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	e772      	b.n	800ca7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cb98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb9a:	f000 fa1b 	bl	800cfd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb9e:	f000 fd61 	bl	800d664 <xTaskResumeAll>
 800cba2:	e76c      	b.n	800ca7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cba6:	f000 fa15 	bl	800cfd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbaa:	f000 fd5b 	bl	800d664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cbae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3738      	adds	r7, #56	; 0x38
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	e000ed04 	.word	0xe000ed04

0800cbbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b090      	sub	sp, #64	; 0x40
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
 800cbc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10a      	bne.n	800cbea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbe6:	bf00      	nop
 800cbe8:	e7fe      	b.n	800cbe8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d103      	bne.n	800cbf8 <xQueueGenericSendFromISR+0x3c>
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d101      	bne.n	800cbfc <xQueueGenericSendFromISR+0x40>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e000      	b.n	800cbfe <xQueueGenericSendFromISR+0x42>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10a      	bne.n	800cc18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc14:	bf00      	nop
 800cc16:	e7fe      	b.n	800cc16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	2b02      	cmp	r3, #2
 800cc1c:	d103      	bne.n	800cc26 <xQueueGenericSendFromISR+0x6a>
 800cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d101      	bne.n	800cc2a <xQueueGenericSendFromISR+0x6e>
 800cc26:	2301      	movs	r3, #1
 800cc28:	e000      	b.n	800cc2c <xQueueGenericSendFromISR+0x70>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10a      	bne.n	800cc46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	623b      	str	r3, [r7, #32]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc46:	f001 ff4f 	bl	800eae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cc4a:	f3ef 8211 	mrs	r2, BASEPRI
 800cc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	61fa      	str	r2, [r7, #28]
 800cc60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d302      	bcc.n	800cc78 <xQueueGenericSendFromISR+0xbc>
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	d12f      	bne.n	800ccd8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc88:	683a      	ldr	r2, [r7, #0]
 800cc8a:	68b9      	ldr	r1, [r7, #8]
 800cc8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc8e:	f000 f911 	bl	800ceb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cc96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc9a:	d112      	bne.n	800ccc2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d016      	beq.n	800ccd2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca6:	3324      	adds	r3, #36	; 0x24
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f000 fef7 	bl	800da9c <xTaskRemoveFromEventList>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00e      	beq.n	800ccd2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00b      	beq.n	800ccd2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	601a      	str	r2, [r3, #0]
 800ccc0:	e007      	b.n	800ccd2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ccc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	b25a      	sxtb	r2, r3
 800cccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ccd6:	e001      	b.n	800ccdc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccde:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cce6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3740      	adds	r7, #64	; 0x40
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
	...

0800ccf4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b08c      	sub	sp, #48	; 0x30
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cd00:	2300      	movs	r3, #0
 800cd02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d10a      	bne.n	800cd24 <xQueueReceive+0x30>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	623b      	str	r3, [r7, #32]
}
 800cd20:	bf00      	nop
 800cd22:	e7fe      	b.n	800cd22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d103      	bne.n	800cd32 <xQueueReceive+0x3e>
 800cd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <xQueueReceive+0x42>
 800cd32:	2301      	movs	r3, #1
 800cd34:	e000      	b.n	800cd38 <xQueueReceive+0x44>
 800cd36:	2300      	movs	r3, #0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10a      	bne.n	800cd52 <xQueueReceive+0x5e>
	__asm volatile
 800cd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	61fb      	str	r3, [r7, #28]
}
 800cd4e:	bf00      	nop
 800cd50:	e7fe      	b.n	800cd50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd52:	f001 f88b 	bl	800de6c <xTaskGetSchedulerState>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d102      	bne.n	800cd62 <xQueueReceive+0x6e>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d101      	bne.n	800cd66 <xQueueReceive+0x72>
 800cd62:	2301      	movs	r3, #1
 800cd64:	e000      	b.n	800cd68 <xQueueReceive+0x74>
 800cd66:	2300      	movs	r3, #0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d10a      	bne.n	800cd82 <xQueueReceive+0x8e>
	__asm volatile
 800cd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd70:	f383 8811 	msr	BASEPRI, r3
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	61bb      	str	r3, [r7, #24]
}
 800cd7e:	bf00      	nop
 800cd80:	e7fe      	b.n	800cd80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd82:	f001 fdcf 	bl	800e924 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d01f      	beq.n	800cdd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd92:	68b9      	ldr	r1, [r7, #8]
 800cd94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd96:	f000 f8f7 	bl	800cf88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9c:	1e5a      	subs	r2, r3, #1
 800cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda4:	691b      	ldr	r3, [r3, #16]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00f      	beq.n	800cdca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdac:	3310      	adds	r3, #16
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 fe74 	bl	800da9c <xTaskRemoveFromEventList>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d007      	beq.n	800cdca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cdba:	4b3d      	ldr	r3, [pc, #244]	; (800ceb0 <xQueueReceive+0x1bc>)
 800cdbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdc0:	601a      	str	r2, [r3, #0]
 800cdc2:	f3bf 8f4f 	dsb	sy
 800cdc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cdca:	f001 fddb 	bl	800e984 <vPortExitCritical>
				return pdPASS;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e069      	b.n	800cea6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d103      	bne.n	800cde0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdd8:	f001 fdd4 	bl	800e984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cddc:	2300      	movs	r3, #0
 800cdde:	e062      	b.n	800cea6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d106      	bne.n	800cdf4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cde6:	f107 0310 	add.w	r3, r7, #16
 800cdea:	4618      	mov	r0, r3
 800cdec:	f000 fee0 	bl	800dbb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdf4:	f001 fdc6 	bl	800e984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdf8:	f000 fc26 	bl	800d648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdfc:	f001 fd92 	bl	800e924 <vPortEnterCritical>
 800ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce06:	b25b      	sxtb	r3, r3
 800ce08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce0c:	d103      	bne.n	800ce16 <xQueueReceive+0x122>
 800ce0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce1c:	b25b      	sxtb	r3, r3
 800ce1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce22:	d103      	bne.n	800ce2c <xQueueReceive+0x138>
 800ce24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce26:	2200      	movs	r2, #0
 800ce28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce2c:	f001 fdaa 	bl	800e984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce30:	1d3a      	adds	r2, r7, #4
 800ce32:	f107 0310 	add.w	r3, r7, #16
 800ce36:	4611      	mov	r1, r2
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f000 fecf 	bl	800dbdc <xTaskCheckForTimeOut>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d123      	bne.n	800ce8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce46:	f000 f917 	bl	800d078 <prvIsQueueEmpty>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d017      	beq.n	800ce80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce52:	3324      	adds	r3, #36	; 0x24
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	4611      	mov	r1, r2
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 fdcf 	bl	800d9fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce60:	f000 f8b8 	bl	800cfd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce64:	f000 fbfe 	bl	800d664 <xTaskResumeAll>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d189      	bne.n	800cd82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ce6e:	4b10      	ldr	r3, [pc, #64]	; (800ceb0 <xQueueReceive+0x1bc>)
 800ce70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce74:	601a      	str	r2, [r3, #0]
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	e780      	b.n	800cd82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce82:	f000 f8a7 	bl	800cfd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce86:	f000 fbed 	bl	800d664 <xTaskResumeAll>
 800ce8a:	e77a      	b.n	800cd82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce8e:	f000 f8a1 	bl	800cfd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce92:	f000 fbe7 	bl	800d664 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce98:	f000 f8ee 	bl	800d078 <prvIsQueueEmpty>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f43f af6f 	beq.w	800cd82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cea4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3730      	adds	r7, #48	; 0x30
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	e000ed04 	.word	0xe000ed04

0800ceb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cec0:	2300      	movs	r3, #0
 800cec2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cec8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10d      	bne.n	800ceee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d14d      	bne.n	800cf76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	4618      	mov	r0, r3
 800cee0:	f000 ffe2 	bl	800dea8 <xTaskPriorityDisinherit>
 800cee4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2200      	movs	r2, #0
 800ceea:	609a      	str	r2, [r3, #8]
 800ceec:	e043      	b.n	800cf76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d119      	bne.n	800cf28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6858      	ldr	r0, [r3, #4]
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefc:	461a      	mov	r2, r3
 800cefe:	68b9      	ldr	r1, [r7, #8]
 800cf00:	f00b fcb4 	bl	801886c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	685a      	ldr	r2, [r3, #4]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf0c:	441a      	add	r2, r3
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	685a      	ldr	r2, [r3, #4]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d32b      	bcc.n	800cf76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	605a      	str	r2, [r3, #4]
 800cf26:	e026      	b.n	800cf76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	68d8      	ldr	r0, [r3, #12]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf30:	461a      	mov	r2, r3
 800cf32:	68b9      	ldr	r1, [r7, #8]
 800cf34:	f00b fc9a 	bl	801886c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	68da      	ldr	r2, [r3, #12]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf40:	425b      	negs	r3, r3
 800cf42:	441a      	add	r2, r3
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	68da      	ldr	r2, [r3, #12]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d207      	bcs.n	800cf64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	689a      	ldr	r2, [r3, #8]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5c:	425b      	negs	r3, r3
 800cf5e:	441a      	add	r2, r3
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d105      	bne.n	800cf76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d002      	beq.n	800cf76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	3b01      	subs	r3, #1
 800cf74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	1c5a      	adds	r2, r3, #1
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf7e:	697b      	ldr	r3, [r7, #20]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3718      	adds	r7, #24
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d018      	beq.n	800cfcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	68da      	ldr	r2, [r3, #12]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa2:	441a      	add	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	68da      	ldr	r2, [r3, #12]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d303      	bcc.n	800cfbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	68d9      	ldr	r1, [r3, #12]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	6838      	ldr	r0, [r7, #0]
 800cfc8:	f00b fc50 	bl	801886c <memcpy>
	}
}
 800cfcc:	bf00      	nop
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cfdc:	f001 fca2 	bl	800e924 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfe8:	e011      	b.n	800d00e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d012      	beq.n	800d018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	3324      	adds	r3, #36	; 0x24
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 fd50 	bl	800da9c <xTaskRemoveFromEventList>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d001      	beq.n	800d006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d002:	f000 fe4d 	bl	800dca0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d006:	7bfb      	ldrb	r3, [r7, #15]
 800d008:	3b01      	subs	r3, #1
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d00e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d012:	2b00      	cmp	r3, #0
 800d014:	dce9      	bgt.n	800cfea <prvUnlockQueue+0x16>
 800d016:	e000      	b.n	800d01a <prvUnlockQueue+0x46>
					break;
 800d018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	22ff      	movs	r2, #255	; 0xff
 800d01e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d022:	f001 fcaf 	bl	800e984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d026:	f001 fc7d 	bl	800e924 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d032:	e011      	b.n	800d058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d012      	beq.n	800d062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	3310      	adds	r3, #16
 800d040:	4618      	mov	r0, r3
 800d042:	f000 fd2b 	bl	800da9c <xTaskRemoveFromEventList>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d001      	beq.n	800d050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d04c:	f000 fe28 	bl	800dca0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d050:	7bbb      	ldrb	r3, [r7, #14]
 800d052:	3b01      	subs	r3, #1
 800d054:	b2db      	uxtb	r3, r3
 800d056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	dce9      	bgt.n	800d034 <prvUnlockQueue+0x60>
 800d060:	e000      	b.n	800d064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	22ff      	movs	r2, #255	; 0xff
 800d068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d06c:	f001 fc8a 	bl	800e984 <vPortExitCritical>
}
 800d070:	bf00      	nop
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d080:	f001 fc50 	bl	800e924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d102      	bne.n	800d092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d08c:	2301      	movs	r3, #1
 800d08e:	60fb      	str	r3, [r7, #12]
 800d090:	e001      	b.n	800d096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d092:	2300      	movs	r3, #0
 800d094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d096:	f001 fc75 	bl	800e984 <vPortExitCritical>

	return xReturn;
 800d09a:	68fb      	ldr	r3, [r7, #12]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0ac:	f001 fc3a 	bl	800e924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d102      	bne.n	800d0c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	60fb      	str	r3, [r7, #12]
 800d0c0:	e001      	b.n	800d0c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0c6:	f001 fc5d 	bl	800e984 <vPortExitCritical>

	return xReturn;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0de:	2300      	movs	r3, #0
 800d0e0:	60fb      	str	r3, [r7, #12]
 800d0e2:	e014      	b.n	800d10e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0e4:	4a0f      	ldr	r2, [pc, #60]	; (800d124 <vQueueAddToRegistry+0x50>)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10b      	bne.n	800d108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0f0:	490c      	ldr	r1, [pc, #48]	; (800d124 <vQueueAddToRegistry+0x50>)
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	683a      	ldr	r2, [r7, #0]
 800d0f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0fa:	4a0a      	ldr	r2, [pc, #40]	; (800d124 <vQueueAddToRegistry+0x50>)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	00db      	lsls	r3, r3, #3
 800d100:	4413      	add	r3, r2
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d106:	e006      	b.n	800d116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	3301      	adds	r3, #1
 800d10c:	60fb      	str	r3, [r7, #12]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2b07      	cmp	r3, #7
 800d112:	d9e7      	bls.n	800d0e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d114:	bf00      	nop
 800d116:	bf00      	nop
 800d118:	3714      	adds	r7, #20
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop
 800d124:	20008378 	.word	0x20008378

0800d128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d138:	f001 fbf4 	bl	800e924 <vPortEnterCritical>
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d142:	b25b      	sxtb	r3, r3
 800d144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d148:	d103      	bne.n	800d152 <vQueueWaitForMessageRestricted+0x2a>
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d158:	b25b      	sxtb	r3, r3
 800d15a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d15e:	d103      	bne.n	800d168 <vQueueWaitForMessageRestricted+0x40>
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d168:	f001 fc0c 	bl	800e984 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d170:	2b00      	cmp	r3, #0
 800d172:	d106      	bne.n	800d182 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	3324      	adds	r3, #36	; 0x24
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	68b9      	ldr	r1, [r7, #8]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f000 fc61 	bl	800da44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d182:	6978      	ldr	r0, [r7, #20]
 800d184:	f7ff ff26 	bl	800cfd4 <prvUnlockQueue>
	}
 800d188:	bf00      	nop
 800d18a:	3718      	adds	r7, #24
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d190:	b580      	push	{r7, lr}
 800d192:	b08e      	sub	sp, #56	; 0x38
 800d194:	af04      	add	r7, sp, #16
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
 800d19c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10a      	bne.n	800d1ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800d1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	623b      	str	r3, [r7, #32]
}
 800d1b6:	bf00      	nop
 800d1b8:	e7fe      	b.n	800d1b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d10a      	bne.n	800d1d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c4:	f383 8811 	msr	BASEPRI, r3
 800d1c8:	f3bf 8f6f 	isb	sy
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	61fb      	str	r3, [r7, #28]
}
 800d1d2:	bf00      	nop
 800d1d4:	e7fe      	b.n	800d1d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d1d6:	23bc      	movs	r3, #188	; 0xbc
 800d1d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	2bbc      	cmp	r3, #188	; 0xbc
 800d1de:	d00a      	beq.n	800d1f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e4:	f383 8811 	msr	BASEPRI, r3
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	61bb      	str	r3, [r7, #24]
}
 800d1f2:	bf00      	nop
 800d1f4:	e7fe      	b.n	800d1f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d01e      	beq.n	800d23c <xTaskCreateStatic+0xac>
 800d1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d200:	2b00      	cmp	r3, #0
 800d202:	d01b      	beq.n	800d23c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d206:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d20c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d210:	2202      	movs	r2, #2
 800d212:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d216:	2300      	movs	r3, #0
 800d218:	9303      	str	r3, [sp, #12]
 800d21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21c:	9302      	str	r3, [sp, #8]
 800d21e:	f107 0314 	add.w	r3, r7, #20
 800d222:	9301      	str	r3, [sp, #4]
 800d224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d226:	9300      	str	r3, [sp, #0]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	68b9      	ldr	r1, [r7, #8]
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f000 f850 	bl	800d2d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d236:	f000 f8f3 	bl	800d420 <prvAddNewTaskToReadyList>
 800d23a:	e001      	b.n	800d240 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d23c:	2300      	movs	r3, #0
 800d23e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d240:	697b      	ldr	r3, [r7, #20]
	}
 800d242:	4618      	mov	r0, r3
 800d244:	3728      	adds	r7, #40	; 0x28
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b08c      	sub	sp, #48	; 0x30
 800d24e:	af04      	add	r7, sp, #16
 800d250:	60f8      	str	r0, [r7, #12]
 800d252:	60b9      	str	r1, [r7, #8]
 800d254:	603b      	str	r3, [r7, #0]
 800d256:	4613      	mov	r3, r2
 800d258:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d25a:	88fb      	ldrh	r3, [r7, #6]
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	4618      	mov	r0, r3
 800d260:	f001 fc82 	bl	800eb68 <pvPortMalloc>
 800d264:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00e      	beq.n	800d28a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d26c:	20bc      	movs	r0, #188	; 0xbc
 800d26e:	f001 fc7b 	bl	800eb68 <pvPortMalloc>
 800d272:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d003      	beq.n	800d282 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	697a      	ldr	r2, [r7, #20]
 800d27e:	631a      	str	r2, [r3, #48]	; 0x30
 800d280:	e005      	b.n	800d28e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d282:	6978      	ldr	r0, [r7, #20]
 800d284:	f001 fd3c 	bl	800ed00 <vPortFree>
 800d288:	e001      	b.n	800d28e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d28a:	2300      	movs	r3, #0
 800d28c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d017      	beq.n	800d2c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	2200      	movs	r2, #0
 800d298:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d29c:	88fa      	ldrh	r2, [r7, #6]
 800d29e:	2300      	movs	r3, #0
 800d2a0:	9303      	str	r3, [sp, #12]
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	9302      	str	r3, [sp, #8]
 800d2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a8:	9301      	str	r3, [sp, #4]
 800d2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ac:	9300      	str	r3, [sp, #0]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	68b9      	ldr	r1, [r7, #8]
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f000 f80e 	bl	800d2d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2b8:	69f8      	ldr	r0, [r7, #28]
 800d2ba:	f000 f8b1 	bl	800d420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	61bb      	str	r3, [r7, #24]
 800d2c2:	e002      	b.n	800d2ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d2c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d2ca:	69bb      	ldr	r3, [r7, #24]
	}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3720      	adds	r7, #32
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b088      	sub	sp, #32
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
 800d2e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	21a5      	movs	r1, #165	; 0xa5
 800d2ee:	f00b facb 	bl	8018888 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	4413      	add	r3, r2
 800d302:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	f023 0307 	bic.w	r3, r3, #7
 800d30a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	f003 0307 	and.w	r3, r3, #7
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00a      	beq.n	800d32c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31a:	f383 8811 	msr	BASEPRI, r3
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	617b      	str	r3, [r7, #20]
}
 800d328:	bf00      	nop
 800d32a:	e7fe      	b.n	800d32a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d01f      	beq.n	800d372 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d332:	2300      	movs	r3, #0
 800d334:	61fb      	str	r3, [r7, #28]
 800d336:	e012      	b.n	800d35e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d338:	68ba      	ldr	r2, [r7, #8]
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	4413      	add	r3, r2
 800d33e:	7819      	ldrb	r1, [r3, #0]
 800d340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	4413      	add	r3, r2
 800d346:	3334      	adds	r3, #52	; 0x34
 800d348:	460a      	mov	r2, r1
 800d34a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d34c:	68ba      	ldr	r2, [r7, #8]
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	4413      	add	r3, r2
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d006      	beq.n	800d366 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	3301      	adds	r3, #1
 800d35c:	61fb      	str	r3, [r7, #28]
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	2b0f      	cmp	r3, #15
 800d362:	d9e9      	bls.n	800d338 <prvInitialiseNewTask+0x64>
 800d364:	e000      	b.n	800d368 <prvInitialiseNewTask+0x94>
			{
				break;
 800d366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	2200      	movs	r2, #0
 800d36c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d370:	e003      	b.n	800d37a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d374:	2200      	movs	r2, #0
 800d376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37c:	2b37      	cmp	r3, #55	; 0x37
 800d37e:	d901      	bls.n	800d384 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d380:	2337      	movs	r3, #55	; 0x37
 800d382:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d388:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d38e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d392:	2200      	movs	r2, #0
 800d394:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d398:	3304      	adds	r3, #4
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7ff f978 	bl	800c690 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a2:	3318      	adds	r3, #24
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff f973 	bl	800c690 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d2:	3354      	adds	r3, #84	; 0x54
 800d3d4:	2260      	movs	r2, #96	; 0x60
 800d3d6:	2100      	movs	r1, #0
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f00b fa55 	bl	8018888 <memset>
 800d3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e0:	4a0c      	ldr	r2, [pc, #48]	; (800d414 <prvInitialiseNewTask+0x140>)
 800d3e2:	659a      	str	r2, [r3, #88]	; 0x58
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e6:	4a0c      	ldr	r2, [pc, #48]	; (800d418 <prvInitialiseNewTask+0x144>)
 800d3e8:	65da      	str	r2, [r3, #92]	; 0x5c
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	4a0b      	ldr	r2, [pc, #44]	; (800d41c <prvInitialiseNewTask+0x148>)
 800d3ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	68f9      	ldr	r1, [r7, #12]
 800d3f4:	69b8      	ldr	r0, [r7, #24]
 800d3f6:	f001 f967 	bl	800e6c8 <pxPortInitialiseStack>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d402:	2b00      	cmp	r3, #0
 800d404:	d002      	beq.n	800d40c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d40a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d40c:	bf00      	nop
 800d40e:	3720      	adds	r7, #32
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	0801aa30 	.word	0x0801aa30
 800d418:	0801aa50 	.word	0x0801aa50
 800d41c:	0801aa10 	.word	0x0801aa10

0800d420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d428:	f001 fa7c 	bl	800e924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d42c:	4b2d      	ldr	r3, [pc, #180]	; (800d4e4 <prvAddNewTaskToReadyList+0xc4>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	3301      	adds	r3, #1
 800d432:	4a2c      	ldr	r2, [pc, #176]	; (800d4e4 <prvAddNewTaskToReadyList+0xc4>)
 800d434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d436:	4b2c      	ldr	r3, [pc, #176]	; (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d109      	bne.n	800d452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d43e:	4a2a      	ldr	r2, [pc, #168]	; (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d444:	4b27      	ldr	r3, [pc, #156]	; (800d4e4 <prvAddNewTaskToReadyList+0xc4>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d110      	bne.n	800d46e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d44c:	f000 fc4c 	bl	800dce8 <prvInitialiseTaskLists>
 800d450:	e00d      	b.n	800d46e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d452:	4b26      	ldr	r3, [pc, #152]	; (800d4ec <prvAddNewTaskToReadyList+0xcc>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d109      	bne.n	800d46e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d45a:	4b23      	ldr	r3, [pc, #140]	; (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d464:	429a      	cmp	r2, r3
 800d466:	d802      	bhi.n	800d46e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d468:	4a1f      	ldr	r2, [pc, #124]	; (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d46e:	4b20      	ldr	r3, [pc, #128]	; (800d4f0 <prvAddNewTaskToReadyList+0xd0>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	3301      	adds	r3, #1
 800d474:	4a1e      	ldr	r2, [pc, #120]	; (800d4f0 <prvAddNewTaskToReadyList+0xd0>)
 800d476:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d478:	4b1d      	ldr	r3, [pc, #116]	; (800d4f0 <prvAddNewTaskToReadyList+0xd0>)
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d484:	4b1b      	ldr	r3, [pc, #108]	; (800d4f4 <prvAddNewTaskToReadyList+0xd4>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	429a      	cmp	r2, r3
 800d48a:	d903      	bls.n	800d494 <prvAddNewTaskToReadyList+0x74>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d490:	4a18      	ldr	r2, [pc, #96]	; (800d4f4 <prvAddNewTaskToReadyList+0xd4>)
 800d492:	6013      	str	r3, [r2, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d498:	4613      	mov	r3, r2
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	4413      	add	r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	4a15      	ldr	r2, [pc, #84]	; (800d4f8 <prvAddNewTaskToReadyList+0xd8>)
 800d4a2:	441a      	add	r2, r3
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	3304      	adds	r3, #4
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	4610      	mov	r0, r2
 800d4ac:	f7ff f8fd 	bl	800c6aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d4b0:	f001 fa68 	bl	800e984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d4b4:	4b0d      	ldr	r3, [pc, #52]	; (800d4ec <prvAddNewTaskToReadyList+0xcc>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00e      	beq.n	800d4da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d4bc:	4b0a      	ldr	r3, [pc, #40]	; (800d4e8 <prvAddNewTaskToReadyList+0xc8>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d207      	bcs.n	800d4da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d4ca:	4b0c      	ldr	r3, [pc, #48]	; (800d4fc <prvAddNewTaskToReadyList+0xdc>)
 800d4cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4d0:	601a      	str	r2, [r3, #0]
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4da:	bf00      	nop
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	2000888c 	.word	0x2000888c
 800d4e8:	200083b8 	.word	0x200083b8
 800d4ec:	20008898 	.word	0x20008898
 800d4f0:	200088a8 	.word	0x200088a8
 800d4f4:	20008894 	.word	0x20008894
 800d4f8:	200083bc 	.word	0x200083bc
 800d4fc:	e000ed04 	.word	0xe000ed04

0800d500 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d508:	2300      	movs	r3, #0
 800d50a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d017      	beq.n	800d542 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d512:	4b13      	ldr	r3, [pc, #76]	; (800d560 <vTaskDelay+0x60>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00a      	beq.n	800d530 <vTaskDelay+0x30>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	60bb      	str	r3, [r7, #8]
}
 800d52c:	bf00      	nop
 800d52e:	e7fe      	b.n	800d52e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d530:	f000 f88a 	bl	800d648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d534:	2100      	movs	r1, #0
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 fd24 	bl	800df84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d53c:	f000 f892 	bl	800d664 <xTaskResumeAll>
 800d540:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d107      	bne.n	800d558 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d548:	4b06      	ldr	r3, [pc, #24]	; (800d564 <vTaskDelay+0x64>)
 800d54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	f3bf 8f4f 	dsb	sy
 800d554:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d558:	bf00      	nop
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	200088b4 	.word	0x200088b4
 800d564:	e000ed04 	.word	0xe000ed04

0800d568 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08a      	sub	sp, #40	; 0x28
 800d56c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d56e:	2300      	movs	r3, #0
 800d570:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d572:	2300      	movs	r3, #0
 800d574:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d576:	463a      	mov	r2, r7
 800d578:	1d39      	adds	r1, r7, #4
 800d57a:	f107 0308 	add.w	r3, r7, #8
 800d57e:	4618      	mov	r0, r3
 800d580:	f7ff f832 	bl	800c5e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d584:	6839      	ldr	r1, [r7, #0]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	68ba      	ldr	r2, [r7, #8]
 800d58a:	9202      	str	r2, [sp, #8]
 800d58c:	9301      	str	r3, [sp, #4]
 800d58e:	2300      	movs	r3, #0
 800d590:	9300      	str	r3, [sp, #0]
 800d592:	2300      	movs	r3, #0
 800d594:	460a      	mov	r2, r1
 800d596:	4924      	ldr	r1, [pc, #144]	; (800d628 <vTaskStartScheduler+0xc0>)
 800d598:	4824      	ldr	r0, [pc, #144]	; (800d62c <vTaskStartScheduler+0xc4>)
 800d59a:	f7ff fdf9 	bl	800d190 <xTaskCreateStatic>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	4a23      	ldr	r2, [pc, #140]	; (800d630 <vTaskStartScheduler+0xc8>)
 800d5a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d5a4:	4b22      	ldr	r3, [pc, #136]	; (800d630 <vTaskStartScheduler+0xc8>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d002      	beq.n	800d5b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	617b      	str	r3, [r7, #20]
 800d5b0:	e001      	b.n	800d5b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d102      	bne.n	800d5c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d5bc:	f000 fd36 	bl	800e02c <xTimerCreateTimerTask>
 800d5c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d11b      	bne.n	800d600 <vTaskStartScheduler+0x98>
	__asm volatile
 800d5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5cc:	f383 8811 	msr	BASEPRI, r3
 800d5d0:	f3bf 8f6f 	isb	sy
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	613b      	str	r3, [r7, #16]
}
 800d5da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d5dc:	4b15      	ldr	r3, [pc, #84]	; (800d634 <vTaskStartScheduler+0xcc>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	3354      	adds	r3, #84	; 0x54
 800d5e2:	4a15      	ldr	r2, [pc, #84]	; (800d638 <vTaskStartScheduler+0xd0>)
 800d5e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d5e6:	4b15      	ldr	r3, [pc, #84]	; (800d63c <vTaskStartScheduler+0xd4>)
 800d5e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d5ee:	4b14      	ldr	r3, [pc, #80]	; (800d640 <vTaskStartScheduler+0xd8>)
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d5f4:	4b13      	ldr	r3, [pc, #76]	; (800d644 <vTaskStartScheduler+0xdc>)
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d5fa:	f001 f8f1 	bl	800e7e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d5fe:	e00e      	b.n	800d61e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d606:	d10a      	bne.n	800d61e <vTaskStartScheduler+0xb6>
	__asm volatile
 800d608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60c:	f383 8811 	msr	BASEPRI, r3
 800d610:	f3bf 8f6f 	isb	sy
 800d614:	f3bf 8f4f 	dsb	sy
 800d618:	60fb      	str	r3, [r7, #12]
}
 800d61a:	bf00      	nop
 800d61c:	e7fe      	b.n	800d61c <vTaskStartScheduler+0xb4>
}
 800d61e:	bf00      	nop
 800d620:	3718      	adds	r7, #24
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	08019efc 	.word	0x08019efc
 800d62c:	0800dcb9 	.word	0x0800dcb9
 800d630:	200088b0 	.word	0x200088b0
 800d634:	200083b8 	.word	0x200083b8
 800d638:	200001a4 	.word	0x200001a4
 800d63c:	200088ac 	.word	0x200088ac
 800d640:	20008898 	.word	0x20008898
 800d644:	20008890 	.word	0x20008890

0800d648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d648:	b480      	push	{r7}
 800d64a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d64c:	4b04      	ldr	r3, [pc, #16]	; (800d660 <vTaskSuspendAll+0x18>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	3301      	adds	r3, #1
 800d652:	4a03      	ldr	r2, [pc, #12]	; (800d660 <vTaskSuspendAll+0x18>)
 800d654:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d656:	bf00      	nop
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	200088b4 	.word	0x200088b4

0800d664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d66a:	2300      	movs	r3, #0
 800d66c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d66e:	2300      	movs	r3, #0
 800d670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d672:	4b42      	ldr	r3, [pc, #264]	; (800d77c <xTaskResumeAll+0x118>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d10a      	bne.n	800d690 <xTaskResumeAll+0x2c>
	__asm volatile
 800d67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67e:	f383 8811 	msr	BASEPRI, r3
 800d682:	f3bf 8f6f 	isb	sy
 800d686:	f3bf 8f4f 	dsb	sy
 800d68a:	603b      	str	r3, [r7, #0]
}
 800d68c:	bf00      	nop
 800d68e:	e7fe      	b.n	800d68e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d690:	f001 f948 	bl	800e924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d694:	4b39      	ldr	r3, [pc, #228]	; (800d77c <xTaskResumeAll+0x118>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	3b01      	subs	r3, #1
 800d69a:	4a38      	ldr	r2, [pc, #224]	; (800d77c <xTaskResumeAll+0x118>)
 800d69c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d69e:	4b37      	ldr	r3, [pc, #220]	; (800d77c <xTaskResumeAll+0x118>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d162      	bne.n	800d76c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d6a6:	4b36      	ldr	r3, [pc, #216]	; (800d780 <xTaskResumeAll+0x11c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d05e      	beq.n	800d76c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d6ae:	e02f      	b.n	800d710 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6b0:	4b34      	ldr	r3, [pc, #208]	; (800d784 <xTaskResumeAll+0x120>)
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	3318      	adds	r3, #24
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff f851 	bl	800c764 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7ff f84c 	bl	800c764 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6d0:	4b2d      	ldr	r3, [pc, #180]	; (800d788 <xTaskResumeAll+0x124>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d903      	bls.n	800d6e0 <xTaskResumeAll+0x7c>
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6dc:	4a2a      	ldr	r2, [pc, #168]	; (800d788 <xTaskResumeAll+0x124>)
 800d6de:	6013      	str	r3, [r2, #0]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	4413      	add	r3, r2
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	4a27      	ldr	r2, [pc, #156]	; (800d78c <xTaskResumeAll+0x128>)
 800d6ee:	441a      	add	r2, r3
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	4610      	mov	r0, r2
 800d6f8:	f7fe ffd7 	bl	800c6aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d700:	4b23      	ldr	r3, [pc, #140]	; (800d790 <xTaskResumeAll+0x12c>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d706:	429a      	cmp	r2, r3
 800d708:	d302      	bcc.n	800d710 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d70a:	4b22      	ldr	r3, [pc, #136]	; (800d794 <xTaskResumeAll+0x130>)
 800d70c:	2201      	movs	r2, #1
 800d70e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d710:	4b1c      	ldr	r3, [pc, #112]	; (800d784 <xTaskResumeAll+0x120>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1cb      	bne.n	800d6b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d001      	beq.n	800d722 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d71e:	f000 fb85 	bl	800de2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d722:	4b1d      	ldr	r3, [pc, #116]	; (800d798 <xTaskResumeAll+0x134>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d010      	beq.n	800d750 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d72e:	f000 f847 	bl	800d7c0 <xTaskIncrementTick>
 800d732:	4603      	mov	r3, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d738:	4b16      	ldr	r3, [pc, #88]	; (800d794 <xTaskResumeAll+0x130>)
 800d73a:	2201      	movs	r2, #1
 800d73c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	3b01      	subs	r3, #1
 800d742:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d1f1      	bne.n	800d72e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d74a:	4b13      	ldr	r3, [pc, #76]	; (800d798 <xTaskResumeAll+0x134>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d750:	4b10      	ldr	r3, [pc, #64]	; (800d794 <xTaskResumeAll+0x130>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d009      	beq.n	800d76c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d758:	2301      	movs	r3, #1
 800d75a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d75c:	4b0f      	ldr	r3, [pc, #60]	; (800d79c <xTaskResumeAll+0x138>)
 800d75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d762:	601a      	str	r2, [r3, #0]
 800d764:	f3bf 8f4f 	dsb	sy
 800d768:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d76c:	f001 f90a 	bl	800e984 <vPortExitCritical>

	return xAlreadyYielded;
 800d770:	68bb      	ldr	r3, [r7, #8]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	200088b4 	.word	0x200088b4
 800d780:	2000888c 	.word	0x2000888c
 800d784:	2000884c 	.word	0x2000884c
 800d788:	20008894 	.word	0x20008894
 800d78c:	200083bc 	.word	0x200083bc
 800d790:	200083b8 	.word	0x200083b8
 800d794:	200088a0 	.word	0x200088a0
 800d798:	2000889c 	.word	0x2000889c
 800d79c:	e000ed04 	.word	0xe000ed04

0800d7a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d7a6:	4b05      	ldr	r3, [pc, #20]	; (800d7bc <xTaskGetTickCount+0x1c>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d7ac:	687b      	ldr	r3, [r7, #4]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	370c      	adds	r7, #12
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop
 800d7bc:	20008890 	.word	0x20008890

0800d7c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ca:	4b4f      	ldr	r3, [pc, #316]	; (800d908 <xTaskIncrementTick+0x148>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	f040 808f 	bne.w	800d8f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d7d4:	4b4d      	ldr	r3, [pc, #308]	; (800d90c <xTaskIncrementTick+0x14c>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d7dc:	4a4b      	ldr	r2, [pc, #300]	; (800d90c <xTaskIncrementTick+0x14c>)
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d120      	bne.n	800d82a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d7e8:	4b49      	ldr	r3, [pc, #292]	; (800d910 <xTaskIncrementTick+0x150>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00a      	beq.n	800d808 <xTaskIncrementTick+0x48>
	__asm volatile
 800d7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f6:	f383 8811 	msr	BASEPRI, r3
 800d7fa:	f3bf 8f6f 	isb	sy
 800d7fe:	f3bf 8f4f 	dsb	sy
 800d802:	603b      	str	r3, [r7, #0]
}
 800d804:	bf00      	nop
 800d806:	e7fe      	b.n	800d806 <xTaskIncrementTick+0x46>
 800d808:	4b41      	ldr	r3, [pc, #260]	; (800d910 <xTaskIncrementTick+0x150>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	60fb      	str	r3, [r7, #12]
 800d80e:	4b41      	ldr	r3, [pc, #260]	; (800d914 <xTaskIncrementTick+0x154>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4a3f      	ldr	r2, [pc, #252]	; (800d910 <xTaskIncrementTick+0x150>)
 800d814:	6013      	str	r3, [r2, #0]
 800d816:	4a3f      	ldr	r2, [pc, #252]	; (800d914 <xTaskIncrementTick+0x154>)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6013      	str	r3, [r2, #0]
 800d81c:	4b3e      	ldr	r3, [pc, #248]	; (800d918 <xTaskIncrementTick+0x158>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	3301      	adds	r3, #1
 800d822:	4a3d      	ldr	r2, [pc, #244]	; (800d918 <xTaskIncrementTick+0x158>)
 800d824:	6013      	str	r3, [r2, #0]
 800d826:	f000 fb01 	bl	800de2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d82a:	4b3c      	ldr	r3, [pc, #240]	; (800d91c <xTaskIncrementTick+0x15c>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	693a      	ldr	r2, [r7, #16]
 800d830:	429a      	cmp	r2, r3
 800d832:	d349      	bcc.n	800d8c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d834:	4b36      	ldr	r3, [pc, #216]	; (800d910 <xTaskIncrementTick+0x150>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d104      	bne.n	800d848 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d83e:	4b37      	ldr	r3, [pc, #220]	; (800d91c <xTaskIncrementTick+0x15c>)
 800d840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d844:	601a      	str	r2, [r3, #0]
					break;
 800d846:	e03f      	b.n	800d8c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d848:	4b31      	ldr	r3, [pc, #196]	; (800d910 <xTaskIncrementTick+0x150>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d858:	693a      	ldr	r2, [r7, #16]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d203      	bcs.n	800d868 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d860:	4a2e      	ldr	r2, [pc, #184]	; (800d91c <xTaskIncrementTick+0x15c>)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d866:	e02f      	b.n	800d8c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	3304      	adds	r3, #4
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fe ff79 	bl	800c764 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d876:	2b00      	cmp	r3, #0
 800d878:	d004      	beq.n	800d884 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	3318      	adds	r3, #24
 800d87e:	4618      	mov	r0, r3
 800d880:	f7fe ff70 	bl	800c764 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d888:	4b25      	ldr	r3, [pc, #148]	; (800d920 <xTaskIncrementTick+0x160>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d903      	bls.n	800d898 <xTaskIncrementTick+0xd8>
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d894:	4a22      	ldr	r2, [pc, #136]	; (800d920 <xTaskIncrementTick+0x160>)
 800d896:	6013      	str	r3, [r2, #0]
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89c:	4613      	mov	r3, r2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	4413      	add	r3, r2
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	4a1f      	ldr	r2, [pc, #124]	; (800d924 <xTaskIncrementTick+0x164>)
 800d8a6:	441a      	add	r2, r3
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	4610      	mov	r0, r2
 800d8b0:	f7fe fefb 	bl	800c6aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b8:	4b1b      	ldr	r3, [pc, #108]	; (800d928 <xTaskIncrementTick+0x168>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d3b8      	bcc.n	800d834 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8c6:	e7b5      	b.n	800d834 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d8c8:	4b17      	ldr	r3, [pc, #92]	; (800d928 <xTaskIncrementTick+0x168>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ce:	4915      	ldr	r1, [pc, #84]	; (800d924 <xTaskIncrementTick+0x164>)
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	4413      	add	r3, r2
 800d8d6:	009b      	lsls	r3, r3, #2
 800d8d8:	440b      	add	r3, r1
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d901      	bls.n	800d8e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d8e4:	4b11      	ldr	r3, [pc, #68]	; (800d92c <xTaskIncrementTick+0x16c>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d007      	beq.n	800d8fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	617b      	str	r3, [r7, #20]
 800d8f0:	e004      	b.n	800d8fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d8f2:	4b0f      	ldr	r3, [pc, #60]	; (800d930 <xTaskIncrementTick+0x170>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	4a0d      	ldr	r2, [pc, #52]	; (800d930 <xTaskIncrementTick+0x170>)
 800d8fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d8fc:	697b      	ldr	r3, [r7, #20]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3718      	adds	r7, #24
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	200088b4 	.word	0x200088b4
 800d90c:	20008890 	.word	0x20008890
 800d910:	20008844 	.word	0x20008844
 800d914:	20008848 	.word	0x20008848
 800d918:	200088a4 	.word	0x200088a4
 800d91c:	200088ac 	.word	0x200088ac
 800d920:	20008894 	.word	0x20008894
 800d924:	200083bc 	.word	0x200083bc
 800d928:	200083b8 	.word	0x200083b8
 800d92c:	200088a0 	.word	0x200088a0
 800d930:	2000889c 	.word	0x2000889c

0800d934 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d934:	b480      	push	{r7}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d93a:	4b2a      	ldr	r3, [pc, #168]	; (800d9e4 <vTaskSwitchContext+0xb0>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d003      	beq.n	800d94a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d942:	4b29      	ldr	r3, [pc, #164]	; (800d9e8 <vTaskSwitchContext+0xb4>)
 800d944:	2201      	movs	r2, #1
 800d946:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d948:	e046      	b.n	800d9d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d94a:	4b27      	ldr	r3, [pc, #156]	; (800d9e8 <vTaskSwitchContext+0xb4>)
 800d94c:	2200      	movs	r2, #0
 800d94e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d950:	4b26      	ldr	r3, [pc, #152]	; (800d9ec <vTaskSwitchContext+0xb8>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	60fb      	str	r3, [r7, #12]
 800d956:	e010      	b.n	800d97a <vTaskSwitchContext+0x46>
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d10a      	bne.n	800d974 <vTaskSwitchContext+0x40>
	__asm volatile
 800d95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d962:	f383 8811 	msr	BASEPRI, r3
 800d966:	f3bf 8f6f 	isb	sy
 800d96a:	f3bf 8f4f 	dsb	sy
 800d96e:	607b      	str	r3, [r7, #4]
}
 800d970:	bf00      	nop
 800d972:	e7fe      	b.n	800d972 <vTaskSwitchContext+0x3e>
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3b01      	subs	r3, #1
 800d978:	60fb      	str	r3, [r7, #12]
 800d97a:	491d      	ldr	r1, [pc, #116]	; (800d9f0 <vTaskSwitchContext+0xbc>)
 800d97c:	68fa      	ldr	r2, [r7, #12]
 800d97e:	4613      	mov	r3, r2
 800d980:	009b      	lsls	r3, r3, #2
 800d982:	4413      	add	r3, r2
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	440b      	add	r3, r1
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d0e4      	beq.n	800d958 <vTaskSwitchContext+0x24>
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	4613      	mov	r3, r2
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	4413      	add	r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	4a15      	ldr	r2, [pc, #84]	; (800d9f0 <vTaskSwitchContext+0xbc>)
 800d99a:	4413      	add	r3, r2
 800d99c:	60bb      	str	r3, [r7, #8]
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	685a      	ldr	r2, [r3, #4]
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	605a      	str	r2, [r3, #4]
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	685a      	ldr	r2, [r3, #4]
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	3308      	adds	r3, #8
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d104      	bne.n	800d9be <vTaskSwitchContext+0x8a>
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	685a      	ldr	r2, [r3, #4]
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	605a      	str	r2, [r3, #4]
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	68db      	ldr	r3, [r3, #12]
 800d9c4:	4a0b      	ldr	r2, [pc, #44]	; (800d9f4 <vTaskSwitchContext+0xc0>)
 800d9c6:	6013      	str	r3, [r2, #0]
 800d9c8:	4a08      	ldr	r2, [pc, #32]	; (800d9ec <vTaskSwitchContext+0xb8>)
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d9ce:	4b09      	ldr	r3, [pc, #36]	; (800d9f4 <vTaskSwitchContext+0xc0>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	3354      	adds	r3, #84	; 0x54
 800d9d4:	4a08      	ldr	r2, [pc, #32]	; (800d9f8 <vTaskSwitchContext+0xc4>)
 800d9d6:	6013      	str	r3, [r2, #0]
}
 800d9d8:	bf00      	nop
 800d9da:	3714      	adds	r7, #20
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr
 800d9e4:	200088b4 	.word	0x200088b4
 800d9e8:	200088a0 	.word	0x200088a0
 800d9ec:	20008894 	.word	0x20008894
 800d9f0:	200083bc 	.word	0x200083bc
 800d9f4:	200083b8 	.word	0x200083b8
 800d9f8:	200001a4 	.word	0x200001a4

0800d9fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10a      	bne.n	800da22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800da0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	60fb      	str	r3, [r7, #12]
}
 800da1e:	bf00      	nop
 800da20:	e7fe      	b.n	800da20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da22:	4b07      	ldr	r3, [pc, #28]	; (800da40 <vTaskPlaceOnEventList+0x44>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	3318      	adds	r3, #24
 800da28:	4619      	mov	r1, r3
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7fe fe61 	bl	800c6f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da30:	2101      	movs	r1, #1
 800da32:	6838      	ldr	r0, [r7, #0]
 800da34:	f000 faa6 	bl	800df84 <prvAddCurrentTaskToDelayedList>
}
 800da38:	bf00      	nop
 800da3a:	3710      	adds	r7, #16
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	200083b8 	.word	0x200083b8

0800da44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da44:	b580      	push	{r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d10a      	bne.n	800da6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800da56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da5a:	f383 8811 	msr	BASEPRI, r3
 800da5e:	f3bf 8f6f 	isb	sy
 800da62:	f3bf 8f4f 	dsb	sy
 800da66:	617b      	str	r3, [r7, #20]
}
 800da68:	bf00      	nop
 800da6a:	e7fe      	b.n	800da6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da6c:	4b0a      	ldr	r3, [pc, #40]	; (800da98 <vTaskPlaceOnEventListRestricted+0x54>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	3318      	adds	r3, #24
 800da72:	4619      	mov	r1, r3
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f7fe fe18 	bl	800c6aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d002      	beq.n	800da86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800da80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da86:	6879      	ldr	r1, [r7, #4]
 800da88:	68b8      	ldr	r0, [r7, #8]
 800da8a:	f000 fa7b 	bl	800df84 <prvAddCurrentTaskToDelayedList>
	}
 800da8e:	bf00      	nop
 800da90:	3718      	adds	r7, #24
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	200083b8 	.word	0x200083b8

0800da9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b086      	sub	sp, #24
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d10a      	bne.n	800dac8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	60fb      	str	r3, [r7, #12]
}
 800dac4:	bf00      	nop
 800dac6:	e7fe      	b.n	800dac6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	3318      	adds	r3, #24
 800dacc:	4618      	mov	r0, r3
 800dace:	f7fe fe49 	bl	800c764 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dad2:	4b1e      	ldr	r3, [pc, #120]	; (800db4c <xTaskRemoveFromEventList+0xb0>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d11d      	bne.n	800db16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	3304      	adds	r3, #4
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fe fe40 	bl	800c764 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dae8:	4b19      	ldr	r3, [pc, #100]	; (800db50 <xTaskRemoveFromEventList+0xb4>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	429a      	cmp	r2, r3
 800daee:	d903      	bls.n	800daf8 <xTaskRemoveFromEventList+0x5c>
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf4:	4a16      	ldr	r2, [pc, #88]	; (800db50 <xTaskRemoveFromEventList+0xb4>)
 800daf6:	6013      	str	r3, [r2, #0]
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dafc:	4613      	mov	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4413      	add	r3, r2
 800db02:	009b      	lsls	r3, r3, #2
 800db04:	4a13      	ldr	r2, [pc, #76]	; (800db54 <xTaskRemoveFromEventList+0xb8>)
 800db06:	441a      	add	r2, r3
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	3304      	adds	r3, #4
 800db0c:	4619      	mov	r1, r3
 800db0e:	4610      	mov	r0, r2
 800db10:	f7fe fdcb 	bl	800c6aa <vListInsertEnd>
 800db14:	e005      	b.n	800db22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	3318      	adds	r3, #24
 800db1a:	4619      	mov	r1, r3
 800db1c:	480e      	ldr	r0, [pc, #56]	; (800db58 <xTaskRemoveFromEventList+0xbc>)
 800db1e:	f7fe fdc4 	bl	800c6aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db26:	4b0d      	ldr	r3, [pc, #52]	; (800db5c <xTaskRemoveFromEventList+0xc0>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d905      	bls.n	800db3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800db30:	2301      	movs	r3, #1
 800db32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800db34:	4b0a      	ldr	r3, [pc, #40]	; (800db60 <xTaskRemoveFromEventList+0xc4>)
 800db36:	2201      	movs	r2, #1
 800db38:	601a      	str	r2, [r3, #0]
 800db3a:	e001      	b.n	800db40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800db3c:	2300      	movs	r3, #0
 800db3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800db40:	697b      	ldr	r3, [r7, #20]
}
 800db42:	4618      	mov	r0, r3
 800db44:	3718      	adds	r7, #24
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	200088b4 	.word	0x200088b4
 800db50:	20008894 	.word	0x20008894
 800db54:	200083bc 	.word	0x200083bc
 800db58:	2000884c 	.word	0x2000884c
 800db5c:	200083b8 	.word	0x200083b8
 800db60:	200088a0 	.word	0x200088a0

0800db64 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10a      	bne.n	800db88 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800db72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	60fb      	str	r3, [r7, #12]
}
 800db84:	bf00      	nop
 800db86:	e7fe      	b.n	800db86 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800db88:	f000 fecc 	bl	800e924 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800db8c:	4b06      	ldr	r3, [pc, #24]	; (800dba8 <vTaskSetTimeOutState+0x44>)
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800db94:	4b05      	ldr	r3, [pc, #20]	; (800dbac <vTaskSetTimeOutState+0x48>)
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800db9c:	f000 fef2 	bl	800e984 <vPortExitCritical>
}
 800dba0:	bf00      	nop
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	200088a4 	.word	0x200088a4
 800dbac:	20008890 	.word	0x20008890

0800dbb0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dbb8:	4b06      	ldr	r3, [pc, #24]	; (800dbd4 <vTaskInternalSetTimeOutState+0x24>)
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dbc0:	4b05      	ldr	r3, [pc, #20]	; (800dbd8 <vTaskInternalSetTimeOutState+0x28>)
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	605a      	str	r2, [r3, #4]
}
 800dbc8:	bf00      	nop
 800dbca:	370c      	adds	r7, #12
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr
 800dbd4:	200088a4 	.word	0x200088a4
 800dbd8:	20008890 	.word	0x20008890

0800dbdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b088      	sub	sp, #32
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10a      	bne.n	800dc02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dbec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf0:	f383 8811 	msr	BASEPRI, r3
 800dbf4:	f3bf 8f6f 	isb	sy
 800dbf8:	f3bf 8f4f 	dsb	sy
 800dbfc:	613b      	str	r3, [r7, #16]
}
 800dbfe:	bf00      	nop
 800dc00:	e7fe      	b.n	800dc00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d10a      	bne.n	800dc1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0c:	f383 8811 	msr	BASEPRI, r3
 800dc10:	f3bf 8f6f 	isb	sy
 800dc14:	f3bf 8f4f 	dsb	sy
 800dc18:	60fb      	str	r3, [r7, #12]
}
 800dc1a:	bf00      	nop
 800dc1c:	e7fe      	b.n	800dc1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dc1e:	f000 fe81 	bl	800e924 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dc22:	4b1d      	ldr	r3, [pc, #116]	; (800dc98 <xTaskCheckForTimeOut+0xbc>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	69ba      	ldr	r2, [r7, #24]
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc3a:	d102      	bne.n	800dc42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	61fb      	str	r3, [r7, #28]
 800dc40:	e023      	b.n	800dc8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	4b15      	ldr	r3, [pc, #84]	; (800dc9c <xTaskCheckForTimeOut+0xc0>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d007      	beq.n	800dc5e <xTaskCheckForTimeOut+0x82>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	69ba      	ldr	r2, [r7, #24]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d302      	bcc.n	800dc5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	61fb      	str	r3, [r7, #28]
 800dc5c:	e015      	b.n	800dc8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	697a      	ldr	r2, [r7, #20]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d20b      	bcs.n	800dc80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	1ad2      	subs	r2, r2, r3
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f7ff ff9b 	bl	800dbb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	61fb      	str	r3, [r7, #28]
 800dc7e:	e004      	b.n	800dc8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	2200      	movs	r2, #0
 800dc84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dc86:	2301      	movs	r3, #1
 800dc88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dc8a:	f000 fe7b 	bl	800e984 <vPortExitCritical>

	return xReturn;
 800dc8e:	69fb      	ldr	r3, [r7, #28]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3720      	adds	r7, #32
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	20008890 	.word	0x20008890
 800dc9c:	200088a4 	.word	0x200088a4

0800dca0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dca0:	b480      	push	{r7}
 800dca2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dca4:	4b03      	ldr	r3, [pc, #12]	; (800dcb4 <vTaskMissedYield+0x14>)
 800dca6:	2201      	movs	r2, #1
 800dca8:	601a      	str	r2, [r3, #0]
}
 800dcaa:	bf00      	nop
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr
 800dcb4:	200088a0 	.word	0x200088a0

0800dcb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dcc0:	f000 f852 	bl	800dd68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dcc4:	4b06      	ldr	r3, [pc, #24]	; (800dce0 <prvIdleTask+0x28>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d9f9      	bls.n	800dcc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dccc:	4b05      	ldr	r3, [pc, #20]	; (800dce4 <prvIdleTask+0x2c>)
 800dcce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcd2:	601a      	str	r2, [r3, #0]
 800dcd4:	f3bf 8f4f 	dsb	sy
 800dcd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dcdc:	e7f0      	b.n	800dcc0 <prvIdleTask+0x8>
 800dcde:	bf00      	nop
 800dce0:	200083bc 	.word	0x200083bc
 800dce4:	e000ed04 	.word	0xe000ed04

0800dce8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcee:	2300      	movs	r3, #0
 800dcf0:	607b      	str	r3, [r7, #4]
 800dcf2:	e00c      	b.n	800dd0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	4413      	add	r3, r2
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	4a12      	ldr	r2, [pc, #72]	; (800dd48 <prvInitialiseTaskLists+0x60>)
 800dd00:	4413      	add	r3, r2
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7fe fca4 	bl	800c650 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	607b      	str	r3, [r7, #4]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2b37      	cmp	r3, #55	; 0x37
 800dd12:	d9ef      	bls.n	800dcf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dd14:	480d      	ldr	r0, [pc, #52]	; (800dd4c <prvInitialiseTaskLists+0x64>)
 800dd16:	f7fe fc9b 	bl	800c650 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dd1a:	480d      	ldr	r0, [pc, #52]	; (800dd50 <prvInitialiseTaskLists+0x68>)
 800dd1c:	f7fe fc98 	bl	800c650 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd20:	480c      	ldr	r0, [pc, #48]	; (800dd54 <prvInitialiseTaskLists+0x6c>)
 800dd22:	f7fe fc95 	bl	800c650 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dd26:	480c      	ldr	r0, [pc, #48]	; (800dd58 <prvInitialiseTaskLists+0x70>)
 800dd28:	f7fe fc92 	bl	800c650 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd2c:	480b      	ldr	r0, [pc, #44]	; (800dd5c <prvInitialiseTaskLists+0x74>)
 800dd2e:	f7fe fc8f 	bl	800c650 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd32:	4b0b      	ldr	r3, [pc, #44]	; (800dd60 <prvInitialiseTaskLists+0x78>)
 800dd34:	4a05      	ldr	r2, [pc, #20]	; (800dd4c <prvInitialiseTaskLists+0x64>)
 800dd36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd38:	4b0a      	ldr	r3, [pc, #40]	; (800dd64 <prvInitialiseTaskLists+0x7c>)
 800dd3a:	4a05      	ldr	r2, [pc, #20]	; (800dd50 <prvInitialiseTaskLists+0x68>)
 800dd3c:	601a      	str	r2, [r3, #0]
}
 800dd3e:	bf00      	nop
 800dd40:	3708      	adds	r7, #8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	200083bc 	.word	0x200083bc
 800dd4c:	2000881c 	.word	0x2000881c
 800dd50:	20008830 	.word	0x20008830
 800dd54:	2000884c 	.word	0x2000884c
 800dd58:	20008860 	.word	0x20008860
 800dd5c:	20008878 	.word	0x20008878
 800dd60:	20008844 	.word	0x20008844
 800dd64:	20008848 	.word	0x20008848

0800dd68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd6e:	e019      	b.n	800dda4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dd70:	f000 fdd8 	bl	800e924 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd74:	4b10      	ldr	r3, [pc, #64]	; (800ddb8 <prvCheckTasksWaitingTermination+0x50>)
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	3304      	adds	r3, #4
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fe fcef 	bl	800c764 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd86:	4b0d      	ldr	r3, [pc, #52]	; (800ddbc <prvCheckTasksWaitingTermination+0x54>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	3b01      	subs	r3, #1
 800dd8c:	4a0b      	ldr	r2, [pc, #44]	; (800ddbc <prvCheckTasksWaitingTermination+0x54>)
 800dd8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dd90:	4b0b      	ldr	r3, [pc, #44]	; (800ddc0 <prvCheckTasksWaitingTermination+0x58>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	3b01      	subs	r3, #1
 800dd96:	4a0a      	ldr	r2, [pc, #40]	; (800ddc0 <prvCheckTasksWaitingTermination+0x58>)
 800dd98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dd9a:	f000 fdf3 	bl	800e984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 f810 	bl	800ddc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dda4:	4b06      	ldr	r3, [pc, #24]	; (800ddc0 <prvCheckTasksWaitingTermination+0x58>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d1e1      	bne.n	800dd70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ddac:	bf00      	nop
 800ddae:	bf00      	nop
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	20008860 	.word	0x20008860
 800ddbc:	2000888c 	.word	0x2000888c
 800ddc0:	20008874 	.word	0x20008874

0800ddc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	3354      	adds	r3, #84	; 0x54
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f00a fef1 	bl	8018bb8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d108      	bne.n	800ddf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 ff8b 	bl	800ed00 <vPortFree>
				vPortFree( pxTCB );
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 ff88 	bl	800ed00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ddf0:	e018      	b.n	800de24 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d103      	bne.n	800de04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 ff7f 	bl	800ed00 <vPortFree>
	}
 800de02:	e00f      	b.n	800de24 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800de0a:	2b02      	cmp	r3, #2
 800de0c:	d00a      	beq.n	800de24 <prvDeleteTCB+0x60>
	__asm volatile
 800de0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de12:	f383 8811 	msr	BASEPRI, r3
 800de16:	f3bf 8f6f 	isb	sy
 800de1a:	f3bf 8f4f 	dsb	sy
 800de1e:	60fb      	str	r3, [r7, #12]
}
 800de20:	bf00      	nop
 800de22:	e7fe      	b.n	800de22 <prvDeleteTCB+0x5e>
	}
 800de24:	bf00      	nop
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de32:	4b0c      	ldr	r3, [pc, #48]	; (800de64 <prvResetNextTaskUnblockTime+0x38>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d104      	bne.n	800de46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de3c:	4b0a      	ldr	r3, [pc, #40]	; (800de68 <prvResetNextTaskUnblockTime+0x3c>)
 800de3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de44:	e008      	b.n	800de58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de46:	4b07      	ldr	r3, [pc, #28]	; (800de64 <prvResetNextTaskUnblockTime+0x38>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	68db      	ldr	r3, [r3, #12]
 800de4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	4a04      	ldr	r2, [pc, #16]	; (800de68 <prvResetNextTaskUnblockTime+0x3c>)
 800de56:	6013      	str	r3, [r2, #0]
}
 800de58:	bf00      	nop
 800de5a:	370c      	adds	r7, #12
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr
 800de64:	20008844 	.word	0x20008844
 800de68:	200088ac 	.word	0x200088ac

0800de6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800de6c:	b480      	push	{r7}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800de72:	4b0b      	ldr	r3, [pc, #44]	; (800dea0 <xTaskGetSchedulerState+0x34>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d102      	bne.n	800de80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800de7a:	2301      	movs	r3, #1
 800de7c:	607b      	str	r3, [r7, #4]
 800de7e:	e008      	b.n	800de92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de80:	4b08      	ldr	r3, [pc, #32]	; (800dea4 <xTaskGetSchedulerState+0x38>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d102      	bne.n	800de8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800de88:	2302      	movs	r3, #2
 800de8a:	607b      	str	r3, [r7, #4]
 800de8c:	e001      	b.n	800de92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800de8e:	2300      	movs	r3, #0
 800de90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800de92:	687b      	ldr	r3, [r7, #4]
	}
 800de94:	4618      	mov	r0, r3
 800de96:	370c      	adds	r7, #12
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr
 800dea0:	20008898 	.word	0x20008898
 800dea4:	200088b4 	.word	0x200088b4

0800dea8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b086      	sub	sp, #24
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800deb4:	2300      	movs	r3, #0
 800deb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d056      	beq.n	800df6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800debe:	4b2e      	ldr	r3, [pc, #184]	; (800df78 <xTaskPriorityDisinherit+0xd0>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	693a      	ldr	r2, [r7, #16]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d00a      	beq.n	800dede <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800decc:	f383 8811 	msr	BASEPRI, r3
 800ded0:	f3bf 8f6f 	isb	sy
 800ded4:	f3bf 8f4f 	dsb	sy
 800ded8:	60fb      	str	r3, [r7, #12]
}
 800deda:	bf00      	nop
 800dedc:	e7fe      	b.n	800dedc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d10a      	bne.n	800defc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deea:	f383 8811 	msr	BASEPRI, r3
 800deee:	f3bf 8f6f 	isb	sy
 800def2:	f3bf 8f4f 	dsb	sy
 800def6:	60bb      	str	r3, [r7, #8]
}
 800def8:	bf00      	nop
 800defa:	e7fe      	b.n	800defa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df00:	1e5a      	subs	r2, r3, #1
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df0e:	429a      	cmp	r2, r3
 800df10:	d02c      	beq.n	800df6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df16:	2b00      	cmp	r3, #0
 800df18:	d128      	bne.n	800df6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	3304      	adds	r3, #4
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fe fc20 	bl	800c764 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df3c:	4b0f      	ldr	r3, [pc, #60]	; (800df7c <xTaskPriorityDisinherit+0xd4>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	429a      	cmp	r2, r3
 800df42:	d903      	bls.n	800df4c <xTaskPriorityDisinherit+0xa4>
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df48:	4a0c      	ldr	r2, [pc, #48]	; (800df7c <xTaskPriorityDisinherit+0xd4>)
 800df4a:	6013      	str	r3, [r2, #0]
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df50:	4613      	mov	r3, r2
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	4413      	add	r3, r2
 800df56:	009b      	lsls	r3, r3, #2
 800df58:	4a09      	ldr	r2, [pc, #36]	; (800df80 <xTaskPriorityDisinherit+0xd8>)
 800df5a:	441a      	add	r2, r3
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	3304      	adds	r3, #4
 800df60:	4619      	mov	r1, r3
 800df62:	4610      	mov	r0, r2
 800df64:	f7fe fba1 	bl	800c6aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800df68:	2301      	movs	r3, #1
 800df6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df6c:	697b      	ldr	r3, [r7, #20]
	}
 800df6e:	4618      	mov	r0, r3
 800df70:	3718      	adds	r7, #24
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	200083b8 	.word	0x200083b8
 800df7c:	20008894 	.word	0x20008894
 800df80:	200083bc 	.word	0x200083bc

0800df84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800df8e:	4b21      	ldr	r3, [pc, #132]	; (800e014 <prvAddCurrentTaskToDelayedList+0x90>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df94:	4b20      	ldr	r3, [pc, #128]	; (800e018 <prvAddCurrentTaskToDelayedList+0x94>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	3304      	adds	r3, #4
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7fe fbe2 	bl	800c764 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfa6:	d10a      	bne.n	800dfbe <prvAddCurrentTaskToDelayedList+0x3a>
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d007      	beq.n	800dfbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfae:	4b1a      	ldr	r3, [pc, #104]	; (800e018 <prvAddCurrentTaskToDelayedList+0x94>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	3304      	adds	r3, #4
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	4819      	ldr	r0, [pc, #100]	; (800e01c <prvAddCurrentTaskToDelayedList+0x98>)
 800dfb8:	f7fe fb77 	bl	800c6aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dfbc:	e026      	b.n	800e00c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dfbe:	68fa      	ldr	r2, [r7, #12]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dfc6:	4b14      	ldr	r3, [pc, #80]	; (800e018 <prvAddCurrentTaskToDelayedList+0x94>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dfce:	68ba      	ldr	r2, [r7, #8]
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d209      	bcs.n	800dfea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfd6:	4b12      	ldr	r3, [pc, #72]	; (800e020 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	4b0f      	ldr	r3, [pc, #60]	; (800e018 <prvAddCurrentTaskToDelayedList+0x94>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	3304      	adds	r3, #4
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	4610      	mov	r0, r2
 800dfe4:	f7fe fb85 	bl	800c6f2 <vListInsert>
}
 800dfe8:	e010      	b.n	800e00c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dfea:	4b0e      	ldr	r3, [pc, #56]	; (800e024 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	4b0a      	ldr	r3, [pc, #40]	; (800e018 <prvAddCurrentTaskToDelayedList+0x94>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	3304      	adds	r3, #4
 800dff4:	4619      	mov	r1, r3
 800dff6:	4610      	mov	r0, r2
 800dff8:	f7fe fb7b 	bl	800c6f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dffc:	4b0a      	ldr	r3, [pc, #40]	; (800e028 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	68ba      	ldr	r2, [r7, #8]
 800e002:	429a      	cmp	r2, r3
 800e004:	d202      	bcs.n	800e00c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e006:	4a08      	ldr	r2, [pc, #32]	; (800e028 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	6013      	str	r3, [r2, #0]
}
 800e00c:	bf00      	nop
 800e00e:	3710      	adds	r7, #16
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	20008890 	.word	0x20008890
 800e018:	200083b8 	.word	0x200083b8
 800e01c:	20008878 	.word	0x20008878
 800e020:	20008848 	.word	0x20008848
 800e024:	20008844 	.word	0x20008844
 800e028:	200088ac 	.word	0x200088ac

0800e02c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b08a      	sub	sp, #40	; 0x28
 800e030:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e032:	2300      	movs	r3, #0
 800e034:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e036:	f000 fb07 	bl	800e648 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e03a:	4b1c      	ldr	r3, [pc, #112]	; (800e0ac <xTimerCreateTimerTask+0x80>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d021      	beq.n	800e086 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e042:	2300      	movs	r3, #0
 800e044:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e046:	2300      	movs	r3, #0
 800e048:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e04a:	1d3a      	adds	r2, r7, #4
 800e04c:	f107 0108 	add.w	r1, r7, #8
 800e050:	f107 030c 	add.w	r3, r7, #12
 800e054:	4618      	mov	r0, r3
 800e056:	f7fe fae1 	bl	800c61c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e05a:	6879      	ldr	r1, [r7, #4]
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	68fa      	ldr	r2, [r7, #12]
 800e060:	9202      	str	r2, [sp, #8]
 800e062:	9301      	str	r3, [sp, #4]
 800e064:	2302      	movs	r3, #2
 800e066:	9300      	str	r3, [sp, #0]
 800e068:	2300      	movs	r3, #0
 800e06a:	460a      	mov	r2, r1
 800e06c:	4910      	ldr	r1, [pc, #64]	; (800e0b0 <xTimerCreateTimerTask+0x84>)
 800e06e:	4811      	ldr	r0, [pc, #68]	; (800e0b4 <xTimerCreateTimerTask+0x88>)
 800e070:	f7ff f88e 	bl	800d190 <xTaskCreateStatic>
 800e074:	4603      	mov	r3, r0
 800e076:	4a10      	ldr	r2, [pc, #64]	; (800e0b8 <xTimerCreateTimerTask+0x8c>)
 800e078:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e07a:	4b0f      	ldr	r3, [pc, #60]	; (800e0b8 <xTimerCreateTimerTask+0x8c>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d001      	beq.n	800e086 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e082:	2301      	movs	r3, #1
 800e084:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d10a      	bne.n	800e0a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e090:	f383 8811 	msr	BASEPRI, r3
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	613b      	str	r3, [r7, #16]
}
 800e09e:	bf00      	nop
 800e0a0:	e7fe      	b.n	800e0a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e0a2:	697b      	ldr	r3, [r7, #20]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3718      	adds	r7, #24
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	200088e8 	.word	0x200088e8
 800e0b0:	08019f04 	.word	0x08019f04
 800e0b4:	0800e1f1 	.word	0x0800e1f1
 800e0b8:	200088ec 	.word	0x200088ec

0800e0bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b08a      	sub	sp, #40	; 0x28
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
 800e0c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d10a      	bne.n	800e0ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800e0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d8:	f383 8811 	msr	BASEPRI, r3
 800e0dc:	f3bf 8f6f 	isb	sy
 800e0e0:	f3bf 8f4f 	dsb	sy
 800e0e4:	623b      	str	r3, [r7, #32]
}
 800e0e6:	bf00      	nop
 800e0e8:	e7fe      	b.n	800e0e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e0ea:	4b1a      	ldr	r3, [pc, #104]	; (800e154 <xTimerGenericCommand+0x98>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d02a      	beq.n	800e148 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	2b05      	cmp	r3, #5
 800e102:	dc18      	bgt.n	800e136 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e104:	f7ff feb2 	bl	800de6c <xTaskGetSchedulerState>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d109      	bne.n	800e122 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e10e:	4b11      	ldr	r3, [pc, #68]	; (800e154 <xTimerGenericCommand+0x98>)
 800e110:	6818      	ldr	r0, [r3, #0]
 800e112:	f107 0110 	add.w	r1, r7, #16
 800e116:	2300      	movs	r3, #0
 800e118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e11a:	f7fe fc51 	bl	800c9c0 <xQueueGenericSend>
 800e11e:	6278      	str	r0, [r7, #36]	; 0x24
 800e120:	e012      	b.n	800e148 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e122:	4b0c      	ldr	r3, [pc, #48]	; (800e154 <xTimerGenericCommand+0x98>)
 800e124:	6818      	ldr	r0, [r3, #0]
 800e126:	f107 0110 	add.w	r1, r7, #16
 800e12a:	2300      	movs	r3, #0
 800e12c:	2200      	movs	r2, #0
 800e12e:	f7fe fc47 	bl	800c9c0 <xQueueGenericSend>
 800e132:	6278      	str	r0, [r7, #36]	; 0x24
 800e134:	e008      	b.n	800e148 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e136:	4b07      	ldr	r3, [pc, #28]	; (800e154 <xTimerGenericCommand+0x98>)
 800e138:	6818      	ldr	r0, [r3, #0]
 800e13a:	f107 0110 	add.w	r1, r7, #16
 800e13e:	2300      	movs	r3, #0
 800e140:	683a      	ldr	r2, [r7, #0]
 800e142:	f7fe fd3b 	bl	800cbbc <xQueueGenericSendFromISR>
 800e146:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3728      	adds	r7, #40	; 0x28
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	200088e8 	.word	0x200088e8

0800e158 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b088      	sub	sp, #32
 800e15c:	af02      	add	r7, sp, #8
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e162:	4b22      	ldr	r3, [pc, #136]	; (800e1ec <prvProcessExpiredTimer+0x94>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	3304      	adds	r3, #4
 800e170:	4618      	mov	r0, r3
 800e172:	f7fe faf7 	bl	800c764 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e17c:	f003 0304 	and.w	r3, r3, #4
 800e180:	2b00      	cmp	r3, #0
 800e182:	d022      	beq.n	800e1ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	699a      	ldr	r2, [r3, #24]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	18d1      	adds	r1, r2, r3
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	683a      	ldr	r2, [r7, #0]
 800e190:	6978      	ldr	r0, [r7, #20]
 800e192:	f000 f8d1 	bl	800e338 <prvInsertTimerInActiveList>
 800e196:	4603      	mov	r3, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d01f      	beq.n	800e1dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e19c:	2300      	movs	r3, #0
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	2100      	movs	r1, #0
 800e1a6:	6978      	ldr	r0, [r7, #20]
 800e1a8:	f7ff ff88 	bl	800e0bc <xTimerGenericCommand>
 800e1ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d113      	bne.n	800e1dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b8:	f383 8811 	msr	BASEPRI, r3
 800e1bc:	f3bf 8f6f 	isb	sy
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	60fb      	str	r3, [r7, #12]
}
 800e1c6:	bf00      	nop
 800e1c8:	e7fe      	b.n	800e1c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1d0:	f023 0301 	bic.w	r3, r3, #1
 800e1d4:	b2da      	uxtb	r2, r3
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	6a1b      	ldr	r3, [r3, #32]
 800e1e0:	6978      	ldr	r0, [r7, #20]
 800e1e2:	4798      	blx	r3
}
 800e1e4:	bf00      	nop
 800e1e6:	3718      	adds	r7, #24
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	200088e0 	.word	0x200088e0

0800e1f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e1f8:	f107 0308 	add.w	r3, r7, #8
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f000 f857 	bl	800e2b0 <prvGetNextExpireTime>
 800e202:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	4619      	mov	r1, r3
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f000 f803 	bl	800e214 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e20e:	f000 f8d5 	bl	800e3bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e212:	e7f1      	b.n	800e1f8 <prvTimerTask+0x8>

0800e214 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b084      	sub	sp, #16
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e21e:	f7ff fa13 	bl	800d648 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e222:	f107 0308 	add.w	r3, r7, #8
 800e226:	4618      	mov	r0, r3
 800e228:	f000 f866 	bl	800e2f8 <prvSampleTimeNow>
 800e22c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d130      	bne.n	800e296 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d10a      	bne.n	800e250 <prvProcessTimerOrBlockTask+0x3c>
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d806      	bhi.n	800e250 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e242:	f7ff fa0f 	bl	800d664 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e246:	68f9      	ldr	r1, [r7, #12]
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f7ff ff85 	bl	800e158 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e24e:	e024      	b.n	800e29a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d008      	beq.n	800e268 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e256:	4b13      	ldr	r3, [pc, #76]	; (800e2a4 <prvProcessTimerOrBlockTask+0x90>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d101      	bne.n	800e264 <prvProcessTimerOrBlockTask+0x50>
 800e260:	2301      	movs	r3, #1
 800e262:	e000      	b.n	800e266 <prvProcessTimerOrBlockTask+0x52>
 800e264:	2300      	movs	r3, #0
 800e266:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e268:	4b0f      	ldr	r3, [pc, #60]	; (800e2a8 <prvProcessTimerOrBlockTask+0x94>)
 800e26a:	6818      	ldr	r0, [r3, #0]
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	1ad3      	subs	r3, r2, r3
 800e272:	683a      	ldr	r2, [r7, #0]
 800e274:	4619      	mov	r1, r3
 800e276:	f7fe ff57 	bl	800d128 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e27a:	f7ff f9f3 	bl	800d664 <xTaskResumeAll>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d10a      	bne.n	800e29a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e284:	4b09      	ldr	r3, [pc, #36]	; (800e2ac <prvProcessTimerOrBlockTask+0x98>)
 800e286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e28a:	601a      	str	r2, [r3, #0]
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	f3bf 8f6f 	isb	sy
}
 800e294:	e001      	b.n	800e29a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e296:	f7ff f9e5 	bl	800d664 <xTaskResumeAll>
}
 800e29a:	bf00      	nop
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	200088e4 	.word	0x200088e4
 800e2a8:	200088e8 	.word	0x200088e8
 800e2ac:	e000ed04 	.word	0xe000ed04

0800e2b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b085      	sub	sp, #20
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e2b8:	4b0e      	ldr	r3, [pc, #56]	; (800e2f4 <prvGetNextExpireTime+0x44>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d101      	bne.n	800e2c6 <prvGetNextExpireTime+0x16>
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	e000      	b.n	800e2c8 <prvGetNextExpireTime+0x18>
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d105      	bne.n	800e2e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2d4:	4b07      	ldr	r3, [pc, #28]	; (800e2f4 <prvGetNextExpireTime+0x44>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	60fb      	str	r3, [r7, #12]
 800e2de:	e001      	b.n	800e2e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3714      	adds	r7, #20
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f0:	4770      	bx	lr
 800e2f2:	bf00      	nop
 800e2f4:	200088e0 	.word	0x200088e0

0800e2f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e300:	f7ff fa4e 	bl	800d7a0 <xTaskGetTickCount>
 800e304:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e306:	4b0b      	ldr	r3, [pc, #44]	; (800e334 <prvSampleTimeNow+0x3c>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d205      	bcs.n	800e31c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e310:	f000 f936 	bl	800e580 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2201      	movs	r2, #1
 800e318:	601a      	str	r2, [r3, #0]
 800e31a:	e002      	b.n	800e322 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2200      	movs	r2, #0
 800e320:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e322:	4a04      	ldr	r2, [pc, #16]	; (800e334 <prvSampleTimeNow+0x3c>)
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e328:	68fb      	ldr	r3, [r7, #12]
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	200088f0 	.word	0x200088f0

0800e338 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b086      	sub	sp, #24
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
 800e344:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e346:	2300      	movs	r3, #0
 800e348:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	68ba      	ldr	r2, [r7, #8]
 800e34e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d812      	bhi.n	800e384 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	1ad2      	subs	r2, r2, r3
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	699b      	ldr	r3, [r3, #24]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d302      	bcc.n	800e372 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e36c:	2301      	movs	r3, #1
 800e36e:	617b      	str	r3, [r7, #20]
 800e370:	e01b      	b.n	800e3aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e372:	4b10      	ldr	r3, [pc, #64]	; (800e3b4 <prvInsertTimerInActiveList+0x7c>)
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	3304      	adds	r3, #4
 800e37a:	4619      	mov	r1, r3
 800e37c:	4610      	mov	r0, r2
 800e37e:	f7fe f9b8 	bl	800c6f2 <vListInsert>
 800e382:	e012      	b.n	800e3aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	429a      	cmp	r2, r3
 800e38a:	d206      	bcs.n	800e39a <prvInsertTimerInActiveList+0x62>
 800e38c:	68ba      	ldr	r2, [r7, #8]
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	429a      	cmp	r2, r3
 800e392:	d302      	bcc.n	800e39a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e394:	2301      	movs	r3, #1
 800e396:	617b      	str	r3, [r7, #20]
 800e398:	e007      	b.n	800e3aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e39a:	4b07      	ldr	r3, [pc, #28]	; (800e3b8 <prvInsertTimerInActiveList+0x80>)
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	3304      	adds	r3, #4
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	f7fe f9a4 	bl	800c6f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e3aa:	697b      	ldr	r3, [r7, #20]
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3718      	adds	r7, #24
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	200088e4 	.word	0x200088e4
 800e3b8:	200088e0 	.word	0x200088e0

0800e3bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b08e      	sub	sp, #56	; 0x38
 800e3c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3c2:	e0ca      	b.n	800e55a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	da18      	bge.n	800e3fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e3ca:	1d3b      	adds	r3, r7, #4
 800e3cc:	3304      	adds	r3, #4
 800e3ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d10a      	bne.n	800e3ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3da:	f383 8811 	msr	BASEPRI, r3
 800e3de:	f3bf 8f6f 	isb	sy
 800e3e2:	f3bf 8f4f 	dsb	sy
 800e3e6:	61fb      	str	r3, [r7, #28]
}
 800e3e8:	bf00      	nop
 800e3ea:	e7fe      	b.n	800e3ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3f2:	6850      	ldr	r0, [r2, #4]
 800e3f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3f6:	6892      	ldr	r2, [r2, #8]
 800e3f8:	4611      	mov	r1, r2
 800e3fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f2c0 80aa 	blt.w	800e558 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40a:	695b      	ldr	r3, [r3, #20]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d004      	beq.n	800e41a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e412:	3304      	adds	r3, #4
 800e414:	4618      	mov	r0, r3
 800e416:	f7fe f9a5 	bl	800c764 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e41a:	463b      	mov	r3, r7
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7ff ff6b 	bl	800e2f8 <prvSampleTimeNow>
 800e422:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b09      	cmp	r3, #9
 800e428:	f200 8097 	bhi.w	800e55a <prvProcessReceivedCommands+0x19e>
 800e42c:	a201      	add	r2, pc, #4	; (adr r2, 800e434 <prvProcessReceivedCommands+0x78>)
 800e42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e432:	bf00      	nop
 800e434:	0800e45d 	.word	0x0800e45d
 800e438:	0800e45d 	.word	0x0800e45d
 800e43c:	0800e45d 	.word	0x0800e45d
 800e440:	0800e4d1 	.word	0x0800e4d1
 800e444:	0800e4e5 	.word	0x0800e4e5
 800e448:	0800e52f 	.word	0x0800e52f
 800e44c:	0800e45d 	.word	0x0800e45d
 800e450:	0800e45d 	.word	0x0800e45d
 800e454:	0800e4d1 	.word	0x0800e4d1
 800e458:	0800e4e5 	.word	0x0800e4e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e462:	f043 0301 	orr.w	r3, r3, #1
 800e466:	b2da      	uxtb	r2, r3
 800e468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e46e:	68ba      	ldr	r2, [r7, #8]
 800e470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e472:	699b      	ldr	r3, [r3, #24]
 800e474:	18d1      	adds	r1, r2, r3
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e47a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e47c:	f7ff ff5c 	bl	800e338 <prvInsertTimerInActiveList>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d069      	beq.n	800e55a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e488:	6a1b      	ldr	r3, [r3, #32]
 800e48a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e48c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e494:	f003 0304 	and.w	r3, r3, #4
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d05e      	beq.n	800e55a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e49c:	68ba      	ldr	r2, [r7, #8]
 800e49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a0:	699b      	ldr	r3, [r3, #24]
 800e4a2:	441a      	add	r2, r3
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	9300      	str	r3, [sp, #0]
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	2100      	movs	r1, #0
 800e4ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4ae:	f7ff fe05 	bl	800e0bc <xTimerGenericCommand>
 800e4b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e4b4:	6a3b      	ldr	r3, [r7, #32]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d14f      	bne.n	800e55a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4be:	f383 8811 	msr	BASEPRI, r3
 800e4c2:	f3bf 8f6f 	isb	sy
 800e4c6:	f3bf 8f4f 	dsb	sy
 800e4ca:	61bb      	str	r3, [r7, #24]
}
 800e4cc:	bf00      	nop
 800e4ce:	e7fe      	b.n	800e4ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4d6:	f023 0301 	bic.w	r3, r3, #1
 800e4da:	b2da      	uxtb	r2, r3
 800e4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e4e2:	e03a      	b.n	800e55a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4ea:	f043 0301 	orr.w	r3, r3, #1
 800e4ee:	b2da      	uxtb	r2, r3
 800e4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e4f6:	68ba      	ldr	r2, [r7, #8]
 800e4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fe:	699b      	ldr	r3, [r3, #24]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d10a      	bne.n	800e51a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e508:	f383 8811 	msr	BASEPRI, r3
 800e50c:	f3bf 8f6f 	isb	sy
 800e510:	f3bf 8f4f 	dsb	sy
 800e514:	617b      	str	r3, [r7, #20]
}
 800e516:	bf00      	nop
 800e518:	e7fe      	b.n	800e518 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51c:	699a      	ldr	r2, [r3, #24]
 800e51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e520:	18d1      	adds	r1, r2, r3
 800e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e528:	f7ff ff06 	bl	800e338 <prvInsertTimerInActiveList>
					break;
 800e52c:	e015      	b.n	800e55a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e530:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e534:	f003 0302 	and.w	r3, r3, #2
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d103      	bne.n	800e544 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e53c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e53e:	f000 fbdf 	bl	800ed00 <vPortFree>
 800e542:	e00a      	b.n	800e55a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e54a:	f023 0301 	bic.w	r3, r3, #1
 800e54e:	b2da      	uxtb	r2, r3
 800e550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e556:	e000      	b.n	800e55a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e558:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e55a:	4b08      	ldr	r3, [pc, #32]	; (800e57c <prvProcessReceivedCommands+0x1c0>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	1d39      	adds	r1, r7, #4
 800e560:	2200      	movs	r2, #0
 800e562:	4618      	mov	r0, r3
 800e564:	f7fe fbc6 	bl	800ccf4 <xQueueReceive>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	f47f af2a 	bne.w	800e3c4 <prvProcessReceivedCommands+0x8>
	}
}
 800e570:	bf00      	nop
 800e572:	bf00      	nop
 800e574:	3730      	adds	r7, #48	; 0x30
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	200088e8 	.word	0x200088e8

0800e580 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b088      	sub	sp, #32
 800e584:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e586:	e048      	b.n	800e61a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e588:	4b2d      	ldr	r3, [pc, #180]	; (800e640 <prvSwitchTimerLists+0xc0>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e592:	4b2b      	ldr	r3, [pc, #172]	; (800e640 <prvSwitchTimerLists+0xc0>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	3304      	adds	r3, #4
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7fe f8df 	bl	800c764 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6a1b      	ldr	r3, [r3, #32]
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5b4:	f003 0304 	and.w	r3, r3, #4
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d02e      	beq.n	800e61a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	699b      	ldr	r3, [r3, #24]
 800e5c0:	693a      	ldr	r2, [r7, #16]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e5c6:	68ba      	ldr	r2, [r7, #8]
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d90e      	bls.n	800e5ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	68ba      	ldr	r2, [r7, #8]
 800e5d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e5da:	4b19      	ldr	r3, [pc, #100]	; (800e640 <prvSwitchTimerLists+0xc0>)
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	3304      	adds	r3, #4
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	4610      	mov	r0, r2
 800e5e6:	f7fe f884 	bl	800c6f2 <vListInsert>
 800e5ea:	e016      	b.n	800e61a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	693a      	ldr	r2, [r7, #16]
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	68f8      	ldr	r0, [r7, #12]
 800e5f8:	f7ff fd60 	bl	800e0bc <xTimerGenericCommand>
 800e5fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d10a      	bne.n	800e61a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e608:	f383 8811 	msr	BASEPRI, r3
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	603b      	str	r3, [r7, #0]
}
 800e616:	bf00      	nop
 800e618:	e7fe      	b.n	800e618 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e61a:	4b09      	ldr	r3, [pc, #36]	; (800e640 <prvSwitchTimerLists+0xc0>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1b1      	bne.n	800e588 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e624:	4b06      	ldr	r3, [pc, #24]	; (800e640 <prvSwitchTimerLists+0xc0>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e62a:	4b06      	ldr	r3, [pc, #24]	; (800e644 <prvSwitchTimerLists+0xc4>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	4a04      	ldr	r2, [pc, #16]	; (800e640 <prvSwitchTimerLists+0xc0>)
 800e630:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e632:	4a04      	ldr	r2, [pc, #16]	; (800e644 <prvSwitchTimerLists+0xc4>)
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	6013      	str	r3, [r2, #0]
}
 800e638:	bf00      	nop
 800e63a:	3718      	adds	r7, #24
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	200088e0 	.word	0x200088e0
 800e644:	200088e4 	.word	0x200088e4

0800e648 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b082      	sub	sp, #8
 800e64c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e64e:	f000 f969 	bl	800e924 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e652:	4b15      	ldr	r3, [pc, #84]	; (800e6a8 <prvCheckForValidListAndQueue+0x60>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d120      	bne.n	800e69c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e65a:	4814      	ldr	r0, [pc, #80]	; (800e6ac <prvCheckForValidListAndQueue+0x64>)
 800e65c:	f7fd fff8 	bl	800c650 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e660:	4813      	ldr	r0, [pc, #76]	; (800e6b0 <prvCheckForValidListAndQueue+0x68>)
 800e662:	f7fd fff5 	bl	800c650 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e666:	4b13      	ldr	r3, [pc, #76]	; (800e6b4 <prvCheckForValidListAndQueue+0x6c>)
 800e668:	4a10      	ldr	r2, [pc, #64]	; (800e6ac <prvCheckForValidListAndQueue+0x64>)
 800e66a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e66c:	4b12      	ldr	r3, [pc, #72]	; (800e6b8 <prvCheckForValidListAndQueue+0x70>)
 800e66e:	4a10      	ldr	r2, [pc, #64]	; (800e6b0 <prvCheckForValidListAndQueue+0x68>)
 800e670:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e672:	2300      	movs	r3, #0
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	4b11      	ldr	r3, [pc, #68]	; (800e6bc <prvCheckForValidListAndQueue+0x74>)
 800e678:	4a11      	ldr	r2, [pc, #68]	; (800e6c0 <prvCheckForValidListAndQueue+0x78>)
 800e67a:	2110      	movs	r1, #16
 800e67c:	200a      	movs	r0, #10
 800e67e:	f7fe f903 	bl	800c888 <xQueueGenericCreateStatic>
 800e682:	4603      	mov	r3, r0
 800e684:	4a08      	ldr	r2, [pc, #32]	; (800e6a8 <prvCheckForValidListAndQueue+0x60>)
 800e686:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e688:	4b07      	ldr	r3, [pc, #28]	; (800e6a8 <prvCheckForValidListAndQueue+0x60>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d005      	beq.n	800e69c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e690:	4b05      	ldr	r3, [pc, #20]	; (800e6a8 <prvCheckForValidListAndQueue+0x60>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	490b      	ldr	r1, [pc, #44]	; (800e6c4 <prvCheckForValidListAndQueue+0x7c>)
 800e696:	4618      	mov	r0, r3
 800e698:	f7fe fd1c 	bl	800d0d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e69c:	f000 f972 	bl	800e984 <vPortExitCritical>
}
 800e6a0:	bf00      	nop
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	200088e8 	.word	0x200088e8
 800e6ac:	200088b8 	.word	0x200088b8
 800e6b0:	200088cc 	.word	0x200088cc
 800e6b4:	200088e0 	.word	0x200088e0
 800e6b8:	200088e4 	.word	0x200088e4
 800e6bc:	20008994 	.word	0x20008994
 800e6c0:	200088f4 	.word	0x200088f4
 800e6c4:	08019f0c 	.word	0x08019f0c

0800e6c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b085      	sub	sp, #20
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	60b9      	str	r1, [r7, #8]
 800e6d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	3b04      	subs	r3, #4
 800e6d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e6e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	3b04      	subs	r3, #4
 800e6e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	f023 0201 	bic.w	r2, r3, #1
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	3b04      	subs	r3, #4
 800e6f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e6f8:	4a0c      	ldr	r2, [pc, #48]	; (800e72c <pxPortInitialiseStack+0x64>)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	3b14      	subs	r3, #20
 800e702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	3b04      	subs	r3, #4
 800e70e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f06f 0202 	mvn.w	r2, #2
 800e716:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	3b20      	subs	r3, #32
 800e71c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e71e:	68fb      	ldr	r3, [r7, #12]
}
 800e720:	4618      	mov	r0, r3
 800e722:	3714      	adds	r7, #20
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr
 800e72c:	0800e731 	.word	0x0800e731

0800e730 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e730:	b480      	push	{r7}
 800e732:	b085      	sub	sp, #20
 800e734:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e736:	2300      	movs	r3, #0
 800e738:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e73a:	4b12      	ldr	r3, [pc, #72]	; (800e784 <prvTaskExitError+0x54>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e742:	d00a      	beq.n	800e75a <prvTaskExitError+0x2a>
	__asm volatile
 800e744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e748:	f383 8811 	msr	BASEPRI, r3
 800e74c:	f3bf 8f6f 	isb	sy
 800e750:	f3bf 8f4f 	dsb	sy
 800e754:	60fb      	str	r3, [r7, #12]
}
 800e756:	bf00      	nop
 800e758:	e7fe      	b.n	800e758 <prvTaskExitError+0x28>
	__asm volatile
 800e75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75e:	f383 8811 	msr	BASEPRI, r3
 800e762:	f3bf 8f6f 	isb	sy
 800e766:	f3bf 8f4f 	dsb	sy
 800e76a:	60bb      	str	r3, [r7, #8]
}
 800e76c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e76e:	bf00      	nop
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d0fc      	beq.n	800e770 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e776:	bf00      	nop
 800e778:	bf00      	nop
 800e77a:	3714      	adds	r7, #20
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr
 800e784:	2000009c 	.word	0x2000009c
	...

0800e790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e790:	4b07      	ldr	r3, [pc, #28]	; (800e7b0 <pxCurrentTCBConst2>)
 800e792:	6819      	ldr	r1, [r3, #0]
 800e794:	6808      	ldr	r0, [r1, #0]
 800e796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79a:	f380 8809 	msr	PSP, r0
 800e79e:	f3bf 8f6f 	isb	sy
 800e7a2:	f04f 0000 	mov.w	r0, #0
 800e7a6:	f380 8811 	msr	BASEPRI, r0
 800e7aa:	4770      	bx	lr
 800e7ac:	f3af 8000 	nop.w

0800e7b0 <pxCurrentTCBConst2>:
 800e7b0:	200083b8 	.word	0x200083b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e7b4:	bf00      	nop
 800e7b6:	bf00      	nop

0800e7b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e7b8:	4808      	ldr	r0, [pc, #32]	; (800e7dc <prvPortStartFirstTask+0x24>)
 800e7ba:	6800      	ldr	r0, [r0, #0]
 800e7bc:	6800      	ldr	r0, [r0, #0]
 800e7be:	f380 8808 	msr	MSP, r0
 800e7c2:	f04f 0000 	mov.w	r0, #0
 800e7c6:	f380 8814 	msr	CONTROL, r0
 800e7ca:	b662      	cpsie	i
 800e7cc:	b661      	cpsie	f
 800e7ce:	f3bf 8f4f 	dsb	sy
 800e7d2:	f3bf 8f6f 	isb	sy
 800e7d6:	df00      	svc	0
 800e7d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e7da:	bf00      	nop
 800e7dc:	e000ed08 	.word	0xe000ed08

0800e7e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b086      	sub	sp, #24
 800e7e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e7e6:	4b46      	ldr	r3, [pc, #280]	; (800e900 <xPortStartScheduler+0x120>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a46      	ldr	r2, [pc, #280]	; (800e904 <xPortStartScheduler+0x124>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d10a      	bne.n	800e806 <xPortStartScheduler+0x26>
	__asm volatile
 800e7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f4:	f383 8811 	msr	BASEPRI, r3
 800e7f8:	f3bf 8f6f 	isb	sy
 800e7fc:	f3bf 8f4f 	dsb	sy
 800e800:	613b      	str	r3, [r7, #16]
}
 800e802:	bf00      	nop
 800e804:	e7fe      	b.n	800e804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e806:	4b3e      	ldr	r3, [pc, #248]	; (800e900 <xPortStartScheduler+0x120>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4a3f      	ldr	r2, [pc, #252]	; (800e908 <xPortStartScheduler+0x128>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d10a      	bne.n	800e826 <xPortStartScheduler+0x46>
	__asm volatile
 800e810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e814:	f383 8811 	msr	BASEPRI, r3
 800e818:	f3bf 8f6f 	isb	sy
 800e81c:	f3bf 8f4f 	dsb	sy
 800e820:	60fb      	str	r3, [r7, #12]
}
 800e822:	bf00      	nop
 800e824:	e7fe      	b.n	800e824 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e826:	4b39      	ldr	r3, [pc, #228]	; (800e90c <xPortStartScheduler+0x12c>)
 800e828:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	22ff      	movs	r2, #255	; 0xff
 800e836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e840:	78fb      	ldrb	r3, [r7, #3]
 800e842:	b2db      	uxtb	r3, r3
 800e844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e848:	b2da      	uxtb	r2, r3
 800e84a:	4b31      	ldr	r3, [pc, #196]	; (800e910 <xPortStartScheduler+0x130>)
 800e84c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e84e:	4b31      	ldr	r3, [pc, #196]	; (800e914 <xPortStartScheduler+0x134>)
 800e850:	2207      	movs	r2, #7
 800e852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e854:	e009      	b.n	800e86a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e856:	4b2f      	ldr	r3, [pc, #188]	; (800e914 <xPortStartScheduler+0x134>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	3b01      	subs	r3, #1
 800e85c:	4a2d      	ldr	r2, [pc, #180]	; (800e914 <xPortStartScheduler+0x134>)
 800e85e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e860:	78fb      	ldrb	r3, [r7, #3]
 800e862:	b2db      	uxtb	r3, r3
 800e864:	005b      	lsls	r3, r3, #1
 800e866:	b2db      	uxtb	r3, r3
 800e868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e86a:	78fb      	ldrb	r3, [r7, #3]
 800e86c:	b2db      	uxtb	r3, r3
 800e86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e872:	2b80      	cmp	r3, #128	; 0x80
 800e874:	d0ef      	beq.n	800e856 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e876:	4b27      	ldr	r3, [pc, #156]	; (800e914 <xPortStartScheduler+0x134>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f1c3 0307 	rsb	r3, r3, #7
 800e87e:	2b04      	cmp	r3, #4
 800e880:	d00a      	beq.n	800e898 <xPortStartScheduler+0xb8>
	__asm volatile
 800e882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e886:	f383 8811 	msr	BASEPRI, r3
 800e88a:	f3bf 8f6f 	isb	sy
 800e88e:	f3bf 8f4f 	dsb	sy
 800e892:	60bb      	str	r3, [r7, #8]
}
 800e894:	bf00      	nop
 800e896:	e7fe      	b.n	800e896 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e898:	4b1e      	ldr	r3, [pc, #120]	; (800e914 <xPortStartScheduler+0x134>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	021b      	lsls	r3, r3, #8
 800e89e:	4a1d      	ldr	r2, [pc, #116]	; (800e914 <xPortStartScheduler+0x134>)
 800e8a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e8a2:	4b1c      	ldr	r3, [pc, #112]	; (800e914 <xPortStartScheduler+0x134>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e8aa:	4a1a      	ldr	r2, [pc, #104]	; (800e914 <xPortStartScheduler+0x134>)
 800e8ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	b2da      	uxtb	r2, r3
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e8b6:	4b18      	ldr	r3, [pc, #96]	; (800e918 <xPortStartScheduler+0x138>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4a17      	ldr	r2, [pc, #92]	; (800e918 <xPortStartScheduler+0x138>)
 800e8bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e8c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e8c2:	4b15      	ldr	r3, [pc, #84]	; (800e918 <xPortStartScheduler+0x138>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a14      	ldr	r2, [pc, #80]	; (800e918 <xPortStartScheduler+0x138>)
 800e8c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e8cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e8ce:	f000 f8dd 	bl	800ea8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e8d2:	4b12      	ldr	r3, [pc, #72]	; (800e91c <xPortStartScheduler+0x13c>)
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e8d8:	f000 f8fc 	bl	800ead4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e8dc:	4b10      	ldr	r3, [pc, #64]	; (800e920 <xPortStartScheduler+0x140>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4a0f      	ldr	r2, [pc, #60]	; (800e920 <xPortStartScheduler+0x140>)
 800e8e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e8e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e8e8:	f7ff ff66 	bl	800e7b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e8ec:	f7ff f822 	bl	800d934 <vTaskSwitchContext>
	prvTaskExitError();
 800e8f0:	f7ff ff1e 	bl	800e730 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3718      	adds	r7, #24
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	e000ed00 	.word	0xe000ed00
 800e904:	410fc271 	.word	0x410fc271
 800e908:	410fc270 	.word	0x410fc270
 800e90c:	e000e400 	.word	0xe000e400
 800e910:	200089e4 	.word	0x200089e4
 800e914:	200089e8 	.word	0x200089e8
 800e918:	e000ed20 	.word	0xe000ed20
 800e91c:	2000009c 	.word	0x2000009c
 800e920:	e000ef34 	.word	0xe000ef34

0800e924 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
	__asm volatile
 800e92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92e:	f383 8811 	msr	BASEPRI, r3
 800e932:	f3bf 8f6f 	isb	sy
 800e936:	f3bf 8f4f 	dsb	sy
 800e93a:	607b      	str	r3, [r7, #4]
}
 800e93c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e93e:	4b0f      	ldr	r3, [pc, #60]	; (800e97c <vPortEnterCritical+0x58>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	3301      	adds	r3, #1
 800e944:	4a0d      	ldr	r2, [pc, #52]	; (800e97c <vPortEnterCritical+0x58>)
 800e946:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e948:	4b0c      	ldr	r3, [pc, #48]	; (800e97c <vPortEnterCritical+0x58>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d10f      	bne.n	800e970 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e950:	4b0b      	ldr	r3, [pc, #44]	; (800e980 <vPortEnterCritical+0x5c>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	b2db      	uxtb	r3, r3
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00a      	beq.n	800e970 <vPortEnterCritical+0x4c>
	__asm volatile
 800e95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95e:	f383 8811 	msr	BASEPRI, r3
 800e962:	f3bf 8f6f 	isb	sy
 800e966:	f3bf 8f4f 	dsb	sy
 800e96a:	603b      	str	r3, [r7, #0]
}
 800e96c:	bf00      	nop
 800e96e:	e7fe      	b.n	800e96e <vPortEnterCritical+0x4a>
	}
}
 800e970:	bf00      	nop
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr
 800e97c:	2000009c 	.word	0x2000009c
 800e980:	e000ed04 	.word	0xe000ed04

0800e984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e98a:	4b12      	ldr	r3, [pc, #72]	; (800e9d4 <vPortExitCritical+0x50>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10a      	bne.n	800e9a8 <vPortExitCritical+0x24>
	__asm volatile
 800e992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e996:	f383 8811 	msr	BASEPRI, r3
 800e99a:	f3bf 8f6f 	isb	sy
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	607b      	str	r3, [r7, #4]
}
 800e9a4:	bf00      	nop
 800e9a6:	e7fe      	b.n	800e9a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e9a8:	4b0a      	ldr	r3, [pc, #40]	; (800e9d4 <vPortExitCritical+0x50>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	4a09      	ldr	r2, [pc, #36]	; (800e9d4 <vPortExitCritical+0x50>)
 800e9b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e9b2:	4b08      	ldr	r3, [pc, #32]	; (800e9d4 <vPortExitCritical+0x50>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d105      	bne.n	800e9c6 <vPortExitCritical+0x42>
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	f383 8811 	msr	BASEPRI, r3
}
 800e9c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e9c6:	bf00      	nop
 800e9c8:	370c      	adds	r7, #12
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d0:	4770      	bx	lr
 800e9d2:	bf00      	nop
 800e9d4:	2000009c 	.word	0x2000009c
	...

0800e9e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e9e0:	f3ef 8009 	mrs	r0, PSP
 800e9e4:	f3bf 8f6f 	isb	sy
 800e9e8:	4b15      	ldr	r3, [pc, #84]	; (800ea40 <pxCurrentTCBConst>)
 800e9ea:	681a      	ldr	r2, [r3, #0]
 800e9ec:	f01e 0f10 	tst.w	lr, #16
 800e9f0:	bf08      	it	eq
 800e9f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e9f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9fa:	6010      	str	r0, [r2, #0]
 800e9fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ea00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ea04:	f380 8811 	msr	BASEPRI, r0
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	f3bf 8f6f 	isb	sy
 800ea10:	f7fe ff90 	bl	800d934 <vTaskSwitchContext>
 800ea14:	f04f 0000 	mov.w	r0, #0
 800ea18:	f380 8811 	msr	BASEPRI, r0
 800ea1c:	bc09      	pop	{r0, r3}
 800ea1e:	6819      	ldr	r1, [r3, #0]
 800ea20:	6808      	ldr	r0, [r1, #0]
 800ea22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea26:	f01e 0f10 	tst.w	lr, #16
 800ea2a:	bf08      	it	eq
 800ea2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea30:	f380 8809 	msr	PSP, r0
 800ea34:	f3bf 8f6f 	isb	sy
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	f3af 8000 	nop.w

0800ea40 <pxCurrentTCBConst>:
 800ea40:	200083b8 	.word	0x200083b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ea44:	bf00      	nop
 800ea46:	bf00      	nop

0800ea48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ea4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea52:	f383 8811 	msr	BASEPRI, r3
 800ea56:	f3bf 8f6f 	isb	sy
 800ea5a:	f3bf 8f4f 	dsb	sy
 800ea5e:	607b      	str	r3, [r7, #4]
}
 800ea60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ea62:	f7fe fead 	bl	800d7c0 <xTaskIncrementTick>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d003      	beq.n	800ea74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea6c:	4b06      	ldr	r3, [pc, #24]	; (800ea88 <xPortSysTickHandler+0x40>)
 800ea6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea72:	601a      	str	r2, [r3, #0]
 800ea74:	2300      	movs	r3, #0
 800ea76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	f383 8811 	msr	BASEPRI, r3
}
 800ea7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ea80:	bf00      	nop
 800ea82:	3708      	adds	r7, #8
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	e000ed04 	.word	0xe000ed04

0800ea8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea90:	4b0b      	ldr	r3, [pc, #44]	; (800eac0 <vPortSetupTimerInterrupt+0x34>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea96:	4b0b      	ldr	r3, [pc, #44]	; (800eac4 <vPortSetupTimerInterrupt+0x38>)
 800ea98:	2200      	movs	r2, #0
 800ea9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea9c:	4b0a      	ldr	r3, [pc, #40]	; (800eac8 <vPortSetupTimerInterrupt+0x3c>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4a0a      	ldr	r2, [pc, #40]	; (800eacc <vPortSetupTimerInterrupt+0x40>)
 800eaa2:	fba2 2303 	umull	r2, r3, r2, r3
 800eaa6:	099b      	lsrs	r3, r3, #6
 800eaa8:	4a09      	ldr	r2, [pc, #36]	; (800ead0 <vPortSetupTimerInterrupt+0x44>)
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eaae:	4b04      	ldr	r3, [pc, #16]	; (800eac0 <vPortSetupTimerInterrupt+0x34>)
 800eab0:	2207      	movs	r2, #7
 800eab2:	601a      	str	r2, [r3, #0]
}
 800eab4:	bf00      	nop
 800eab6:	46bd      	mov	sp, r7
 800eab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabc:	4770      	bx	lr
 800eabe:	bf00      	nop
 800eac0:	e000e010 	.word	0xe000e010
 800eac4:	e000e018 	.word	0xe000e018
 800eac8:	20000004 	.word	0x20000004
 800eacc:	10624dd3 	.word	0x10624dd3
 800ead0:	e000e014 	.word	0xe000e014

0800ead4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ead4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eae4 <vPortEnableVFP+0x10>
 800ead8:	6801      	ldr	r1, [r0, #0]
 800eada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eade:	6001      	str	r1, [r0, #0]
 800eae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800eae2:	bf00      	nop
 800eae4:	e000ed88 	.word	0xe000ed88

0800eae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800eae8:	b480      	push	{r7}
 800eaea:	b085      	sub	sp, #20
 800eaec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eaee:	f3ef 8305 	mrs	r3, IPSR
 800eaf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	2b0f      	cmp	r3, #15
 800eaf8:	d914      	bls.n	800eb24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eafa:	4a17      	ldr	r2, [pc, #92]	; (800eb58 <vPortValidateInterruptPriority+0x70>)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	4413      	add	r3, r2
 800eb00:	781b      	ldrb	r3, [r3, #0]
 800eb02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eb04:	4b15      	ldr	r3, [pc, #84]	; (800eb5c <vPortValidateInterruptPriority+0x74>)
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	7afa      	ldrb	r2, [r7, #11]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d20a      	bcs.n	800eb24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	607b      	str	r3, [r7, #4]
}
 800eb20:	bf00      	nop
 800eb22:	e7fe      	b.n	800eb22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eb24:	4b0e      	ldr	r3, [pc, #56]	; (800eb60 <vPortValidateInterruptPriority+0x78>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb2c:	4b0d      	ldr	r3, [pc, #52]	; (800eb64 <vPortValidateInterruptPriority+0x7c>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d90a      	bls.n	800eb4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb38:	f383 8811 	msr	BASEPRI, r3
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	603b      	str	r3, [r7, #0]
}
 800eb46:	bf00      	nop
 800eb48:	e7fe      	b.n	800eb48 <vPortValidateInterruptPriority+0x60>
	}
 800eb4a:	bf00      	nop
 800eb4c:	3714      	adds	r7, #20
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb54:	4770      	bx	lr
 800eb56:	bf00      	nop
 800eb58:	e000e3f0 	.word	0xe000e3f0
 800eb5c:	200089e4 	.word	0x200089e4
 800eb60:	e000ed0c 	.word	0xe000ed0c
 800eb64:	200089e8 	.word	0x200089e8

0800eb68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b08a      	sub	sp, #40	; 0x28
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eb70:	2300      	movs	r3, #0
 800eb72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eb74:	f7fe fd68 	bl	800d648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eb78:	4b5b      	ldr	r3, [pc, #364]	; (800ece8 <pvPortMalloc+0x180>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d101      	bne.n	800eb84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eb80:	f000 f920 	bl	800edc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb84:	4b59      	ldr	r3, [pc, #356]	; (800ecec <pvPortMalloc+0x184>)
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	4013      	ands	r3, r2
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f040 8093 	bne.w	800ecb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d01d      	beq.n	800ebd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eb98:	2208      	movs	r2, #8
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f003 0307 	and.w	r3, r3, #7
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d014      	beq.n	800ebd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f023 0307 	bic.w	r3, r3, #7
 800ebb0:	3308      	adds	r3, #8
 800ebb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f003 0307 	and.w	r3, r3, #7
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00a      	beq.n	800ebd4 <pvPortMalloc+0x6c>
	__asm volatile
 800ebbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc2:	f383 8811 	msr	BASEPRI, r3
 800ebc6:	f3bf 8f6f 	isb	sy
 800ebca:	f3bf 8f4f 	dsb	sy
 800ebce:	617b      	str	r3, [r7, #20]
}
 800ebd0:	bf00      	nop
 800ebd2:	e7fe      	b.n	800ebd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d06e      	beq.n	800ecb8 <pvPortMalloc+0x150>
 800ebda:	4b45      	ldr	r3, [pc, #276]	; (800ecf0 <pvPortMalloc+0x188>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d869      	bhi.n	800ecb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ebe4:	4b43      	ldr	r3, [pc, #268]	; (800ecf4 <pvPortMalloc+0x18c>)
 800ebe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ebe8:	4b42      	ldr	r3, [pc, #264]	; (800ecf4 <pvPortMalloc+0x18c>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ebee:	e004      	b.n	800ebfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ebfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d903      	bls.n	800ec0c <pvPortMalloc+0xa4>
 800ec04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1f1      	bne.n	800ebf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ec0c:	4b36      	ldr	r3, [pc, #216]	; (800ece8 <pvPortMalloc+0x180>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d050      	beq.n	800ecb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	2208      	movs	r2, #8
 800ec1c:	4413      	add	r3, r2
 800ec1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ec20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	6a3b      	ldr	r3, [r7, #32]
 800ec26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ec28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2a:	685a      	ldr	r2, [r3, #4]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	1ad2      	subs	r2, r2, r3
 800ec30:	2308      	movs	r3, #8
 800ec32:	005b      	lsls	r3, r3, #1
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d91f      	bls.n	800ec78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ec38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	f003 0307 	and.w	r3, r3, #7
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d00a      	beq.n	800ec60 <pvPortMalloc+0xf8>
	__asm volatile
 800ec4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4e:	f383 8811 	msr	BASEPRI, r3
 800ec52:	f3bf 8f6f 	isb	sy
 800ec56:	f3bf 8f4f 	dsb	sy
 800ec5a:	613b      	str	r3, [r7, #16]
}
 800ec5c:	bf00      	nop
 800ec5e:	e7fe      	b.n	800ec5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ec60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec62:	685a      	ldr	r2, [r3, #4]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	1ad2      	subs	r2, r2, r3
 800ec68:	69bb      	ldr	r3, [r7, #24]
 800ec6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ec6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ec72:	69b8      	ldr	r0, [r7, #24]
 800ec74:	f000 f908 	bl	800ee88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec78:	4b1d      	ldr	r3, [pc, #116]	; (800ecf0 <pvPortMalloc+0x188>)
 800ec7a:	681a      	ldr	r2, [r3, #0]
 800ec7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	1ad3      	subs	r3, r2, r3
 800ec82:	4a1b      	ldr	r2, [pc, #108]	; (800ecf0 <pvPortMalloc+0x188>)
 800ec84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec86:	4b1a      	ldr	r3, [pc, #104]	; (800ecf0 <pvPortMalloc+0x188>)
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	4b1b      	ldr	r3, [pc, #108]	; (800ecf8 <pvPortMalloc+0x190>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d203      	bcs.n	800ec9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec92:	4b17      	ldr	r3, [pc, #92]	; (800ecf0 <pvPortMalloc+0x188>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4a18      	ldr	r2, [pc, #96]	; (800ecf8 <pvPortMalloc+0x190>)
 800ec98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9c:	685a      	ldr	r2, [r3, #4]
 800ec9e:	4b13      	ldr	r3, [pc, #76]	; (800ecec <pvPortMalloc+0x184>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	431a      	orrs	r2, r3
 800eca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecaa:	2200      	movs	r2, #0
 800ecac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ecae:	4b13      	ldr	r3, [pc, #76]	; (800ecfc <pvPortMalloc+0x194>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	4a11      	ldr	r2, [pc, #68]	; (800ecfc <pvPortMalloc+0x194>)
 800ecb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ecb8:	f7fe fcd4 	bl	800d664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	f003 0307 	and.w	r3, r3, #7
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d00a      	beq.n	800ecdc <pvPortMalloc+0x174>
	__asm volatile
 800ecc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecca:	f383 8811 	msr	BASEPRI, r3
 800ecce:	f3bf 8f6f 	isb	sy
 800ecd2:	f3bf 8f4f 	dsb	sy
 800ecd6:	60fb      	str	r3, [r7, #12]
}
 800ecd8:	bf00      	nop
 800ecda:	e7fe      	b.n	800ecda <pvPortMalloc+0x172>
	return pvReturn;
 800ecdc:	69fb      	ldr	r3, [r7, #28]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3728      	adds	r7, #40	; 0x28
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	2000c5f4 	.word	0x2000c5f4
 800ecec:	2000c608 	.word	0x2000c608
 800ecf0:	2000c5f8 	.word	0x2000c5f8
 800ecf4:	2000c5ec 	.word	0x2000c5ec
 800ecf8:	2000c5fc 	.word	0x2000c5fc
 800ecfc:	2000c600 	.word	0x2000c600

0800ed00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b086      	sub	sp, #24
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d04d      	beq.n	800edae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ed12:	2308      	movs	r3, #8
 800ed14:	425b      	negs	r3, r3
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	4413      	add	r3, r2
 800ed1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	685a      	ldr	r2, [r3, #4]
 800ed24:	4b24      	ldr	r3, [pc, #144]	; (800edb8 <vPortFree+0xb8>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4013      	ands	r3, r2
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d10a      	bne.n	800ed44 <vPortFree+0x44>
	__asm volatile
 800ed2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed32:	f383 8811 	msr	BASEPRI, r3
 800ed36:	f3bf 8f6f 	isb	sy
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	60fb      	str	r3, [r7, #12]
}
 800ed40:	bf00      	nop
 800ed42:	e7fe      	b.n	800ed42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00a      	beq.n	800ed62 <vPortFree+0x62>
	__asm volatile
 800ed4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed50:	f383 8811 	msr	BASEPRI, r3
 800ed54:	f3bf 8f6f 	isb	sy
 800ed58:	f3bf 8f4f 	dsb	sy
 800ed5c:	60bb      	str	r3, [r7, #8]
}
 800ed5e:	bf00      	nop
 800ed60:	e7fe      	b.n	800ed60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	685a      	ldr	r2, [r3, #4]
 800ed66:	4b14      	ldr	r3, [pc, #80]	; (800edb8 <vPortFree+0xb8>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4013      	ands	r3, r2
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d01e      	beq.n	800edae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d11a      	bne.n	800edae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	685a      	ldr	r2, [r3, #4]
 800ed7c:	4b0e      	ldr	r3, [pc, #56]	; (800edb8 <vPortFree+0xb8>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	43db      	mvns	r3, r3
 800ed82:	401a      	ands	r2, r3
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ed88:	f7fe fc5e 	bl	800d648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	685a      	ldr	r2, [r3, #4]
 800ed90:	4b0a      	ldr	r3, [pc, #40]	; (800edbc <vPortFree+0xbc>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4413      	add	r3, r2
 800ed96:	4a09      	ldr	r2, [pc, #36]	; (800edbc <vPortFree+0xbc>)
 800ed98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed9a:	6938      	ldr	r0, [r7, #16]
 800ed9c:	f000 f874 	bl	800ee88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eda0:	4b07      	ldr	r3, [pc, #28]	; (800edc0 <vPortFree+0xc0>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	3301      	adds	r3, #1
 800eda6:	4a06      	ldr	r2, [pc, #24]	; (800edc0 <vPortFree+0xc0>)
 800eda8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800edaa:	f7fe fc5b 	bl	800d664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800edae:	bf00      	nop
 800edb0:	3718      	adds	r7, #24
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	2000c608 	.word	0x2000c608
 800edbc:	2000c5f8 	.word	0x2000c5f8
 800edc0:	2000c604 	.word	0x2000c604

0800edc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800edc4:	b480      	push	{r7}
 800edc6:	b085      	sub	sp, #20
 800edc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800edca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800edce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800edd0:	4b27      	ldr	r3, [pc, #156]	; (800ee70 <prvHeapInit+0xac>)
 800edd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f003 0307 	and.w	r3, r3, #7
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d00c      	beq.n	800edf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	3307      	adds	r3, #7
 800ede2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f023 0307 	bic.w	r3, r3, #7
 800edea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800edec:	68ba      	ldr	r2, [r7, #8]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	1ad3      	subs	r3, r2, r3
 800edf2:	4a1f      	ldr	r2, [pc, #124]	; (800ee70 <prvHeapInit+0xac>)
 800edf4:	4413      	add	r3, r2
 800edf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800edfc:	4a1d      	ldr	r2, [pc, #116]	; (800ee74 <prvHeapInit+0xb0>)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ee02:	4b1c      	ldr	r3, [pc, #112]	; (800ee74 <prvHeapInit+0xb0>)
 800ee04:	2200      	movs	r2, #0
 800ee06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ee10:	2208      	movs	r2, #8
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	1a9b      	subs	r3, r3, r2
 800ee16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f023 0307 	bic.w	r3, r3, #7
 800ee1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	4a15      	ldr	r2, [pc, #84]	; (800ee78 <prvHeapInit+0xb4>)
 800ee24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ee26:	4b14      	ldr	r3, [pc, #80]	; (800ee78 <prvHeapInit+0xb4>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ee2e:	4b12      	ldr	r3, [pc, #72]	; (800ee78 <prvHeapInit+0xb4>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2200      	movs	r2, #0
 800ee34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	1ad2      	subs	r2, r2, r3
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ee44:	4b0c      	ldr	r3, [pc, #48]	; (800ee78 <prvHeapInit+0xb4>)
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	4a0a      	ldr	r2, [pc, #40]	; (800ee7c <prvHeapInit+0xb8>)
 800ee52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	685b      	ldr	r3, [r3, #4]
 800ee58:	4a09      	ldr	r2, [pc, #36]	; (800ee80 <prvHeapInit+0xbc>)
 800ee5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee5c:	4b09      	ldr	r3, [pc, #36]	; (800ee84 <prvHeapInit+0xc0>)
 800ee5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ee62:	601a      	str	r2, [r3, #0]
}
 800ee64:	bf00      	nop
 800ee66:	3714      	adds	r7, #20
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr
 800ee70:	200089ec 	.word	0x200089ec
 800ee74:	2000c5ec 	.word	0x2000c5ec
 800ee78:	2000c5f4 	.word	0x2000c5f4
 800ee7c:	2000c5fc 	.word	0x2000c5fc
 800ee80:	2000c5f8 	.word	0x2000c5f8
 800ee84:	2000c608 	.word	0x2000c608

0800ee88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ee90:	4b28      	ldr	r3, [pc, #160]	; (800ef34 <prvInsertBlockIntoFreeList+0xac>)
 800ee92:	60fb      	str	r3, [r7, #12]
 800ee94:	e002      	b.n	800ee9c <prvInsertBlockIntoFreeList+0x14>
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	60fb      	str	r3, [r7, #12]
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d8f7      	bhi.n	800ee96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	68ba      	ldr	r2, [r7, #8]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d108      	bne.n	800eeca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	685a      	ldr	r2, [r3, #4]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	441a      	add	r2, r3
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	68ba      	ldr	r2, [r7, #8]
 800eed4:	441a      	add	r2, r3
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d118      	bne.n	800ef10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	4b15      	ldr	r3, [pc, #84]	; (800ef38 <prvInsertBlockIntoFreeList+0xb0>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d00d      	beq.n	800ef06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	685a      	ldr	r2, [r3, #4]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	441a      	add	r2, r3
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	601a      	str	r2, [r3, #0]
 800ef04:	e008      	b.n	800ef18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ef06:	4b0c      	ldr	r3, [pc, #48]	; (800ef38 <prvInsertBlockIntoFreeList+0xb0>)
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	601a      	str	r2, [r3, #0]
 800ef0e:	e003      	b.n	800ef18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ef18:	68fa      	ldr	r2, [r7, #12]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d002      	beq.n	800ef26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef26:	bf00      	nop
 800ef28:	3714      	adds	r7, #20
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	2000c5ec 	.word	0x2000c5ec
 800ef38:	2000c5f4 	.word	0x2000c5f4

0800ef3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ef40:	2200      	movs	r2, #0
 800ef42:	4912      	ldr	r1, [pc, #72]	; (800ef8c <MX_USB_DEVICE_Init+0x50>)
 800ef44:	4812      	ldr	r0, [pc, #72]	; (800ef90 <MX_USB_DEVICE_Init+0x54>)
 800ef46:	f7fb ff21 	bl	800ad8c <USBD_Init>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d001      	beq.n	800ef54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ef50:	f7f2 fba4 	bl	800169c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ef54:	490f      	ldr	r1, [pc, #60]	; (800ef94 <MX_USB_DEVICE_Init+0x58>)
 800ef56:	480e      	ldr	r0, [pc, #56]	; (800ef90 <MX_USB_DEVICE_Init+0x54>)
 800ef58:	f7fb ff48 	bl	800adec <USBD_RegisterClass>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d001      	beq.n	800ef66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ef62:	f7f2 fb9b 	bl	800169c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ef66:	490c      	ldr	r1, [pc, #48]	; (800ef98 <MX_USB_DEVICE_Init+0x5c>)
 800ef68:	4809      	ldr	r0, [pc, #36]	; (800ef90 <MX_USB_DEVICE_Init+0x54>)
 800ef6a:	f7fb fe7f 	bl	800ac6c <USBD_CDC_RegisterInterface>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d001      	beq.n	800ef78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ef74:	f7f2 fb92 	bl	800169c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ef78:	4805      	ldr	r0, [pc, #20]	; (800ef90 <MX_USB_DEVICE_Init+0x54>)
 800ef7a:	f7fb ff6d 	bl	800ae58 <USBD_Start>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d001      	beq.n	800ef88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ef84:	f7f2 fb8a 	bl	800169c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ef88:	bf00      	nop
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	200000b4 	.word	0x200000b4
 800ef90:	2000c60c 	.word	0x2000c60c
 800ef94:	2000001c 	.word	0x2000001c
 800ef98:	200000a0 	.word	0x200000a0

0800ef9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800efa0:	2200      	movs	r2, #0
 800efa2:	4905      	ldr	r1, [pc, #20]	; (800efb8 <CDC_Init_FS+0x1c>)
 800efa4:	4805      	ldr	r0, [pc, #20]	; (800efbc <CDC_Init_FS+0x20>)
 800efa6:	f7fb fe7b 	bl	800aca0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800efaa:	4905      	ldr	r1, [pc, #20]	; (800efc0 <CDC_Init_FS+0x24>)
 800efac:	4803      	ldr	r0, [pc, #12]	; (800efbc <CDC_Init_FS+0x20>)
 800efae:	f7fb fe99 	bl	800ace4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800efb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	2000d0e8 	.word	0x2000d0e8
 800efbc:	2000c60c 	.word	0x2000c60c
 800efc0:	2000c8e8 	.word	0x2000c8e8

0800efc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800efc4:	b480      	push	{r7}
 800efc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800efc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800efca:	4618      	mov	r0, r3
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr

0800efd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b083      	sub	sp, #12
 800efd8:	af00      	add	r7, sp, #0
 800efda:	4603      	mov	r3, r0
 800efdc:	6039      	str	r1, [r7, #0]
 800efde:	71fb      	strb	r3, [r7, #7]
 800efe0:	4613      	mov	r3, r2
 800efe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800efe4:	79fb      	ldrb	r3, [r7, #7]
 800efe6:	2b23      	cmp	r3, #35	; 0x23
 800efe8:	d84a      	bhi.n	800f080 <CDC_Control_FS+0xac>
 800efea:	a201      	add	r2, pc, #4	; (adr r2, 800eff0 <CDC_Control_FS+0x1c>)
 800efec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff0:	0800f081 	.word	0x0800f081
 800eff4:	0800f081 	.word	0x0800f081
 800eff8:	0800f081 	.word	0x0800f081
 800effc:	0800f081 	.word	0x0800f081
 800f000:	0800f081 	.word	0x0800f081
 800f004:	0800f081 	.word	0x0800f081
 800f008:	0800f081 	.word	0x0800f081
 800f00c:	0800f081 	.word	0x0800f081
 800f010:	0800f081 	.word	0x0800f081
 800f014:	0800f081 	.word	0x0800f081
 800f018:	0800f081 	.word	0x0800f081
 800f01c:	0800f081 	.word	0x0800f081
 800f020:	0800f081 	.word	0x0800f081
 800f024:	0800f081 	.word	0x0800f081
 800f028:	0800f081 	.word	0x0800f081
 800f02c:	0800f081 	.word	0x0800f081
 800f030:	0800f081 	.word	0x0800f081
 800f034:	0800f081 	.word	0x0800f081
 800f038:	0800f081 	.word	0x0800f081
 800f03c:	0800f081 	.word	0x0800f081
 800f040:	0800f081 	.word	0x0800f081
 800f044:	0800f081 	.word	0x0800f081
 800f048:	0800f081 	.word	0x0800f081
 800f04c:	0800f081 	.word	0x0800f081
 800f050:	0800f081 	.word	0x0800f081
 800f054:	0800f081 	.word	0x0800f081
 800f058:	0800f081 	.word	0x0800f081
 800f05c:	0800f081 	.word	0x0800f081
 800f060:	0800f081 	.word	0x0800f081
 800f064:	0800f081 	.word	0x0800f081
 800f068:	0800f081 	.word	0x0800f081
 800f06c:	0800f081 	.word	0x0800f081
 800f070:	0800f081 	.word	0x0800f081
 800f074:	0800f081 	.word	0x0800f081
 800f078:	0800f081 	.word	0x0800f081
 800f07c:	0800f081 	.word	0x0800f081
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f080:	bf00      	nop
  }

  return (USBD_OK);
 800f082:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f084:	4618      	mov	r0, r3
 800f086:	370c      	adds	r7, #12
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f09a:	6879      	ldr	r1, [r7, #4]
 800f09c:	4805      	ldr	r0, [pc, #20]	; (800f0b4 <CDC_Receive_FS+0x24>)
 800f09e:	f7fb fe21 	bl	800ace4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f0a2:	4804      	ldr	r0, [pc, #16]	; (800f0b4 <CDC_Receive_FS+0x24>)
 800f0a4:	f7fb fe3c 	bl	800ad20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f0a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3708      	adds	r7, #8
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	2000c60c 	.word	0x2000c60c

0800f0b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b087      	sub	sp, #28
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	60b9      	str	r1, [r7, #8]
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f0ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	371c      	adds	r7, #28
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr
	...

0800f0dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	6039      	str	r1, [r7, #0]
 800f0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	2212      	movs	r2, #18
 800f0ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f0ee:	4b03      	ldr	r3, [pc, #12]	; (800f0fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	370c      	adds	r7, #12
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr
 800f0fc:	200000d0 	.word	0x200000d0

0800f100 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f100:	b480      	push	{r7}
 800f102:	b083      	sub	sp, #12
 800f104:	af00      	add	r7, sp, #0
 800f106:	4603      	mov	r3, r0
 800f108:	6039      	str	r1, [r7, #0]
 800f10a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	2204      	movs	r2, #4
 800f110:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f112:	4b03      	ldr	r3, [pc, #12]	; (800f120 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f114:	4618      	mov	r0, r3
 800f116:	370c      	adds	r7, #12
 800f118:	46bd      	mov	sp, r7
 800f11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11e:	4770      	bx	lr
 800f120:	200000e4 	.word	0x200000e4

0800f124 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	4603      	mov	r3, r0
 800f12c:	6039      	str	r1, [r7, #0]
 800f12e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f130:	79fb      	ldrb	r3, [r7, #7]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d105      	bne.n	800f142 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f136:	683a      	ldr	r2, [r7, #0]
 800f138:	4907      	ldr	r1, [pc, #28]	; (800f158 <USBD_FS_ProductStrDescriptor+0x34>)
 800f13a:	4808      	ldr	r0, [pc, #32]	; (800f15c <USBD_FS_ProductStrDescriptor+0x38>)
 800f13c:	f7fd f838 	bl	800c1b0 <USBD_GetString>
 800f140:	e004      	b.n	800f14c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f142:	683a      	ldr	r2, [r7, #0]
 800f144:	4904      	ldr	r1, [pc, #16]	; (800f158 <USBD_FS_ProductStrDescriptor+0x34>)
 800f146:	4805      	ldr	r0, [pc, #20]	; (800f15c <USBD_FS_ProductStrDescriptor+0x38>)
 800f148:	f7fd f832 	bl	800c1b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f14c:	4b02      	ldr	r3, [pc, #8]	; (800f158 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3708      	adds	r7, #8
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	2000d8e8 	.word	0x2000d8e8
 800f15c:	08019f14 	.word	0x08019f14

0800f160 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
 800f166:	4603      	mov	r3, r0
 800f168:	6039      	str	r1, [r7, #0]
 800f16a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f16c:	683a      	ldr	r2, [r7, #0]
 800f16e:	4904      	ldr	r1, [pc, #16]	; (800f180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f170:	4804      	ldr	r0, [pc, #16]	; (800f184 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f172:	f7fd f81d 	bl	800c1b0 <USBD_GetString>
  return USBD_StrDesc;
 800f176:	4b02      	ldr	r3, [pc, #8]	; (800f180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3708      	adds	r7, #8
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}
 800f180:	2000d8e8 	.word	0x2000d8e8
 800f184:	08019f20 	.word	0x08019f20

0800f188 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	4603      	mov	r3, r0
 800f190:	6039      	str	r1, [r7, #0]
 800f192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	221a      	movs	r2, #26
 800f198:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f19a:	f000 f843 	bl	800f224 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f19e:	4b02      	ldr	r3, [pc, #8]	; (800f1a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3708      	adds	r7, #8
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	200000e8 	.word	0x200000e8

0800f1ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	6039      	str	r1, [r7, #0]
 800f1b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f1b8:	79fb      	ldrb	r3, [r7, #7]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d105      	bne.n	800f1ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f1be:	683a      	ldr	r2, [r7, #0]
 800f1c0:	4907      	ldr	r1, [pc, #28]	; (800f1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f1c2:	4808      	ldr	r0, [pc, #32]	; (800f1e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f1c4:	f7fc fff4 	bl	800c1b0 <USBD_GetString>
 800f1c8:	e004      	b.n	800f1d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f1ca:	683a      	ldr	r2, [r7, #0]
 800f1cc:	4904      	ldr	r1, [pc, #16]	; (800f1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f1ce:	4805      	ldr	r0, [pc, #20]	; (800f1e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f1d0:	f7fc ffee 	bl	800c1b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1d4:	4b02      	ldr	r3, [pc, #8]	; (800f1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3708      	adds	r7, #8
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	2000d8e8 	.word	0x2000d8e8
 800f1e4:	08019f28 	.word	0x08019f28

0800f1e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b082      	sub	sp, #8
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	6039      	str	r1, [r7, #0]
 800f1f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f1f4:	79fb      	ldrb	r3, [r7, #7]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d105      	bne.n	800f206 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f1fa:	683a      	ldr	r2, [r7, #0]
 800f1fc:	4907      	ldr	r1, [pc, #28]	; (800f21c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f1fe:	4808      	ldr	r0, [pc, #32]	; (800f220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f200:	f7fc ffd6 	bl	800c1b0 <USBD_GetString>
 800f204:	e004      	b.n	800f210 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f206:	683a      	ldr	r2, [r7, #0]
 800f208:	4904      	ldr	r1, [pc, #16]	; (800f21c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f20a:	4805      	ldr	r0, [pc, #20]	; (800f220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f20c:	f7fc ffd0 	bl	800c1b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f210:	4b02      	ldr	r3, [pc, #8]	; (800f21c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f212:	4618      	mov	r0, r3
 800f214:	3708      	adds	r7, #8
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
 800f21a:	bf00      	nop
 800f21c:	2000d8e8 	.word	0x2000d8e8
 800f220:	08019f34 	.word	0x08019f34

0800f224 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f22a:	4b0f      	ldr	r3, [pc, #60]	; (800f268 <Get_SerialNum+0x44>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f230:	4b0e      	ldr	r3, [pc, #56]	; (800f26c <Get_SerialNum+0x48>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f236:	4b0e      	ldr	r3, [pc, #56]	; (800f270 <Get_SerialNum+0x4c>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	4413      	add	r3, r2
 800f242:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d009      	beq.n	800f25e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f24a:	2208      	movs	r2, #8
 800f24c:	4909      	ldr	r1, [pc, #36]	; (800f274 <Get_SerialNum+0x50>)
 800f24e:	68f8      	ldr	r0, [r7, #12]
 800f250:	f000 f814 	bl	800f27c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f254:	2204      	movs	r2, #4
 800f256:	4908      	ldr	r1, [pc, #32]	; (800f278 <Get_SerialNum+0x54>)
 800f258:	68b8      	ldr	r0, [r7, #8]
 800f25a:	f000 f80f 	bl	800f27c <IntToUnicode>
  }
}
 800f25e:	bf00      	nop
 800f260:	3710      	adds	r7, #16
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	1fff7a10 	.word	0x1fff7a10
 800f26c:	1fff7a14 	.word	0x1fff7a14
 800f270:	1fff7a18 	.word	0x1fff7a18
 800f274:	200000ea 	.word	0x200000ea
 800f278:	200000fa 	.word	0x200000fa

0800f27c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b087      	sub	sp, #28
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	4613      	mov	r3, r2
 800f288:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f28e:	2300      	movs	r3, #0
 800f290:	75fb      	strb	r3, [r7, #23]
 800f292:	e027      	b.n	800f2e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	0f1b      	lsrs	r3, r3, #28
 800f298:	2b09      	cmp	r3, #9
 800f29a:	d80b      	bhi.n	800f2b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	0f1b      	lsrs	r3, r3, #28
 800f2a0:	b2da      	uxtb	r2, r3
 800f2a2:	7dfb      	ldrb	r3, [r7, #23]
 800f2a4:	005b      	lsls	r3, r3, #1
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	440b      	add	r3, r1
 800f2ac:	3230      	adds	r2, #48	; 0x30
 800f2ae:	b2d2      	uxtb	r2, r2
 800f2b0:	701a      	strb	r2, [r3, #0]
 800f2b2:	e00a      	b.n	800f2ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	0f1b      	lsrs	r3, r3, #28
 800f2b8:	b2da      	uxtb	r2, r3
 800f2ba:	7dfb      	ldrb	r3, [r7, #23]
 800f2bc:	005b      	lsls	r3, r3, #1
 800f2be:	4619      	mov	r1, r3
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	440b      	add	r3, r1
 800f2c4:	3237      	adds	r2, #55	; 0x37
 800f2c6:	b2d2      	uxtb	r2, r2
 800f2c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	011b      	lsls	r3, r3, #4
 800f2ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f2d0:	7dfb      	ldrb	r3, [r7, #23]
 800f2d2:	005b      	lsls	r3, r3, #1
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	68ba      	ldr	r2, [r7, #8]
 800f2d8:	4413      	add	r3, r2
 800f2da:	2200      	movs	r2, #0
 800f2dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f2de:	7dfb      	ldrb	r3, [r7, #23]
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	75fb      	strb	r3, [r7, #23]
 800f2e4:	7dfa      	ldrb	r2, [r7, #23]
 800f2e6:	79fb      	ldrb	r3, [r7, #7]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d3d3      	bcc.n	800f294 <IntToUnicode+0x18>
  }
}
 800f2ec:	bf00      	nop
 800f2ee:	bf00      	nop
 800f2f0:	371c      	adds	r7, #28
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr
	...

0800f2fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b08a      	sub	sp, #40	; 0x28
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f304:	f107 0314 	add.w	r3, r7, #20
 800f308:	2200      	movs	r2, #0
 800f30a:	601a      	str	r2, [r3, #0]
 800f30c:	605a      	str	r2, [r3, #4]
 800f30e:	609a      	str	r2, [r3, #8]
 800f310:	60da      	str	r2, [r3, #12]
 800f312:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f31c:	d13a      	bne.n	800f394 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f31e:	2300      	movs	r3, #0
 800f320:	613b      	str	r3, [r7, #16]
 800f322:	4b1e      	ldr	r3, [pc, #120]	; (800f39c <HAL_PCD_MspInit+0xa0>)
 800f324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f326:	4a1d      	ldr	r2, [pc, #116]	; (800f39c <HAL_PCD_MspInit+0xa0>)
 800f328:	f043 0301 	orr.w	r3, r3, #1
 800f32c:	6313      	str	r3, [r2, #48]	; 0x30
 800f32e:	4b1b      	ldr	r3, [pc, #108]	; (800f39c <HAL_PCD_MspInit+0xa0>)
 800f330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f332:	f003 0301 	and.w	r3, r3, #1
 800f336:	613b      	str	r3, [r7, #16]
 800f338:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f33a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f33e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f340:	2302      	movs	r3, #2
 800f342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f344:	2300      	movs	r3, #0
 800f346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f348:	2303      	movs	r3, #3
 800f34a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f34c:	230a      	movs	r3, #10
 800f34e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f350:	f107 0314 	add.w	r3, r7, #20
 800f354:	4619      	mov	r1, r3
 800f356:	4812      	ldr	r0, [pc, #72]	; (800f3a0 <HAL_PCD_MspInit+0xa4>)
 800f358:	f7f4 fbb6 	bl	8003ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f35c:	4b0f      	ldr	r3, [pc, #60]	; (800f39c <HAL_PCD_MspInit+0xa0>)
 800f35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f360:	4a0e      	ldr	r2, [pc, #56]	; (800f39c <HAL_PCD_MspInit+0xa0>)
 800f362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f366:	6353      	str	r3, [r2, #52]	; 0x34
 800f368:	2300      	movs	r3, #0
 800f36a:	60fb      	str	r3, [r7, #12]
 800f36c:	4b0b      	ldr	r3, [pc, #44]	; (800f39c <HAL_PCD_MspInit+0xa0>)
 800f36e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f370:	4a0a      	ldr	r2, [pc, #40]	; (800f39c <HAL_PCD_MspInit+0xa0>)
 800f372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f376:	6453      	str	r3, [r2, #68]	; 0x44
 800f378:	4b08      	ldr	r3, [pc, #32]	; (800f39c <HAL_PCD_MspInit+0xa0>)
 800f37a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f37c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f380:	60fb      	str	r3, [r7, #12]
 800f382:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f384:	2200      	movs	r2, #0
 800f386:	2105      	movs	r1, #5
 800f388:	2043      	movs	r0, #67	; 0x43
 800f38a:	f7f3 ff55 	bl	8003238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f38e:	2043      	movs	r0, #67	; 0x43
 800f390:	f7f3 ff6e 	bl	8003270 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f394:	bf00      	nop
 800f396:	3728      	adds	r7, #40	; 0x28
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	40023800 	.word	0x40023800
 800f3a0:	40020000 	.word	0x40020000

0800f3a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	4610      	mov	r0, r2
 800f3bc:	f7fb fd99 	bl	800aef2 <USBD_LL_SetupStage>
}
 800f3c0:	bf00      	nop
 800f3c2:	3708      	adds	r7, #8
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	460b      	mov	r3, r1
 800f3d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f3da:	78fa      	ldrb	r2, [r7, #3]
 800f3dc:	6879      	ldr	r1, [r7, #4]
 800f3de:	4613      	mov	r3, r2
 800f3e0:	00db      	lsls	r3, r3, #3
 800f3e2:	4413      	add	r3, r2
 800f3e4:	009b      	lsls	r3, r3, #2
 800f3e6:	440b      	add	r3, r1
 800f3e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f3ec:	681a      	ldr	r2, [r3, #0]
 800f3ee:	78fb      	ldrb	r3, [r7, #3]
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	f7fb fdd3 	bl	800af9c <USBD_LL_DataOutStage>
}
 800f3f6:	bf00      	nop
 800f3f8:	3708      	adds	r7, #8
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b082      	sub	sp, #8
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
 800f406:	460b      	mov	r3, r1
 800f408:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f410:	78fa      	ldrb	r2, [r7, #3]
 800f412:	6879      	ldr	r1, [r7, #4]
 800f414:	4613      	mov	r3, r2
 800f416:	00db      	lsls	r3, r3, #3
 800f418:	4413      	add	r3, r2
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	440b      	add	r3, r1
 800f41e:	334c      	adds	r3, #76	; 0x4c
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	78fb      	ldrb	r3, [r7, #3]
 800f424:	4619      	mov	r1, r3
 800f426:	f7fb fe6c 	bl	800b102 <USBD_LL_DataInStage>
}
 800f42a:	bf00      	nop
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f432:	b580      	push	{r7, lr}
 800f434:	b082      	sub	sp, #8
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f440:	4618      	mov	r0, r3
 800f442:	f7fb ffa0 	bl	800b386 <USBD_LL_SOF>
}
 800f446:	bf00      	nop
 800f448:	3708      	adds	r7, #8
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}

0800f44e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f44e:	b580      	push	{r7, lr}
 800f450:	b084      	sub	sp, #16
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f456:	2301      	movs	r3, #1
 800f458:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	68db      	ldr	r3, [r3, #12]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d102      	bne.n	800f468 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f462:	2300      	movs	r3, #0
 800f464:	73fb      	strb	r3, [r7, #15]
 800f466:	e008      	b.n	800f47a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	2b02      	cmp	r3, #2
 800f46e:	d102      	bne.n	800f476 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f470:	2301      	movs	r3, #1
 800f472:	73fb      	strb	r3, [r7, #15]
 800f474:	e001      	b.n	800f47a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f476:	f7f2 f911 	bl	800169c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f480:	7bfa      	ldrb	r2, [r7, #15]
 800f482:	4611      	mov	r1, r2
 800f484:	4618      	mov	r0, r3
 800f486:	f7fb ff40 	bl	800b30a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f490:	4618      	mov	r0, r3
 800f492:	f7fb fee8 	bl	800b266 <USBD_LL_Reset>
}
 800f496:	bf00      	nop
 800f498:	3710      	adds	r7, #16
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
	...

0800f4a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fb ff3b 	bl	800b32a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	6812      	ldr	r2, [r2, #0]
 800f4c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f4c6:	f043 0301 	orr.w	r3, r3, #1
 800f4ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6a1b      	ldr	r3, [r3, #32]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d005      	beq.n	800f4e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f4d4:	4b04      	ldr	r3, [pc, #16]	; (800f4e8 <HAL_PCD_SuspendCallback+0x48>)
 800f4d6:	691b      	ldr	r3, [r3, #16]
 800f4d8:	4a03      	ldr	r2, [pc, #12]	; (800f4e8 <HAL_PCD_SuspendCallback+0x48>)
 800f4da:	f043 0306 	orr.w	r3, r3, #6
 800f4de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f4e0:	bf00      	nop
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	e000ed00 	.word	0xe000ed00

0800f4ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fb ff2b 	bl	800b356 <USBD_LL_Resume>
}
 800f500:	bf00      	nop
 800f502:	3708      	adds	r7, #8
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	460b      	mov	r3, r1
 800f512:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f51a:	78fa      	ldrb	r2, [r7, #3]
 800f51c:	4611      	mov	r1, r2
 800f51e:	4618      	mov	r0, r3
 800f520:	f7fb ff83 	bl	800b42a <USBD_LL_IsoOUTIncomplete>
}
 800f524:	bf00      	nop
 800f526:	3708      	adds	r7, #8
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	460b      	mov	r3, r1
 800f536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f53e:	78fa      	ldrb	r2, [r7, #3]
 800f540:	4611      	mov	r1, r2
 800f542:	4618      	mov	r0, r3
 800f544:	f7fb ff3f 	bl	800b3c6 <USBD_LL_IsoINIncomplete>
}
 800f548:	bf00      	nop
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fb ff95 	bl	800b48e <USBD_LL_DevConnected>
}
 800f564:	bf00      	nop
 800f566:	3708      	adds	r7, #8
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}

0800f56c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fb ff92 	bl	800b4a4 <USBD_LL_DevDisconnected>
}
 800f580:	bf00      	nop
 800f582:	3708      	adds	r7, #8
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d13c      	bne.n	800f612 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f598:	4a20      	ldr	r2, [pc, #128]	; (800f61c <USBD_LL_Init+0x94>)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4a1e      	ldr	r2, [pc, #120]	; (800f61c <USBD_LL_Init+0x94>)
 800f5a4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f5a8:	4b1c      	ldr	r3, [pc, #112]	; (800f61c <USBD_LL_Init+0x94>)
 800f5aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f5ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f5b0:	4b1a      	ldr	r3, [pc, #104]	; (800f61c <USBD_LL_Init+0x94>)
 800f5b2:	2204      	movs	r2, #4
 800f5b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f5b6:	4b19      	ldr	r3, [pc, #100]	; (800f61c <USBD_LL_Init+0x94>)
 800f5b8:	2202      	movs	r2, #2
 800f5ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f5bc:	4b17      	ldr	r3, [pc, #92]	; (800f61c <USBD_LL_Init+0x94>)
 800f5be:	2200      	movs	r2, #0
 800f5c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f5c2:	4b16      	ldr	r3, [pc, #88]	; (800f61c <USBD_LL_Init+0x94>)
 800f5c4:	2202      	movs	r2, #2
 800f5c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f5c8:	4b14      	ldr	r3, [pc, #80]	; (800f61c <USBD_LL_Init+0x94>)
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f5ce:	4b13      	ldr	r3, [pc, #76]	; (800f61c <USBD_LL_Init+0x94>)
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f5d4:	4b11      	ldr	r3, [pc, #68]	; (800f61c <USBD_LL_Init+0x94>)
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f5da:	4b10      	ldr	r3, [pc, #64]	; (800f61c <USBD_LL_Init+0x94>)
 800f5dc:	2200      	movs	r2, #0
 800f5de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f5e0:	4b0e      	ldr	r3, [pc, #56]	; (800f61c <USBD_LL_Init+0x94>)
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f5e6:	480d      	ldr	r0, [pc, #52]	; (800f61c <USBD_LL_Init+0x94>)
 800f5e8:	f7f4 fd82 	bl	80040f0 <HAL_PCD_Init>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d001      	beq.n	800f5f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f5f2:	f7f2 f853 	bl	800169c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f5f6:	2180      	movs	r1, #128	; 0x80
 800f5f8:	4808      	ldr	r0, [pc, #32]	; (800f61c <USBD_LL_Init+0x94>)
 800f5fa:	f7f5 ffda 	bl	80055b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f5fe:	2240      	movs	r2, #64	; 0x40
 800f600:	2100      	movs	r1, #0
 800f602:	4806      	ldr	r0, [pc, #24]	; (800f61c <USBD_LL_Init+0x94>)
 800f604:	f7f5 ff8e 	bl	8005524 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f608:	2280      	movs	r2, #128	; 0x80
 800f60a:	2101      	movs	r1, #1
 800f60c:	4803      	ldr	r0, [pc, #12]	; (800f61c <USBD_LL_Init+0x94>)
 800f60e:	f7f5 ff89 	bl	8005524 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f612:	2300      	movs	r3, #0
}
 800f614:	4618      	mov	r0, r3
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	2000dae8 	.word	0x2000dae8

0800f620 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f62c:	2300      	movs	r3, #0
 800f62e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f636:	4618      	mov	r0, r3
 800f638:	f7f4 fe77 	bl	800432a <HAL_PCD_Start>
 800f63c:	4603      	mov	r3, r0
 800f63e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f640:	7bfb      	ldrb	r3, [r7, #15]
 800f642:	4618      	mov	r0, r3
 800f644:	f000 f942 	bl	800f8cc <USBD_Get_USB_Status>
 800f648:	4603      	mov	r3, r0
 800f64a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f64c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3710      	adds	r7, #16
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}

0800f656 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f656:	b580      	push	{r7, lr}
 800f658:	b084      	sub	sp, #16
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6078      	str	r0, [r7, #4]
 800f65e:	4608      	mov	r0, r1
 800f660:	4611      	mov	r1, r2
 800f662:	461a      	mov	r2, r3
 800f664:	4603      	mov	r3, r0
 800f666:	70fb      	strb	r3, [r7, #3]
 800f668:	460b      	mov	r3, r1
 800f66a:	70bb      	strb	r3, [r7, #2]
 800f66c:	4613      	mov	r3, r2
 800f66e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f670:	2300      	movs	r3, #0
 800f672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f674:	2300      	movs	r3, #0
 800f676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f67e:	78bb      	ldrb	r3, [r7, #2]
 800f680:	883a      	ldrh	r2, [r7, #0]
 800f682:	78f9      	ldrb	r1, [r7, #3]
 800f684:	f7f5 fb48 	bl	8004d18 <HAL_PCD_EP_Open>
 800f688:	4603      	mov	r3, r0
 800f68a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f68c:	7bfb      	ldrb	r3, [r7, #15]
 800f68e:	4618      	mov	r0, r3
 800f690:	f000 f91c 	bl	800f8cc <USBD_Get_USB_Status>
 800f694:	4603      	mov	r3, r0
 800f696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f698:	7bbb      	ldrb	r3, [r7, #14]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b084      	sub	sp, #16
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6bc:	78fa      	ldrb	r2, [r7, #3]
 800f6be:	4611      	mov	r1, r2
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7f5 fb91 	bl	8004de8 <HAL_PCD_EP_Close>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6ca:	7bfb      	ldrb	r3, [r7, #15]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f000 f8fd 	bl	800f8cc <USBD_Get_USB_Status>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3710      	adds	r7, #16
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b084      	sub	sp, #16
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	460b      	mov	r3, r1
 800f6ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6fa:	78fa      	ldrb	r2, [r7, #3]
 800f6fc:	4611      	mov	r1, r2
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7f5 fc69 	bl	8004fd6 <HAL_PCD_EP_SetStall>
 800f704:	4603      	mov	r3, r0
 800f706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f708:	7bfb      	ldrb	r3, [r7, #15]
 800f70a:	4618      	mov	r0, r3
 800f70c:	f000 f8de 	bl	800f8cc <USBD_Get_USB_Status>
 800f710:	4603      	mov	r3, r0
 800f712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f714:	7bbb      	ldrb	r3, [r7, #14]
}
 800f716:	4618      	mov	r0, r3
 800f718:	3710      	adds	r7, #16
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}

0800f71e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f71e:	b580      	push	{r7, lr}
 800f720:	b084      	sub	sp, #16
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
 800f726:	460b      	mov	r3, r1
 800f728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f72a:	2300      	movs	r3, #0
 800f72c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f72e:	2300      	movs	r3, #0
 800f730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f738:	78fa      	ldrb	r2, [r7, #3]
 800f73a:	4611      	mov	r1, r2
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7f5 fcae 	bl	800509e <HAL_PCD_EP_ClrStall>
 800f742:	4603      	mov	r3, r0
 800f744:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f746:	7bfb      	ldrb	r3, [r7, #15]
 800f748:	4618      	mov	r0, r3
 800f74a:	f000 f8bf 	bl	800f8cc <USBD_Get_USB_Status>
 800f74e:	4603      	mov	r3, r0
 800f750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f752:	7bbb      	ldrb	r3, [r7, #14]
}
 800f754:	4618      	mov	r0, r3
 800f756:	3710      	adds	r7, #16
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b085      	sub	sp, #20
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	460b      	mov	r3, r1
 800f766:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f76e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f774:	2b00      	cmp	r3, #0
 800f776:	da0b      	bge.n	800f790 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f778:	78fb      	ldrb	r3, [r7, #3]
 800f77a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f77e:	68f9      	ldr	r1, [r7, #12]
 800f780:	4613      	mov	r3, r2
 800f782:	00db      	lsls	r3, r3, #3
 800f784:	4413      	add	r3, r2
 800f786:	009b      	lsls	r3, r3, #2
 800f788:	440b      	add	r3, r1
 800f78a:	333e      	adds	r3, #62	; 0x3e
 800f78c:	781b      	ldrb	r3, [r3, #0]
 800f78e:	e00b      	b.n	800f7a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f790:	78fb      	ldrb	r3, [r7, #3]
 800f792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f796:	68f9      	ldr	r1, [r7, #12]
 800f798:	4613      	mov	r3, r2
 800f79a:	00db      	lsls	r3, r3, #3
 800f79c:	4413      	add	r3, r2
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	440b      	add	r3, r1
 800f7a2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f7a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3714      	adds	r7, #20
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr

0800f7b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	460b      	mov	r3, r1
 800f7be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f7ce:	78fa      	ldrb	r2, [r7, #3]
 800f7d0:	4611      	mov	r1, r2
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7f5 fa7b 	bl	8004cce <HAL_PCD_SetAddress>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7dc:	7bfb      	ldrb	r3, [r7, #15]
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f000 f874 	bl	800f8cc <USBD_Get_USB_Status>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	3710      	adds	r7, #16
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}

0800f7f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f7f2:	b580      	push	{r7, lr}
 800f7f4:	b086      	sub	sp, #24
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	60f8      	str	r0, [r7, #12]
 800f7fa:	607a      	str	r2, [r7, #4]
 800f7fc:	603b      	str	r3, [r7, #0]
 800f7fe:	460b      	mov	r3, r1
 800f800:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f802:	2300      	movs	r3, #0
 800f804:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f806:	2300      	movs	r3, #0
 800f808:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f810:	7af9      	ldrb	r1, [r7, #11]
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	687a      	ldr	r2, [r7, #4]
 800f816:	f7f5 fb94 	bl	8004f42 <HAL_PCD_EP_Transmit>
 800f81a:	4603      	mov	r3, r0
 800f81c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f81e:	7dfb      	ldrb	r3, [r7, #23]
 800f820:	4618      	mov	r0, r3
 800f822:	f000 f853 	bl	800f8cc <USBD_Get_USB_Status>
 800f826:	4603      	mov	r3, r0
 800f828:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f82a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3718      	adds	r7, #24
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b086      	sub	sp, #24
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	607a      	str	r2, [r7, #4]
 800f83e:	603b      	str	r3, [r7, #0]
 800f840:	460b      	mov	r3, r1
 800f842:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f844:	2300      	movs	r3, #0
 800f846:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f848:	2300      	movs	r3, #0
 800f84a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f852:	7af9      	ldrb	r1, [r7, #11]
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	f7f5 fb10 	bl	8004e7c <HAL_PCD_EP_Receive>
 800f85c:	4603      	mov	r3, r0
 800f85e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f860:	7dfb      	ldrb	r3, [r7, #23]
 800f862:	4618      	mov	r0, r3
 800f864:	f000 f832 	bl	800f8cc <USBD_Get_USB_Status>
 800f868:	4603      	mov	r3, r0
 800f86a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f86c:	7dbb      	ldrb	r3, [r7, #22]
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3718      	adds	r7, #24
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f876:	b580      	push	{r7, lr}
 800f878:	b082      	sub	sp, #8
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6078      	str	r0, [r7, #4]
 800f87e:	460b      	mov	r3, r1
 800f880:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f888:	78fa      	ldrb	r2, [r7, #3]
 800f88a:	4611      	mov	r1, r2
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7f5 fb40 	bl	8004f12 <HAL_PCD_EP_GetRxCount>
 800f892:	4603      	mov	r3, r0
}
 800f894:	4618      	mov	r0, r3
 800f896:	3708      	adds	r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}

0800f89c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b083      	sub	sp, #12
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f8a4:	4b03      	ldr	r3, [pc, #12]	; (800f8b4 <USBD_static_malloc+0x18>)
}
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	370c      	adds	r7, #12
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop
 800f8b4:	2000dff4 	.word	0x2000dff4

0800f8b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b083      	sub	sp, #12
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]

}
 800f8c0:	bf00      	nop
 800f8c2:	370c      	adds	r7, #12
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ca:	4770      	bx	lr

0800f8cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b085      	sub	sp, #20
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f8da:	79fb      	ldrb	r3, [r7, #7]
 800f8dc:	2b03      	cmp	r3, #3
 800f8de:	d817      	bhi.n	800f910 <USBD_Get_USB_Status+0x44>
 800f8e0:	a201      	add	r2, pc, #4	; (adr r2, 800f8e8 <USBD_Get_USB_Status+0x1c>)
 800f8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e6:	bf00      	nop
 800f8e8:	0800f8f9 	.word	0x0800f8f9
 800f8ec:	0800f8ff 	.word	0x0800f8ff
 800f8f0:	0800f905 	.word	0x0800f905
 800f8f4:	0800f90b 	.word	0x0800f90b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	73fb      	strb	r3, [r7, #15]
    break;
 800f8fc:	e00b      	b.n	800f916 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f8fe:	2303      	movs	r3, #3
 800f900:	73fb      	strb	r3, [r7, #15]
    break;
 800f902:	e008      	b.n	800f916 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f904:	2301      	movs	r3, #1
 800f906:	73fb      	strb	r3, [r7, #15]
    break;
 800f908:	e005      	b.n	800f916 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f90a:	2303      	movs	r3, #3
 800f90c:	73fb      	strb	r3, [r7, #15]
    break;
 800f90e:	e002      	b.n	800f916 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f910:	2303      	movs	r3, #3
 800f912:	73fb      	strb	r3, [r7, #15]
    break;
 800f914:	bf00      	nop
  }
  return usb_status;
 800f916:	7bfb      	ldrb	r3, [r7, #15]
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3714      	adds	r7, #20
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <rcl_get_zero_initialized_publisher>:
 800f924:	4b01      	ldr	r3, [pc, #4]	; (800f92c <rcl_get_zero_initialized_publisher+0x8>)
 800f926:	6818      	ldr	r0, [r3, #0]
 800f928:	4770      	bx	lr
 800f92a:	bf00      	nop
 800f92c:	08019fdc 	.word	0x08019fdc

0800f930 <rcl_publisher_init>:
 800f930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f934:	b088      	sub	sp, #32
 800f936:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f938:	2d00      	cmp	r5, #0
 800f93a:	d069      	beq.n	800fa10 <rcl_publisher_init+0xe0>
 800f93c:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800f940:	4604      	mov	r4, r0
 800f942:	4648      	mov	r0, r9
 800f944:	460e      	mov	r6, r1
 800f946:	4690      	mov	r8, r2
 800f948:	461f      	mov	r7, r3
 800f94a:	f000 f9d5 	bl	800fcf8 <rcutils_allocator_is_valid>
 800f94e:	2800      	cmp	r0, #0
 800f950:	d05e      	beq.n	800fa10 <rcl_publisher_init+0xe0>
 800f952:	2c00      	cmp	r4, #0
 800f954:	d05c      	beq.n	800fa10 <rcl_publisher_init+0xe0>
 800f956:	f8d4 a000 	ldr.w	sl, [r4]
 800f95a:	f1ba 0f00 	cmp.w	sl, #0
 800f95e:	d004      	beq.n	800f96a <rcl_publisher_init+0x3a>
 800f960:	2764      	movs	r7, #100	; 0x64
 800f962:	4638      	mov	r0, r7
 800f964:	b008      	add	sp, #32
 800f966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f96a:	4630      	mov	r0, r6
 800f96c:	f004 ffac 	bl	80148c8 <rcl_node_is_valid>
 800f970:	2800      	cmp	r0, #0
 800f972:	d052      	beq.n	800fa1a <rcl_publisher_init+0xea>
 800f974:	f1b8 0f00 	cmp.w	r8, #0
 800f978:	d04a      	beq.n	800fa10 <rcl_publisher_init+0xe0>
 800f97a:	2f00      	cmp	r7, #0
 800f97c:	d048      	beq.n	800fa10 <rcl_publisher_init+0xe0>
 800f97e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800f982:	aa07      	add	r2, sp, #28
 800f984:	9205      	str	r2, [sp, #20]
 800f986:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800f98a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f98e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f992:	f8cd a01c 	str.w	sl, [sp, #28]
 800f996:	4639      	mov	r1, r7
 800f998:	e899 000c 	ldmia.w	r9, {r2, r3}
 800f99c:	4630      	mov	r0, r6
 800f99e:	f004 ffe7 	bl	8014970 <rcl_node_resolve_name>
 800f9a2:	4607      	mov	r7, r0
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	d14f      	bne.n	800fa48 <rcl_publisher_init+0x118>
 800f9a8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800f9aa:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800f9ac:	20c8      	movs	r0, #200	; 0xc8
 800f9ae:	4798      	blx	r3
 800f9b0:	6020      	str	r0, [r4, #0]
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	d04e      	beq.n	800fa54 <rcl_publisher_init+0x124>
 800f9b6:	4630      	mov	r0, r6
 800f9b8:	f004 ffa8 	bl	801490c <rcl_node_get_rmw_handle>
 800f9bc:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800f9c0:	9300      	str	r3, [sp, #0]
 800f9c2:	9a07      	ldr	r2, [sp, #28]
 800f9c4:	6827      	ldr	r7, [r4, #0]
 800f9c6:	462b      	mov	r3, r5
 800f9c8:	4641      	mov	r1, r8
 800f9ca:	f000 fa53 	bl	800fe74 <rmw_create_publisher>
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800f9d4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800f9d8:	b370      	cbz	r0, 800fa38 <rcl_publisher_init+0x108>
 800f9da:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800f9de:	f000 fb29 	bl	8010034 <rmw_publisher_get_actual_qos>
 800f9e2:	6823      	ldr	r3, [r4, #0]
 800f9e4:	4607      	mov	r7, r0
 800f9e6:	b9d0      	cbnz	r0, 800fa1e <rcl_publisher_init+0xee>
 800f9e8:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800f9ec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800f9f0:	4629      	mov	r1, r5
 800f9f2:	2270      	movs	r2, #112	; 0x70
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f008 ff39 	bl	801886c <memcpy>
 800f9fa:	6832      	ldr	r2, [r6, #0]
 800f9fc:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800fa00:	9807      	ldr	r0, [sp, #28]
 800fa02:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800fa04:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fa06:	4798      	blx	r3
 800fa08:	4638      	mov	r0, r7
 800fa0a:	b008      	add	sp, #32
 800fa0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa10:	270b      	movs	r7, #11
 800fa12:	4638      	mov	r0, r7
 800fa14:	b008      	add	sp, #32
 800fa16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa1a:	27c8      	movs	r7, #200	; 0xc8
 800fa1c:	e7a1      	b.n	800f962 <rcl_publisher_init+0x32>
 800fa1e:	b18b      	cbz	r3, 800fa44 <rcl_publisher_init+0x114>
 800fa20:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800fa24:	b142      	cbz	r2, 800fa38 <rcl_publisher_init+0x108>
 800fa26:	4630      	mov	r0, r6
 800fa28:	f004 ff70 	bl	801490c <rcl_node_get_rmw_handle>
 800fa2c:	6823      	ldr	r3, [r4, #0]
 800fa2e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800fa32:	f000 fb01 	bl	8010038 <rmw_destroy_publisher>
 800fa36:	6823      	ldr	r3, [r4, #0]
 800fa38:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800fa3a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	4790      	blx	r2
 800fa40:	2300      	movs	r3, #0
 800fa42:	6023      	str	r3, [r4, #0]
 800fa44:	2701      	movs	r7, #1
 800fa46:	e7db      	b.n	800fa00 <rcl_publisher_init+0xd0>
 800fa48:	2867      	cmp	r0, #103	; 0x67
 800fa4a:	d0d9      	beq.n	800fa00 <rcl_publisher_init+0xd0>
 800fa4c:	2869      	cmp	r0, #105	; 0x69
 800fa4e:	d003      	beq.n	800fa58 <rcl_publisher_init+0x128>
 800fa50:	280a      	cmp	r0, #10
 800fa52:	d1f7      	bne.n	800fa44 <rcl_publisher_init+0x114>
 800fa54:	270a      	movs	r7, #10
 800fa56:	e7d3      	b.n	800fa00 <rcl_publisher_init+0xd0>
 800fa58:	2767      	movs	r7, #103	; 0x67
 800fa5a:	e7d1      	b.n	800fa00 <rcl_publisher_init+0xd0>

0800fa5c <rcl_publisher_get_default_options>:
 800fa5c:	b570      	push	{r4, r5, r6, lr}
 800fa5e:	4d14      	ldr	r5, [pc, #80]	; (800fab0 <rcl_publisher_get_default_options+0x54>)
 800fa60:	4914      	ldr	r1, [pc, #80]	; (800fab4 <rcl_publisher_get_default_options+0x58>)
 800fa62:	b088      	sub	sp, #32
 800fa64:	4604      	mov	r4, r0
 800fa66:	2250      	movs	r2, #80	; 0x50
 800fa68:	4628      	mov	r0, r5
 800fa6a:	f008 feff 	bl	801886c <memcpy>
 800fa6e:	a802      	add	r0, sp, #8
 800fa70:	f000 f934 	bl	800fcdc <rcutils_get_default_allocator>
 800fa74:	f10d 0c08 	add.w	ip, sp, #8
 800fa78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fa7c:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800fa80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fa84:	466e      	mov	r6, sp
 800fa86:	f8dc 3000 	ldr.w	r3, [ip]
 800fa8a:	f8ce 3000 	str.w	r3, [lr]
 800fa8e:	4630      	mov	r0, r6
 800fa90:	f000 f972 	bl	800fd78 <rmw_get_default_publisher_options>
 800fa94:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fa98:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800fa9c:	e883 0003 	stmia.w	r3, {r0, r1}
 800faa0:	2270      	movs	r2, #112	; 0x70
 800faa2:	4629      	mov	r1, r5
 800faa4:	4620      	mov	r0, r4
 800faa6:	f008 fee1 	bl	801886c <memcpy>
 800faaa:	4620      	mov	r0, r4
 800faac:	b008      	add	sp, #32
 800faae:	bd70      	pop	{r4, r5, r6, pc}
 800fab0:	2000e218 	.word	0x2000e218
 800fab4:	08019fe0 	.word	0x08019fe0

0800fab8 <rcl_publish>:
 800fab8:	b1f8      	cbz	r0, 800fafa <rcl_publish+0x42>
 800faba:	6803      	ldr	r3, [r0, #0]
 800fabc:	b570      	push	{r4, r5, r6, lr}
 800fabe:	4604      	mov	r4, r0
 800fac0:	b1b3      	cbz	r3, 800faf0 <rcl_publish+0x38>
 800fac2:	4616      	mov	r6, r2
 800fac4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800fac8:	b192      	cbz	r2, 800faf0 <rcl_publish+0x38>
 800faca:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800face:	460d      	mov	r5, r1
 800fad0:	f004 fb20 	bl	8014114 <rcl_context_is_valid>
 800fad4:	b160      	cbz	r0, 800faf0 <rcl_publish+0x38>
 800fad6:	6823      	ldr	r3, [r4, #0]
 800fad8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800fadc:	b140      	cbz	r0, 800faf0 <rcl_publish+0x38>
 800fade:	b155      	cbz	r5, 800faf6 <rcl_publish+0x3e>
 800fae0:	4632      	mov	r2, r6
 800fae2:	4629      	mov	r1, r5
 800fae4:	f000 f966 	bl	800fdb4 <rmw_publish>
 800fae8:	3800      	subs	r0, #0
 800faea:	bf18      	it	ne
 800faec:	2001      	movne	r0, #1
 800faee:	bd70      	pop	{r4, r5, r6, pc}
 800faf0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800faf4:	bd70      	pop	{r4, r5, r6, pc}
 800faf6:	200b      	movs	r0, #11
 800faf8:	bd70      	pop	{r4, r5, r6, pc}
 800fafa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800fafe:	4770      	bx	lr

0800fb00 <rclc_support_init>:
 800fb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb04:	b086      	sub	sp, #24
 800fb06:	b3b8      	cbz	r0, 800fb78 <rclc_support_init+0x78>
 800fb08:	461c      	mov	r4, r3
 800fb0a:	b3ab      	cbz	r3, 800fb78 <rclc_support_init+0x78>
 800fb0c:	460f      	mov	r7, r1
 800fb0e:	4690      	mov	r8, r2
 800fb10:	4606      	mov	r6, r0
 800fb12:	f004 fc69 	bl	80143e8 <rcl_get_zero_initialized_init_options>
 800fb16:	f104 030c 	add.w	r3, r4, #12
 800fb1a:	9005      	str	r0, [sp, #20]
 800fb1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fb20:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fb24:	a805      	add	r0, sp, #20
 800fb26:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fb2a:	f004 fc5f 	bl	80143ec <rcl_init_options_init>
 800fb2e:	4605      	mov	r5, r0
 800fb30:	b9e0      	cbnz	r0, 800fb6c <rclc_support_init+0x6c>
 800fb32:	ad02      	add	r5, sp, #8
 800fb34:	4628      	mov	r0, r5
 800fb36:	f004 fae3 	bl	8014100 <rcl_get_zero_initialized_context>
 800fb3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fb3e:	4633      	mov	r3, r6
 800fb40:	e886 0003 	stmia.w	r6, {r0, r1}
 800fb44:	aa05      	add	r2, sp, #20
 800fb46:	4641      	mov	r1, r8
 800fb48:	4638      	mov	r0, r7
 800fb4a:	f004 fb49 	bl	80141e0 <rcl_init>
 800fb4e:	4605      	mov	r5, r0
 800fb50:	b9b8      	cbnz	r0, 800fb82 <rclc_support_init+0x82>
 800fb52:	60b4      	str	r4, [r6, #8]
 800fb54:	4622      	mov	r2, r4
 800fb56:	f106 010c 	add.w	r1, r6, #12
 800fb5a:	2003      	movs	r0, #3
 800fb5c:	f005 f8c4 	bl	8014ce8 <rcl_clock_init>
 800fb60:	4605      	mov	r5, r0
 800fb62:	b970      	cbnz	r0, 800fb82 <rclc_support_init+0x82>
 800fb64:	a805      	add	r0, sp, #20
 800fb66:	f004 fca7 	bl	80144b8 <rcl_init_options_fini>
 800fb6a:	b108      	cbz	r0, 800fb70 <rclc_support_init+0x70>
 800fb6c:	f000 f8e8 	bl	800fd40 <rcutils_reset_error>
 800fb70:	4628      	mov	r0, r5
 800fb72:	b006      	add	sp, #24
 800fb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb78:	250b      	movs	r5, #11
 800fb7a:	4628      	mov	r0, r5
 800fb7c:	b006      	add	sp, #24
 800fb7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb82:	f000 f8dd 	bl	800fd40 <rcutils_reset_error>
 800fb86:	a805      	add	r0, sp, #20
 800fb88:	f004 fc96 	bl	80144b8 <rcl_init_options_fini>
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	d0ef      	beq.n	800fb70 <rclc_support_init+0x70>
 800fb90:	e7ec      	b.n	800fb6c <rclc_support_init+0x6c>
 800fb92:	bf00      	nop

0800fb94 <rclc_node_init_default>:
 800fb94:	b3b8      	cbz	r0, 800fc06 <rclc_node_init_default+0x72>
 800fb96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb9a:	460d      	mov	r5, r1
 800fb9c:	b0a1      	sub	sp, #132	; 0x84
 800fb9e:	b329      	cbz	r1, 800fbec <rclc_node_init_default+0x58>
 800fba0:	4616      	mov	r6, r2
 800fba2:	b31a      	cbz	r2, 800fbec <rclc_node_init_default+0x58>
 800fba4:	461f      	mov	r7, r3
 800fba6:	b30b      	cbz	r3, 800fbec <rclc_node_init_default+0x58>
 800fba8:	f10d 0810 	add.w	r8, sp, #16
 800fbac:	4604      	mov	r4, r0
 800fbae:	4640      	mov	r0, r8
 800fbb0:	f004 fd3a 	bl	8014628 <rcl_get_zero_initialized_node>
 800fbb4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fbb8:	f10d 0918 	add.w	r9, sp, #24
 800fbbc:	e884 0003 	stmia.w	r4, {r0, r1}
 800fbc0:	4648      	mov	r0, r9
 800fbc2:	f004 fea9 	bl	8014918 <rcl_node_get_default_options>
 800fbc6:	4640      	mov	r0, r8
 800fbc8:	f004 fd2e 	bl	8014628 <rcl_get_zero_initialized_node>
 800fbcc:	f8cd 9000 	str.w	r9, [sp]
 800fbd0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fbd4:	463b      	mov	r3, r7
 800fbd6:	e884 0003 	stmia.w	r4, {r0, r1}
 800fbda:	4632      	mov	r2, r6
 800fbdc:	4629      	mov	r1, r5
 800fbde:	4620      	mov	r0, r4
 800fbe0:	f004 fd2c 	bl	801463c <rcl_node_init>
 800fbe4:	b930      	cbnz	r0, 800fbf4 <rclc_node_init_default+0x60>
 800fbe6:	b021      	add	sp, #132	; 0x84
 800fbe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbec:	200b      	movs	r0, #11
 800fbee:	b021      	add	sp, #132	; 0x84
 800fbf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbf4:	9003      	str	r0, [sp, #12]
 800fbf6:	f000 f8a3 	bl	800fd40 <rcutils_reset_error>
 800fbfa:	f000 f8a1 	bl	800fd40 <rcutils_reset_error>
 800fbfe:	9803      	ldr	r0, [sp, #12]
 800fc00:	b021      	add	sp, #132	; 0x84
 800fc02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc06:	200b      	movs	r0, #11
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop

0800fc0c <rclc_publisher_init_default>:
 800fc0c:	b368      	cbz	r0, 800fc6a <rclc_publisher_init_default+0x5e>
 800fc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc12:	460d      	mov	r5, r1
 800fc14:	b0a0      	sub	sp, #128	; 0x80
 800fc16:	b321      	cbz	r1, 800fc62 <rclc_publisher_init_default+0x56>
 800fc18:	4616      	mov	r6, r2
 800fc1a:	b312      	cbz	r2, 800fc62 <rclc_publisher_init_default+0x56>
 800fc1c:	461f      	mov	r7, r3
 800fc1e:	b303      	cbz	r3, 800fc62 <rclc_publisher_init_default+0x56>
 800fc20:	4604      	mov	r4, r0
 800fc22:	f7ff fe7f 	bl	800f924 <rcl_get_zero_initialized_publisher>
 800fc26:	f10d 0810 	add.w	r8, sp, #16
 800fc2a:	6020      	str	r0, [r4, #0]
 800fc2c:	4640      	mov	r0, r8
 800fc2e:	f7ff ff15 	bl	800fa5c <rcl_publisher_get_default_options>
 800fc32:	490f      	ldr	r1, [pc, #60]	; (800fc70 <rclc_publisher_init_default+0x64>)
 800fc34:	2250      	movs	r2, #80	; 0x50
 800fc36:	4640      	mov	r0, r8
 800fc38:	f008 fe18 	bl	801886c <memcpy>
 800fc3c:	f8cd 8000 	str.w	r8, [sp]
 800fc40:	463b      	mov	r3, r7
 800fc42:	4632      	mov	r2, r6
 800fc44:	4629      	mov	r1, r5
 800fc46:	4620      	mov	r0, r4
 800fc48:	f7ff fe72 	bl	800f930 <rcl_publisher_init>
 800fc4c:	b910      	cbnz	r0, 800fc54 <rclc_publisher_init_default+0x48>
 800fc4e:	b020      	add	sp, #128	; 0x80
 800fc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc54:	9003      	str	r0, [sp, #12]
 800fc56:	f000 f873 	bl	800fd40 <rcutils_reset_error>
 800fc5a:	9803      	ldr	r0, [sp, #12]
 800fc5c:	b020      	add	sp, #128	; 0x80
 800fc5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc62:	200b      	movs	r0, #11
 800fc64:	b020      	add	sp, #128	; 0x80
 800fc66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc6a:	200b      	movs	r0, #11
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop
 800fc70:	0801a030 	.word	0x0801a030

0800fc74 <__default_zero_allocate>:
 800fc74:	f008 bc76 	b.w	8018564 <calloc>

0800fc78 <__default_reallocate>:
 800fc78:	f008 bf88 	b.w	8018b8c <realloc>

0800fc7c <__default_deallocate>:
 800fc7c:	f008 bdee 	b.w	801885c <free>

0800fc80 <__default_allocate>:
 800fc80:	f008 bde4 	b.w	801884c <malloc>

0800fc84 <rcutils_get_zero_initialized_allocator>:
 800fc84:	b510      	push	{r4, lr}
 800fc86:	4c05      	ldr	r4, [pc, #20]	; (800fc9c <rcutils_get_zero_initialized_allocator+0x18>)
 800fc88:	4686      	mov	lr, r0
 800fc8a:	4684      	mov	ip, r0
 800fc8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc92:	6823      	ldr	r3, [r4, #0]
 800fc94:	f8cc 3000 	str.w	r3, [ip]
 800fc98:	4670      	mov	r0, lr
 800fc9a:	bd10      	pop	{r4, pc}
 800fc9c:	0801a080 	.word	0x0801a080

0800fca0 <rcutils_set_default_allocator>:
 800fca0:	b1a8      	cbz	r0, 800fcce <rcutils_set_default_allocator+0x2e>
 800fca2:	6802      	ldr	r2, [r0, #0]
 800fca4:	b1a2      	cbz	r2, 800fcd0 <rcutils_set_default_allocator+0x30>
 800fca6:	6841      	ldr	r1, [r0, #4]
 800fca8:	b1a1      	cbz	r1, 800fcd4 <rcutils_set_default_allocator+0x34>
 800fcaa:	b410      	push	{r4}
 800fcac:	68c4      	ldr	r4, [r0, #12]
 800fcae:	b164      	cbz	r4, 800fcca <rcutils_set_default_allocator+0x2a>
 800fcb0:	6880      	ldr	r0, [r0, #8]
 800fcb2:	b138      	cbz	r0, 800fcc4 <rcutils_set_default_allocator+0x24>
 800fcb4:	4b08      	ldr	r3, [pc, #32]	; (800fcd8 <rcutils_set_default_allocator+0x38>)
 800fcb6:	601a      	str	r2, [r3, #0]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800fcbe:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800fcc2:	2001      	movs	r0, #1
 800fcc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcc8:	4770      	bx	lr
 800fcca:	4620      	mov	r0, r4
 800fccc:	e7fa      	b.n	800fcc4 <rcutils_set_default_allocator+0x24>
 800fcce:	4770      	bx	lr
 800fcd0:	4610      	mov	r0, r2
 800fcd2:	4770      	bx	lr
 800fcd4:	4608      	mov	r0, r1
 800fcd6:	4770      	bx	lr
 800fcd8:	20000104 	.word	0x20000104

0800fcdc <rcutils_get_default_allocator>:
 800fcdc:	b510      	push	{r4, lr}
 800fcde:	4c05      	ldr	r4, [pc, #20]	; (800fcf4 <rcutils_get_default_allocator+0x18>)
 800fce0:	4686      	mov	lr, r0
 800fce2:	4684      	mov	ip, r0
 800fce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fce6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	f8cc 3000 	str.w	r3, [ip]
 800fcf0:	4670      	mov	r0, lr
 800fcf2:	bd10      	pop	{r4, pc}
 800fcf4:	20000104 	.word	0x20000104

0800fcf8 <rcutils_allocator_is_valid>:
 800fcf8:	b158      	cbz	r0, 800fd12 <rcutils_allocator_is_valid+0x1a>
 800fcfa:	6803      	ldr	r3, [r0, #0]
 800fcfc:	b143      	cbz	r3, 800fd10 <rcutils_allocator_is_valid+0x18>
 800fcfe:	6843      	ldr	r3, [r0, #4]
 800fd00:	b133      	cbz	r3, 800fd10 <rcutils_allocator_is_valid+0x18>
 800fd02:	68c3      	ldr	r3, [r0, #12]
 800fd04:	b123      	cbz	r3, 800fd10 <rcutils_allocator_is_valid+0x18>
 800fd06:	6880      	ldr	r0, [r0, #8]
 800fd08:	3800      	subs	r0, #0
 800fd0a:	bf18      	it	ne
 800fd0c:	2001      	movne	r0, #1
 800fd0e:	4770      	bx	lr
 800fd10:	4618      	mov	r0, r3
 800fd12:	4770      	bx	lr

0800fd14 <rcutils_get_error_string>:
 800fd14:	4b06      	ldr	r3, [pc, #24]	; (800fd30 <rcutils_get_error_string+0x1c>)
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	b13b      	cbz	r3, 800fd2a <rcutils_get_error_string+0x16>
 800fd1a:	4b06      	ldr	r3, [pc, #24]	; (800fd34 <rcutils_get_error_string+0x20>)
 800fd1c:	781a      	ldrb	r2, [r3, #0]
 800fd1e:	b90a      	cbnz	r2, 800fd24 <rcutils_get_error_string+0x10>
 800fd20:	2201      	movs	r2, #1
 800fd22:	701a      	strb	r2, [r3, #0]
 800fd24:	4b04      	ldr	r3, [pc, #16]	; (800fd38 <rcutils_get_error_string+0x24>)
 800fd26:	7818      	ldrb	r0, [r3, #0]
 800fd28:	4770      	bx	lr
 800fd2a:	4b04      	ldr	r3, [pc, #16]	; (800fd3c <rcutils_get_error_string+0x28>)
 800fd2c:	7818      	ldrb	r0, [r3, #0]
 800fd2e:	4770      	bx	lr
 800fd30:	2000e288 	.word	0x2000e288
 800fd34:	2000e2a1 	.word	0x2000e2a1
 800fd38:	2000e2a0 	.word	0x2000e2a0
 800fd3c:	0801a094 	.word	0x0801a094

0800fd40 <rcutils_reset_error>:
 800fd40:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800fd60 <rcutils_reset_error+0x20>
 800fd44:	4a08      	ldr	r2, [pc, #32]	; (800fd68 <rcutils_reset_error+0x28>)
 800fd46:	4809      	ldr	r0, [pc, #36]	; (800fd6c <rcutils_reset_error+0x2c>)
 800fd48:	4909      	ldr	r1, [pc, #36]	; (800fd70 <rcutils_reset_error+0x30>)
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	8013      	strh	r3, [r2, #0]
 800fd4e:	ed82 7b02 	vstr	d7, [r2, #8]
 800fd52:	4a08      	ldr	r2, [pc, #32]	; (800fd74 <rcutils_reset_error+0x34>)
 800fd54:	7003      	strb	r3, [r0, #0]
 800fd56:	700b      	strb	r3, [r1, #0]
 800fd58:	7013      	strb	r3, [r2, #0]
 800fd5a:	4770      	bx	lr
 800fd5c:	f3af 8000 	nop.w
	...
 800fd68:	2000e290 	.word	0x2000e290
 800fd6c:	2000e2a1 	.word	0x2000e2a1
 800fd70:	2000e2a0 	.word	0x2000e2a0
 800fd74:	2000e288 	.word	0x2000e288

0800fd78 <rmw_get_default_publisher_options>:
 800fd78:	2200      	movs	r2, #0
 800fd7a:	6002      	str	r2, [r0, #0]
 800fd7c:	7102      	strb	r2, [r0, #4]
 800fd7e:	4770      	bx	lr

0800fd80 <rmw_uros_set_custom_transport>:
 800fd80:	b470      	push	{r4, r5, r6}
 800fd82:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800fd86:	b162      	cbz	r2, 800fda2 <rmw_uros_set_custom_transport+0x22>
 800fd88:	b15b      	cbz	r3, 800fda2 <rmw_uros_set_custom_transport+0x22>
 800fd8a:	b155      	cbz	r5, 800fda2 <rmw_uros_set_custom_transport+0x22>
 800fd8c:	b14e      	cbz	r6, 800fda2 <rmw_uros_set_custom_transport+0x22>
 800fd8e:	4c06      	ldr	r4, [pc, #24]	; (800fda8 <rmw_uros_set_custom_transport+0x28>)
 800fd90:	7020      	strb	r0, [r4, #0]
 800fd92:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800fd96:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fd9a:	6166      	str	r6, [r4, #20]
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	bc70      	pop	{r4, r5, r6}
 800fda0:	4770      	bx	lr
 800fda2:	200b      	movs	r0, #11
 800fda4:	bc70      	pop	{r4, r5, r6}
 800fda6:	4770      	bx	lr
 800fda8:	2000e2a4 	.word	0x2000e2a4

0800fdac <flush_session>:
 800fdac:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800fdae:	f002 bb31 	b.w	8012414 <uxr_run_session_until_confirm_delivery>
 800fdb2:	bf00      	nop

0800fdb4 <rmw_publish>:
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	d053      	beq.n	800fe60 <rmw_publish+0xac>
 800fdb8:	b570      	push	{r4, r5, r6, lr}
 800fdba:	460d      	mov	r5, r1
 800fdbc:	b08e      	sub	sp, #56	; 0x38
 800fdbe:	2900      	cmp	r1, #0
 800fdc0:	d04b      	beq.n	800fe5a <rmw_publish+0xa6>
 800fdc2:	4604      	mov	r4, r0
 800fdc4:	6800      	ldr	r0, [r0, #0]
 800fdc6:	f000 fc3b 	bl	8010640 <is_uxrce_rmw_identifier_valid>
 800fdca:	2800      	cmp	r0, #0
 800fdcc:	d045      	beq.n	800fe5a <rmw_publish+0xa6>
 800fdce:	6866      	ldr	r6, [r4, #4]
 800fdd0:	2e00      	cmp	r6, #0
 800fdd2:	d042      	beq.n	800fe5a <rmw_publish+0xa6>
 800fdd4:	69b4      	ldr	r4, [r6, #24]
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	6923      	ldr	r3, [r4, #16]
 800fdda:	4798      	blx	r3
 800fddc:	69f3      	ldr	r3, [r6, #28]
 800fdde:	9005      	str	r0, [sp, #20]
 800fde0:	b113      	cbz	r3, 800fde8 <rmw_publish+0x34>
 800fde2:	a805      	add	r0, sp, #20
 800fde4:	4798      	blx	r3
 800fde6:	9805      	ldr	r0, [sp, #20]
 800fde8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fdec:	691b      	ldr	r3, [r3, #16]
 800fdee:	9000      	str	r0, [sp, #0]
 800fdf0:	6972      	ldr	r2, [r6, #20]
 800fdf2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800fdf4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800fdf8:	ab06      	add	r3, sp, #24
 800fdfa:	f003 f8f7 	bl	8012fec <uxr_prepare_output_stream>
 800fdfe:	b1d8      	cbz	r0, 800fe38 <rmw_publish+0x84>
 800fe00:	68a3      	ldr	r3, [r4, #8]
 800fe02:	a906      	add	r1, sp, #24
 800fe04:	4628      	mov	r0, r5
 800fe06:	4798      	blx	r3
 800fe08:	6a33      	ldr	r3, [r6, #32]
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	b10b      	cbz	r3, 800fe12 <rmw_publish+0x5e>
 800fe0e:	a806      	add	r0, sp, #24
 800fe10:	4798      	blx	r3
 800fe12:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fe1c:	d022      	beq.n	800fe64 <rmw_publish+0xb0>
 800fe1e:	6918      	ldr	r0, [r3, #16]
 800fe20:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800fe22:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fe26:	f002 faf5 	bl	8012414 <uxr_run_session_until_confirm_delivery>
 800fe2a:	4020      	ands	r0, r4
 800fe2c:	b2c4      	uxtb	r4, r0
 800fe2e:	f084 0001 	eor.w	r0, r4, #1
 800fe32:	b2c0      	uxtb	r0, r0
 800fe34:	b00e      	add	sp, #56	; 0x38
 800fe36:	bd70      	pop	{r4, r5, r6, pc}
 800fe38:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fe3c:	6918      	ldr	r0, [r3, #16]
 800fe3e:	9b05      	ldr	r3, [sp, #20]
 800fe40:	9300      	str	r3, [sp, #0]
 800fe42:	4b0b      	ldr	r3, [pc, #44]	; (800fe70 <rmw_publish+0xbc>)
 800fe44:	9301      	str	r3, [sp, #4]
 800fe46:	9602      	str	r6, [sp, #8]
 800fe48:	6972      	ldr	r2, [r6, #20]
 800fe4a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800fe4c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fe50:	ab06      	add	r3, sp, #24
 800fe52:	f003 f8fb 	bl	801304c <uxr_prepare_output_stream_fragmented>
 800fe56:	2800      	cmp	r0, #0
 800fe58:	d1d2      	bne.n	800fe00 <rmw_publish+0x4c>
 800fe5a:	2001      	movs	r0, #1
 800fe5c:	b00e      	add	sp, #56	; 0x38
 800fe5e:	bd70      	pop	{r4, r5, r6, pc}
 800fe60:	2001      	movs	r0, #1
 800fe62:	4770      	bx	lr
 800fe64:	6918      	ldr	r0, [r3, #16]
 800fe66:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fe6a:	f001 ff4d 	bl	8011d08 <uxr_flash_output_streams>
 800fe6e:	e7de      	b.n	800fe2e <rmw_publish+0x7a>
 800fe70:	0800fdad 	.word	0x0800fdad

0800fe74 <rmw_create_publisher>:
 800fe74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe78:	b087      	sub	sp, #28
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	f000 80cf 	beq.w	801001e <rmw_create_publisher+0x1aa>
 800fe80:	460e      	mov	r6, r1
 800fe82:	2900      	cmp	r1, #0
 800fe84:	f000 80cb 	beq.w	801001e <rmw_create_publisher+0x1aa>
 800fe88:	4604      	mov	r4, r0
 800fe8a:	6800      	ldr	r0, [r0, #0]
 800fe8c:	4615      	mov	r5, r2
 800fe8e:	4698      	mov	r8, r3
 800fe90:	f000 fbd6 	bl	8010640 <is_uxrce_rmw_identifier_valid>
 800fe94:	2800      	cmp	r0, #0
 800fe96:	f000 80c2 	beq.w	801001e <rmw_create_publisher+0x1aa>
 800fe9a:	2d00      	cmp	r5, #0
 800fe9c:	f000 80bf 	beq.w	801001e <rmw_create_publisher+0x1aa>
 800fea0:	782b      	ldrb	r3, [r5, #0]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	f000 80bb 	beq.w	801001e <rmw_create_publisher+0x1aa>
 800fea8:	f1b8 0f00 	cmp.w	r8, #0
 800feac:	f000 80b7 	beq.w	801001e <rmw_create_publisher+0x1aa>
 800feb0:	485d      	ldr	r0, [pc, #372]	; (8010028 <rmw_create_publisher+0x1b4>)
 800feb2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800feb6:	f005 fc8f 	bl	80157d8 <get_memory>
 800feba:	2800      	cmp	r0, #0
 800febc:	f000 80af 	beq.w	801001e <rmw_create_publisher+0x1aa>
 800fec0:	6884      	ldr	r4, [r0, #8]
 800fec2:	2300      	movs	r3, #0
 800fec4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800fec8:	f005 fcaa 	bl	8015820 <rmw_get_implementation_identifier>
 800fecc:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800fed0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800fed4:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800fed8:	4628      	mov	r0, r5
 800feda:	f7f0 f983 	bl	80001e4 <strlen>
 800fede:	3001      	adds	r0, #1
 800fee0:	283c      	cmp	r0, #60	; 0x3c
 800fee2:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800fee6:	f200 8097 	bhi.w	8010018 <rmw_create_publisher+0x1a4>
 800feea:	4a50      	ldr	r2, [pc, #320]	; (801002c <rmw_create_publisher+0x1b8>)
 800feec:	462b      	mov	r3, r5
 800feee:	213c      	movs	r1, #60	; 0x3c
 800fef0:	4650      	mov	r0, sl
 800fef2:	f008 fecd 	bl	8018c90 <sniprintf>
 800fef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fefa:	67e3      	str	r3, [r4, #124]	; 0x7c
 800fefc:	4641      	mov	r1, r8
 800fefe:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800ff02:	2250      	movs	r2, #80	; 0x50
 800ff04:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ff08:	f008 fcb0 	bl	801886c <memcpy>
 800ff0c:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ff10:	4947      	ldr	r1, [pc, #284]	; (8010030 <rmw_create_publisher+0x1bc>)
 800ff12:	2b02      	cmp	r3, #2
 800ff14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff18:	bf0c      	ite	eq
 800ff1a:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800ff1e:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800ff22:	67a3      	str	r3, [r4, #120]	; 0x78
 800ff24:	2300      	movs	r3, #0
 800ff26:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ff2a:	4630      	mov	r0, r6
 800ff2c:	f000 fb96 	bl	801065c <get_message_typesupport_handle>
 800ff30:	2800      	cmp	r0, #0
 800ff32:	d071      	beq.n	8010018 <rmw_create_publisher+0x1a4>
 800ff34:	6842      	ldr	r2, [r0, #4]
 800ff36:	61a2      	str	r2, [r4, #24]
 800ff38:	2a00      	cmp	r2, #0
 800ff3a:	d06d      	beq.n	8010018 <rmw_create_publisher+0x1a4>
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	4643      	mov	r3, r8
 800ff40:	4648      	mov	r0, r9
 800ff42:	f005 fed3 	bl	8015cec <create_topic>
 800ff46:	6260      	str	r0, [r4, #36]	; 0x24
 800ff48:	2800      	cmp	r0, #0
 800ff4a:	d065      	beq.n	8010018 <rmw_create_publisher+0x1a4>
 800ff4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff54:	2103      	movs	r1, #3
 800ff56:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800ff5a:	1c42      	adds	r2, r0, #1
 800ff5c:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800ff60:	f001 fd84 	bl	8011a6c <uxr_object_id>
 800ff64:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800ff68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff6c:	6120      	str	r0, [r4, #16]
 800ff6e:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800ff72:	6910      	ldr	r0, [r2, #16]
 800ff74:	2506      	movs	r5, #6
 800ff76:	9500      	str	r5, [sp, #0]
 800ff78:	6819      	ldr	r1, [r3, #0]
 800ff7a:	6922      	ldr	r2, [r4, #16]
 800ff7c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ff80:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ff84:	f001 fccc 	bl	8011920 <uxr_buffer_create_publisher_bin>
 800ff88:	4602      	mov	r2, r0
 800ff8a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ff8e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ff92:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ff96:	f000 fad3 	bl	8010540 <run_xrce_session>
 800ff9a:	b3c8      	cbz	r0, 8010010 <rmw_create_publisher+0x19c>
 800ff9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ffa0:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800ffa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ffa8:	2105      	movs	r1, #5
 800ffaa:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800ffae:	1c42      	adds	r2, r0, #1
 800ffb0:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800ffb4:	f001 fd5a 	bl	8011a6c <uxr_object_id>
 800ffb8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ffbc:	6160      	str	r0, [r4, #20]
 800ffbe:	691e      	ldr	r6, [r3, #16]
 800ffc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ffc4:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800ffc8:	f10d 0a10 	add.w	sl, sp, #16
 800ffcc:	4641      	mov	r1, r8
 800ffce:	4650      	mov	r0, sl
 800ffd0:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800ffd4:	f000 fad0 	bl	8010578 <convert_qos_profile>
 800ffd8:	9503      	str	r5, [sp, #12]
 800ffda:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ffde:	9001      	str	r0, [sp, #4]
 800ffe0:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ffe4:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ffe8:	9300      	str	r3, [sp, #0]
 800ffea:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800ffee:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800fff2:	f8d8 1000 	ldr.w	r1, [r8]
 800fff6:	4630      	mov	r0, r6
 800fff8:	f001 fcc2 	bl	8011980 <uxr_buffer_create_datawriter_bin>
 800fffc:	4602      	mov	r2, r0
 800fffe:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010002:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010006:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801000a:	f000 fa99 	bl	8010540 <run_xrce_session>
 801000e:	b938      	cbnz	r0, 8010020 <rmw_create_publisher+0x1ac>
 8010010:	4805      	ldr	r0, [pc, #20]	; (8010028 <rmw_create_publisher+0x1b4>)
 8010012:	4621      	mov	r1, r4
 8010014:	f005 fbf0 	bl	80157f8 <put_memory>
 8010018:	4638      	mov	r0, r7
 801001a:	f000 f9dd 	bl	80103d8 <rmw_uxrce_fini_publisher_memory>
 801001e:	2700      	movs	r7, #0
 8010020:	4638      	mov	r0, r7
 8010022:	b007      	add	sp, #28
 8010024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010028:	20012b9c 	.word	0x20012b9c
 801002c:	0801a0cc 	.word	0x0801a0cc
 8010030:	0801a098 	.word	0x0801a098

08010034 <rmw_publisher_get_actual_qos>:
 8010034:	2000      	movs	r0, #0
 8010036:	4770      	bx	lr

08010038 <rmw_destroy_publisher>:
 8010038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801003a:	b128      	cbz	r0, 8010048 <rmw_destroy_publisher+0x10>
 801003c:	4604      	mov	r4, r0
 801003e:	6800      	ldr	r0, [r0, #0]
 8010040:	460d      	mov	r5, r1
 8010042:	f000 fafd 	bl	8010640 <is_uxrce_rmw_identifier_valid>
 8010046:	b910      	cbnz	r0, 801004e <rmw_destroy_publisher+0x16>
 8010048:	2401      	movs	r4, #1
 801004a:	4620      	mov	r0, r4
 801004c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801004e:	6863      	ldr	r3, [r4, #4]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d0f9      	beq.n	8010048 <rmw_destroy_publisher+0x10>
 8010054:	2d00      	cmp	r5, #0
 8010056:	d0f7      	beq.n	8010048 <rmw_destroy_publisher+0x10>
 8010058:	6828      	ldr	r0, [r5, #0]
 801005a:	f000 faf1 	bl	8010640 <is_uxrce_rmw_identifier_valid>
 801005e:	2800      	cmp	r0, #0
 8010060:	d0f2      	beq.n	8010048 <rmw_destroy_publisher+0x10>
 8010062:	686c      	ldr	r4, [r5, #4]
 8010064:	2c00      	cmp	r4, #0
 8010066:	d0ef      	beq.n	8010048 <rmw_destroy_publisher+0x10>
 8010068:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801006a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 801006e:	f005 fea1 	bl	8015db4 <destroy_topic>
 8010072:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010076:	6962      	ldr	r2, [r4, #20]
 8010078:	6918      	ldr	r0, [r3, #16]
 801007a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801007e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010082:	6819      	ldr	r1, [r3, #0]
 8010084:	f001 fb98 	bl	80117b8 <uxr_buffer_delete_entity>
 8010088:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801008c:	6922      	ldr	r2, [r4, #16]
 801008e:	691b      	ldr	r3, [r3, #16]
 8010090:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8010094:	4604      	mov	r4, r0
 8010096:	6809      	ldr	r1, [r1, #0]
 8010098:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801009c:	f001 fb8c 	bl	80117b8 <uxr_buffer_delete_entity>
 80100a0:	693e      	ldr	r6, [r7, #16]
 80100a2:	4622      	mov	r2, r4
 80100a4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 80100a8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 80100ac:	4604      	mov	r4, r0
 80100ae:	4630      	mov	r0, r6
 80100b0:	f000 fa46 	bl	8010540 <run_xrce_session>
 80100b4:	693e      	ldr	r6, [r7, #16]
 80100b6:	4622      	mov	r2, r4
 80100b8:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 80100bc:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 80100c0:	4604      	mov	r4, r0
 80100c2:	4630      	mov	r0, r6
 80100c4:	f000 fa3c 	bl	8010540 <run_xrce_session>
 80100c8:	b12c      	cbz	r4, 80100d6 <rmw_destroy_publisher+0x9e>
 80100ca:	b120      	cbz	r0, 80100d6 <rmw_destroy_publisher+0x9e>
 80100cc:	2400      	movs	r4, #0
 80100ce:	4628      	mov	r0, r5
 80100d0:	f000 f982 	bl	80103d8 <rmw_uxrce_fini_publisher_memory>
 80100d4:	e7b9      	b.n	801004a <rmw_destroy_publisher+0x12>
 80100d6:	2402      	movs	r4, #2
 80100d8:	e7f9      	b.n	80100ce <rmw_destroy_publisher+0x96>
 80100da:	bf00      	nop

080100dc <rmw_uxrce_init_service_memory>:
 80100dc:	b1e2      	cbz	r2, 8010118 <rmw_uxrce_init_service_memory+0x3c>
 80100de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e2:	7b05      	ldrb	r5, [r0, #12]
 80100e4:	4606      	mov	r6, r0
 80100e6:	b9ad      	cbnz	r5, 8010114 <rmw_uxrce_init_service_memory+0x38>
 80100e8:	23c8      	movs	r3, #200	; 0xc8
 80100ea:	e9c0 5500 	strd	r5, r5, [r0]
 80100ee:	6083      	str	r3, [r0, #8]
 80100f0:	f240 1301 	movw	r3, #257	; 0x101
 80100f4:	4617      	mov	r7, r2
 80100f6:	8183      	strh	r3, [r0, #12]
 80100f8:	460c      	mov	r4, r1
 80100fa:	46a8      	mov	r8, r5
 80100fc:	4621      	mov	r1, r4
 80100fe:	4630      	mov	r0, r6
 8010100:	3501      	adds	r5, #1
 8010102:	f005 fb79 	bl	80157f8 <put_memory>
 8010106:	42af      	cmp	r7, r5
 8010108:	60a4      	str	r4, [r4, #8]
 801010a:	f884 800c 	strb.w	r8, [r4, #12]
 801010e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8010112:	d1f3      	bne.n	80100fc <rmw_uxrce_init_service_memory+0x20>
 8010114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010118:	4770      	bx	lr
 801011a:	bf00      	nop

0801011c <rmw_uxrce_init_client_memory>:
 801011c:	b1e2      	cbz	r2, 8010158 <rmw_uxrce_init_client_memory+0x3c>
 801011e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010122:	7b05      	ldrb	r5, [r0, #12]
 8010124:	4606      	mov	r6, r0
 8010126:	b9ad      	cbnz	r5, 8010154 <rmw_uxrce_init_client_memory+0x38>
 8010128:	23c8      	movs	r3, #200	; 0xc8
 801012a:	e9c0 5500 	strd	r5, r5, [r0]
 801012e:	6083      	str	r3, [r0, #8]
 8010130:	f240 1301 	movw	r3, #257	; 0x101
 8010134:	4617      	mov	r7, r2
 8010136:	8183      	strh	r3, [r0, #12]
 8010138:	460c      	mov	r4, r1
 801013a:	46a8      	mov	r8, r5
 801013c:	4621      	mov	r1, r4
 801013e:	4630      	mov	r0, r6
 8010140:	3501      	adds	r5, #1
 8010142:	f005 fb59 	bl	80157f8 <put_memory>
 8010146:	42af      	cmp	r7, r5
 8010148:	60a4      	str	r4, [r4, #8]
 801014a:	f884 800c 	strb.w	r8, [r4, #12]
 801014e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8010152:	d1f3      	bne.n	801013c <rmw_uxrce_init_client_memory+0x20>
 8010154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010158:	4770      	bx	lr
 801015a:	bf00      	nop

0801015c <rmw_uxrce_init_publisher_memory>:
 801015c:	b1e2      	cbz	r2, 8010198 <rmw_uxrce_init_publisher_memory+0x3c>
 801015e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010162:	7b05      	ldrb	r5, [r0, #12]
 8010164:	4606      	mov	r6, r0
 8010166:	b9ad      	cbnz	r5, 8010194 <rmw_uxrce_init_publisher_memory+0x38>
 8010168:	23d8      	movs	r3, #216	; 0xd8
 801016a:	e9c0 5500 	strd	r5, r5, [r0]
 801016e:	6083      	str	r3, [r0, #8]
 8010170:	f240 1301 	movw	r3, #257	; 0x101
 8010174:	4617      	mov	r7, r2
 8010176:	8183      	strh	r3, [r0, #12]
 8010178:	460c      	mov	r4, r1
 801017a:	46a8      	mov	r8, r5
 801017c:	4621      	mov	r1, r4
 801017e:	4630      	mov	r0, r6
 8010180:	3501      	adds	r5, #1
 8010182:	f005 fb39 	bl	80157f8 <put_memory>
 8010186:	42af      	cmp	r7, r5
 8010188:	60a4      	str	r4, [r4, #8]
 801018a:	f884 800c 	strb.w	r8, [r4, #12]
 801018e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8010192:	d1f3      	bne.n	801017c <rmw_uxrce_init_publisher_memory+0x20>
 8010194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop

0801019c <rmw_uxrce_init_subscription_memory>:
 801019c:	b1e2      	cbz	r2, 80101d8 <rmw_uxrce_init_subscription_memory+0x3c>
 801019e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101a2:	7b05      	ldrb	r5, [r0, #12]
 80101a4:	4606      	mov	r6, r0
 80101a6:	b9ad      	cbnz	r5, 80101d4 <rmw_uxrce_init_subscription_memory+0x38>
 80101a8:	23d8      	movs	r3, #216	; 0xd8
 80101aa:	e9c0 5500 	strd	r5, r5, [r0]
 80101ae:	6083      	str	r3, [r0, #8]
 80101b0:	f240 1301 	movw	r3, #257	; 0x101
 80101b4:	4617      	mov	r7, r2
 80101b6:	8183      	strh	r3, [r0, #12]
 80101b8:	460c      	mov	r4, r1
 80101ba:	46a8      	mov	r8, r5
 80101bc:	4621      	mov	r1, r4
 80101be:	4630      	mov	r0, r6
 80101c0:	3501      	adds	r5, #1
 80101c2:	f005 fb19 	bl	80157f8 <put_memory>
 80101c6:	42af      	cmp	r7, r5
 80101c8:	60a4      	str	r4, [r4, #8]
 80101ca:	f884 800c 	strb.w	r8, [r4, #12]
 80101ce:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80101d2:	d1f3      	bne.n	80101bc <rmw_uxrce_init_subscription_memory+0x20>
 80101d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101d8:	4770      	bx	lr
 80101da:	bf00      	nop

080101dc <rmw_uxrce_init_node_memory>:
 80101dc:	b1e2      	cbz	r2, 8010218 <rmw_uxrce_init_node_memory+0x3c>
 80101de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e2:	7b05      	ldrb	r5, [r0, #12]
 80101e4:	4606      	mov	r6, r0
 80101e6:	b9ad      	cbnz	r5, 8010214 <rmw_uxrce_init_node_memory+0x38>
 80101e8:	23a4      	movs	r3, #164	; 0xa4
 80101ea:	e9c0 5500 	strd	r5, r5, [r0]
 80101ee:	6083      	str	r3, [r0, #8]
 80101f0:	f240 1301 	movw	r3, #257	; 0x101
 80101f4:	4617      	mov	r7, r2
 80101f6:	8183      	strh	r3, [r0, #12]
 80101f8:	460c      	mov	r4, r1
 80101fa:	46a8      	mov	r8, r5
 80101fc:	4621      	mov	r1, r4
 80101fe:	4630      	mov	r0, r6
 8010200:	3501      	adds	r5, #1
 8010202:	f005 faf9 	bl	80157f8 <put_memory>
 8010206:	42af      	cmp	r7, r5
 8010208:	60a4      	str	r4, [r4, #8]
 801020a:	f884 800c 	strb.w	r8, [r4, #12]
 801020e:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8010212:	d1f3      	bne.n	80101fc <rmw_uxrce_init_node_memory+0x20>
 8010214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010218:	4770      	bx	lr
 801021a:	bf00      	nop

0801021c <rmw_uxrce_init_session_memory>:
 801021c:	b1ea      	cbz	r2, 801025a <rmw_uxrce_init_session_memory+0x3e>
 801021e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010222:	7b05      	ldrb	r5, [r0, #12]
 8010224:	4606      	mov	r6, r0
 8010226:	b9b5      	cbnz	r5, 8010256 <rmw_uxrce_init_session_memory+0x3a>
 8010228:	e9c0 5500 	strd	r5, r5, [r0]
 801022c:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8010230:	f240 1301 	movw	r3, #257	; 0x101
 8010234:	4617      	mov	r7, r2
 8010236:	f8c0 8008 	str.w	r8, [r0, #8]
 801023a:	460c      	mov	r4, r1
 801023c:	8183      	strh	r3, [r0, #12]
 801023e:	46a9      	mov	r9, r5
 8010240:	4621      	mov	r1, r4
 8010242:	4630      	mov	r0, r6
 8010244:	3501      	adds	r5, #1
 8010246:	f005 fad7 	bl	80157f8 <put_memory>
 801024a:	42af      	cmp	r7, r5
 801024c:	60a4      	str	r4, [r4, #8]
 801024e:	f884 900c 	strb.w	r9, [r4, #12]
 8010252:	4444      	add	r4, r8
 8010254:	d1f4      	bne.n	8010240 <rmw_uxrce_init_session_memory+0x24>
 8010256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801025a:	4770      	bx	lr

0801025c <rmw_uxrce_init_topic_memory>:
 801025c:	b1e2      	cbz	r2, 8010298 <rmw_uxrce_init_topic_memory+0x3c>
 801025e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010262:	7b05      	ldrb	r5, [r0, #12]
 8010264:	4606      	mov	r6, r0
 8010266:	b9ad      	cbnz	r5, 8010294 <rmw_uxrce_init_topic_memory+0x38>
 8010268:	231c      	movs	r3, #28
 801026a:	e9c0 5500 	strd	r5, r5, [r0]
 801026e:	6083      	str	r3, [r0, #8]
 8010270:	f240 1301 	movw	r3, #257	; 0x101
 8010274:	4617      	mov	r7, r2
 8010276:	8183      	strh	r3, [r0, #12]
 8010278:	460c      	mov	r4, r1
 801027a:	46a8      	mov	r8, r5
 801027c:	4621      	mov	r1, r4
 801027e:	4630      	mov	r0, r6
 8010280:	3501      	adds	r5, #1
 8010282:	f005 fab9 	bl	80157f8 <put_memory>
 8010286:	42af      	cmp	r7, r5
 8010288:	60a4      	str	r4, [r4, #8]
 801028a:	f884 800c 	strb.w	r8, [r4, #12]
 801028e:	f104 041c 	add.w	r4, r4, #28
 8010292:	d1f3      	bne.n	801027c <rmw_uxrce_init_topic_memory+0x20>
 8010294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010298:	4770      	bx	lr
 801029a:	bf00      	nop

0801029c <rmw_uxrce_init_static_input_buffer_memory>:
 801029c:	b1ea      	cbz	r2, 80102da <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801029e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102a2:	7b05      	ldrb	r5, [r0, #12]
 80102a4:	4606      	mov	r6, r0
 80102a6:	b9b5      	cbnz	r5, 80102d6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80102a8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80102ac:	e9c0 5500 	strd	r5, r5, [r0]
 80102b0:	6083      	str	r3, [r0, #8]
 80102b2:	f240 1301 	movw	r3, #257	; 0x101
 80102b6:	4617      	mov	r7, r2
 80102b8:	8183      	strh	r3, [r0, #12]
 80102ba:	460c      	mov	r4, r1
 80102bc:	46a8      	mov	r8, r5
 80102be:	4621      	mov	r1, r4
 80102c0:	4630      	mov	r0, r6
 80102c2:	3501      	adds	r5, #1
 80102c4:	f005 fa98 	bl	80157f8 <put_memory>
 80102c8:	42af      	cmp	r7, r5
 80102ca:	60a4      	str	r4, [r4, #8]
 80102cc:	f884 800c 	strb.w	r8, [r4, #12]
 80102d0:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 80102d4:	d1f3      	bne.n	80102be <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80102d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102da:	4770      	bx	lr

080102dc <rmw_uxrce_init_init_options_impl_memory>:
 80102dc:	b1e2      	cbz	r2, 8010318 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 80102de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102e2:	7b05      	ldrb	r5, [r0, #12]
 80102e4:	4606      	mov	r6, r0
 80102e6:	b9ad      	cbnz	r5, 8010314 <rmw_uxrce_init_init_options_impl_memory+0x38>
 80102e8:	232c      	movs	r3, #44	; 0x2c
 80102ea:	e9c0 5500 	strd	r5, r5, [r0]
 80102ee:	6083      	str	r3, [r0, #8]
 80102f0:	f240 1301 	movw	r3, #257	; 0x101
 80102f4:	4617      	mov	r7, r2
 80102f6:	8183      	strh	r3, [r0, #12]
 80102f8:	460c      	mov	r4, r1
 80102fa:	46a8      	mov	r8, r5
 80102fc:	4621      	mov	r1, r4
 80102fe:	4630      	mov	r0, r6
 8010300:	3501      	adds	r5, #1
 8010302:	f005 fa79 	bl	80157f8 <put_memory>
 8010306:	42af      	cmp	r7, r5
 8010308:	60a4      	str	r4, [r4, #8]
 801030a:	f884 800c 	strb.w	r8, [r4, #12]
 801030e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8010312:	d1f3      	bne.n	80102fc <rmw_uxrce_init_init_options_impl_memory+0x20>
 8010314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010318:	4770      	bx	lr
 801031a:	bf00      	nop

0801031c <rmw_uxrce_init_wait_set_memory>:
 801031c:	b1e2      	cbz	r2, 8010358 <rmw_uxrce_init_wait_set_memory+0x3c>
 801031e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010322:	7b05      	ldrb	r5, [r0, #12]
 8010324:	4606      	mov	r6, r0
 8010326:	b9ad      	cbnz	r5, 8010354 <rmw_uxrce_init_wait_set_memory+0x38>
 8010328:	231c      	movs	r3, #28
 801032a:	e9c0 5500 	strd	r5, r5, [r0]
 801032e:	6083      	str	r3, [r0, #8]
 8010330:	f240 1301 	movw	r3, #257	; 0x101
 8010334:	4617      	mov	r7, r2
 8010336:	8183      	strh	r3, [r0, #12]
 8010338:	460c      	mov	r4, r1
 801033a:	46a8      	mov	r8, r5
 801033c:	4621      	mov	r1, r4
 801033e:	4630      	mov	r0, r6
 8010340:	3501      	adds	r5, #1
 8010342:	f005 fa59 	bl	80157f8 <put_memory>
 8010346:	42af      	cmp	r7, r5
 8010348:	60a4      	str	r4, [r4, #8]
 801034a:	f884 800c 	strb.w	r8, [r4, #12]
 801034e:	f104 041c 	add.w	r4, r4, #28
 8010352:	d1f3      	bne.n	801033c <rmw_uxrce_init_wait_set_memory+0x20>
 8010354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010358:	4770      	bx	lr
 801035a:	bf00      	nop

0801035c <rmw_uxrce_init_guard_condition_memory>:
 801035c:	b1e2      	cbz	r2, 8010398 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801035e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010362:	7b05      	ldrb	r5, [r0, #12]
 8010364:	4606      	mov	r6, r0
 8010366:	b9ad      	cbnz	r5, 8010394 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010368:	2320      	movs	r3, #32
 801036a:	e9c0 5500 	strd	r5, r5, [r0]
 801036e:	6083      	str	r3, [r0, #8]
 8010370:	f240 1301 	movw	r3, #257	; 0x101
 8010374:	4617      	mov	r7, r2
 8010376:	8183      	strh	r3, [r0, #12]
 8010378:	460c      	mov	r4, r1
 801037a:	46a8      	mov	r8, r5
 801037c:	4621      	mov	r1, r4
 801037e:	4630      	mov	r0, r6
 8010380:	3501      	adds	r5, #1
 8010382:	f005 fa39 	bl	80157f8 <put_memory>
 8010386:	42af      	cmp	r7, r5
 8010388:	60a4      	str	r4, [r4, #8]
 801038a:	f884 800c 	strb.w	r8, [r4, #12]
 801038e:	f104 0420 	add.w	r4, r4, #32
 8010392:	d1f3      	bne.n	801037c <rmw_uxrce_init_guard_condition_memory+0x20>
 8010394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010398:	4770      	bx	lr
 801039a:	bf00      	nop

0801039c <rmw_uxrce_fini_session_memory>:
 801039c:	4601      	mov	r1, r0
 801039e:	4801      	ldr	r0, [pc, #4]	; (80103a4 <rmw_uxrce_fini_session_memory+0x8>)
 80103a0:	f005 ba2a 	b.w	80157f8 <put_memory>
 80103a4:	20012bbc 	.word	0x20012bbc

080103a8 <rmw_uxrce_fini_node_memory>:
 80103a8:	b538      	push	{r3, r4, r5, lr}
 80103aa:	4604      	mov	r4, r0
 80103ac:	6800      	ldr	r0, [r0, #0]
 80103ae:	b128      	cbz	r0, 80103bc <rmw_uxrce_fini_node_memory+0x14>
 80103b0:	4b07      	ldr	r3, [pc, #28]	; (80103d0 <rmw_uxrce_fini_node_memory+0x28>)
 80103b2:	6819      	ldr	r1, [r3, #0]
 80103b4:	f7ef ff0c 	bl	80001d0 <strcmp>
 80103b8:	b940      	cbnz	r0, 80103cc <rmw_uxrce_fini_node_memory+0x24>
 80103ba:	6020      	str	r0, [r4, #0]
 80103bc:	6861      	ldr	r1, [r4, #4]
 80103be:	b129      	cbz	r1, 80103cc <rmw_uxrce_fini_node_memory+0x24>
 80103c0:	2500      	movs	r5, #0
 80103c2:	4804      	ldr	r0, [pc, #16]	; (80103d4 <rmw_uxrce_fini_node_memory+0x2c>)
 80103c4:	610d      	str	r5, [r1, #16]
 80103c6:	f005 fa17 	bl	80157f8 <put_memory>
 80103ca:	6065      	str	r5, [r4, #4]
 80103cc:	bd38      	pop	{r3, r4, r5, pc}
 80103ce:	bf00      	nop
 80103d0:	0801a6b4 	.word	0x0801a6b4
 80103d4:	20012b8c 	.word	0x20012b8c

080103d8 <rmw_uxrce_fini_publisher_memory>:
 80103d8:	b510      	push	{r4, lr}
 80103da:	4604      	mov	r4, r0
 80103dc:	6800      	ldr	r0, [r0, #0]
 80103de:	b128      	cbz	r0, 80103ec <rmw_uxrce_fini_publisher_memory+0x14>
 80103e0:	4b06      	ldr	r3, [pc, #24]	; (80103fc <rmw_uxrce_fini_publisher_memory+0x24>)
 80103e2:	6819      	ldr	r1, [r3, #0]
 80103e4:	f7ef fef4 	bl	80001d0 <strcmp>
 80103e8:	b938      	cbnz	r0, 80103fa <rmw_uxrce_fini_publisher_memory+0x22>
 80103ea:	6020      	str	r0, [r4, #0]
 80103ec:	6861      	ldr	r1, [r4, #4]
 80103ee:	b121      	cbz	r1, 80103fa <rmw_uxrce_fini_publisher_memory+0x22>
 80103f0:	4803      	ldr	r0, [pc, #12]	; (8010400 <rmw_uxrce_fini_publisher_memory+0x28>)
 80103f2:	f005 fa01 	bl	80157f8 <put_memory>
 80103f6:	2300      	movs	r3, #0
 80103f8:	6063      	str	r3, [r4, #4]
 80103fa:	bd10      	pop	{r4, pc}
 80103fc:	0801a6b4 	.word	0x0801a6b4
 8010400:	20012b9c 	.word	0x20012b9c

08010404 <rmw_uxrce_fini_subscription_memory>:
 8010404:	b510      	push	{r4, lr}
 8010406:	4604      	mov	r4, r0
 8010408:	6800      	ldr	r0, [r0, #0]
 801040a:	b128      	cbz	r0, 8010418 <rmw_uxrce_fini_subscription_memory+0x14>
 801040c:	4b06      	ldr	r3, [pc, #24]	; (8010428 <rmw_uxrce_fini_subscription_memory+0x24>)
 801040e:	6819      	ldr	r1, [r3, #0]
 8010410:	f7ef fede 	bl	80001d0 <strcmp>
 8010414:	b938      	cbnz	r0, 8010426 <rmw_uxrce_fini_subscription_memory+0x22>
 8010416:	6020      	str	r0, [r4, #0]
 8010418:	6861      	ldr	r1, [r4, #4]
 801041a:	b121      	cbz	r1, 8010426 <rmw_uxrce_fini_subscription_memory+0x22>
 801041c:	4803      	ldr	r0, [pc, #12]	; (801042c <rmw_uxrce_fini_subscription_memory+0x28>)
 801041e:	f005 f9eb 	bl	80157f8 <put_memory>
 8010422:	2300      	movs	r3, #0
 8010424:	6063      	str	r3, [r4, #4]
 8010426:	bd10      	pop	{r4, pc}
 8010428:	0801a6b4 	.word	0x0801a6b4
 801042c:	20012bdc 	.word	0x20012bdc

08010430 <rmw_uxrce_fini_service_memory>:
 8010430:	b510      	push	{r4, lr}
 8010432:	4604      	mov	r4, r0
 8010434:	6800      	ldr	r0, [r0, #0]
 8010436:	b128      	cbz	r0, 8010444 <rmw_uxrce_fini_service_memory+0x14>
 8010438:	4b06      	ldr	r3, [pc, #24]	; (8010454 <rmw_uxrce_fini_service_memory+0x24>)
 801043a:	6819      	ldr	r1, [r3, #0]
 801043c:	f7ef fec8 	bl	80001d0 <strcmp>
 8010440:	b938      	cbnz	r0, 8010452 <rmw_uxrce_fini_service_memory+0x22>
 8010442:	6020      	str	r0, [r4, #0]
 8010444:	6861      	ldr	r1, [r4, #4]
 8010446:	b121      	cbz	r1, 8010452 <rmw_uxrce_fini_service_memory+0x22>
 8010448:	4803      	ldr	r0, [pc, #12]	; (8010458 <rmw_uxrce_fini_service_memory+0x28>)
 801044a:	f005 f9d5 	bl	80157f8 <put_memory>
 801044e:	2300      	movs	r3, #0
 8010450:	6063      	str	r3, [r4, #4]
 8010452:	bd10      	pop	{r4, pc}
 8010454:	0801a6b4 	.word	0x0801a6b4
 8010458:	20012bac 	.word	0x20012bac

0801045c <rmw_uxrce_fini_client_memory>:
 801045c:	b510      	push	{r4, lr}
 801045e:	4604      	mov	r4, r0
 8010460:	6800      	ldr	r0, [r0, #0]
 8010462:	b128      	cbz	r0, 8010470 <rmw_uxrce_fini_client_memory+0x14>
 8010464:	4b06      	ldr	r3, [pc, #24]	; (8010480 <rmw_uxrce_fini_client_memory+0x24>)
 8010466:	6819      	ldr	r1, [r3, #0]
 8010468:	f7ef feb2 	bl	80001d0 <strcmp>
 801046c:	b938      	cbnz	r0, 801047e <rmw_uxrce_fini_client_memory+0x22>
 801046e:	6020      	str	r0, [r4, #0]
 8010470:	6861      	ldr	r1, [r4, #4]
 8010472:	b121      	cbz	r1, 801047e <rmw_uxrce_fini_client_memory+0x22>
 8010474:	4803      	ldr	r0, [pc, #12]	; (8010484 <rmw_uxrce_fini_client_memory+0x28>)
 8010476:	f005 f9bf 	bl	80157f8 <put_memory>
 801047a:	2300      	movs	r3, #0
 801047c:	6063      	str	r3, [r4, #4]
 801047e:	bd10      	pop	{r4, pc}
 8010480:	0801a6b4 	.word	0x0801a6b4
 8010484:	2000e2c0 	.word	0x2000e2c0

08010488 <rmw_uxrce_fini_topic_memory>:
 8010488:	b510      	push	{r4, lr}
 801048a:	4604      	mov	r4, r0
 801048c:	4621      	mov	r1, r4
 801048e:	4803      	ldr	r0, [pc, #12]	; (801049c <rmw_uxrce_fini_topic_memory+0x14>)
 8010490:	f005 f9b2 	bl	80157f8 <put_memory>
 8010494:	2300      	movs	r3, #0
 8010496:	61a3      	str	r3, [r4, #24]
 8010498:	bd10      	pop	{r4, pc}
 801049a:	bf00      	nop
 801049c:	20012bec 	.word	0x20012bec

080104a0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80104a0:	b082      	sub	sp, #8
 80104a2:	b530      	push	{r4, r5, lr}
 80104a4:	4925      	ldr	r1, [pc, #148]	; (801053c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80104a6:	680d      	ldr	r5, [r1, #0]
 80104a8:	ac03      	add	r4, sp, #12
 80104aa:	e884 000c 	stmia.w	r4, {r2, r3}
 80104ae:	461c      	mov	r4, r3
 80104b0:	2d00      	cmp	r5, #0
 80104b2:	d041      	beq.n	8010538 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 80104b4:	462b      	mov	r3, r5
 80104b6:	2100      	movs	r1, #0
 80104b8:	689a      	ldr	r2, [r3, #8]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 80104c0:	4290      	cmp	r0, r2
 80104c2:	bf08      	it	eq
 80104c4:	3101      	addeq	r1, #1
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1f6      	bne.n	80104b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80104ca:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80104ce:	2b02      	cmp	r3, #2
 80104d0:	d029      	beq.n	8010526 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80104d2:	d907      	bls.n	80104e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80104d4:	2b03      	cmp	r3, #3
 80104d6:	d005      	beq.n	80104e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80104d8:	2100      	movs	r1, #0
 80104da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104de:	4608      	mov	r0, r1
 80104e0:	b002      	add	sp, #8
 80104e2:	4770      	bx	lr
 80104e4:	b314      	cbz	r4, 801052c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80104e6:	428c      	cmp	r4, r1
 80104e8:	d820      	bhi.n	801052c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80104ea:	2d00      	cmp	r5, #0
 80104ec:	d0f4      	beq.n	80104d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80104ee:	2100      	movs	r1, #0
 80104f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80104f4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80104f8:	e002      	b.n	8010500 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 80104fa:	686d      	ldr	r5, [r5, #4]
 80104fc:	2d00      	cmp	r5, #0
 80104fe:	d0ec      	beq.n	80104da <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010500:	68ab      	ldr	r3, [r5, #8]
 8010502:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8010506:	4290      	cmp	r0, r2
 8010508:	d1f7      	bne.n	80104fa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801050a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 801050e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8010512:	4562      	cmp	r2, ip
 8010514:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010518:	eb73 0e04 	sbcs.w	lr, r3, r4
 801051c:	daed      	bge.n	80104fa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801051e:	4694      	mov	ip, r2
 8010520:	461c      	mov	r4, r3
 8010522:	4629      	mov	r1, r5
 8010524:	e7e9      	b.n	80104fa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010526:	b10c      	cbz	r4, 801052c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010528:	428c      	cmp	r4, r1
 801052a:	d9d5      	bls.n	80104d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 801052c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010530:	4802      	ldr	r0, [pc, #8]	; (801053c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8010532:	b002      	add	sp, #8
 8010534:	f005 b950 	b.w	80157d8 <get_memory>
 8010538:	4629      	mov	r1, r5
 801053a:	e7c6      	b.n	80104ca <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 801053c:	20012bcc 	.word	0x20012bcc

08010540 <run_xrce_session>:
 8010540:	b510      	push	{r4, lr}
 8010542:	788c      	ldrb	r4, [r1, #2]
 8010544:	b086      	sub	sp, #24
 8010546:	2c01      	cmp	r4, #1
 8010548:	f8ad 200e 	strh.w	r2, [sp, #14]
 801054c:	d00c      	beq.n	8010568 <run_xrce_session+0x28>
 801054e:	4619      	mov	r1, r3
 8010550:	2301      	movs	r3, #1
 8010552:	9300      	str	r3, [sp, #0]
 8010554:	f10d 020e 	add.w	r2, sp, #14
 8010558:	f10d 0317 	add.w	r3, sp, #23
 801055c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010560:	f001 ff7e 	bl	8012460 <uxr_run_session_until_all_status>
 8010564:	b006      	add	sp, #24
 8010566:	bd10      	pop	{r4, pc}
 8010568:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801056c:	f001 fbcc 	bl	8011d08 <uxr_flash_output_streams>
 8010570:	4620      	mov	r0, r4
 8010572:	b006      	add	sp, #24
 8010574:	bd10      	pop	{r4, pc}
 8010576:	bf00      	nop

08010578 <convert_qos_profile>:
 8010578:	7a4a      	ldrb	r2, [r1, #9]
 801057a:	f891 c008 	ldrb.w	ip, [r1, #8]
 801057e:	2a02      	cmp	r2, #2
 8010580:	bf18      	it	ne
 8010582:	2200      	movne	r2, #0
 8010584:	7002      	strb	r2, [r0, #0]
 8010586:	780a      	ldrb	r2, [r1, #0]
 8010588:	8889      	ldrh	r1, [r1, #4]
 801058a:	8081      	strh	r1, [r0, #4]
 801058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8010590:	f1a2 0202 	sub.w	r2, r2, #2
 8010594:	fabc fc8c 	clz	ip, ip
 8010598:	fab2 f282 	clz	r2, r2
 801059c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80105a0:	0952      	lsrs	r2, r2, #5
 80105a2:	f880 c001 	strb.w	ip, [r0, #1]
 80105a6:	7082      	strb	r2, [r0, #2]
 80105a8:	4770      	bx	lr
 80105aa:	bf00      	nop

080105ac <generate_type_name>:
 80105ac:	b530      	push	{r4, r5, lr}
 80105ae:	2300      	movs	r3, #0
 80105b0:	700b      	strb	r3, [r1, #0]
 80105b2:	6803      	ldr	r3, [r0, #0]
 80105b4:	b087      	sub	sp, #28
 80105b6:	4614      	mov	r4, r2
 80105b8:	b1d3      	cbz	r3, 80105f0 <generate_type_name+0x44>
 80105ba:	4a0f      	ldr	r2, [pc, #60]	; (80105f8 <generate_type_name+0x4c>)
 80105bc:	4615      	mov	r5, r2
 80105be:	9203      	str	r2, [sp, #12]
 80105c0:	9500      	str	r5, [sp, #0]
 80105c2:	6842      	ldr	r2, [r0, #4]
 80105c4:	480d      	ldr	r0, [pc, #52]	; (80105fc <generate_type_name+0x50>)
 80105c6:	9001      	str	r0, [sp, #4]
 80105c8:	4608      	mov	r0, r1
 80105ca:	490d      	ldr	r1, [pc, #52]	; (8010600 <generate_type_name+0x54>)
 80105cc:	9204      	str	r2, [sp, #16]
 80105ce:	9105      	str	r1, [sp, #20]
 80105d0:	9102      	str	r1, [sp, #8]
 80105d2:	4a0c      	ldr	r2, [pc, #48]	; (8010604 <generate_type_name+0x58>)
 80105d4:	4621      	mov	r1, r4
 80105d6:	f008 fb5b 	bl	8018c90 <sniprintf>
 80105da:	2800      	cmp	r0, #0
 80105dc:	db05      	blt.n	80105ea <generate_type_name+0x3e>
 80105de:	4284      	cmp	r4, r0
 80105e0:	bfd4      	ite	le
 80105e2:	2000      	movle	r0, #0
 80105e4:	2001      	movgt	r0, #1
 80105e6:	b007      	add	sp, #28
 80105e8:	bd30      	pop	{r4, r5, pc}
 80105ea:	2000      	movs	r0, #0
 80105ec:	b007      	add	sp, #28
 80105ee:	bd30      	pop	{r4, r5, pc}
 80105f0:	4b05      	ldr	r3, [pc, #20]	; (8010608 <generate_type_name+0x5c>)
 80105f2:	4a01      	ldr	r2, [pc, #4]	; (80105f8 <generate_type_name+0x4c>)
 80105f4:	461d      	mov	r5, r3
 80105f6:	e7e2      	b.n	80105be <generate_type_name+0x12>
 80105f8:	0801a0bc 	.word	0x0801a0bc
 80105fc:	0801a0d4 	.word	0x0801a0d4
 8010600:	0801a0d0 	.word	0x0801a0d0
 8010604:	0801a0c0 	.word	0x0801a0c0
 8010608:	0801a48c 	.word	0x0801a48c

0801060c <generate_topic_name>:
 801060c:	b510      	push	{r4, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	4614      	mov	r4, r2
 8010612:	9000      	str	r0, [sp, #0]
 8010614:	4b08      	ldr	r3, [pc, #32]	; (8010638 <generate_topic_name+0x2c>)
 8010616:	4a09      	ldr	r2, [pc, #36]	; (801063c <generate_topic_name+0x30>)
 8010618:	4608      	mov	r0, r1
 801061a:	4621      	mov	r1, r4
 801061c:	f008 fb38 	bl	8018c90 <sniprintf>
 8010620:	2800      	cmp	r0, #0
 8010622:	db05      	blt.n	8010630 <generate_topic_name+0x24>
 8010624:	4284      	cmp	r4, r0
 8010626:	bfd4      	ite	le
 8010628:	2000      	movle	r0, #0
 801062a:	2001      	movgt	r0, #1
 801062c:	b002      	add	sp, #8
 801062e:	bd10      	pop	{r4, pc}
 8010630:	2000      	movs	r0, #0
 8010632:	b002      	add	sp, #8
 8010634:	bd10      	pop	{r4, pc}
 8010636:	bf00      	nop
 8010638:	0801a0e0 	.word	0x0801a0e0
 801063c:	0801a0d8 	.word	0x0801a0d8

08010640 <is_uxrce_rmw_identifier_valid>:
 8010640:	b510      	push	{r4, lr}
 8010642:	4604      	mov	r4, r0
 8010644:	b140      	cbz	r0, 8010658 <is_uxrce_rmw_identifier_valid+0x18>
 8010646:	f005 f8eb 	bl	8015820 <rmw_get_implementation_identifier>
 801064a:	4601      	mov	r1, r0
 801064c:	4620      	mov	r0, r4
 801064e:	f7ef fdbf 	bl	80001d0 <strcmp>
 8010652:	fab0 f080 	clz	r0, r0
 8010656:	0940      	lsrs	r0, r0, #5
 8010658:	bd10      	pop	{r4, pc}
 801065a:	bf00      	nop

0801065c <get_message_typesupport_handle>:
 801065c:	6883      	ldr	r3, [r0, #8]
 801065e:	4718      	bx	r3

08010660 <get_message_typesupport_handle_function>:
 8010660:	b510      	push	{r4, lr}
 8010662:	4604      	mov	r4, r0
 8010664:	6800      	ldr	r0, [r0, #0]
 8010666:	f7ef fdb3 	bl	80001d0 <strcmp>
 801066a:	2800      	cmp	r0, #0
 801066c:	bf0c      	ite	eq
 801066e:	4620      	moveq	r0, r4
 8010670:	2000      	movne	r0, #0
 8010672:	bd10      	pop	{r4, pc}

08010674 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010674:	4b04      	ldr	r3, [pc, #16]	; (8010688 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	b10a      	cbz	r2, 801067e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801067a:	4803      	ldr	r0, [pc, #12]	; (8010688 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801067c:	4770      	bx	lr
 801067e:	4a03      	ldr	r2, [pc, #12]	; (801068c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8010680:	4801      	ldr	r0, [pc, #4]	; (8010688 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010682:	6812      	ldr	r2, [r2, #0]
 8010684:	601a      	str	r2, [r3, #0]
 8010686:	4770      	bx	lr
 8010688:	20000120 	.word	0x20000120
 801068c:	2000019c 	.word	0x2000019c

08010690 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010690:	4a02      	ldr	r2, [pc, #8]	; (801069c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8010692:	4b03      	ldr	r3, [pc, #12]	; (80106a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8010694:	6812      	ldr	r2, [r2, #0]
 8010696:	601a      	str	r2, [r3, #0]
 8010698:	4770      	bx	lr
 801069a:	bf00      	nop
 801069c:	2000019c 	.word	0x2000019c
 80106a0:	20000120 	.word	0x20000120

080106a4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 80106a4:	f005 bdb2 	b.w	801620c <std_msgs__msg__Int32__init>

080106a8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 80106a8:	f005 bdb4 	b.w	8016214 <std_msgs__msg__Int32__fini>

080106ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80106ac:	4b04      	ldr	r3, [pc, #16]	; (80106c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80106ae:	681a      	ldr	r2, [r3, #0]
 80106b0:	b10a      	cbz	r2, 80106b6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80106b2:	4803      	ldr	r0, [pc, #12]	; (80106c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80106b4:	4770      	bx	lr
 80106b6:	4a03      	ldr	r2, [pc, #12]	; (80106c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80106b8:	4801      	ldr	r0, [pc, #4]	; (80106c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80106ba:	6812      	ldr	r2, [r2, #0]
 80106bc:	601a      	str	r2, [r3, #0]
 80106be:	4770      	bx	lr
 80106c0:	20000168 	.word	0x20000168
 80106c4:	200001a0 	.word	0x200001a0

080106c8 <_Int32__max_serialized_size>:
 80106c8:	b508      	push	{r3, lr}
 80106ca:	2104      	movs	r1, #4
 80106cc:	2000      	movs	r0, #0
 80106ce:	f001 f807 	bl	80116e0 <ucdr_alignment>
 80106d2:	3004      	adds	r0, #4
 80106d4:	bd08      	pop	{r3, pc}
 80106d6:	bf00      	nop

080106d8 <_Int32__cdr_deserialize>:
 80106d8:	b109      	cbz	r1, 80106de <_Int32__cdr_deserialize+0x6>
 80106da:	f000 bf19 	b.w	8011510 <ucdr_deserialize_int32_t>
 80106de:	4608      	mov	r0, r1
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop

080106e4 <get_serialized_size_std_msgs__msg__Int32>:
 80106e4:	b138      	cbz	r0, 80106f6 <get_serialized_size_std_msgs__msg__Int32+0x12>
 80106e6:	b508      	push	{r3, lr}
 80106e8:	460b      	mov	r3, r1
 80106ea:	4618      	mov	r0, r3
 80106ec:	2104      	movs	r1, #4
 80106ee:	f000 fff7 	bl	80116e0 <ucdr_alignment>
 80106f2:	3004      	adds	r0, #4
 80106f4:	bd08      	pop	{r3, pc}
 80106f6:	4770      	bx	lr

080106f8 <_Int32__cdr_serialize>:
 80106f8:	460a      	mov	r2, r1
 80106fa:	b118      	cbz	r0, 8010704 <_Int32__cdr_serialize+0xc>
 80106fc:	6801      	ldr	r1, [r0, #0]
 80106fe:	4610      	mov	r0, r2
 8010700:	f000 be6e 	b.w	80113e0 <ucdr_serialize_int32_t>
 8010704:	4770      	bx	lr
 8010706:	bf00      	nop

08010708 <_Int32__get_serialized_size>:
 8010708:	b130      	cbz	r0, 8010718 <_Int32__get_serialized_size+0x10>
 801070a:	b508      	push	{r3, lr}
 801070c:	2104      	movs	r1, #4
 801070e:	2000      	movs	r0, #0
 8010710:	f000 ffe6 	bl	80116e0 <ucdr_alignment>
 8010714:	3004      	adds	r0, #4
 8010716:	bd08      	pop	{r3, pc}
 8010718:	4770      	bx	lr
 801071a:	bf00      	nop

0801071c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801071c:	4800      	ldr	r0, [pc, #0]	; (8010720 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 801071e:	4770      	bx	lr
 8010720:	20000174 	.word	0x20000174

08010724 <ucdr_serialize_bool>:
 8010724:	b538      	push	{r3, r4, r5, lr}
 8010726:	460d      	mov	r5, r1
 8010728:	2101      	movs	r1, #1
 801072a:	4604      	mov	r4, r0
 801072c:	f000 ff8c 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010730:	b148      	cbz	r0, 8010746 <ucdr_serialize_bool+0x22>
 8010732:	68a3      	ldr	r3, [r4, #8]
 8010734:	701d      	strb	r5, [r3, #0]
 8010736:	68a2      	ldr	r2, [r4, #8]
 8010738:	6923      	ldr	r3, [r4, #16]
 801073a:	2101      	movs	r1, #1
 801073c:	440a      	add	r2, r1
 801073e:	440b      	add	r3, r1
 8010740:	60a2      	str	r2, [r4, #8]
 8010742:	6123      	str	r3, [r4, #16]
 8010744:	7561      	strb	r1, [r4, #21]
 8010746:	7da0      	ldrb	r0, [r4, #22]
 8010748:	f080 0001 	eor.w	r0, r0, #1
 801074c:	bd38      	pop	{r3, r4, r5, pc}
 801074e:	bf00      	nop

08010750 <ucdr_deserialize_bool>:
 8010750:	b538      	push	{r3, r4, r5, lr}
 8010752:	460d      	mov	r5, r1
 8010754:	2101      	movs	r1, #1
 8010756:	4604      	mov	r4, r0
 8010758:	f000 ff76 	bl	8011648 <ucdr_check_final_buffer_behavior>
 801075c:	b160      	cbz	r0, 8010778 <ucdr_deserialize_bool+0x28>
 801075e:	68a2      	ldr	r2, [r4, #8]
 8010760:	6923      	ldr	r3, [r4, #16]
 8010762:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010766:	3900      	subs	r1, #0
 8010768:	bf18      	it	ne
 801076a:	2101      	movne	r1, #1
 801076c:	7029      	strb	r1, [r5, #0]
 801076e:	3301      	adds	r3, #1
 8010770:	2101      	movs	r1, #1
 8010772:	60a2      	str	r2, [r4, #8]
 8010774:	6123      	str	r3, [r4, #16]
 8010776:	7561      	strb	r1, [r4, #21]
 8010778:	7da0      	ldrb	r0, [r4, #22]
 801077a:	f080 0001 	eor.w	r0, r0, #1
 801077e:	bd38      	pop	{r3, r4, r5, pc}

08010780 <ucdr_serialize_uint8_t>:
 8010780:	b538      	push	{r3, r4, r5, lr}
 8010782:	460d      	mov	r5, r1
 8010784:	2101      	movs	r1, #1
 8010786:	4604      	mov	r4, r0
 8010788:	f000 ff5e 	bl	8011648 <ucdr_check_final_buffer_behavior>
 801078c:	b148      	cbz	r0, 80107a2 <ucdr_serialize_uint8_t+0x22>
 801078e:	68a3      	ldr	r3, [r4, #8]
 8010790:	701d      	strb	r5, [r3, #0]
 8010792:	68a2      	ldr	r2, [r4, #8]
 8010794:	6923      	ldr	r3, [r4, #16]
 8010796:	2101      	movs	r1, #1
 8010798:	440a      	add	r2, r1
 801079a:	440b      	add	r3, r1
 801079c:	60a2      	str	r2, [r4, #8]
 801079e:	6123      	str	r3, [r4, #16]
 80107a0:	7561      	strb	r1, [r4, #21]
 80107a2:	7da0      	ldrb	r0, [r4, #22]
 80107a4:	f080 0001 	eor.w	r0, r0, #1
 80107a8:	bd38      	pop	{r3, r4, r5, pc}
 80107aa:	bf00      	nop

080107ac <ucdr_deserialize_uint8_t>:
 80107ac:	b538      	push	{r3, r4, r5, lr}
 80107ae:	460d      	mov	r5, r1
 80107b0:	2101      	movs	r1, #1
 80107b2:	4604      	mov	r4, r0
 80107b4:	f000 ff48 	bl	8011648 <ucdr_check_final_buffer_behavior>
 80107b8:	b150      	cbz	r0, 80107d0 <ucdr_deserialize_uint8_t+0x24>
 80107ba:	68a3      	ldr	r3, [r4, #8]
 80107bc:	781b      	ldrb	r3, [r3, #0]
 80107be:	702b      	strb	r3, [r5, #0]
 80107c0:	68a2      	ldr	r2, [r4, #8]
 80107c2:	6923      	ldr	r3, [r4, #16]
 80107c4:	2101      	movs	r1, #1
 80107c6:	440a      	add	r2, r1
 80107c8:	440b      	add	r3, r1
 80107ca:	60a2      	str	r2, [r4, #8]
 80107cc:	6123      	str	r3, [r4, #16]
 80107ce:	7561      	strb	r1, [r4, #21]
 80107d0:	7da0      	ldrb	r0, [r4, #22]
 80107d2:	f080 0001 	eor.w	r0, r0, #1
 80107d6:	bd38      	pop	{r3, r4, r5, pc}

080107d8 <ucdr_serialize_uint16_t>:
 80107d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107dc:	b082      	sub	sp, #8
 80107de:	460b      	mov	r3, r1
 80107e0:	2102      	movs	r1, #2
 80107e2:	4604      	mov	r4, r0
 80107e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80107e8:	f000 ff82 	bl	80116f0 <ucdr_buffer_alignment>
 80107ec:	4601      	mov	r1, r0
 80107ee:	4620      	mov	r0, r4
 80107f0:	7d67      	ldrb	r7, [r4, #21]
 80107f2:	f000 ffc1 	bl	8011778 <ucdr_advance_buffer>
 80107f6:	2102      	movs	r1, #2
 80107f8:	4620      	mov	r0, r4
 80107fa:	f000 ff19 	bl	8011630 <ucdr_check_buffer_available_for>
 80107fe:	bb78      	cbnz	r0, 8010860 <ucdr_serialize_uint16_t+0x88>
 8010800:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010804:	42ab      	cmp	r3, r5
 8010806:	d926      	bls.n	8010856 <ucdr_serialize_uint16_t+0x7e>
 8010808:	1b5e      	subs	r6, r3, r5
 801080a:	60a3      	str	r3, [r4, #8]
 801080c:	6923      	ldr	r3, [r4, #16]
 801080e:	f1c6 0802 	rsb	r8, r6, #2
 8010812:	4433      	add	r3, r6
 8010814:	6123      	str	r3, [r4, #16]
 8010816:	4641      	mov	r1, r8
 8010818:	4620      	mov	r0, r4
 801081a:	f000 ff15 	bl	8011648 <ucdr_check_final_buffer_behavior>
 801081e:	2800      	cmp	r0, #0
 8010820:	d03b      	beq.n	801089a <ucdr_serialize_uint16_t+0xc2>
 8010822:	7d23      	ldrb	r3, [r4, #20]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d04a      	beq.n	80108be <ucdr_serialize_uint16_t+0xe6>
 8010828:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801082c:	702b      	strb	r3, [r5, #0]
 801082e:	2e00      	cmp	r6, #0
 8010830:	d040      	beq.n	80108b4 <ucdr_serialize_uint16_t+0xdc>
 8010832:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010836:	706b      	strb	r3, [r5, #1]
 8010838:	6923      	ldr	r3, [r4, #16]
 801083a:	68a2      	ldr	r2, [r4, #8]
 801083c:	7da0      	ldrb	r0, [r4, #22]
 801083e:	3302      	adds	r3, #2
 8010840:	1b9e      	subs	r6, r3, r6
 8010842:	4442      	add	r2, r8
 8010844:	2302      	movs	r3, #2
 8010846:	f080 0001 	eor.w	r0, r0, #1
 801084a:	60a2      	str	r2, [r4, #8]
 801084c:	6126      	str	r6, [r4, #16]
 801084e:	7563      	strb	r3, [r4, #21]
 8010850:	b002      	add	sp, #8
 8010852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010856:	2102      	movs	r1, #2
 8010858:	4620      	mov	r0, r4
 801085a:	f000 fef5 	bl	8011648 <ucdr_check_final_buffer_behavior>
 801085e:	b190      	cbz	r0, 8010886 <ucdr_serialize_uint16_t+0xae>
 8010860:	7d23      	ldrb	r3, [r4, #20]
 8010862:	2b01      	cmp	r3, #1
 8010864:	68a3      	ldr	r3, [r4, #8]
 8010866:	d014      	beq.n	8010892 <ucdr_serialize_uint16_t+0xba>
 8010868:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801086c:	701a      	strb	r2, [r3, #0]
 801086e:	68a3      	ldr	r3, [r4, #8]
 8010870:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010874:	705a      	strb	r2, [r3, #1]
 8010876:	68a2      	ldr	r2, [r4, #8]
 8010878:	6923      	ldr	r3, [r4, #16]
 801087a:	3202      	adds	r2, #2
 801087c:	3302      	adds	r3, #2
 801087e:	2102      	movs	r1, #2
 8010880:	60a2      	str	r2, [r4, #8]
 8010882:	6123      	str	r3, [r4, #16]
 8010884:	7561      	strb	r1, [r4, #21]
 8010886:	7da0      	ldrb	r0, [r4, #22]
 8010888:	f080 0001 	eor.w	r0, r0, #1
 801088c:	b002      	add	sp, #8
 801088e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010892:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010896:	801a      	strh	r2, [r3, #0]
 8010898:	e7ed      	b.n	8010876 <ucdr_serialize_uint16_t+0x9e>
 801089a:	68a2      	ldr	r2, [r4, #8]
 801089c:	6923      	ldr	r3, [r4, #16]
 801089e:	7da0      	ldrb	r0, [r4, #22]
 80108a0:	7567      	strb	r7, [r4, #21]
 80108a2:	1b92      	subs	r2, r2, r6
 80108a4:	1b9b      	subs	r3, r3, r6
 80108a6:	f080 0001 	eor.w	r0, r0, #1
 80108aa:	60a2      	str	r2, [r4, #8]
 80108ac:	6123      	str	r3, [r4, #16]
 80108ae:	b002      	add	sp, #8
 80108b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108b4:	68a3      	ldr	r3, [r4, #8]
 80108b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80108ba:	701a      	strb	r2, [r3, #0]
 80108bc:	e7bc      	b.n	8010838 <ucdr_serialize_uint16_t+0x60>
 80108be:	4628      	mov	r0, r5
 80108c0:	f10d 0506 	add.w	r5, sp, #6
 80108c4:	4629      	mov	r1, r5
 80108c6:	4632      	mov	r2, r6
 80108c8:	f007 ffd0 	bl	801886c <memcpy>
 80108cc:	68a0      	ldr	r0, [r4, #8]
 80108ce:	4642      	mov	r2, r8
 80108d0:	19a9      	adds	r1, r5, r6
 80108d2:	f007 ffcb 	bl	801886c <memcpy>
 80108d6:	e7af      	b.n	8010838 <ucdr_serialize_uint16_t+0x60>

080108d8 <ucdr_serialize_endian_uint16_t>:
 80108d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108dc:	b083      	sub	sp, #12
 80108de:	460d      	mov	r5, r1
 80108e0:	2102      	movs	r1, #2
 80108e2:	4604      	mov	r4, r0
 80108e4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80108e8:	f000 ff02 	bl	80116f0 <ucdr_buffer_alignment>
 80108ec:	4601      	mov	r1, r0
 80108ee:	4620      	mov	r0, r4
 80108f0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80108f4:	f000 ff40 	bl	8011778 <ucdr_advance_buffer>
 80108f8:	2102      	movs	r1, #2
 80108fa:	4620      	mov	r0, r4
 80108fc:	f000 fe98 	bl	8011630 <ucdr_check_buffer_available_for>
 8010900:	bb70      	cbnz	r0, 8010960 <ucdr_serialize_endian_uint16_t+0x88>
 8010902:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010906:	42be      	cmp	r6, r7
 8010908:	d925      	bls.n	8010956 <ucdr_serialize_endian_uint16_t+0x7e>
 801090a:	6923      	ldr	r3, [r4, #16]
 801090c:	60a6      	str	r6, [r4, #8]
 801090e:	1bf6      	subs	r6, r6, r7
 8010910:	4433      	add	r3, r6
 8010912:	f1c6 0902 	rsb	r9, r6, #2
 8010916:	6123      	str	r3, [r4, #16]
 8010918:	4649      	mov	r1, r9
 801091a:	4620      	mov	r0, r4
 801091c:	f000 fe94 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010920:	2800      	cmp	r0, #0
 8010922:	d039      	beq.n	8010998 <ucdr_serialize_endian_uint16_t+0xc0>
 8010924:	2d01      	cmp	r5, #1
 8010926:	d04a      	beq.n	80109be <ucdr_serialize_endian_uint16_t+0xe6>
 8010928:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801092c:	703b      	strb	r3, [r7, #0]
 801092e:	2e00      	cmp	r6, #0
 8010930:	d040      	beq.n	80109b4 <ucdr_serialize_endian_uint16_t+0xdc>
 8010932:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010936:	707b      	strb	r3, [r7, #1]
 8010938:	6923      	ldr	r3, [r4, #16]
 801093a:	68a2      	ldr	r2, [r4, #8]
 801093c:	7da0      	ldrb	r0, [r4, #22]
 801093e:	3302      	adds	r3, #2
 8010940:	444a      	add	r2, r9
 8010942:	1b9b      	subs	r3, r3, r6
 8010944:	2102      	movs	r1, #2
 8010946:	f080 0001 	eor.w	r0, r0, #1
 801094a:	60a2      	str	r2, [r4, #8]
 801094c:	6123      	str	r3, [r4, #16]
 801094e:	7561      	strb	r1, [r4, #21]
 8010950:	b003      	add	sp, #12
 8010952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010956:	2102      	movs	r1, #2
 8010958:	4620      	mov	r0, r4
 801095a:	f000 fe75 	bl	8011648 <ucdr_check_final_buffer_behavior>
 801095e:	b188      	cbz	r0, 8010984 <ucdr_serialize_endian_uint16_t+0xac>
 8010960:	2d01      	cmp	r5, #1
 8010962:	68a3      	ldr	r3, [r4, #8]
 8010964:	d014      	beq.n	8010990 <ucdr_serialize_endian_uint16_t+0xb8>
 8010966:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801096a:	701a      	strb	r2, [r3, #0]
 801096c:	68a3      	ldr	r3, [r4, #8]
 801096e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010972:	705a      	strb	r2, [r3, #1]
 8010974:	68a2      	ldr	r2, [r4, #8]
 8010976:	6923      	ldr	r3, [r4, #16]
 8010978:	3202      	adds	r2, #2
 801097a:	3302      	adds	r3, #2
 801097c:	2102      	movs	r1, #2
 801097e:	60a2      	str	r2, [r4, #8]
 8010980:	6123      	str	r3, [r4, #16]
 8010982:	7561      	strb	r1, [r4, #21]
 8010984:	7da0      	ldrb	r0, [r4, #22]
 8010986:	f080 0001 	eor.w	r0, r0, #1
 801098a:	b003      	add	sp, #12
 801098c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010990:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010994:	801a      	strh	r2, [r3, #0]
 8010996:	e7ed      	b.n	8010974 <ucdr_serialize_endian_uint16_t+0x9c>
 8010998:	68a2      	ldr	r2, [r4, #8]
 801099a:	6923      	ldr	r3, [r4, #16]
 801099c:	7da0      	ldrb	r0, [r4, #22]
 801099e:	f884 8015 	strb.w	r8, [r4, #21]
 80109a2:	1b92      	subs	r2, r2, r6
 80109a4:	1b9b      	subs	r3, r3, r6
 80109a6:	f080 0001 	eor.w	r0, r0, #1
 80109aa:	60a2      	str	r2, [r4, #8]
 80109ac:	6123      	str	r3, [r4, #16]
 80109ae:	b003      	add	sp, #12
 80109b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109b4:	68a3      	ldr	r3, [r4, #8]
 80109b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80109ba:	701a      	strb	r2, [r3, #0]
 80109bc:	e7bc      	b.n	8010938 <ucdr_serialize_endian_uint16_t+0x60>
 80109be:	f10d 0506 	add.w	r5, sp, #6
 80109c2:	4629      	mov	r1, r5
 80109c4:	4632      	mov	r2, r6
 80109c6:	4638      	mov	r0, r7
 80109c8:	f007 ff50 	bl	801886c <memcpy>
 80109cc:	68a0      	ldr	r0, [r4, #8]
 80109ce:	464a      	mov	r2, r9
 80109d0:	19a9      	adds	r1, r5, r6
 80109d2:	f007 ff4b 	bl	801886c <memcpy>
 80109d6:	e7af      	b.n	8010938 <ucdr_serialize_endian_uint16_t+0x60>

080109d8 <ucdr_deserialize_uint16_t>:
 80109d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109dc:	460d      	mov	r5, r1
 80109de:	2102      	movs	r1, #2
 80109e0:	4604      	mov	r4, r0
 80109e2:	f000 fe85 	bl	80116f0 <ucdr_buffer_alignment>
 80109e6:	4601      	mov	r1, r0
 80109e8:	4620      	mov	r0, r4
 80109ea:	f894 8015 	ldrb.w	r8, [r4, #21]
 80109ee:	f000 fec3 	bl	8011778 <ucdr_advance_buffer>
 80109f2:	2102      	movs	r1, #2
 80109f4:	4620      	mov	r0, r4
 80109f6:	f000 fe1b 	bl	8011630 <ucdr_check_buffer_available_for>
 80109fa:	bb60      	cbnz	r0, 8010a56 <ucdr_deserialize_uint16_t+0x7e>
 80109fc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010a00:	42be      	cmp	r6, r7
 8010a02:	d923      	bls.n	8010a4c <ucdr_deserialize_uint16_t+0x74>
 8010a04:	6923      	ldr	r3, [r4, #16]
 8010a06:	60a6      	str	r6, [r4, #8]
 8010a08:	1bf6      	subs	r6, r6, r7
 8010a0a:	4433      	add	r3, r6
 8010a0c:	f1c6 0902 	rsb	r9, r6, #2
 8010a10:	6123      	str	r3, [r4, #16]
 8010a12:	4649      	mov	r1, r9
 8010a14:	4620      	mov	r0, r4
 8010a16:	f000 fe17 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	d034      	beq.n	8010a88 <ucdr_deserialize_uint16_t+0xb0>
 8010a1e:	7d23      	ldrb	r3, [r4, #20]
 8010a20:	2b01      	cmp	r3, #1
 8010a22:	d042      	beq.n	8010aaa <ucdr_deserialize_uint16_t+0xd2>
 8010a24:	787b      	ldrb	r3, [r7, #1]
 8010a26:	702b      	strb	r3, [r5, #0]
 8010a28:	2e00      	cmp	r6, #0
 8010a2a:	d03a      	beq.n	8010aa2 <ucdr_deserialize_uint16_t+0xca>
 8010a2c:	783b      	ldrb	r3, [r7, #0]
 8010a2e:	706b      	strb	r3, [r5, #1]
 8010a30:	6923      	ldr	r3, [r4, #16]
 8010a32:	68a2      	ldr	r2, [r4, #8]
 8010a34:	7da0      	ldrb	r0, [r4, #22]
 8010a36:	2102      	movs	r1, #2
 8010a38:	3302      	adds	r3, #2
 8010a3a:	444a      	add	r2, r9
 8010a3c:	1b9b      	subs	r3, r3, r6
 8010a3e:	7561      	strb	r1, [r4, #21]
 8010a40:	60a2      	str	r2, [r4, #8]
 8010a42:	6123      	str	r3, [r4, #16]
 8010a44:	f080 0001 	eor.w	r0, r0, #1
 8010a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a4c:	2102      	movs	r1, #2
 8010a4e:	4620      	mov	r0, r4
 8010a50:	f000 fdfa 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010a54:	b180      	cbz	r0, 8010a78 <ucdr_deserialize_uint16_t+0xa0>
 8010a56:	7d23      	ldrb	r3, [r4, #20]
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	68a3      	ldr	r3, [r4, #8]
 8010a5c:	d011      	beq.n	8010a82 <ucdr_deserialize_uint16_t+0xaa>
 8010a5e:	785b      	ldrb	r3, [r3, #1]
 8010a60:	702b      	strb	r3, [r5, #0]
 8010a62:	68a3      	ldr	r3, [r4, #8]
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	706b      	strb	r3, [r5, #1]
 8010a68:	68a2      	ldr	r2, [r4, #8]
 8010a6a:	6923      	ldr	r3, [r4, #16]
 8010a6c:	3202      	adds	r2, #2
 8010a6e:	3302      	adds	r3, #2
 8010a70:	2102      	movs	r1, #2
 8010a72:	60a2      	str	r2, [r4, #8]
 8010a74:	6123      	str	r3, [r4, #16]
 8010a76:	7561      	strb	r1, [r4, #21]
 8010a78:	7da0      	ldrb	r0, [r4, #22]
 8010a7a:	f080 0001 	eor.w	r0, r0, #1
 8010a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a82:	881b      	ldrh	r3, [r3, #0]
 8010a84:	802b      	strh	r3, [r5, #0]
 8010a86:	e7ef      	b.n	8010a68 <ucdr_deserialize_uint16_t+0x90>
 8010a88:	68a2      	ldr	r2, [r4, #8]
 8010a8a:	6923      	ldr	r3, [r4, #16]
 8010a8c:	7da0      	ldrb	r0, [r4, #22]
 8010a8e:	f884 8015 	strb.w	r8, [r4, #21]
 8010a92:	1b92      	subs	r2, r2, r6
 8010a94:	1b9b      	subs	r3, r3, r6
 8010a96:	60a2      	str	r2, [r4, #8]
 8010a98:	6123      	str	r3, [r4, #16]
 8010a9a:	f080 0001 	eor.w	r0, r0, #1
 8010a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aa2:	68a3      	ldr	r3, [r4, #8]
 8010aa4:	781b      	ldrb	r3, [r3, #0]
 8010aa6:	706b      	strb	r3, [r5, #1]
 8010aa8:	e7c2      	b.n	8010a30 <ucdr_deserialize_uint16_t+0x58>
 8010aaa:	4639      	mov	r1, r7
 8010aac:	4632      	mov	r2, r6
 8010aae:	4628      	mov	r0, r5
 8010ab0:	f007 fedc 	bl	801886c <memcpy>
 8010ab4:	68a1      	ldr	r1, [r4, #8]
 8010ab6:	464a      	mov	r2, r9
 8010ab8:	19a8      	adds	r0, r5, r6
 8010aba:	f007 fed7 	bl	801886c <memcpy>
 8010abe:	e7b7      	b.n	8010a30 <ucdr_deserialize_uint16_t+0x58>

08010ac0 <ucdr_deserialize_endian_uint16_t>:
 8010ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ac4:	460e      	mov	r6, r1
 8010ac6:	2102      	movs	r1, #2
 8010ac8:	4604      	mov	r4, r0
 8010aca:	4615      	mov	r5, r2
 8010acc:	f000 fe10 	bl	80116f0 <ucdr_buffer_alignment>
 8010ad0:	4601      	mov	r1, r0
 8010ad2:	4620      	mov	r0, r4
 8010ad4:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010ad8:	f000 fe4e 	bl	8011778 <ucdr_advance_buffer>
 8010adc:	2102      	movs	r1, #2
 8010ade:	4620      	mov	r0, r4
 8010ae0:	f000 fda6 	bl	8011630 <ucdr_check_buffer_available_for>
 8010ae4:	bb70      	cbnz	r0, 8010b44 <ucdr_deserialize_endian_uint16_t+0x84>
 8010ae6:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8010aea:	4547      	cmp	r7, r8
 8010aec:	d925      	bls.n	8010b3a <ucdr_deserialize_endian_uint16_t+0x7a>
 8010aee:	6923      	ldr	r3, [r4, #16]
 8010af0:	60a7      	str	r7, [r4, #8]
 8010af2:	eba7 0708 	sub.w	r7, r7, r8
 8010af6:	443b      	add	r3, r7
 8010af8:	f1c7 0a02 	rsb	sl, r7, #2
 8010afc:	6123      	str	r3, [r4, #16]
 8010afe:	4651      	mov	r1, sl
 8010b00:	4620      	mov	r0, r4
 8010b02:	f000 fda1 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010b06:	2800      	cmp	r0, #0
 8010b08:	d034      	beq.n	8010b74 <ucdr_deserialize_endian_uint16_t+0xb4>
 8010b0a:	2e01      	cmp	r6, #1
 8010b0c:	d043      	beq.n	8010b96 <ucdr_deserialize_endian_uint16_t+0xd6>
 8010b0e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010b12:	702b      	strb	r3, [r5, #0]
 8010b14:	2f00      	cmp	r7, #0
 8010b16:	d03a      	beq.n	8010b8e <ucdr_deserialize_endian_uint16_t+0xce>
 8010b18:	f898 3000 	ldrb.w	r3, [r8]
 8010b1c:	706b      	strb	r3, [r5, #1]
 8010b1e:	6923      	ldr	r3, [r4, #16]
 8010b20:	68a2      	ldr	r2, [r4, #8]
 8010b22:	7da0      	ldrb	r0, [r4, #22]
 8010b24:	2102      	movs	r1, #2
 8010b26:	3302      	adds	r3, #2
 8010b28:	4452      	add	r2, sl
 8010b2a:	1bdb      	subs	r3, r3, r7
 8010b2c:	7561      	strb	r1, [r4, #21]
 8010b2e:	60a2      	str	r2, [r4, #8]
 8010b30:	6123      	str	r3, [r4, #16]
 8010b32:	f080 0001 	eor.w	r0, r0, #1
 8010b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b3a:	2102      	movs	r1, #2
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	f000 fd83 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010b42:	b178      	cbz	r0, 8010b64 <ucdr_deserialize_endian_uint16_t+0xa4>
 8010b44:	2e01      	cmp	r6, #1
 8010b46:	68a3      	ldr	r3, [r4, #8]
 8010b48:	d011      	beq.n	8010b6e <ucdr_deserialize_endian_uint16_t+0xae>
 8010b4a:	785b      	ldrb	r3, [r3, #1]
 8010b4c:	702b      	strb	r3, [r5, #0]
 8010b4e:	68a3      	ldr	r3, [r4, #8]
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	706b      	strb	r3, [r5, #1]
 8010b54:	68a2      	ldr	r2, [r4, #8]
 8010b56:	6923      	ldr	r3, [r4, #16]
 8010b58:	3202      	adds	r2, #2
 8010b5a:	3302      	adds	r3, #2
 8010b5c:	2102      	movs	r1, #2
 8010b5e:	60a2      	str	r2, [r4, #8]
 8010b60:	6123      	str	r3, [r4, #16]
 8010b62:	7561      	strb	r1, [r4, #21]
 8010b64:	7da0      	ldrb	r0, [r4, #22]
 8010b66:	f080 0001 	eor.w	r0, r0, #1
 8010b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b6e:	881b      	ldrh	r3, [r3, #0]
 8010b70:	802b      	strh	r3, [r5, #0]
 8010b72:	e7ef      	b.n	8010b54 <ucdr_deserialize_endian_uint16_t+0x94>
 8010b74:	68a2      	ldr	r2, [r4, #8]
 8010b76:	6923      	ldr	r3, [r4, #16]
 8010b78:	7da0      	ldrb	r0, [r4, #22]
 8010b7a:	f884 9015 	strb.w	r9, [r4, #21]
 8010b7e:	1bd2      	subs	r2, r2, r7
 8010b80:	1bdb      	subs	r3, r3, r7
 8010b82:	60a2      	str	r2, [r4, #8]
 8010b84:	6123      	str	r3, [r4, #16]
 8010b86:	f080 0001 	eor.w	r0, r0, #1
 8010b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b8e:	68a3      	ldr	r3, [r4, #8]
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	706b      	strb	r3, [r5, #1]
 8010b94:	e7c3      	b.n	8010b1e <ucdr_deserialize_endian_uint16_t+0x5e>
 8010b96:	4641      	mov	r1, r8
 8010b98:	463a      	mov	r2, r7
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	f007 fe66 	bl	801886c <memcpy>
 8010ba0:	68a1      	ldr	r1, [r4, #8]
 8010ba2:	4652      	mov	r2, sl
 8010ba4:	19e8      	adds	r0, r5, r7
 8010ba6:	f007 fe61 	bl	801886c <memcpy>
 8010baa:	e7b8      	b.n	8010b1e <ucdr_deserialize_endian_uint16_t+0x5e>

08010bac <ucdr_serialize_uint32_t>:
 8010bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb0:	b082      	sub	sp, #8
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	9101      	str	r1, [sp, #4]
 8010bb6:	2104      	movs	r1, #4
 8010bb8:	f000 fd9a 	bl	80116f0 <ucdr_buffer_alignment>
 8010bbc:	4601      	mov	r1, r0
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	7d67      	ldrb	r7, [r4, #21]
 8010bc2:	f000 fdd9 	bl	8011778 <ucdr_advance_buffer>
 8010bc6:	2104      	movs	r1, #4
 8010bc8:	4620      	mov	r0, r4
 8010bca:	f000 fd31 	bl	8011630 <ucdr_check_buffer_available_for>
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	d139      	bne.n	8010c46 <ucdr_serialize_uint32_t+0x9a>
 8010bd2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010bd6:	42ab      	cmp	r3, r5
 8010bd8:	d930      	bls.n	8010c3c <ucdr_serialize_uint32_t+0x90>
 8010bda:	1b5e      	subs	r6, r3, r5
 8010bdc:	60a3      	str	r3, [r4, #8]
 8010bde:	6923      	ldr	r3, [r4, #16]
 8010be0:	f1c6 0804 	rsb	r8, r6, #4
 8010be4:	4433      	add	r3, r6
 8010be6:	6123      	str	r3, [r4, #16]
 8010be8:	4641      	mov	r1, r8
 8010bea:	4620      	mov	r0, r4
 8010bec:	f000 fd2c 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	d04c      	beq.n	8010c8e <ucdr_serialize_uint32_t+0xe2>
 8010bf4:	7d23      	ldrb	r3, [r4, #20]
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	d063      	beq.n	8010cc2 <ucdr_serialize_uint32_t+0x116>
 8010bfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010bfe:	702b      	strb	r3, [r5, #0]
 8010c00:	2e00      	cmp	r6, #0
 8010c02:	d051      	beq.n	8010ca8 <ucdr_serialize_uint32_t+0xfc>
 8010c04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010c08:	706b      	strb	r3, [r5, #1]
 8010c0a:	2e01      	cmp	r6, #1
 8010c0c:	d050      	beq.n	8010cb0 <ucdr_serialize_uint32_t+0x104>
 8010c0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010c12:	70ab      	strb	r3, [r5, #2]
 8010c14:	2e02      	cmp	r6, #2
 8010c16:	d04f      	beq.n	8010cb8 <ucdr_serialize_uint32_t+0x10c>
 8010c18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010c1c:	70eb      	strb	r3, [r5, #3]
 8010c1e:	6923      	ldr	r3, [r4, #16]
 8010c20:	68a2      	ldr	r2, [r4, #8]
 8010c22:	7da0      	ldrb	r0, [r4, #22]
 8010c24:	3304      	adds	r3, #4
 8010c26:	1b9e      	subs	r6, r3, r6
 8010c28:	4442      	add	r2, r8
 8010c2a:	2304      	movs	r3, #4
 8010c2c:	f080 0001 	eor.w	r0, r0, #1
 8010c30:	60a2      	str	r2, [r4, #8]
 8010c32:	6126      	str	r6, [r4, #16]
 8010c34:	7563      	strb	r3, [r4, #21]
 8010c36:	b002      	add	sp, #8
 8010c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c3c:	2104      	movs	r1, #4
 8010c3e:	4620      	mov	r0, r4
 8010c40:	f000 fd02 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010c44:	b1d0      	cbz	r0, 8010c7c <ucdr_serialize_uint32_t+0xd0>
 8010c46:	7d23      	ldrb	r3, [r4, #20]
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	68a3      	ldr	r3, [r4, #8]
 8010c4c:	d01c      	beq.n	8010c88 <ucdr_serialize_uint32_t+0xdc>
 8010c4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010c52:	701a      	strb	r2, [r3, #0]
 8010c54:	68a3      	ldr	r3, [r4, #8]
 8010c56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010c5a:	705a      	strb	r2, [r3, #1]
 8010c5c:	68a3      	ldr	r3, [r4, #8]
 8010c5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010c62:	709a      	strb	r2, [r3, #2]
 8010c64:	68a3      	ldr	r3, [r4, #8]
 8010c66:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010c6a:	70da      	strb	r2, [r3, #3]
 8010c6c:	68a2      	ldr	r2, [r4, #8]
 8010c6e:	6923      	ldr	r3, [r4, #16]
 8010c70:	3204      	adds	r2, #4
 8010c72:	3304      	adds	r3, #4
 8010c74:	2104      	movs	r1, #4
 8010c76:	60a2      	str	r2, [r4, #8]
 8010c78:	6123      	str	r3, [r4, #16]
 8010c7a:	7561      	strb	r1, [r4, #21]
 8010c7c:	7da0      	ldrb	r0, [r4, #22]
 8010c7e:	f080 0001 	eor.w	r0, r0, #1
 8010c82:	b002      	add	sp, #8
 8010c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c88:	9a01      	ldr	r2, [sp, #4]
 8010c8a:	601a      	str	r2, [r3, #0]
 8010c8c:	e7ee      	b.n	8010c6c <ucdr_serialize_uint32_t+0xc0>
 8010c8e:	68a2      	ldr	r2, [r4, #8]
 8010c90:	6923      	ldr	r3, [r4, #16]
 8010c92:	7da0      	ldrb	r0, [r4, #22]
 8010c94:	7567      	strb	r7, [r4, #21]
 8010c96:	1b92      	subs	r2, r2, r6
 8010c98:	1b9b      	subs	r3, r3, r6
 8010c9a:	f080 0001 	eor.w	r0, r0, #1
 8010c9e:	60a2      	str	r2, [r4, #8]
 8010ca0:	6123      	str	r3, [r4, #16]
 8010ca2:	b002      	add	sp, #8
 8010ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ca8:	68a3      	ldr	r3, [r4, #8]
 8010caa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010cae:	701a      	strb	r2, [r3, #0]
 8010cb0:	68a3      	ldr	r3, [r4, #8]
 8010cb2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010cb6:	701a      	strb	r2, [r3, #0]
 8010cb8:	68a3      	ldr	r3, [r4, #8]
 8010cba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010cbe:	701a      	strb	r2, [r3, #0]
 8010cc0:	e7ad      	b.n	8010c1e <ucdr_serialize_uint32_t+0x72>
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	ad01      	add	r5, sp, #4
 8010cc6:	4629      	mov	r1, r5
 8010cc8:	4632      	mov	r2, r6
 8010cca:	f007 fdcf 	bl	801886c <memcpy>
 8010cce:	68a0      	ldr	r0, [r4, #8]
 8010cd0:	4642      	mov	r2, r8
 8010cd2:	19a9      	adds	r1, r5, r6
 8010cd4:	f007 fdca 	bl	801886c <memcpy>
 8010cd8:	e7a1      	b.n	8010c1e <ucdr_serialize_uint32_t+0x72>
 8010cda:	bf00      	nop

08010cdc <ucdr_serialize_endian_uint32_t>:
 8010cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ce0:	b083      	sub	sp, #12
 8010ce2:	460d      	mov	r5, r1
 8010ce4:	2104      	movs	r1, #4
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	9201      	str	r2, [sp, #4]
 8010cea:	f000 fd01 	bl	80116f0 <ucdr_buffer_alignment>
 8010cee:	4601      	mov	r1, r0
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010cf6:	f000 fd3f 	bl	8011778 <ucdr_advance_buffer>
 8010cfa:	2104      	movs	r1, #4
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	f000 fc97 	bl	8011630 <ucdr_check_buffer_available_for>
 8010d02:	2800      	cmp	r0, #0
 8010d04:	d138      	bne.n	8010d78 <ucdr_serialize_endian_uint32_t+0x9c>
 8010d06:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010d0a:	42b7      	cmp	r7, r6
 8010d0c:	d92f      	bls.n	8010d6e <ucdr_serialize_endian_uint32_t+0x92>
 8010d0e:	6923      	ldr	r3, [r4, #16]
 8010d10:	60a7      	str	r7, [r4, #8]
 8010d12:	1bbf      	subs	r7, r7, r6
 8010d14:	443b      	add	r3, r7
 8010d16:	f1c7 0904 	rsb	r9, r7, #4
 8010d1a:	6123      	str	r3, [r4, #16]
 8010d1c:	4649      	mov	r1, r9
 8010d1e:	4620      	mov	r0, r4
 8010d20:	f000 fc92 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010d24:	2800      	cmp	r0, #0
 8010d26:	d04a      	beq.n	8010dbe <ucdr_serialize_endian_uint32_t+0xe2>
 8010d28:	2d01      	cmp	r5, #1
 8010d2a:	d063      	beq.n	8010df4 <ucdr_serialize_endian_uint32_t+0x118>
 8010d2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010d30:	7033      	strb	r3, [r6, #0]
 8010d32:	2f00      	cmp	r7, #0
 8010d34:	d051      	beq.n	8010dda <ucdr_serialize_endian_uint32_t+0xfe>
 8010d36:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010d3a:	7073      	strb	r3, [r6, #1]
 8010d3c:	2f01      	cmp	r7, #1
 8010d3e:	d050      	beq.n	8010de2 <ucdr_serialize_endian_uint32_t+0x106>
 8010d40:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010d44:	70b3      	strb	r3, [r6, #2]
 8010d46:	2f02      	cmp	r7, #2
 8010d48:	d04f      	beq.n	8010dea <ucdr_serialize_endian_uint32_t+0x10e>
 8010d4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010d4e:	70f3      	strb	r3, [r6, #3]
 8010d50:	6923      	ldr	r3, [r4, #16]
 8010d52:	68a2      	ldr	r2, [r4, #8]
 8010d54:	7da0      	ldrb	r0, [r4, #22]
 8010d56:	3304      	adds	r3, #4
 8010d58:	444a      	add	r2, r9
 8010d5a:	1bdb      	subs	r3, r3, r7
 8010d5c:	2104      	movs	r1, #4
 8010d5e:	f080 0001 	eor.w	r0, r0, #1
 8010d62:	60a2      	str	r2, [r4, #8]
 8010d64:	6123      	str	r3, [r4, #16]
 8010d66:	7561      	strb	r1, [r4, #21]
 8010d68:	b003      	add	sp, #12
 8010d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d6e:	2104      	movs	r1, #4
 8010d70:	4620      	mov	r0, r4
 8010d72:	f000 fc69 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010d76:	b1c8      	cbz	r0, 8010dac <ucdr_serialize_endian_uint32_t+0xd0>
 8010d78:	2d01      	cmp	r5, #1
 8010d7a:	68a3      	ldr	r3, [r4, #8]
 8010d7c:	d01c      	beq.n	8010db8 <ucdr_serialize_endian_uint32_t+0xdc>
 8010d7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010d82:	701a      	strb	r2, [r3, #0]
 8010d84:	68a3      	ldr	r3, [r4, #8]
 8010d86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d8a:	705a      	strb	r2, [r3, #1]
 8010d8c:	68a3      	ldr	r3, [r4, #8]
 8010d8e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010d92:	709a      	strb	r2, [r3, #2]
 8010d94:	68a3      	ldr	r3, [r4, #8]
 8010d96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010d9a:	70da      	strb	r2, [r3, #3]
 8010d9c:	68a2      	ldr	r2, [r4, #8]
 8010d9e:	6923      	ldr	r3, [r4, #16]
 8010da0:	3204      	adds	r2, #4
 8010da2:	3304      	adds	r3, #4
 8010da4:	2104      	movs	r1, #4
 8010da6:	60a2      	str	r2, [r4, #8]
 8010da8:	6123      	str	r3, [r4, #16]
 8010daa:	7561      	strb	r1, [r4, #21]
 8010dac:	7da0      	ldrb	r0, [r4, #22]
 8010dae:	f080 0001 	eor.w	r0, r0, #1
 8010db2:	b003      	add	sp, #12
 8010db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010db8:	9a01      	ldr	r2, [sp, #4]
 8010dba:	601a      	str	r2, [r3, #0]
 8010dbc:	e7ee      	b.n	8010d9c <ucdr_serialize_endian_uint32_t+0xc0>
 8010dbe:	68a2      	ldr	r2, [r4, #8]
 8010dc0:	6923      	ldr	r3, [r4, #16]
 8010dc2:	7da0      	ldrb	r0, [r4, #22]
 8010dc4:	f884 8015 	strb.w	r8, [r4, #21]
 8010dc8:	1bd2      	subs	r2, r2, r7
 8010dca:	1bdb      	subs	r3, r3, r7
 8010dcc:	f080 0001 	eor.w	r0, r0, #1
 8010dd0:	60a2      	str	r2, [r4, #8]
 8010dd2:	6123      	str	r3, [r4, #16]
 8010dd4:	b003      	add	sp, #12
 8010dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dda:	68a3      	ldr	r3, [r4, #8]
 8010ddc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010de0:	701a      	strb	r2, [r3, #0]
 8010de2:	68a3      	ldr	r3, [r4, #8]
 8010de4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010de8:	701a      	strb	r2, [r3, #0]
 8010dea:	68a3      	ldr	r3, [r4, #8]
 8010dec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010df0:	701a      	strb	r2, [r3, #0]
 8010df2:	e7ad      	b.n	8010d50 <ucdr_serialize_endian_uint32_t+0x74>
 8010df4:	ad01      	add	r5, sp, #4
 8010df6:	4629      	mov	r1, r5
 8010df8:	463a      	mov	r2, r7
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	f007 fd36 	bl	801886c <memcpy>
 8010e00:	68a0      	ldr	r0, [r4, #8]
 8010e02:	464a      	mov	r2, r9
 8010e04:	19e9      	adds	r1, r5, r7
 8010e06:	f007 fd31 	bl	801886c <memcpy>
 8010e0a:	e7a1      	b.n	8010d50 <ucdr_serialize_endian_uint32_t+0x74>

08010e0c <ucdr_deserialize_uint32_t>:
 8010e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e10:	460d      	mov	r5, r1
 8010e12:	2104      	movs	r1, #4
 8010e14:	4604      	mov	r4, r0
 8010e16:	f000 fc6b 	bl	80116f0 <ucdr_buffer_alignment>
 8010e1a:	4601      	mov	r1, r0
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010e22:	f000 fca9 	bl	8011778 <ucdr_advance_buffer>
 8010e26:	2104      	movs	r1, #4
 8010e28:	4620      	mov	r0, r4
 8010e2a:	f000 fc01 	bl	8011630 <ucdr_check_buffer_available_for>
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	d138      	bne.n	8010ea4 <ucdr_deserialize_uint32_t+0x98>
 8010e32:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010e36:	42b7      	cmp	r7, r6
 8010e38:	d92f      	bls.n	8010e9a <ucdr_deserialize_uint32_t+0x8e>
 8010e3a:	6923      	ldr	r3, [r4, #16]
 8010e3c:	60a7      	str	r7, [r4, #8]
 8010e3e:	1bbf      	subs	r7, r7, r6
 8010e40:	443b      	add	r3, r7
 8010e42:	f1c7 0904 	rsb	r9, r7, #4
 8010e46:	6123      	str	r3, [r4, #16]
 8010e48:	4649      	mov	r1, r9
 8010e4a:	4620      	mov	r0, r4
 8010e4c:	f000 fbfc 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010e50:	2800      	cmp	r0, #0
 8010e52:	d046      	beq.n	8010ee2 <ucdr_deserialize_uint32_t+0xd6>
 8010e54:	7d23      	ldrb	r3, [r4, #20]
 8010e56:	2b01      	cmp	r3, #1
 8010e58:	d05c      	beq.n	8010f14 <ucdr_deserialize_uint32_t+0x108>
 8010e5a:	78f3      	ldrb	r3, [r6, #3]
 8010e5c:	702b      	strb	r3, [r5, #0]
 8010e5e:	2f00      	cmp	r7, #0
 8010e60:	d04c      	beq.n	8010efc <ucdr_deserialize_uint32_t+0xf0>
 8010e62:	78b3      	ldrb	r3, [r6, #2]
 8010e64:	706b      	strb	r3, [r5, #1]
 8010e66:	2f01      	cmp	r7, #1
 8010e68:	f105 0302 	add.w	r3, r5, #2
 8010e6c:	d04a      	beq.n	8010f04 <ucdr_deserialize_uint32_t+0xf8>
 8010e6e:	7873      	ldrb	r3, [r6, #1]
 8010e70:	70ab      	strb	r3, [r5, #2]
 8010e72:	2f02      	cmp	r7, #2
 8010e74:	f105 0303 	add.w	r3, r5, #3
 8010e78:	d048      	beq.n	8010f0c <ucdr_deserialize_uint32_t+0x100>
 8010e7a:	7833      	ldrb	r3, [r6, #0]
 8010e7c:	70eb      	strb	r3, [r5, #3]
 8010e7e:	6923      	ldr	r3, [r4, #16]
 8010e80:	68a2      	ldr	r2, [r4, #8]
 8010e82:	7da0      	ldrb	r0, [r4, #22]
 8010e84:	2104      	movs	r1, #4
 8010e86:	3304      	adds	r3, #4
 8010e88:	444a      	add	r2, r9
 8010e8a:	1bdb      	subs	r3, r3, r7
 8010e8c:	7561      	strb	r1, [r4, #21]
 8010e8e:	60a2      	str	r2, [r4, #8]
 8010e90:	6123      	str	r3, [r4, #16]
 8010e92:	f080 0001 	eor.w	r0, r0, #1
 8010e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e9a:	2104      	movs	r1, #4
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f000 fbd3 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010ea2:	b1b0      	cbz	r0, 8010ed2 <ucdr_deserialize_uint32_t+0xc6>
 8010ea4:	7d23      	ldrb	r3, [r4, #20]
 8010ea6:	2b01      	cmp	r3, #1
 8010ea8:	68a3      	ldr	r3, [r4, #8]
 8010eaa:	d017      	beq.n	8010edc <ucdr_deserialize_uint32_t+0xd0>
 8010eac:	78db      	ldrb	r3, [r3, #3]
 8010eae:	702b      	strb	r3, [r5, #0]
 8010eb0:	68a3      	ldr	r3, [r4, #8]
 8010eb2:	789b      	ldrb	r3, [r3, #2]
 8010eb4:	706b      	strb	r3, [r5, #1]
 8010eb6:	68a3      	ldr	r3, [r4, #8]
 8010eb8:	785b      	ldrb	r3, [r3, #1]
 8010eba:	70ab      	strb	r3, [r5, #2]
 8010ebc:	68a3      	ldr	r3, [r4, #8]
 8010ebe:	781b      	ldrb	r3, [r3, #0]
 8010ec0:	70eb      	strb	r3, [r5, #3]
 8010ec2:	68a2      	ldr	r2, [r4, #8]
 8010ec4:	6923      	ldr	r3, [r4, #16]
 8010ec6:	3204      	adds	r2, #4
 8010ec8:	3304      	adds	r3, #4
 8010eca:	2104      	movs	r1, #4
 8010ecc:	60a2      	str	r2, [r4, #8]
 8010ece:	6123      	str	r3, [r4, #16]
 8010ed0:	7561      	strb	r1, [r4, #21]
 8010ed2:	7da0      	ldrb	r0, [r4, #22]
 8010ed4:	f080 0001 	eor.w	r0, r0, #1
 8010ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	602b      	str	r3, [r5, #0]
 8010ee0:	e7ef      	b.n	8010ec2 <ucdr_deserialize_uint32_t+0xb6>
 8010ee2:	68a2      	ldr	r2, [r4, #8]
 8010ee4:	6923      	ldr	r3, [r4, #16]
 8010ee6:	7da0      	ldrb	r0, [r4, #22]
 8010ee8:	f884 8015 	strb.w	r8, [r4, #21]
 8010eec:	1bd2      	subs	r2, r2, r7
 8010eee:	1bdb      	subs	r3, r3, r7
 8010ef0:	60a2      	str	r2, [r4, #8]
 8010ef2:	6123      	str	r3, [r4, #16]
 8010ef4:	f080 0001 	eor.w	r0, r0, #1
 8010ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010efc:	68a3      	ldr	r3, [r4, #8]
 8010efe:	789b      	ldrb	r3, [r3, #2]
 8010f00:	706b      	strb	r3, [r5, #1]
 8010f02:	1cab      	adds	r3, r5, #2
 8010f04:	68a2      	ldr	r2, [r4, #8]
 8010f06:	7852      	ldrb	r2, [r2, #1]
 8010f08:	f803 2b01 	strb.w	r2, [r3], #1
 8010f0c:	68a2      	ldr	r2, [r4, #8]
 8010f0e:	7812      	ldrb	r2, [r2, #0]
 8010f10:	701a      	strb	r2, [r3, #0]
 8010f12:	e7b4      	b.n	8010e7e <ucdr_deserialize_uint32_t+0x72>
 8010f14:	4631      	mov	r1, r6
 8010f16:	463a      	mov	r2, r7
 8010f18:	4628      	mov	r0, r5
 8010f1a:	f007 fca7 	bl	801886c <memcpy>
 8010f1e:	68a1      	ldr	r1, [r4, #8]
 8010f20:	464a      	mov	r2, r9
 8010f22:	19e8      	adds	r0, r5, r7
 8010f24:	f007 fca2 	bl	801886c <memcpy>
 8010f28:	e7a9      	b.n	8010e7e <ucdr_deserialize_uint32_t+0x72>
 8010f2a:	bf00      	nop

08010f2c <ucdr_deserialize_endian_uint32_t>:
 8010f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f30:	460e      	mov	r6, r1
 8010f32:	2104      	movs	r1, #4
 8010f34:	4604      	mov	r4, r0
 8010f36:	4615      	mov	r5, r2
 8010f38:	f000 fbda 	bl	80116f0 <ucdr_buffer_alignment>
 8010f3c:	4601      	mov	r1, r0
 8010f3e:	4620      	mov	r0, r4
 8010f40:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010f44:	f000 fc18 	bl	8011778 <ucdr_advance_buffer>
 8010f48:	2104      	movs	r1, #4
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f000 fb70 	bl	8011630 <ucdr_check_buffer_available_for>
 8010f50:	2800      	cmp	r0, #0
 8010f52:	d13c      	bne.n	8010fce <ucdr_deserialize_endian_uint32_t+0xa2>
 8010f54:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8010f58:	42bb      	cmp	r3, r7
 8010f5a:	d933      	bls.n	8010fc4 <ucdr_deserialize_endian_uint32_t+0x98>
 8010f5c:	eba3 0807 	sub.w	r8, r3, r7
 8010f60:	60a3      	str	r3, [r4, #8]
 8010f62:	6923      	ldr	r3, [r4, #16]
 8010f64:	f1c8 0a04 	rsb	sl, r8, #4
 8010f68:	4443      	add	r3, r8
 8010f6a:	6123      	str	r3, [r4, #16]
 8010f6c:	4651      	mov	r1, sl
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f000 fb6a 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010f74:	2800      	cmp	r0, #0
 8010f76:	d048      	beq.n	801100a <ucdr_deserialize_endian_uint32_t+0xde>
 8010f78:	2e01      	cmp	r6, #1
 8010f7a:	d061      	beq.n	8011040 <ucdr_deserialize_endian_uint32_t+0x114>
 8010f7c:	78fb      	ldrb	r3, [r7, #3]
 8010f7e:	702b      	strb	r3, [r5, #0]
 8010f80:	f1b8 0f00 	cmp.w	r8, #0
 8010f84:	d050      	beq.n	8011028 <ucdr_deserialize_endian_uint32_t+0xfc>
 8010f86:	78bb      	ldrb	r3, [r7, #2]
 8010f88:	706b      	strb	r3, [r5, #1]
 8010f8a:	f1b8 0f01 	cmp.w	r8, #1
 8010f8e:	f105 0302 	add.w	r3, r5, #2
 8010f92:	d04d      	beq.n	8011030 <ucdr_deserialize_endian_uint32_t+0x104>
 8010f94:	787b      	ldrb	r3, [r7, #1]
 8010f96:	70ab      	strb	r3, [r5, #2]
 8010f98:	f1b8 0f02 	cmp.w	r8, #2
 8010f9c:	f105 0303 	add.w	r3, r5, #3
 8010fa0:	d04a      	beq.n	8011038 <ucdr_deserialize_endian_uint32_t+0x10c>
 8010fa2:	783b      	ldrb	r3, [r7, #0]
 8010fa4:	70eb      	strb	r3, [r5, #3]
 8010fa6:	6923      	ldr	r3, [r4, #16]
 8010fa8:	68a2      	ldr	r2, [r4, #8]
 8010faa:	7da0      	ldrb	r0, [r4, #22]
 8010fac:	2104      	movs	r1, #4
 8010fae:	3304      	adds	r3, #4
 8010fb0:	4452      	add	r2, sl
 8010fb2:	eba3 0308 	sub.w	r3, r3, r8
 8010fb6:	7561      	strb	r1, [r4, #21]
 8010fb8:	60a2      	str	r2, [r4, #8]
 8010fba:	6123      	str	r3, [r4, #16]
 8010fbc:	f080 0001 	eor.w	r0, r0, #1
 8010fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fc4:	2104      	movs	r1, #4
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f000 fb3e 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8010fcc:	b1a8      	cbz	r0, 8010ffa <ucdr_deserialize_endian_uint32_t+0xce>
 8010fce:	2e01      	cmp	r6, #1
 8010fd0:	68a3      	ldr	r3, [r4, #8]
 8010fd2:	d017      	beq.n	8011004 <ucdr_deserialize_endian_uint32_t+0xd8>
 8010fd4:	78db      	ldrb	r3, [r3, #3]
 8010fd6:	702b      	strb	r3, [r5, #0]
 8010fd8:	68a3      	ldr	r3, [r4, #8]
 8010fda:	789b      	ldrb	r3, [r3, #2]
 8010fdc:	706b      	strb	r3, [r5, #1]
 8010fde:	68a3      	ldr	r3, [r4, #8]
 8010fe0:	785b      	ldrb	r3, [r3, #1]
 8010fe2:	70ab      	strb	r3, [r5, #2]
 8010fe4:	68a3      	ldr	r3, [r4, #8]
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	70eb      	strb	r3, [r5, #3]
 8010fea:	68a2      	ldr	r2, [r4, #8]
 8010fec:	6923      	ldr	r3, [r4, #16]
 8010fee:	3204      	adds	r2, #4
 8010ff0:	3304      	adds	r3, #4
 8010ff2:	2104      	movs	r1, #4
 8010ff4:	60a2      	str	r2, [r4, #8]
 8010ff6:	6123      	str	r3, [r4, #16]
 8010ff8:	7561      	strb	r1, [r4, #21]
 8010ffa:	7da0      	ldrb	r0, [r4, #22]
 8010ffc:	f080 0001 	eor.w	r0, r0, #1
 8011000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	602b      	str	r3, [r5, #0]
 8011008:	e7ef      	b.n	8010fea <ucdr_deserialize_endian_uint32_t+0xbe>
 801100a:	68a2      	ldr	r2, [r4, #8]
 801100c:	6923      	ldr	r3, [r4, #16]
 801100e:	7da0      	ldrb	r0, [r4, #22]
 8011010:	f884 9015 	strb.w	r9, [r4, #21]
 8011014:	eba2 0208 	sub.w	r2, r2, r8
 8011018:	eba3 0308 	sub.w	r3, r3, r8
 801101c:	60a2      	str	r2, [r4, #8]
 801101e:	6123      	str	r3, [r4, #16]
 8011020:	f080 0001 	eor.w	r0, r0, #1
 8011024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011028:	68a3      	ldr	r3, [r4, #8]
 801102a:	789b      	ldrb	r3, [r3, #2]
 801102c:	706b      	strb	r3, [r5, #1]
 801102e:	1cab      	adds	r3, r5, #2
 8011030:	68a2      	ldr	r2, [r4, #8]
 8011032:	7852      	ldrb	r2, [r2, #1]
 8011034:	f803 2b01 	strb.w	r2, [r3], #1
 8011038:	68a2      	ldr	r2, [r4, #8]
 801103a:	7812      	ldrb	r2, [r2, #0]
 801103c:	701a      	strb	r2, [r3, #0]
 801103e:	e7b2      	b.n	8010fa6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8011040:	4639      	mov	r1, r7
 8011042:	4642      	mov	r2, r8
 8011044:	4628      	mov	r0, r5
 8011046:	f007 fc11 	bl	801886c <memcpy>
 801104a:	68a1      	ldr	r1, [r4, #8]
 801104c:	4652      	mov	r2, sl
 801104e:	eb05 0008 	add.w	r0, r5, r8
 8011052:	f007 fc0b 	bl	801886c <memcpy>
 8011056:	e7a6      	b.n	8010fa6 <ucdr_deserialize_endian_uint32_t+0x7a>

08011058 <ucdr_serialize_uint64_t>:
 8011058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801105c:	2108      	movs	r1, #8
 801105e:	b082      	sub	sp, #8
 8011060:	4604      	mov	r4, r0
 8011062:	e9cd 2300 	strd	r2, r3, [sp]
 8011066:	f000 fb43 	bl	80116f0 <ucdr_buffer_alignment>
 801106a:	4601      	mov	r1, r0
 801106c:	4620      	mov	r0, r4
 801106e:	7d67      	ldrb	r7, [r4, #21]
 8011070:	f000 fb82 	bl	8011778 <ucdr_advance_buffer>
 8011074:	2108      	movs	r1, #8
 8011076:	4620      	mov	r0, r4
 8011078:	f000 fada 	bl	8011630 <ucdr_check_buffer_available_for>
 801107c:	2800      	cmp	r0, #0
 801107e:	d14e      	bne.n	801111e <ucdr_serialize_uint64_t+0xc6>
 8011080:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011084:	42ab      	cmp	r3, r5
 8011086:	d945      	bls.n	8011114 <ucdr_serialize_uint64_t+0xbc>
 8011088:	1b5e      	subs	r6, r3, r5
 801108a:	60a3      	str	r3, [r4, #8]
 801108c:	6923      	ldr	r3, [r4, #16]
 801108e:	f1c6 0808 	rsb	r8, r6, #8
 8011092:	4433      	add	r3, r6
 8011094:	6123      	str	r3, [r4, #16]
 8011096:	4641      	mov	r1, r8
 8011098:	4620      	mov	r0, r4
 801109a:	f000 fad5 	bl	8011648 <ucdr_check_final_buffer_behavior>
 801109e:	2800      	cmp	r0, #0
 80110a0:	d074      	beq.n	801118c <ucdr_serialize_uint64_t+0x134>
 80110a2:	7d23      	ldrb	r3, [r4, #20]
 80110a4:	2b01      	cmp	r3, #1
 80110a6:	f000 809b 	beq.w	80111e0 <ucdr_serialize_uint64_t+0x188>
 80110aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80110ae:	702b      	strb	r3, [r5, #0]
 80110b0:	2e00      	cmp	r6, #0
 80110b2:	d078      	beq.n	80111a6 <ucdr_serialize_uint64_t+0x14e>
 80110b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80110b8:	706b      	strb	r3, [r5, #1]
 80110ba:	2e01      	cmp	r6, #1
 80110bc:	d077      	beq.n	80111ae <ucdr_serialize_uint64_t+0x156>
 80110be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80110c2:	70ab      	strb	r3, [r5, #2]
 80110c4:	2e02      	cmp	r6, #2
 80110c6:	d076      	beq.n	80111b6 <ucdr_serialize_uint64_t+0x15e>
 80110c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80110cc:	70eb      	strb	r3, [r5, #3]
 80110ce:	2e03      	cmp	r6, #3
 80110d0:	d075      	beq.n	80111be <ucdr_serialize_uint64_t+0x166>
 80110d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80110d6:	712b      	strb	r3, [r5, #4]
 80110d8:	2e04      	cmp	r6, #4
 80110da:	d074      	beq.n	80111c6 <ucdr_serialize_uint64_t+0x16e>
 80110dc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80110e0:	716b      	strb	r3, [r5, #5]
 80110e2:	2e05      	cmp	r6, #5
 80110e4:	d073      	beq.n	80111ce <ucdr_serialize_uint64_t+0x176>
 80110e6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80110ea:	71ab      	strb	r3, [r5, #6]
 80110ec:	2e06      	cmp	r6, #6
 80110ee:	d072      	beq.n	80111d6 <ucdr_serialize_uint64_t+0x17e>
 80110f0:	f89d 3000 	ldrb.w	r3, [sp]
 80110f4:	71eb      	strb	r3, [r5, #7]
 80110f6:	6923      	ldr	r3, [r4, #16]
 80110f8:	68a2      	ldr	r2, [r4, #8]
 80110fa:	7da0      	ldrb	r0, [r4, #22]
 80110fc:	3308      	adds	r3, #8
 80110fe:	1b9e      	subs	r6, r3, r6
 8011100:	4442      	add	r2, r8
 8011102:	2308      	movs	r3, #8
 8011104:	f080 0001 	eor.w	r0, r0, #1
 8011108:	60a2      	str	r2, [r4, #8]
 801110a:	6126      	str	r6, [r4, #16]
 801110c:	7563      	strb	r3, [r4, #21]
 801110e:	b002      	add	sp, #8
 8011110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011114:	2108      	movs	r1, #8
 8011116:	4620      	mov	r0, r4
 8011118:	f000 fa96 	bl	8011648 <ucdr_check_final_buffer_behavior>
 801111c:	b350      	cbz	r0, 8011174 <ucdr_serialize_uint64_t+0x11c>
 801111e:	7d23      	ldrb	r3, [r4, #20]
 8011120:	2b01      	cmp	r3, #1
 8011122:	d02d      	beq.n	8011180 <ucdr_serialize_uint64_t+0x128>
 8011124:	68a3      	ldr	r3, [r4, #8]
 8011126:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801112a:	701a      	strb	r2, [r3, #0]
 801112c:	68a3      	ldr	r3, [r4, #8]
 801112e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011132:	705a      	strb	r2, [r3, #1]
 8011134:	68a3      	ldr	r3, [r4, #8]
 8011136:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801113a:	709a      	strb	r2, [r3, #2]
 801113c:	68a3      	ldr	r3, [r4, #8]
 801113e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011142:	70da      	strb	r2, [r3, #3]
 8011144:	68a3      	ldr	r3, [r4, #8]
 8011146:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801114a:	711a      	strb	r2, [r3, #4]
 801114c:	68a3      	ldr	r3, [r4, #8]
 801114e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011152:	715a      	strb	r2, [r3, #5]
 8011154:	68a3      	ldr	r3, [r4, #8]
 8011156:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801115a:	719a      	strb	r2, [r3, #6]
 801115c:	68a3      	ldr	r3, [r4, #8]
 801115e:	f89d 2000 	ldrb.w	r2, [sp]
 8011162:	71da      	strb	r2, [r3, #7]
 8011164:	68a2      	ldr	r2, [r4, #8]
 8011166:	6923      	ldr	r3, [r4, #16]
 8011168:	3208      	adds	r2, #8
 801116a:	3308      	adds	r3, #8
 801116c:	2108      	movs	r1, #8
 801116e:	60a2      	str	r2, [r4, #8]
 8011170:	6123      	str	r3, [r4, #16]
 8011172:	7561      	strb	r1, [r4, #21]
 8011174:	7da0      	ldrb	r0, [r4, #22]
 8011176:	f080 0001 	eor.w	r0, r0, #1
 801117a:	b002      	add	sp, #8
 801117c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011180:	466b      	mov	r3, sp
 8011182:	cb03      	ldmia	r3!, {r0, r1}
 8011184:	68a3      	ldr	r3, [r4, #8]
 8011186:	6018      	str	r0, [r3, #0]
 8011188:	6059      	str	r1, [r3, #4]
 801118a:	e7eb      	b.n	8011164 <ucdr_serialize_uint64_t+0x10c>
 801118c:	68a2      	ldr	r2, [r4, #8]
 801118e:	6923      	ldr	r3, [r4, #16]
 8011190:	7da0      	ldrb	r0, [r4, #22]
 8011192:	7567      	strb	r7, [r4, #21]
 8011194:	1b92      	subs	r2, r2, r6
 8011196:	1b9b      	subs	r3, r3, r6
 8011198:	f080 0001 	eor.w	r0, r0, #1
 801119c:	60a2      	str	r2, [r4, #8]
 801119e:	6123      	str	r3, [r4, #16]
 80111a0:	b002      	add	sp, #8
 80111a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111a6:	68a3      	ldr	r3, [r4, #8]
 80111a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80111ac:	701a      	strb	r2, [r3, #0]
 80111ae:	68a3      	ldr	r3, [r4, #8]
 80111b0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80111b4:	701a      	strb	r2, [r3, #0]
 80111b6:	68a3      	ldr	r3, [r4, #8]
 80111b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80111bc:	701a      	strb	r2, [r3, #0]
 80111be:	68a3      	ldr	r3, [r4, #8]
 80111c0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80111c4:	701a      	strb	r2, [r3, #0]
 80111c6:	68a3      	ldr	r3, [r4, #8]
 80111c8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80111cc:	701a      	strb	r2, [r3, #0]
 80111ce:	68a3      	ldr	r3, [r4, #8]
 80111d0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80111d4:	701a      	strb	r2, [r3, #0]
 80111d6:	68a3      	ldr	r3, [r4, #8]
 80111d8:	f89d 2000 	ldrb.w	r2, [sp]
 80111dc:	701a      	strb	r2, [r3, #0]
 80111de:	e78a      	b.n	80110f6 <ucdr_serialize_uint64_t+0x9e>
 80111e0:	4628      	mov	r0, r5
 80111e2:	466d      	mov	r5, sp
 80111e4:	4629      	mov	r1, r5
 80111e6:	4632      	mov	r2, r6
 80111e8:	f007 fb40 	bl	801886c <memcpy>
 80111ec:	68a0      	ldr	r0, [r4, #8]
 80111ee:	4642      	mov	r2, r8
 80111f0:	19a9      	adds	r1, r5, r6
 80111f2:	f007 fb3b 	bl	801886c <memcpy>
 80111f6:	e77e      	b.n	80110f6 <ucdr_serialize_uint64_t+0x9e>

080111f8 <ucdr_serialize_int16_t>:
 80111f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111fc:	b082      	sub	sp, #8
 80111fe:	460b      	mov	r3, r1
 8011200:	2102      	movs	r1, #2
 8011202:	4604      	mov	r4, r0
 8011204:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011208:	f000 fa72 	bl	80116f0 <ucdr_buffer_alignment>
 801120c:	4601      	mov	r1, r0
 801120e:	4620      	mov	r0, r4
 8011210:	7d67      	ldrb	r7, [r4, #21]
 8011212:	f000 fab1 	bl	8011778 <ucdr_advance_buffer>
 8011216:	2102      	movs	r1, #2
 8011218:	4620      	mov	r0, r4
 801121a:	f000 fa09 	bl	8011630 <ucdr_check_buffer_available_for>
 801121e:	bb78      	cbnz	r0, 8011280 <ucdr_serialize_int16_t+0x88>
 8011220:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011224:	42ab      	cmp	r3, r5
 8011226:	d926      	bls.n	8011276 <ucdr_serialize_int16_t+0x7e>
 8011228:	1b5e      	subs	r6, r3, r5
 801122a:	60a3      	str	r3, [r4, #8]
 801122c:	6923      	ldr	r3, [r4, #16]
 801122e:	f1c6 0802 	rsb	r8, r6, #2
 8011232:	4433      	add	r3, r6
 8011234:	6123      	str	r3, [r4, #16]
 8011236:	4641      	mov	r1, r8
 8011238:	4620      	mov	r0, r4
 801123a:	f000 fa05 	bl	8011648 <ucdr_check_final_buffer_behavior>
 801123e:	2800      	cmp	r0, #0
 8011240:	d03b      	beq.n	80112ba <ucdr_serialize_int16_t+0xc2>
 8011242:	7d23      	ldrb	r3, [r4, #20]
 8011244:	2b01      	cmp	r3, #1
 8011246:	d04a      	beq.n	80112de <ucdr_serialize_int16_t+0xe6>
 8011248:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801124c:	702b      	strb	r3, [r5, #0]
 801124e:	2e00      	cmp	r6, #0
 8011250:	d040      	beq.n	80112d4 <ucdr_serialize_int16_t+0xdc>
 8011252:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011256:	706b      	strb	r3, [r5, #1]
 8011258:	6923      	ldr	r3, [r4, #16]
 801125a:	68a2      	ldr	r2, [r4, #8]
 801125c:	7da0      	ldrb	r0, [r4, #22]
 801125e:	3302      	adds	r3, #2
 8011260:	1b9e      	subs	r6, r3, r6
 8011262:	4442      	add	r2, r8
 8011264:	2302      	movs	r3, #2
 8011266:	f080 0001 	eor.w	r0, r0, #1
 801126a:	60a2      	str	r2, [r4, #8]
 801126c:	6126      	str	r6, [r4, #16]
 801126e:	7563      	strb	r3, [r4, #21]
 8011270:	b002      	add	sp, #8
 8011272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011276:	2102      	movs	r1, #2
 8011278:	4620      	mov	r0, r4
 801127a:	f000 f9e5 	bl	8011648 <ucdr_check_final_buffer_behavior>
 801127e:	b190      	cbz	r0, 80112a6 <ucdr_serialize_int16_t+0xae>
 8011280:	7d23      	ldrb	r3, [r4, #20]
 8011282:	2b01      	cmp	r3, #1
 8011284:	68a3      	ldr	r3, [r4, #8]
 8011286:	d014      	beq.n	80112b2 <ucdr_serialize_int16_t+0xba>
 8011288:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801128c:	701a      	strb	r2, [r3, #0]
 801128e:	68a3      	ldr	r3, [r4, #8]
 8011290:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011294:	705a      	strb	r2, [r3, #1]
 8011296:	68a2      	ldr	r2, [r4, #8]
 8011298:	6923      	ldr	r3, [r4, #16]
 801129a:	3202      	adds	r2, #2
 801129c:	3302      	adds	r3, #2
 801129e:	2102      	movs	r1, #2
 80112a0:	60a2      	str	r2, [r4, #8]
 80112a2:	6123      	str	r3, [r4, #16]
 80112a4:	7561      	strb	r1, [r4, #21]
 80112a6:	7da0      	ldrb	r0, [r4, #22]
 80112a8:	f080 0001 	eor.w	r0, r0, #1
 80112ac:	b002      	add	sp, #8
 80112ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80112b6:	801a      	strh	r2, [r3, #0]
 80112b8:	e7ed      	b.n	8011296 <ucdr_serialize_int16_t+0x9e>
 80112ba:	68a2      	ldr	r2, [r4, #8]
 80112bc:	6923      	ldr	r3, [r4, #16]
 80112be:	7da0      	ldrb	r0, [r4, #22]
 80112c0:	7567      	strb	r7, [r4, #21]
 80112c2:	1b92      	subs	r2, r2, r6
 80112c4:	1b9b      	subs	r3, r3, r6
 80112c6:	f080 0001 	eor.w	r0, r0, #1
 80112ca:	60a2      	str	r2, [r4, #8]
 80112cc:	6123      	str	r3, [r4, #16]
 80112ce:	b002      	add	sp, #8
 80112d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d4:	68a3      	ldr	r3, [r4, #8]
 80112d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80112da:	701a      	strb	r2, [r3, #0]
 80112dc:	e7bc      	b.n	8011258 <ucdr_serialize_int16_t+0x60>
 80112de:	4628      	mov	r0, r5
 80112e0:	f10d 0506 	add.w	r5, sp, #6
 80112e4:	4629      	mov	r1, r5
 80112e6:	4632      	mov	r2, r6
 80112e8:	f007 fac0 	bl	801886c <memcpy>
 80112ec:	68a0      	ldr	r0, [r4, #8]
 80112ee:	4642      	mov	r2, r8
 80112f0:	19a9      	adds	r1, r5, r6
 80112f2:	f007 fabb 	bl	801886c <memcpy>
 80112f6:	e7af      	b.n	8011258 <ucdr_serialize_int16_t+0x60>

080112f8 <ucdr_deserialize_int16_t>:
 80112f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112fc:	460d      	mov	r5, r1
 80112fe:	2102      	movs	r1, #2
 8011300:	4604      	mov	r4, r0
 8011302:	f000 f9f5 	bl	80116f0 <ucdr_buffer_alignment>
 8011306:	4601      	mov	r1, r0
 8011308:	4620      	mov	r0, r4
 801130a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801130e:	f000 fa33 	bl	8011778 <ucdr_advance_buffer>
 8011312:	2102      	movs	r1, #2
 8011314:	4620      	mov	r0, r4
 8011316:	f000 f98b 	bl	8011630 <ucdr_check_buffer_available_for>
 801131a:	bb60      	cbnz	r0, 8011376 <ucdr_deserialize_int16_t+0x7e>
 801131c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011320:	42be      	cmp	r6, r7
 8011322:	d923      	bls.n	801136c <ucdr_deserialize_int16_t+0x74>
 8011324:	6923      	ldr	r3, [r4, #16]
 8011326:	60a6      	str	r6, [r4, #8]
 8011328:	1bf6      	subs	r6, r6, r7
 801132a:	4433      	add	r3, r6
 801132c:	f1c6 0902 	rsb	r9, r6, #2
 8011330:	6123      	str	r3, [r4, #16]
 8011332:	4649      	mov	r1, r9
 8011334:	4620      	mov	r0, r4
 8011336:	f000 f987 	bl	8011648 <ucdr_check_final_buffer_behavior>
 801133a:	2800      	cmp	r0, #0
 801133c:	d034      	beq.n	80113a8 <ucdr_deserialize_int16_t+0xb0>
 801133e:	7d23      	ldrb	r3, [r4, #20]
 8011340:	2b01      	cmp	r3, #1
 8011342:	d042      	beq.n	80113ca <ucdr_deserialize_int16_t+0xd2>
 8011344:	787b      	ldrb	r3, [r7, #1]
 8011346:	702b      	strb	r3, [r5, #0]
 8011348:	2e00      	cmp	r6, #0
 801134a:	d03a      	beq.n	80113c2 <ucdr_deserialize_int16_t+0xca>
 801134c:	783b      	ldrb	r3, [r7, #0]
 801134e:	706b      	strb	r3, [r5, #1]
 8011350:	6923      	ldr	r3, [r4, #16]
 8011352:	68a2      	ldr	r2, [r4, #8]
 8011354:	7da0      	ldrb	r0, [r4, #22]
 8011356:	2102      	movs	r1, #2
 8011358:	3302      	adds	r3, #2
 801135a:	444a      	add	r2, r9
 801135c:	1b9b      	subs	r3, r3, r6
 801135e:	7561      	strb	r1, [r4, #21]
 8011360:	60a2      	str	r2, [r4, #8]
 8011362:	6123      	str	r3, [r4, #16]
 8011364:	f080 0001 	eor.w	r0, r0, #1
 8011368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801136c:	2102      	movs	r1, #2
 801136e:	4620      	mov	r0, r4
 8011370:	f000 f96a 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8011374:	b180      	cbz	r0, 8011398 <ucdr_deserialize_int16_t+0xa0>
 8011376:	7d23      	ldrb	r3, [r4, #20]
 8011378:	2b01      	cmp	r3, #1
 801137a:	68a3      	ldr	r3, [r4, #8]
 801137c:	d011      	beq.n	80113a2 <ucdr_deserialize_int16_t+0xaa>
 801137e:	785b      	ldrb	r3, [r3, #1]
 8011380:	702b      	strb	r3, [r5, #0]
 8011382:	68a3      	ldr	r3, [r4, #8]
 8011384:	781b      	ldrb	r3, [r3, #0]
 8011386:	706b      	strb	r3, [r5, #1]
 8011388:	68a2      	ldr	r2, [r4, #8]
 801138a:	6923      	ldr	r3, [r4, #16]
 801138c:	3202      	adds	r2, #2
 801138e:	3302      	adds	r3, #2
 8011390:	2102      	movs	r1, #2
 8011392:	60a2      	str	r2, [r4, #8]
 8011394:	6123      	str	r3, [r4, #16]
 8011396:	7561      	strb	r1, [r4, #21]
 8011398:	7da0      	ldrb	r0, [r4, #22]
 801139a:	f080 0001 	eor.w	r0, r0, #1
 801139e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113a2:	881b      	ldrh	r3, [r3, #0]
 80113a4:	802b      	strh	r3, [r5, #0]
 80113a6:	e7ef      	b.n	8011388 <ucdr_deserialize_int16_t+0x90>
 80113a8:	68a2      	ldr	r2, [r4, #8]
 80113aa:	6923      	ldr	r3, [r4, #16]
 80113ac:	7da0      	ldrb	r0, [r4, #22]
 80113ae:	f884 8015 	strb.w	r8, [r4, #21]
 80113b2:	1b92      	subs	r2, r2, r6
 80113b4:	1b9b      	subs	r3, r3, r6
 80113b6:	60a2      	str	r2, [r4, #8]
 80113b8:	6123      	str	r3, [r4, #16]
 80113ba:	f080 0001 	eor.w	r0, r0, #1
 80113be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113c2:	68a3      	ldr	r3, [r4, #8]
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	706b      	strb	r3, [r5, #1]
 80113c8:	e7c2      	b.n	8011350 <ucdr_deserialize_int16_t+0x58>
 80113ca:	4639      	mov	r1, r7
 80113cc:	4632      	mov	r2, r6
 80113ce:	4628      	mov	r0, r5
 80113d0:	f007 fa4c 	bl	801886c <memcpy>
 80113d4:	68a1      	ldr	r1, [r4, #8]
 80113d6:	464a      	mov	r2, r9
 80113d8:	19a8      	adds	r0, r5, r6
 80113da:	f007 fa47 	bl	801886c <memcpy>
 80113de:	e7b7      	b.n	8011350 <ucdr_deserialize_int16_t+0x58>

080113e0 <ucdr_serialize_int32_t>:
 80113e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113e4:	b082      	sub	sp, #8
 80113e6:	4604      	mov	r4, r0
 80113e8:	9101      	str	r1, [sp, #4]
 80113ea:	2104      	movs	r1, #4
 80113ec:	f000 f980 	bl	80116f0 <ucdr_buffer_alignment>
 80113f0:	4601      	mov	r1, r0
 80113f2:	4620      	mov	r0, r4
 80113f4:	7d67      	ldrb	r7, [r4, #21]
 80113f6:	f000 f9bf 	bl	8011778 <ucdr_advance_buffer>
 80113fa:	2104      	movs	r1, #4
 80113fc:	4620      	mov	r0, r4
 80113fe:	f000 f917 	bl	8011630 <ucdr_check_buffer_available_for>
 8011402:	2800      	cmp	r0, #0
 8011404:	d139      	bne.n	801147a <ucdr_serialize_int32_t+0x9a>
 8011406:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801140a:	42ab      	cmp	r3, r5
 801140c:	d930      	bls.n	8011470 <ucdr_serialize_int32_t+0x90>
 801140e:	1b5e      	subs	r6, r3, r5
 8011410:	60a3      	str	r3, [r4, #8]
 8011412:	6923      	ldr	r3, [r4, #16]
 8011414:	f1c6 0804 	rsb	r8, r6, #4
 8011418:	4433      	add	r3, r6
 801141a:	6123      	str	r3, [r4, #16]
 801141c:	4641      	mov	r1, r8
 801141e:	4620      	mov	r0, r4
 8011420:	f000 f912 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8011424:	2800      	cmp	r0, #0
 8011426:	d04c      	beq.n	80114c2 <ucdr_serialize_int32_t+0xe2>
 8011428:	7d23      	ldrb	r3, [r4, #20]
 801142a:	2b01      	cmp	r3, #1
 801142c:	d063      	beq.n	80114f6 <ucdr_serialize_int32_t+0x116>
 801142e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011432:	702b      	strb	r3, [r5, #0]
 8011434:	2e00      	cmp	r6, #0
 8011436:	d051      	beq.n	80114dc <ucdr_serialize_int32_t+0xfc>
 8011438:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801143c:	706b      	strb	r3, [r5, #1]
 801143e:	2e01      	cmp	r6, #1
 8011440:	d050      	beq.n	80114e4 <ucdr_serialize_int32_t+0x104>
 8011442:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011446:	70ab      	strb	r3, [r5, #2]
 8011448:	2e02      	cmp	r6, #2
 801144a:	d04f      	beq.n	80114ec <ucdr_serialize_int32_t+0x10c>
 801144c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011450:	70eb      	strb	r3, [r5, #3]
 8011452:	6923      	ldr	r3, [r4, #16]
 8011454:	68a2      	ldr	r2, [r4, #8]
 8011456:	7da0      	ldrb	r0, [r4, #22]
 8011458:	3304      	adds	r3, #4
 801145a:	1b9e      	subs	r6, r3, r6
 801145c:	4442      	add	r2, r8
 801145e:	2304      	movs	r3, #4
 8011460:	f080 0001 	eor.w	r0, r0, #1
 8011464:	60a2      	str	r2, [r4, #8]
 8011466:	6126      	str	r6, [r4, #16]
 8011468:	7563      	strb	r3, [r4, #21]
 801146a:	b002      	add	sp, #8
 801146c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011470:	2104      	movs	r1, #4
 8011472:	4620      	mov	r0, r4
 8011474:	f000 f8e8 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8011478:	b1d0      	cbz	r0, 80114b0 <ucdr_serialize_int32_t+0xd0>
 801147a:	7d23      	ldrb	r3, [r4, #20]
 801147c:	2b01      	cmp	r3, #1
 801147e:	68a3      	ldr	r3, [r4, #8]
 8011480:	d01c      	beq.n	80114bc <ucdr_serialize_int32_t+0xdc>
 8011482:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011486:	701a      	strb	r2, [r3, #0]
 8011488:	68a3      	ldr	r3, [r4, #8]
 801148a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801148e:	705a      	strb	r2, [r3, #1]
 8011490:	68a3      	ldr	r3, [r4, #8]
 8011492:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011496:	709a      	strb	r2, [r3, #2]
 8011498:	68a3      	ldr	r3, [r4, #8]
 801149a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801149e:	70da      	strb	r2, [r3, #3]
 80114a0:	68a2      	ldr	r2, [r4, #8]
 80114a2:	6923      	ldr	r3, [r4, #16]
 80114a4:	3204      	adds	r2, #4
 80114a6:	3304      	adds	r3, #4
 80114a8:	2104      	movs	r1, #4
 80114aa:	60a2      	str	r2, [r4, #8]
 80114ac:	6123      	str	r3, [r4, #16]
 80114ae:	7561      	strb	r1, [r4, #21]
 80114b0:	7da0      	ldrb	r0, [r4, #22]
 80114b2:	f080 0001 	eor.w	r0, r0, #1
 80114b6:	b002      	add	sp, #8
 80114b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114bc:	9a01      	ldr	r2, [sp, #4]
 80114be:	601a      	str	r2, [r3, #0]
 80114c0:	e7ee      	b.n	80114a0 <ucdr_serialize_int32_t+0xc0>
 80114c2:	68a2      	ldr	r2, [r4, #8]
 80114c4:	6923      	ldr	r3, [r4, #16]
 80114c6:	7da0      	ldrb	r0, [r4, #22]
 80114c8:	7567      	strb	r7, [r4, #21]
 80114ca:	1b92      	subs	r2, r2, r6
 80114cc:	1b9b      	subs	r3, r3, r6
 80114ce:	f080 0001 	eor.w	r0, r0, #1
 80114d2:	60a2      	str	r2, [r4, #8]
 80114d4:	6123      	str	r3, [r4, #16]
 80114d6:	b002      	add	sp, #8
 80114d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114dc:	68a3      	ldr	r3, [r4, #8]
 80114de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80114e2:	701a      	strb	r2, [r3, #0]
 80114e4:	68a3      	ldr	r3, [r4, #8]
 80114e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80114ea:	701a      	strb	r2, [r3, #0]
 80114ec:	68a3      	ldr	r3, [r4, #8]
 80114ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80114f2:	701a      	strb	r2, [r3, #0]
 80114f4:	e7ad      	b.n	8011452 <ucdr_serialize_int32_t+0x72>
 80114f6:	4628      	mov	r0, r5
 80114f8:	ad01      	add	r5, sp, #4
 80114fa:	4629      	mov	r1, r5
 80114fc:	4632      	mov	r2, r6
 80114fe:	f007 f9b5 	bl	801886c <memcpy>
 8011502:	68a0      	ldr	r0, [r4, #8]
 8011504:	4642      	mov	r2, r8
 8011506:	19a9      	adds	r1, r5, r6
 8011508:	f007 f9b0 	bl	801886c <memcpy>
 801150c:	e7a1      	b.n	8011452 <ucdr_serialize_int32_t+0x72>
 801150e:	bf00      	nop

08011510 <ucdr_deserialize_int32_t>:
 8011510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011514:	460d      	mov	r5, r1
 8011516:	2104      	movs	r1, #4
 8011518:	4604      	mov	r4, r0
 801151a:	f000 f8e9 	bl	80116f0 <ucdr_buffer_alignment>
 801151e:	4601      	mov	r1, r0
 8011520:	4620      	mov	r0, r4
 8011522:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011526:	f000 f927 	bl	8011778 <ucdr_advance_buffer>
 801152a:	2104      	movs	r1, #4
 801152c:	4620      	mov	r0, r4
 801152e:	f000 f87f 	bl	8011630 <ucdr_check_buffer_available_for>
 8011532:	2800      	cmp	r0, #0
 8011534:	d138      	bne.n	80115a8 <ucdr_deserialize_int32_t+0x98>
 8011536:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801153a:	42b7      	cmp	r7, r6
 801153c:	d92f      	bls.n	801159e <ucdr_deserialize_int32_t+0x8e>
 801153e:	6923      	ldr	r3, [r4, #16]
 8011540:	60a7      	str	r7, [r4, #8]
 8011542:	1bbf      	subs	r7, r7, r6
 8011544:	443b      	add	r3, r7
 8011546:	f1c7 0904 	rsb	r9, r7, #4
 801154a:	6123      	str	r3, [r4, #16]
 801154c:	4649      	mov	r1, r9
 801154e:	4620      	mov	r0, r4
 8011550:	f000 f87a 	bl	8011648 <ucdr_check_final_buffer_behavior>
 8011554:	2800      	cmp	r0, #0
 8011556:	d046      	beq.n	80115e6 <ucdr_deserialize_int32_t+0xd6>
 8011558:	7d23      	ldrb	r3, [r4, #20]
 801155a:	2b01      	cmp	r3, #1
 801155c:	d05c      	beq.n	8011618 <ucdr_deserialize_int32_t+0x108>
 801155e:	78f3      	ldrb	r3, [r6, #3]
 8011560:	702b      	strb	r3, [r5, #0]
 8011562:	2f00      	cmp	r7, #0
 8011564:	d04c      	beq.n	8011600 <ucdr_deserialize_int32_t+0xf0>
 8011566:	78b3      	ldrb	r3, [r6, #2]
 8011568:	706b      	strb	r3, [r5, #1]
 801156a:	2f01      	cmp	r7, #1
 801156c:	f105 0302 	add.w	r3, r5, #2
 8011570:	d04a      	beq.n	8011608 <ucdr_deserialize_int32_t+0xf8>
 8011572:	7873      	ldrb	r3, [r6, #1]
 8011574:	70ab      	strb	r3, [r5, #2]
 8011576:	2f02      	cmp	r7, #2
 8011578:	f105 0303 	add.w	r3, r5, #3
 801157c:	d048      	beq.n	8011610 <ucdr_deserialize_int32_t+0x100>
 801157e:	7833      	ldrb	r3, [r6, #0]
 8011580:	70eb      	strb	r3, [r5, #3]
 8011582:	6923      	ldr	r3, [r4, #16]
 8011584:	68a2      	ldr	r2, [r4, #8]
 8011586:	7da0      	ldrb	r0, [r4, #22]
 8011588:	2104      	movs	r1, #4
 801158a:	3304      	adds	r3, #4
 801158c:	444a      	add	r2, r9
 801158e:	1bdb      	subs	r3, r3, r7
 8011590:	7561      	strb	r1, [r4, #21]
 8011592:	60a2      	str	r2, [r4, #8]
 8011594:	6123      	str	r3, [r4, #16]
 8011596:	f080 0001 	eor.w	r0, r0, #1
 801159a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801159e:	2104      	movs	r1, #4
 80115a0:	4620      	mov	r0, r4
 80115a2:	f000 f851 	bl	8011648 <ucdr_check_final_buffer_behavior>
 80115a6:	b1b0      	cbz	r0, 80115d6 <ucdr_deserialize_int32_t+0xc6>
 80115a8:	7d23      	ldrb	r3, [r4, #20]
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	68a3      	ldr	r3, [r4, #8]
 80115ae:	d017      	beq.n	80115e0 <ucdr_deserialize_int32_t+0xd0>
 80115b0:	78db      	ldrb	r3, [r3, #3]
 80115b2:	702b      	strb	r3, [r5, #0]
 80115b4:	68a3      	ldr	r3, [r4, #8]
 80115b6:	789b      	ldrb	r3, [r3, #2]
 80115b8:	706b      	strb	r3, [r5, #1]
 80115ba:	68a3      	ldr	r3, [r4, #8]
 80115bc:	785b      	ldrb	r3, [r3, #1]
 80115be:	70ab      	strb	r3, [r5, #2]
 80115c0:	68a3      	ldr	r3, [r4, #8]
 80115c2:	781b      	ldrb	r3, [r3, #0]
 80115c4:	70eb      	strb	r3, [r5, #3]
 80115c6:	68a2      	ldr	r2, [r4, #8]
 80115c8:	6923      	ldr	r3, [r4, #16]
 80115ca:	3204      	adds	r2, #4
 80115cc:	3304      	adds	r3, #4
 80115ce:	2104      	movs	r1, #4
 80115d0:	60a2      	str	r2, [r4, #8]
 80115d2:	6123      	str	r3, [r4, #16]
 80115d4:	7561      	strb	r1, [r4, #21]
 80115d6:	7da0      	ldrb	r0, [r4, #22]
 80115d8:	f080 0001 	eor.w	r0, r0, #1
 80115dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	602b      	str	r3, [r5, #0]
 80115e4:	e7ef      	b.n	80115c6 <ucdr_deserialize_int32_t+0xb6>
 80115e6:	68a2      	ldr	r2, [r4, #8]
 80115e8:	6923      	ldr	r3, [r4, #16]
 80115ea:	7da0      	ldrb	r0, [r4, #22]
 80115ec:	f884 8015 	strb.w	r8, [r4, #21]
 80115f0:	1bd2      	subs	r2, r2, r7
 80115f2:	1bdb      	subs	r3, r3, r7
 80115f4:	60a2      	str	r2, [r4, #8]
 80115f6:	6123      	str	r3, [r4, #16]
 80115f8:	f080 0001 	eor.w	r0, r0, #1
 80115fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011600:	68a3      	ldr	r3, [r4, #8]
 8011602:	789b      	ldrb	r3, [r3, #2]
 8011604:	706b      	strb	r3, [r5, #1]
 8011606:	1cab      	adds	r3, r5, #2
 8011608:	68a2      	ldr	r2, [r4, #8]
 801160a:	7852      	ldrb	r2, [r2, #1]
 801160c:	f803 2b01 	strb.w	r2, [r3], #1
 8011610:	68a2      	ldr	r2, [r4, #8]
 8011612:	7812      	ldrb	r2, [r2, #0]
 8011614:	701a      	strb	r2, [r3, #0]
 8011616:	e7b4      	b.n	8011582 <ucdr_deserialize_int32_t+0x72>
 8011618:	4631      	mov	r1, r6
 801161a:	463a      	mov	r2, r7
 801161c:	4628      	mov	r0, r5
 801161e:	f007 f925 	bl	801886c <memcpy>
 8011622:	68a1      	ldr	r1, [r4, #8]
 8011624:	464a      	mov	r2, r9
 8011626:	19e8      	adds	r0, r5, r7
 8011628:	f007 f920 	bl	801886c <memcpy>
 801162c:	e7a9      	b.n	8011582 <ucdr_deserialize_int32_t+0x72>
 801162e:	bf00      	nop

08011630 <ucdr_check_buffer_available_for>:
 8011630:	7d83      	ldrb	r3, [r0, #22]
 8011632:	b93b      	cbnz	r3, 8011644 <ucdr_check_buffer_available_for+0x14>
 8011634:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8011638:	4419      	add	r1, r3
 801163a:	4288      	cmp	r0, r1
 801163c:	bf34      	ite	cc
 801163e:	2000      	movcc	r0, #0
 8011640:	2001      	movcs	r0, #1
 8011642:	4770      	bx	lr
 8011644:	2000      	movs	r0, #0
 8011646:	4770      	bx	lr

08011648 <ucdr_check_final_buffer_behavior>:
 8011648:	7d83      	ldrb	r3, [r0, #22]
 801164a:	b943      	cbnz	r3, 801165e <ucdr_check_final_buffer_behavior+0x16>
 801164c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8011650:	4291      	cmp	r1, r2
 8011652:	b510      	push	{r4, lr}
 8011654:	4604      	mov	r4, r0
 8011656:	d205      	bcs.n	8011664 <ucdr_check_final_buffer_behavior+0x1c>
 8011658:	2301      	movs	r3, #1
 801165a:	4618      	mov	r0, r3
 801165c:	bd10      	pop	{r4, pc}
 801165e:	2300      	movs	r3, #0
 8011660:	4618      	mov	r0, r3
 8011662:	4770      	bx	lr
 8011664:	6982      	ldr	r2, [r0, #24]
 8011666:	b13a      	cbz	r2, 8011678 <ucdr_check_final_buffer_behavior+0x30>
 8011668:	69c1      	ldr	r1, [r0, #28]
 801166a:	4790      	blx	r2
 801166c:	f080 0301 	eor.w	r3, r0, #1
 8011670:	b2db      	uxtb	r3, r3
 8011672:	75a0      	strb	r0, [r4, #22]
 8011674:	4618      	mov	r0, r3
 8011676:	bd10      	pop	{r4, pc}
 8011678:	2001      	movs	r0, #1
 801167a:	75a0      	strb	r0, [r4, #22]
 801167c:	e7fa      	b.n	8011674 <ucdr_check_final_buffer_behavior+0x2c>
 801167e:	bf00      	nop

08011680 <ucdr_set_on_full_buffer_callback>:
 8011680:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop

08011688 <ucdr_init_buffer_origin_offset_endian>:
 8011688:	b410      	push	{r4}
 801168a:	9c01      	ldr	r4, [sp, #4]
 801168c:	6001      	str	r1, [r0, #0]
 801168e:	440a      	add	r2, r1
 8011690:	6042      	str	r2, [r0, #4]
 8011692:	190a      	adds	r2, r1, r4
 8011694:	441c      	add	r4, r3
 8011696:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801169a:	6082      	str	r2, [r0, #8]
 801169c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80116a0:	7503      	strb	r3, [r0, #20]
 80116a2:	2200      	movs	r2, #0
 80116a4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80116a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116ac:	7542      	strb	r2, [r0, #21]
 80116ae:	7582      	strb	r2, [r0, #22]
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop

080116b4 <ucdr_init_buffer_origin_offset>:
 80116b4:	b510      	push	{r4, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	9c04      	ldr	r4, [sp, #16]
 80116ba:	9400      	str	r4, [sp, #0]
 80116bc:	2401      	movs	r4, #1
 80116be:	9401      	str	r4, [sp, #4]
 80116c0:	f7ff ffe2 	bl	8011688 <ucdr_init_buffer_origin_offset_endian>
 80116c4:	b002      	add	sp, #8
 80116c6:	bd10      	pop	{r4, pc}

080116c8 <ucdr_init_buffer_origin>:
 80116c8:	b510      	push	{r4, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	2400      	movs	r4, #0
 80116ce:	9400      	str	r4, [sp, #0]
 80116d0:	f7ff fff0 	bl	80116b4 <ucdr_init_buffer_origin_offset>
 80116d4:	b002      	add	sp, #8
 80116d6:	bd10      	pop	{r4, pc}

080116d8 <ucdr_init_buffer>:
 80116d8:	2300      	movs	r3, #0
 80116da:	f7ff bff5 	b.w	80116c8 <ucdr_init_buffer_origin>
 80116de:	bf00      	nop

080116e0 <ucdr_alignment>:
 80116e0:	fbb0 f3f1 	udiv	r3, r0, r1
 80116e4:	fb03 0011 	mls	r0, r3, r1, r0
 80116e8:	1a08      	subs	r0, r1, r0
 80116ea:	3901      	subs	r1, #1
 80116ec:	4008      	ands	r0, r1
 80116ee:	4770      	bx	lr

080116f0 <ucdr_buffer_alignment>:
 80116f0:	7d43      	ldrb	r3, [r0, #21]
 80116f2:	428b      	cmp	r3, r1
 80116f4:	d208      	bcs.n	8011708 <ucdr_buffer_alignment+0x18>
 80116f6:	6900      	ldr	r0, [r0, #16]
 80116f8:	fbb0 f3f1 	udiv	r3, r0, r1
 80116fc:	fb01 0013 	mls	r0, r1, r3, r0
 8011700:	1a08      	subs	r0, r1, r0
 8011702:	3901      	subs	r1, #1
 8011704:	4008      	ands	r0, r1
 8011706:	4770      	bx	lr
 8011708:	2000      	movs	r0, #0
 801170a:	4770      	bx	lr

0801170c <ucdr_align_to>:
 801170c:	b538      	push	{r3, r4, r5, lr}
 801170e:	4604      	mov	r4, r0
 8011710:	460d      	mov	r5, r1
 8011712:	f7ff ffed 	bl	80116f0 <ucdr_buffer_alignment>
 8011716:	68a3      	ldr	r3, [r4, #8]
 8011718:	6921      	ldr	r1, [r4, #16]
 801171a:	7565      	strb	r5, [r4, #21]
 801171c:	181a      	adds	r2, r3, r0
 801171e:	6863      	ldr	r3, [r4, #4]
 8011720:	4293      	cmp	r3, r2
 8011722:	4408      	add	r0, r1
 8011724:	bf28      	it	cs
 8011726:	4613      	movcs	r3, r2
 8011728:	6120      	str	r0, [r4, #16]
 801172a:	60a3      	str	r3, [r4, #8]
 801172c:	bd38      	pop	{r3, r4, r5, pc}
 801172e:	bf00      	nop

08011730 <ucdr_buffer_length>:
 8011730:	6882      	ldr	r2, [r0, #8]
 8011732:	6800      	ldr	r0, [r0, #0]
 8011734:	1a10      	subs	r0, r2, r0
 8011736:	4770      	bx	lr

08011738 <ucdr_buffer_remaining>:
 8011738:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801173c:	1a10      	subs	r0, r2, r0
 801173e:	4770      	bx	lr

08011740 <ucdr_check_final_buffer_behavior_array>:
 8011740:	b538      	push	{r3, r4, r5, lr}
 8011742:	7d83      	ldrb	r3, [r0, #22]
 8011744:	b963      	cbnz	r3, 8011760 <ucdr_check_final_buffer_behavior_array+0x20>
 8011746:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801174a:	429a      	cmp	r2, r3
 801174c:	4604      	mov	r4, r0
 801174e:	460d      	mov	r5, r1
 8011750:	d308      	bcc.n	8011764 <ucdr_check_final_buffer_behavior_array+0x24>
 8011752:	b139      	cbz	r1, 8011764 <ucdr_check_final_buffer_behavior_array+0x24>
 8011754:	6983      	ldr	r3, [r0, #24]
 8011756:	b163      	cbz	r3, 8011772 <ucdr_check_final_buffer_behavior_array+0x32>
 8011758:	69c1      	ldr	r1, [r0, #28]
 801175a:	4798      	blx	r3
 801175c:	75a0      	strb	r0, [r4, #22]
 801175e:	b108      	cbz	r0, 8011764 <ucdr_check_final_buffer_behavior_array+0x24>
 8011760:	2000      	movs	r0, #0
 8011762:	bd38      	pop	{r3, r4, r5, pc}
 8011764:	4620      	mov	r0, r4
 8011766:	f7ff ffe7 	bl	8011738 <ucdr_buffer_remaining>
 801176a:	42a8      	cmp	r0, r5
 801176c:	bf28      	it	cs
 801176e:	4628      	movcs	r0, r5
 8011770:	bd38      	pop	{r3, r4, r5, pc}
 8011772:	2301      	movs	r3, #1
 8011774:	7583      	strb	r3, [r0, #22]
 8011776:	e7f3      	b.n	8011760 <ucdr_check_final_buffer_behavior_array+0x20>

08011778 <ucdr_advance_buffer>:
 8011778:	b538      	push	{r3, r4, r5, lr}
 801177a:	4604      	mov	r4, r0
 801177c:	460d      	mov	r5, r1
 801177e:	f7ff ff57 	bl	8011630 <ucdr_check_buffer_available_for>
 8011782:	b178      	cbz	r0, 80117a4 <ucdr_advance_buffer+0x2c>
 8011784:	6923      	ldr	r3, [r4, #16]
 8011786:	68a2      	ldr	r2, [r4, #8]
 8011788:	442b      	add	r3, r5
 801178a:	6123      	str	r3, [r4, #16]
 801178c:	2301      	movs	r3, #1
 801178e:	442a      	add	r2, r5
 8011790:	7563      	strb	r3, [r4, #21]
 8011792:	60a2      	str	r2, [r4, #8]
 8011794:	bd38      	pop	{r3, r4, r5, pc}
 8011796:	68a2      	ldr	r2, [r4, #8]
 8011798:	6923      	ldr	r3, [r4, #16]
 801179a:	4402      	add	r2, r0
 801179c:	4403      	add	r3, r0
 801179e:	1a2d      	subs	r5, r5, r0
 80117a0:	60a2      	str	r2, [r4, #8]
 80117a2:	6123      	str	r3, [r4, #16]
 80117a4:	4629      	mov	r1, r5
 80117a6:	2201      	movs	r2, #1
 80117a8:	4620      	mov	r0, r4
 80117aa:	f7ff ffc9 	bl	8011740 <ucdr_check_final_buffer_behavior_array>
 80117ae:	2800      	cmp	r0, #0
 80117b0:	d1f1      	bne.n	8011796 <ucdr_advance_buffer+0x1e>
 80117b2:	2301      	movs	r3, #1
 80117b4:	7563      	strb	r3, [r4, #21]
 80117b6:	bd38      	pop	{r3, r4, r5, pc}

080117b8 <uxr_buffer_delete_entity>:
 80117b8:	b510      	push	{r4, lr}
 80117ba:	2300      	movs	r3, #0
 80117bc:	b08e      	sub	sp, #56	; 0x38
 80117be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80117c2:	2303      	movs	r3, #3
 80117c4:	9300      	str	r3, [sp, #0]
 80117c6:	2204      	movs	r2, #4
 80117c8:	ab06      	add	r3, sp, #24
 80117ca:	4604      	mov	r4, r0
 80117cc:	9103      	str	r1, [sp, #12]
 80117ce:	f001 f86f 	bl	80128b0 <uxr_prepare_stream_to_write_submessage>
 80117d2:	b918      	cbnz	r0, 80117dc <uxr_buffer_delete_entity+0x24>
 80117d4:	4604      	mov	r4, r0
 80117d6:	4620      	mov	r0, r4
 80117d8:	b00e      	add	sp, #56	; 0x38
 80117da:	bd10      	pop	{r4, pc}
 80117dc:	9902      	ldr	r1, [sp, #8]
 80117de:	aa05      	add	r2, sp, #20
 80117e0:	4620      	mov	r0, r4
 80117e2:	f001 f99b 	bl	8012b1c <uxr_init_base_object_request>
 80117e6:	a905      	add	r1, sp, #20
 80117e8:	4604      	mov	r4, r0
 80117ea:	a806      	add	r0, sp, #24
 80117ec:	f002 fb00 	bl	8013df0 <uxr_serialize_DELETE_Payload>
 80117f0:	4620      	mov	r0, r4
 80117f2:	b00e      	add	sp, #56	; 0x38
 80117f4:	bd10      	pop	{r4, pc}
 80117f6:	bf00      	nop

080117f8 <uxr_common_create_entity>:
 80117f8:	b510      	push	{r4, lr}
 80117fa:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80117fe:	b08c      	sub	sp, #48	; 0x30
 8011800:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011804:	f1bc 0f01 	cmp.w	ip, #1
 8011808:	bf0c      	ite	eq
 801180a:	f003 0201 	andeq.w	r2, r3, #1
 801180e:	2200      	movne	r2, #0
 8011810:	330e      	adds	r3, #14
 8011812:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8011816:	9101      	str	r1, [sp, #4]
 8011818:	441a      	add	r2, r3
 801181a:	2301      	movs	r3, #1
 801181c:	9300      	str	r3, [sp, #0]
 801181e:	9903      	ldr	r1, [sp, #12]
 8011820:	ab04      	add	r3, sp, #16
 8011822:	b292      	uxth	r2, r2
 8011824:	4604      	mov	r4, r0
 8011826:	f001 f843 	bl	80128b0 <uxr_prepare_stream_to_write_submessage>
 801182a:	b918      	cbnz	r0, 8011834 <uxr_common_create_entity+0x3c>
 801182c:	4604      	mov	r4, r0
 801182e:	4620      	mov	r0, r4
 8011830:	b00c      	add	sp, #48	; 0x30
 8011832:	bd10      	pop	{r4, pc}
 8011834:	9902      	ldr	r1, [sp, #8]
 8011836:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011838:	4620      	mov	r0, r4
 801183a:	f001 f96f 	bl	8012b1c <uxr_init_base_object_request>
 801183e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011840:	4604      	mov	r4, r0
 8011842:	a804      	add	r0, sp, #16
 8011844:	f002 fa30 	bl	8013ca8 <uxr_serialize_CREATE_Payload>
 8011848:	4620      	mov	r0, r4
 801184a:	b00c      	add	sp, #48	; 0x30
 801184c:	bd10      	pop	{r4, pc}
 801184e:	bf00      	nop

08011850 <uxr_buffer_create_participant_bin>:
 8011850:	b570      	push	{r4, r5, r6, lr}
 8011852:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8011856:	ac11      	add	r4, sp, #68	; 0x44
 8011858:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 801185c:	2303      	movs	r3, #3
 801185e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011862:	7223      	strb	r3, [r4, #8]
 8011864:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8011866:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 801186a:	2201      	movs	r2, #1
 801186c:	2100      	movs	r1, #0
 801186e:	4605      	mov	r5, r0
 8011870:	7122      	strb	r2, [r4, #4]
 8011872:	f88d 1014 	strb.w	r1, [sp, #20]
 8011876:	b1cb      	cbz	r3, 80118ac <uxr_buffer_create_participant_bin+0x5c>
 8011878:	f88d 201c 	strb.w	r2, [sp, #28]
 801187c:	9308      	str	r3, [sp, #32]
 801187e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011882:	a915      	add	r1, sp, #84	; 0x54
 8011884:	a809      	add	r0, sp, #36	; 0x24
 8011886:	f7ff ff27 	bl	80116d8 <ucdr_init_buffer>
 801188a:	a905      	add	r1, sp, #20
 801188c:	a809      	add	r0, sp, #36	; 0x24
 801188e:	f001 fed9 	bl	8013644 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011894:	9600      	str	r6, [sp, #0]
 8011896:	9401      	str	r4, [sp, #4]
 8011898:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801189c:	60e3      	str	r3, [r4, #12]
 801189e:	4628      	mov	r0, r5
 80118a0:	b29b      	uxth	r3, r3
 80118a2:	f7ff ffa9 	bl	80117f8 <uxr_common_create_entity>
 80118a6:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 80118aa:	bd70      	pop	{r4, r5, r6, pc}
 80118ac:	f88d 301c 	strb.w	r3, [sp, #28]
 80118b0:	e7e5      	b.n	801187e <uxr_buffer_create_participant_bin+0x2e>
 80118b2:	bf00      	nop

080118b4 <uxr_buffer_create_topic_bin>:
 80118b4:	b570      	push	{r4, r5, r6, lr}
 80118b6:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 80118ba:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80118be:	9105      	str	r1, [sp, #20]
 80118c0:	4605      	mov	r5, r0
 80118c2:	a997      	add	r1, sp, #604	; 0x25c
 80118c4:	4618      	mov	r0, r3
 80118c6:	2302      	movs	r3, #2
 80118c8:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 80118cc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 80118d0:	f000 f8ee 	bl	8011ab0 <uxr_object_id_to_raw>
 80118d4:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 80118d6:	9306      	str	r3, [sp, #24]
 80118d8:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 80118da:	930a      	str	r3, [sp, #40]	; 0x28
 80118dc:	2303      	movs	r3, #3
 80118de:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80118e2:	2301      	movs	r3, #1
 80118e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80118e8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80118ec:	a917      	add	r1, sp, #92	; 0x5c
 80118ee:	2300      	movs	r3, #0
 80118f0:	a80b      	add	r0, sp, #44	; 0x2c
 80118f2:	f88d 301c 	strb.w	r3, [sp, #28]
 80118f6:	f7ff feef 	bl	80116d8 <ucdr_init_buffer>
 80118fa:	a906      	add	r1, sp, #24
 80118fc:	a80b      	add	r0, sp, #44	; 0x2c
 80118fe:	f001 fec3 	bl	8013688 <uxr_serialize_OBJK_Topic_Binary>
 8011902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011904:	9316      	str	r3, [sp, #88]	; 0x58
 8011906:	ac13      	add	r4, sp, #76	; 0x4c
 8011908:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801190c:	9600      	str	r6, [sp, #0]
 801190e:	9401      	str	r4, [sp, #4]
 8011910:	b29b      	uxth	r3, r3
 8011912:	4628      	mov	r0, r5
 8011914:	f7ff ff70 	bl	80117f8 <uxr_common_create_entity>
 8011918:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 801191c:	bd70      	pop	{r4, r5, r6, pc}
 801191e:	bf00      	nop

08011920 <uxr_buffer_create_publisher_bin>:
 8011920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011922:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011926:	4605      	mov	r5, r0
 8011928:	9105      	str	r1, [sp, #20]
 801192a:	4618      	mov	r0, r3
 801192c:	2603      	movs	r6, #3
 801192e:	a992      	add	r1, sp, #584	; 0x248
 8011930:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011934:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011938:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801193c:	f000 f8b8 	bl	8011ab0 <uxr_object_id_to_raw>
 8011940:	2300      	movs	r3, #0
 8011942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011946:	a912      	add	r1, sp, #72	; 0x48
 8011948:	a806      	add	r0, sp, #24
 801194a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 801194e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011952:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8011956:	f7ff febf 	bl	80116d8 <ucdr_init_buffer>
 801195a:	a993      	add	r1, sp, #588	; 0x24c
 801195c:	a806      	add	r0, sp, #24
 801195e:	f001 ff47 	bl	80137f0 <uxr_serialize_OBJK_Publisher_Binary>
 8011962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011964:	9311      	str	r3, [sp, #68]	; 0x44
 8011966:	ac0e      	add	r4, sp, #56	; 0x38
 8011968:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801196c:	9700      	str	r7, [sp, #0]
 801196e:	9401      	str	r4, [sp, #4]
 8011970:	b29b      	uxth	r3, r3
 8011972:	4628      	mov	r0, r5
 8011974:	f7ff ff40 	bl	80117f8 <uxr_common_create_entity>
 8011978:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801197c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801197e:	bf00      	nop

08011980 <uxr_buffer_create_datawriter_bin>:
 8011980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011984:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011988:	ac1d      	add	r4, sp, #116	; 0x74
 801198a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801198e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8011992:	9105      	str	r1, [sp, #20]
 8011994:	4606      	mov	r6, r0
 8011996:	a9a1      	add	r1, sp, #644	; 0x284
 8011998:	4618      	mov	r0, r3
 801199a:	2305      	movs	r3, #5
 801199c:	7123      	strb	r3, [r4, #4]
 801199e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 80119a2:	2703      	movs	r7, #3
 80119a4:	f000 f884 	bl	8011ab0 <uxr_object_id_to_raw>
 80119a8:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 80119aa:	7227      	strb	r7, [r4, #8]
 80119ac:	a90e      	add	r1, sp, #56	; 0x38
 80119ae:	f000 f87f 	bl	8011ab0 <uxr_object_id_to_raw>
 80119b2:	2300      	movs	r3, #0
 80119b4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 80119b8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 80119bc:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80119c0:	3d00      	subs	r5, #0
 80119c2:	bf18      	it	ne
 80119c4:	2501      	movne	r5, #1
 80119c6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80119ca:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80119ce:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80119d2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80119d6:	2301      	movs	r3, #1
 80119d8:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 80119dc:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80119e0:	bb8a      	cbnz	r2, 8011a46 <uxr_buffer_create_datawriter_bin+0xc6>
 80119e2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80119e6:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80119ea:	f04f 0c13 	mov.w	ip, #19
 80119ee:	250b      	movs	r5, #11
 80119f0:	2221      	movs	r2, #33	; 0x21
 80119f2:	2111      	movs	r1, #17
 80119f4:	2009      	movs	r0, #9
 80119f6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 80119fa:	b923      	cbnz	r3, 8011a06 <uxr_buffer_create_datawriter_bin+0x86>
 80119fc:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011a00:	4672      	mov	r2, lr
 8011a02:	4661      	mov	r1, ip
 8011a04:	4628      	mov	r0, r5
 8011a06:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8011a0a:	2b01      	cmp	r3, #1
 8011a0c:	d025      	beq.n	8011a5a <uxr_buffer_create_datawriter_bin+0xda>
 8011a0e:	2b03      	cmp	r3, #3
 8011a10:	d029      	beq.n	8011a66 <uxr_buffer_create_datawriter_bin+0xe6>
 8011a12:	b32b      	cbz	r3, 8011a60 <uxr_buffer_create_datawriter_bin+0xe0>
 8011a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a18:	a921      	add	r1, sp, #132	; 0x84
 8011a1a:	a806      	add	r0, sp, #24
 8011a1c:	f7ff fe5c 	bl	80116d8 <ucdr_init_buffer>
 8011a20:	a90e      	add	r1, sp, #56	; 0x38
 8011a22:	a806      	add	r0, sp, #24
 8011a24:	f001 ff5a 	bl	80138dc <uxr_serialize_OBJK_DataWriter_Binary>
 8011a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a2a:	f8cd 8000 	str.w	r8, [sp]
 8011a2e:	9401      	str	r4, [sp, #4]
 8011a30:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011a34:	60e3      	str	r3, [r4, #12]
 8011a36:	4630      	mov	r0, r6
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	f7ff fedd 	bl	80117f8 <uxr_common_create_entity>
 8011a3e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a46:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011a4a:	f04f 0c12 	mov.w	ip, #18
 8011a4e:	250a      	movs	r5, #10
 8011a50:	2220      	movs	r2, #32
 8011a52:	2110      	movs	r1, #16
 8011a54:	2008      	movs	r0, #8
 8011a56:	2702      	movs	r7, #2
 8011a58:	e7cd      	b.n	80119f6 <uxr_buffer_create_datawriter_bin+0x76>
 8011a5a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011a5e:	e7d9      	b.n	8011a14 <uxr_buffer_create_datawriter_bin+0x94>
 8011a60:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011a64:	e7d6      	b.n	8011a14 <uxr_buffer_create_datawriter_bin+0x94>
 8011a66:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011a6a:	e7d3      	b.n	8011a14 <uxr_buffer_create_datawriter_bin+0x94>

08011a6c <uxr_object_id>:
 8011a6c:	b082      	sub	sp, #8
 8011a6e:	2300      	movs	r3, #0
 8011a70:	f88d 1006 	strb.w	r1, [sp, #6]
 8011a74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011a78:	f360 030f 	bfi	r3, r0, #0, #16
 8011a7c:	f362 431f 	bfi	r3, r2, #16, #16
 8011a80:	4618      	mov	r0, r3
 8011a82:	b002      	add	sp, #8
 8011a84:	4770      	bx	lr
 8011a86:	bf00      	nop

08011a88 <uxr_object_id_from_raw>:
 8011a88:	7843      	ldrb	r3, [r0, #1]
 8011a8a:	7801      	ldrb	r1, [r0, #0]
 8011a8c:	b082      	sub	sp, #8
 8011a8e:	f003 020f 	and.w	r2, r3, #15
 8011a92:	f88d 2006 	strb.w	r2, [sp, #6]
 8011a96:	091b      	lsrs	r3, r3, #4
 8011a98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011a9c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011aa0:	2000      	movs	r0, #0
 8011aa2:	f363 000f 	bfi	r0, r3, #0, #16
 8011aa6:	f362 401f 	bfi	r0, r2, #16, #16
 8011aaa:	b002      	add	sp, #8
 8011aac:	4770      	bx	lr
 8011aae:	bf00      	nop

08011ab0 <uxr_object_id_to_raw>:
 8011ab0:	4602      	mov	r2, r0
 8011ab2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8011abc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8011ac0:	f881 c000 	strb.w	ip, [r1]
 8011ac4:	7048      	strb	r0, [r1, #1]
 8011ac6:	b002      	add	sp, #8
 8011ac8:	4770      	bx	lr
 8011aca:	bf00      	nop

08011acc <on_get_fragmentation_info>:
 8011acc:	b500      	push	{lr}
 8011ace:	b08b      	sub	sp, #44	; 0x2c
 8011ad0:	4601      	mov	r1, r0
 8011ad2:	2204      	movs	r2, #4
 8011ad4:	a802      	add	r0, sp, #8
 8011ad6:	f7ff fdff 	bl	80116d8 <ucdr_init_buffer>
 8011ada:	f10d 0305 	add.w	r3, sp, #5
 8011ade:	f10d 0206 	add.w	r2, sp, #6
 8011ae2:	a901      	add	r1, sp, #4
 8011ae4:	a802      	add	r0, sp, #8
 8011ae6:	f001 f99b 	bl	8012e20 <uxr_read_submessage_header>
 8011aea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011aee:	2b0d      	cmp	r3, #13
 8011af0:	d003      	beq.n	8011afa <on_get_fragmentation_info+0x2e>
 8011af2:	2000      	movs	r0, #0
 8011af4:	b00b      	add	sp, #44	; 0x2c
 8011af6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011afa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011afe:	f013 0f02 	tst.w	r3, #2
 8011b02:	bf14      	ite	ne
 8011b04:	2002      	movne	r0, #2
 8011b06:	2001      	moveq	r0, #1
 8011b08:	b00b      	add	sp, #44	; 0x2c
 8011b0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b0e:	bf00      	nop

08011b10 <read_submessage_get_info>:
 8011b10:	b570      	push	{r4, r5, r6, lr}
 8011b12:	2500      	movs	r5, #0
 8011b14:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8011b18:	4604      	mov	r4, r0
 8011b1a:	f44f 7224 	mov.w	r2, #656	; 0x290
 8011b1e:	460e      	mov	r6, r1
 8011b20:	a810      	add	r0, sp, #64	; 0x40
 8011b22:	4629      	mov	r1, r5
 8011b24:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8011b28:	f006 feae 	bl	8018888 <memset>
 8011b2c:	a903      	add	r1, sp, #12
 8011b2e:	4630      	mov	r0, r6
 8011b30:	f002 f94a 	bl	8013dc8 <uxr_deserialize_GET_INFO_Payload>
 8011b34:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011b38:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	f000 ffe5 	bl	8012b0c <uxr_session_header_offset>
 8011b42:	462b      	mov	r3, r5
 8011b44:	9000      	str	r0, [sp, #0]
 8011b46:	220c      	movs	r2, #12
 8011b48:	a905      	add	r1, sp, #20
 8011b4a:	a808      	add	r0, sp, #32
 8011b4c:	f7ff fdb2 	bl	80116b4 <ucdr_init_buffer_origin_offset>
 8011b50:	a910      	add	r1, sp, #64	; 0x40
 8011b52:	a808      	add	r0, sp, #32
 8011b54:	f002 f9aa 	bl	8013eac <uxr_serialize_INFO_Payload>
 8011b58:	9b08      	ldr	r3, [sp, #32]
 8011b5a:	462a      	mov	r2, r5
 8011b5c:	4629      	mov	r1, r5
 8011b5e:	4620      	mov	r0, r4
 8011b60:	f000 ff7e 	bl	8012a60 <uxr_stamp_session_header>
 8011b64:	a808      	add	r0, sp, #32
 8011b66:	f7ff fde3 	bl	8011730 <ucdr_buffer_length>
 8011b6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011b6c:	4602      	mov	r2, r0
 8011b6e:	a905      	add	r1, sp, #20
 8011b70:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011b74:	47a0      	blx	r4
 8011b76:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8011b7a:	bd70      	pop	{r4, r5, r6, pc}

08011b7c <write_submessage_acknack.isra.0>:
 8011b7c:	b570      	push	{r4, r5, r6, lr}
 8011b7e:	b092      	sub	sp, #72	; 0x48
 8011b80:	4605      	mov	r5, r0
 8011b82:	460e      	mov	r6, r1
 8011b84:	4614      	mov	r4, r2
 8011b86:	f000 ffc1 	bl	8012b0c <uxr_session_header_offset>
 8011b8a:	a905      	add	r1, sp, #20
 8011b8c:	9000      	str	r0, [sp, #0]
 8011b8e:	2300      	movs	r3, #0
 8011b90:	a80a      	add	r0, sp, #40	; 0x28
 8011b92:	2211      	movs	r2, #17
 8011b94:	f7ff fd8e 	bl	80116b4 <ucdr_init_buffer_origin_offset>
 8011b98:	2218      	movs	r2, #24
 8011b9a:	fb02 5404 	mla	r4, r2, r4, r5
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	2205      	movs	r2, #5
 8011ba2:	3450      	adds	r4, #80	; 0x50
 8011ba4:	210a      	movs	r1, #10
 8011ba6:	a80a      	add	r0, sp, #40	; 0x28
 8011ba8:	f001 f920 	bl	8012dec <uxr_buffer_submessage_header>
 8011bac:	a903      	add	r1, sp, #12
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f004 ff32 	bl	8016a18 <uxr_compute_acknack>
 8011bb4:	ba40      	rev16	r0, r0
 8011bb6:	f8ad 000e 	strh.w	r0, [sp, #14]
 8011bba:	a903      	add	r1, sp, #12
 8011bbc:	a80a      	add	r0, sp, #40	; 0x28
 8011bbe:	f88d 6010 	strb.w	r6, [sp, #16]
 8011bc2:	f002 f9e3 	bl	8013f8c <uxr_serialize_ACKNACK_Payload>
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bca:	4611      	mov	r1, r2
 8011bcc:	4628      	mov	r0, r5
 8011bce:	f000 ff47 	bl	8012a60 <uxr_stamp_session_header>
 8011bd2:	a80a      	add	r0, sp, #40	; 0x28
 8011bd4:	f7ff fdac 	bl	8011730 <ucdr_buffer_length>
 8011bd8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8011bda:	4602      	mov	r2, r0
 8011bdc:	a905      	add	r1, sp, #20
 8011bde:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011be2:	47a0      	blx	r4
 8011be4:	b012      	add	sp, #72	; 0x48
 8011be6:	bd70      	pop	{r4, r5, r6, pc}

08011be8 <uxr_init_session>:
 8011be8:	b510      	push	{r4, lr}
 8011bea:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8011c20 <uxr_init_session+0x38>
 8011bee:	2300      	movs	r3, #0
 8011bf0:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8011bf4:	4604      	mov	r4, r0
 8011bf6:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8011bfa:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8011bfe:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8011c02:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8011c06:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8011c0a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8011c0e:	2181      	movs	r1, #129	; 0x81
 8011c10:	f000 fe92 	bl	8012938 <uxr_init_session_info>
 8011c14:	f104 0008 	add.w	r0, r4, #8
 8011c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c1c:	f001 b802 	b.w	8012c24 <uxr_init_stream_storage>
	...

08011c28 <uxr_set_status_callback>:
 8011c28:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8011c2c:	4770      	bx	lr
 8011c2e:	bf00      	nop

08011c30 <uxr_set_topic_callback>:
 8011c30:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop

08011c38 <uxr_set_request_callback>:
 8011c38:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8011c3c:	4770      	bx	lr
 8011c3e:	bf00      	nop

08011c40 <uxr_set_reply_callback>:
 8011c40:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8011c44:	4770      	bx	lr
 8011c46:	bf00      	nop

08011c48 <uxr_create_output_best_effort_stream>:
 8011c48:	b510      	push	{r4, lr}
 8011c4a:	b084      	sub	sp, #16
 8011c4c:	e9cd 2100 	strd	r2, r1, [sp]
 8011c50:	4604      	mov	r4, r0
 8011c52:	f000 ff5b 	bl	8012b0c <uxr_session_header_offset>
 8011c56:	e9dd 2100 	ldrd	r2, r1, [sp]
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	f104 0008 	add.w	r0, r4, #8
 8011c60:	b004      	add	sp, #16
 8011c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c66:	f001 b827 	b.w	8012cb8 <uxr_add_output_best_effort_buffer>
 8011c6a:	bf00      	nop

08011c6c <uxr_create_output_reliable_stream>:
 8011c6c:	b510      	push	{r4, lr}
 8011c6e:	b088      	sub	sp, #32
 8011c70:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011c74:	4604      	mov	r4, r0
 8011c76:	9303      	str	r3, [sp, #12]
 8011c78:	f000 ff48 	bl	8012b0c <uxr_session_header_offset>
 8011c7c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011c80:	9000      	str	r0, [sp, #0]
 8011c82:	9905      	ldr	r1, [sp, #20]
 8011c84:	f104 0008 	add.w	r0, r4, #8
 8011c88:	f001 f82a 	bl	8012ce0 <uxr_add_output_reliable_buffer>
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	b2c3      	uxtb	r3, r0
 8011c90:	f363 0207 	bfi	r2, r3, #0, #8
 8011c94:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011c98:	f363 220f 	bfi	r2, r3, #8, #8
 8011c9c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011ca0:	f363 4217 	bfi	r2, r3, #16, #8
 8011ca4:	0e03      	lsrs	r3, r0, #24
 8011ca6:	f363 621f 	bfi	r2, r3, #24, #8
 8011caa:	4610      	mov	r0, r2
 8011cac:	b008      	add	sp, #32
 8011cae:	bd10      	pop	{r4, pc}

08011cb0 <uxr_create_input_best_effort_stream>:
 8011cb0:	b082      	sub	sp, #8
 8011cb2:	3008      	adds	r0, #8
 8011cb4:	b002      	add	sp, #8
 8011cb6:	f001 b82d 	b.w	8012d14 <uxr_add_input_best_effort_buffer>
 8011cba:	bf00      	nop

08011cbc <uxr_create_input_reliable_stream>:
 8011cbc:	b510      	push	{r4, lr}
 8011cbe:	b084      	sub	sp, #16
 8011cc0:	4c0b      	ldr	r4, [pc, #44]	; (8011cf0 <uxr_create_input_reliable_stream+0x34>)
 8011cc2:	9400      	str	r4, [sp, #0]
 8011cc4:	3008      	adds	r0, #8
 8011cc6:	f001 f83b 	bl	8012d40 <uxr_add_input_reliable_buffer>
 8011cca:	2200      	movs	r2, #0
 8011ccc:	b2c3      	uxtb	r3, r0
 8011cce:	f363 0207 	bfi	r2, r3, #0, #8
 8011cd2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011cd6:	f363 220f 	bfi	r2, r3, #8, #8
 8011cda:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011cde:	f363 4217 	bfi	r2, r3, #16, #8
 8011ce2:	0e03      	lsrs	r3, r0, #24
 8011ce4:	f363 621f 	bfi	r2, r3, #24, #8
 8011ce8:	4610      	mov	r0, r2
 8011cea:	b004      	add	sp, #16
 8011cec:	bd10      	pop	{r4, pc}
 8011cee:	bf00      	nop
 8011cf0:	08011acd 	.word	0x08011acd

08011cf4 <uxr_epoch_nanos>:
 8011cf4:	b510      	push	{r4, lr}
 8011cf6:	4604      	mov	r4, r0
 8011cf8:	f001 f8d8 	bl	8012eac <uxr_nanos>
 8011cfc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8011d00:	1ac0      	subs	r0, r0, r3
 8011d02:	eb61 0102 	sbc.w	r1, r1, r2
 8011d06:	bd10      	pop	{r4, pc}

08011d08 <uxr_flash_output_streams>:
 8011d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d0c:	7e03      	ldrb	r3, [r0, #24]
 8011d0e:	b084      	sub	sp, #16
 8011d10:	4604      	mov	r4, r0
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d035      	beq.n	8011d82 <uxr_flash_output_streams+0x7a>
 8011d16:	f04f 0900 	mov.w	r9, #0
 8011d1a:	4648      	mov	r0, r9
 8011d1c:	f10d 0802 	add.w	r8, sp, #2
 8011d20:	af03      	add	r7, sp, #12
 8011d22:	ae02      	add	r6, sp, #8
 8011d24:	e006      	b.n	8011d34 <uxr_flash_output_streams+0x2c>
 8011d26:	7e23      	ldrb	r3, [r4, #24]
 8011d28:	f109 0901 	add.w	r9, r9, #1
 8011d2c:	fa5f f089 	uxtb.w	r0, r9
 8011d30:	4283      	cmp	r3, r0
 8011d32:	d926      	bls.n	8011d82 <uxr_flash_output_streams+0x7a>
 8011d34:	2201      	movs	r2, #1
 8011d36:	4611      	mov	r1, r2
 8011d38:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8011d3c:	f000 ff1e 	bl	8012b7c <uxr_stream_id>
 8011d40:	3508      	adds	r5, #8
 8011d42:	4684      	mov	ip, r0
 8011d44:	4643      	mov	r3, r8
 8011d46:	463a      	mov	r2, r7
 8011d48:	4631      	mov	r1, r6
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	f8cd c004 	str.w	ip, [sp, #4]
 8011d50:	f004 fee8 	bl	8016b24 <uxr_prepare_best_effort_buffer_to_send>
 8011d54:	2800      	cmp	r0, #0
 8011d56:	d0e6      	beq.n	8011d26 <uxr_flash_output_streams+0x1e>
 8011d58:	9b02      	ldr	r3, [sp, #8]
 8011d5a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011d5e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011d62:	4620      	mov	r0, r4
 8011d64:	f000 fe7c 	bl	8012a60 <uxr_stamp_session_header>
 8011d68:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011d6a:	9a03      	ldr	r2, [sp, #12]
 8011d6c:	685d      	ldr	r5, [r3, #4]
 8011d6e:	6818      	ldr	r0, [r3, #0]
 8011d70:	9902      	ldr	r1, [sp, #8]
 8011d72:	47a8      	blx	r5
 8011d74:	f109 0901 	add.w	r9, r9, #1
 8011d78:	7e23      	ldrb	r3, [r4, #24]
 8011d7a:	fa5f f089 	uxtb.w	r0, r9
 8011d7e:	4283      	cmp	r3, r0
 8011d80:	d8d8      	bhi.n	8011d34 <uxr_flash_output_streams+0x2c>
 8011d82:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8011d86:	b38b      	cbz	r3, 8011dec <uxr_flash_output_streams+0xe4>
 8011d88:	f04f 0900 	mov.w	r9, #0
 8011d8c:	f10d 0802 	add.w	r8, sp, #2
 8011d90:	af03      	add	r7, sp, #12
 8011d92:	ae02      	add	r6, sp, #8
 8011d94:	4648      	mov	r0, r9
 8011d96:	2201      	movs	r2, #1
 8011d98:	2102      	movs	r1, #2
 8011d9a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8011d9e:	f000 feed 	bl	8012b7c <uxr_stream_id>
 8011da2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8011da6:	3520      	adds	r5, #32
 8011da8:	9001      	str	r0, [sp, #4]
 8011daa:	e00d      	b.n	8011dc8 <uxr_flash_output_streams+0xc0>
 8011dac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011db0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011db4:	9b02      	ldr	r3, [sp, #8]
 8011db6:	f000 fe53 	bl	8012a60 <uxr_stamp_session_header>
 8011dba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011dbc:	9a03      	ldr	r2, [sp, #12]
 8011dbe:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8011dc2:	9902      	ldr	r1, [sp, #8]
 8011dc4:	6818      	ldr	r0, [r3, #0]
 8011dc6:	47d0      	blx	sl
 8011dc8:	4643      	mov	r3, r8
 8011dca:	463a      	mov	r2, r7
 8011dcc:	4631      	mov	r1, r6
 8011dce:	4628      	mov	r0, r5
 8011dd0:	f005 f8b4 	bl	8016f3c <uxr_prepare_next_reliable_buffer_to_send>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d1e7      	bne.n	8011dac <uxr_flash_output_streams+0xa4>
 8011ddc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8011de0:	f109 0901 	add.w	r9, r9, #1
 8011de4:	fa5f f089 	uxtb.w	r0, r9
 8011de8:	4283      	cmp	r3, r0
 8011dea:	d8d4      	bhi.n	8011d96 <uxr_flash_output_streams+0x8e>
 8011dec:	b004      	add	sp, #16
 8011dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011df2:	bf00      	nop

08011df4 <read_submessage_info>:
 8011df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011df8:	460d      	mov	r5, r1
 8011dfa:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8011dfe:	4669      	mov	r1, sp
 8011e00:	4607      	mov	r7, r0
 8011e02:	4628      	mov	r0, r5
 8011e04:	f001 feee 	bl	8013be4 <uxr_deserialize_BaseObjectReply>
 8011e08:	a902      	add	r1, sp, #8
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8011e12:	f7fe fc9d 	bl	8010750 <ucdr_deserialize_bool>
 8011e16:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011e1a:	4004      	ands	r4, r0
 8011e1c:	b2e4      	uxtb	r4, r4
 8011e1e:	b95b      	cbnz	r3, 8011e38 <read_submessage_info+0x44>
 8011e20:	a987      	add	r1, sp, #540	; 0x21c
 8011e22:	4628      	mov	r0, r5
 8011e24:	f7fe fc94 	bl	8010750 <ucdr_deserialize_bool>
 8011e28:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8011e2c:	4606      	mov	r6, r0
 8011e2e:	b94b      	cbnz	r3, 8011e44 <read_submessage_info+0x50>
 8011e30:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e38:	a903      	add	r1, sp, #12
 8011e3a:	4628      	mov	r0, r5
 8011e3c:	f001 fd7a 	bl	8013934 <uxr_deserialize_ObjectVariant>
 8011e40:	4004      	ands	r4, r0
 8011e42:	e7ed      	b.n	8011e20 <read_submessage_info+0x2c>
 8011e44:	a988      	add	r1, sp, #544	; 0x220
 8011e46:	4628      	mov	r0, r5
 8011e48:	f7fe fcb0 	bl	80107ac <ucdr_deserialize_uint8_t>
 8011e4c:	4234      	tst	r4, r6
 8011e4e:	d0ef      	beq.n	8011e30 <read_submessage_info+0x3c>
 8011e50:	2800      	cmp	r0, #0
 8011e52:	d0ed      	beq.n	8011e30 <read_submessage_info+0x3c>
 8011e54:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8011e58:	2b0d      	cmp	r3, #13
 8011e5a:	d1e9      	bne.n	8011e30 <read_submessage_info+0x3c>
 8011e5c:	a98a      	add	r1, sp, #552	; 0x228
 8011e5e:	4628      	mov	r0, r5
 8011e60:	f7ff fa4a 	bl	80112f8 <ucdr_deserialize_int16_t>
 8011e64:	b140      	cbz	r0, 8011e78 <read_submessage_info+0x84>
 8011e66:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	dd07      	ble.n	8011e7e <read_submessage_info+0x8a>
 8011e6e:	f1b8 0f00 	cmp.w	r8, #0
 8011e72:	bf14      	ite	ne
 8011e74:	2001      	movne	r0, #1
 8011e76:	2002      	moveq	r0, #2
 8011e78:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 8011e7c:	e7d8      	b.n	8011e30 <read_submessage_info+0x3c>
 8011e7e:	2000      	movs	r0, #0
 8011e80:	e7fa      	b.n	8011e78 <read_submessage_info+0x84>
 8011e82:	bf00      	nop

08011e84 <read_submessage_list>:
 8011e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e88:	b097      	sub	sp, #92	; 0x5c
 8011e8a:	4ec1      	ldr	r6, [pc, #772]	; (8012190 <read_submessage_list+0x30c>)
 8011e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8011e8e:	4604      	mov	r4, r0
 8011e90:	460d      	mov	r5, r1
 8011e92:	f04f 0801 	mov.w	r8, #1
 8011e96:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8011e9a:	aa0c      	add	r2, sp, #48	; 0x30
 8011e9c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	f000 ffbd 	bl	8012e20 <uxr_read_submessage_header>
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	f000 813e 	beq.w	8012128 <read_submessage_list+0x2a4>
 8011eac:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8011eb0:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8011eb4:	3b02      	subs	r3, #2
 8011eb6:	2b0d      	cmp	r3, #13
 8011eb8:	d8ed      	bhi.n	8011e96 <read_submessage_list+0x12>
 8011eba:	a101      	add	r1, pc, #4	; (adr r1, 8011ec0 <read_submessage_list+0x3c>)
 8011ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ec0:	0801211f 	.word	0x0801211f
 8011ec4:	08011e97 	.word	0x08011e97
 8011ec8:	0801210f 	.word	0x0801210f
 8011ecc:	080120ad 	.word	0x080120ad
 8011ed0:	080120a3 	.word	0x080120a3
 8011ed4:	08011e97 	.word	0x08011e97
 8011ed8:	08011e97 	.word	0x08011e97
 8011edc:	08012003 	.word	0x08012003
 8011ee0:	08011f93 	.word	0x08011f93
 8011ee4:	08011f53 	.word	0x08011f53
 8011ee8:	08011e97 	.word	0x08011e97
 8011eec:	08011e97 	.word	0x08011e97
 8011ef0:	08011e97 	.word	0x08011e97
 8011ef4:	08011ef9 	.word	0x08011ef9
 8011ef8:	a910      	add	r1, sp, #64	; 0x40
 8011efa:	4628      	mov	r0, r5
 8011efc:	f002 f896 	bl	801402c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011f00:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 8011f04:	f1b9 0f00 	cmp.w	r9, #0
 8011f08:	f000 8116 	beq.w	8012138 <read_submessage_list+0x2b4>
 8011f0c:	f000 ffce 	bl	8012eac <uxr_nanos>
 8011f10:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8011f12:	4602      	mov	r2, r0
 8011f14:	460b      	mov	r3, r1
 8011f16:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011f18:	2100      	movs	r1, #0
 8011f1a:	468c      	mov	ip, r1
 8011f1c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011f20:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8011f24:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011f26:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8011f28:	468c      	mov	ip, r1
 8011f2a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011f2e:	46e2      	mov	sl, ip
 8011f30:	46bc      	mov	ip, r7
 8011f32:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 8011f36:	fbc0 7106 	smlal	r7, r1, r0, r6
 8011f3a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8011f3e:	e9cd 7100 	strd	r7, r1, [sp]
 8011f42:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8011f46:	9106      	str	r1, [sp, #24]
 8011f48:	4620      	mov	r0, r4
 8011f4a:	47c8      	blx	r9
 8011f4c:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 8011f50:	e7a1      	b.n	8011e96 <read_submessage_list+0x12>
 8011f52:	a910      	add	r1, sp, #64	; 0x40
 8011f54:	4628      	mov	r0, r5
 8011f56:	f002 f857 	bl	8014008 <uxr_deserialize_HEARTBEAT_Payload>
 8011f5a:	2100      	movs	r1, #0
 8011f5c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8011f60:	f000 fe36 	bl	8012bd0 <uxr_stream_id_from_raw>
 8011f64:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011f68:	900f      	str	r0, [sp, #60]	; 0x3c
 8011f6a:	4639      	mov	r1, r7
 8011f6c:	f104 0008 	add.w	r0, r4, #8
 8011f70:	f000 ff1c 	bl	8012dac <uxr_get_input_reliable_stream>
 8011f74:	2800      	cmp	r0, #0
 8011f76:	d08e      	beq.n	8011e96 <read_submessage_list+0x12>
 8011f78:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8011f7c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8011f80:	f004 fd3e 	bl	8016a00 <uxr_process_heartbeat>
 8011f84:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8011f88:	463a      	mov	r2, r7
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	f7ff fdf6 	bl	8011b7c <write_submessage_acknack.isra.0>
 8011f90:	e781      	b.n	8011e96 <read_submessage_list+0x12>
 8011f92:	a910      	add	r1, sp, #64	; 0x40
 8011f94:	4628      	mov	r0, r5
 8011f96:	f002 f80f 	bl	8013fb8 <uxr_deserialize_ACKNACK_Payload>
 8011f9a:	2100      	movs	r1, #0
 8011f9c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8011fa0:	f000 fe16 	bl	8012bd0 <uxr_stream_id_from_raw>
 8011fa4:	900d      	str	r0, [sp, #52]	; 0x34
 8011fa6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011faa:	f104 0008 	add.w	r0, r4, #8
 8011fae:	f000 fee9 	bl	8012d84 <uxr_get_output_reliable_stream>
 8011fb2:	4607      	mov	r7, r0
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	f43f af6e 	beq.w	8011e96 <read_submessage_list+0x12>
 8011fba:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8011fbe:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8011fc2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8011fc6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011fca:	b289      	uxth	r1, r1
 8011fcc:	f005 f860 	bl	8017090 <uxr_process_acknack>
 8011fd0:	4638      	mov	r0, r7
 8011fd2:	f005 f81d 	bl	8017010 <uxr_begin_output_nack_buffer_it>
 8011fd6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8011fda:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8011fde:	e006      	b.n	8011fee <read_submessage_list+0x16a>
 8011fe0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011fe2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011fe4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8011fe8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011fea:	6818      	ldr	r0, [r3, #0]
 8011fec:	47c8      	blx	r9
 8011fee:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8011ff2:	aa0f      	add	r2, sp, #60	; 0x3c
 8011ff4:	4651      	mov	r1, sl
 8011ff6:	4638      	mov	r0, r7
 8011ff8:	f005 f80c 	bl	8017014 <uxr_next_reliable_nack_buffer_to_send>
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	d1ef      	bne.n	8011fe0 <read_submessage_list+0x15c>
 8012000:	e749      	b.n	8011e96 <read_submessage_list+0x12>
 8012002:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8012006:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801200a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801200e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8012012:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8012016:	4651      	mov	r1, sl
 8012018:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801201c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8012020:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8012024:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8012028:	4628      	mov	r0, r5
 801202a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801202e:	f001 fd23 	bl	8013a78 <uxr_deserialize_BaseObjectRequest>
 8012032:	4650      	mov	r0, sl
 8012034:	a90f      	add	r1, sp, #60	; 0x3c
 8012036:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801203a:	f000 fd8d 	bl	8012b58 <uxr_parse_base_object_request>
 801203e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8012042:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012044:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8012048:	9110      	str	r1, [sp, #64]	; 0x40
 801204a:	3f04      	subs	r7, #4
 801204c:	f009 090e 	and.w	r9, r9, #14
 8012050:	b2bf      	uxth	r7, r7
 8012052:	f1bb 0f00 	cmp.w	fp, #0
 8012056:	d006      	beq.n	8012066 <read_submessage_list+0x1e2>
 8012058:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801205c:	9300      	str	r3, [sp, #0]
 801205e:	4652      	mov	r2, sl
 8012060:	2300      	movs	r3, #0
 8012062:	4620      	mov	r0, r4
 8012064:	47d8      	blx	fp
 8012066:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8012068:	b16a      	cbz	r2, 8012086 <read_submessage_list+0x202>
 801206a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801206c:	2100      	movs	r1, #0
 801206e:	3802      	subs	r0, #2
 8012070:	e002      	b.n	8012078 <read_submessage_list+0x1f4>
 8012072:	3101      	adds	r1, #1
 8012074:	4291      	cmp	r1, r2
 8012076:	d006      	beq.n	8012086 <read_submessage_list+0x202>
 8012078:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801207c:	4553      	cmp	r3, sl
 801207e:	d1f8      	bne.n	8012072 <read_submessage_list+0x1ee>
 8012080:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8012082:	2200      	movs	r2, #0
 8012084:	545a      	strb	r2, [r3, r1]
 8012086:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801208a:	9102      	str	r1, [sp, #8]
 801208c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801208e:	9101      	str	r1, [sp, #4]
 8012090:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012092:	9100      	str	r1, [sp, #0]
 8012094:	464b      	mov	r3, r9
 8012096:	463a      	mov	r2, r7
 8012098:	4629      	mov	r1, r5
 801209a:	4620      	mov	r0, r4
 801209c:	f005 f87c 	bl	8017198 <read_submessage_format>
 80120a0:	e6f9      	b.n	8011e96 <read_submessage_list+0x12>
 80120a2:	4629      	mov	r1, r5
 80120a4:	4620      	mov	r0, r4
 80120a6:	f7ff fea5 	bl	8011df4 <read_submessage_info>
 80120aa:	e6f4      	b.n	8011e96 <read_submessage_list+0x12>
 80120ac:	2a00      	cmp	r2, #0
 80120ae:	d03e      	beq.n	801212e <read_submessage_list+0x2aa>
 80120b0:	a910      	add	r1, sp, #64	; 0x40
 80120b2:	4628      	mov	r0, r5
 80120b4:	f001 fedc 	bl	8013e70 <uxr_deserialize_STATUS_Payload>
 80120b8:	a90e      	add	r1, sp, #56	; 0x38
 80120ba:	aa0d      	add	r2, sp, #52	; 0x34
 80120bc:	a810      	add	r0, sp, #64	; 0x40
 80120be:	f000 fd4b 	bl	8012b58 <uxr_parse_base_object_request>
 80120c2:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 80120c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80120c8:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 80120cc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 80120d0:	910f      	str	r1, [sp, #60]	; 0x3c
 80120d2:	f1ba 0f00 	cmp.w	sl, #0
 80120d6:	d006      	beq.n	80120e6 <read_submessage_list+0x262>
 80120d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80120dc:	9300      	str	r3, [sp, #0]
 80120de:	463a      	mov	r2, r7
 80120e0:	464b      	mov	r3, r9
 80120e2:	4620      	mov	r0, r4
 80120e4:	47d0      	blx	sl
 80120e6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80120e8:	2a00      	cmp	r2, #0
 80120ea:	f43f aed4 	beq.w	8011e96 <read_submessage_list+0x12>
 80120ee:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80120f0:	2100      	movs	r1, #0
 80120f2:	3802      	subs	r0, #2
 80120f4:	e003      	b.n	80120fe <read_submessage_list+0x27a>
 80120f6:	3101      	adds	r1, #1
 80120f8:	4291      	cmp	r1, r2
 80120fa:	f43f aecc 	beq.w	8011e96 <read_submessage_list+0x12>
 80120fe:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8012102:	42bb      	cmp	r3, r7
 8012104:	d1f7      	bne.n	80120f6 <read_submessage_list+0x272>
 8012106:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8012108:	f803 9001 	strb.w	r9, [r3, r1]
 801210c:	e6c3      	b.n	8011e96 <read_submessage_list+0x12>
 801210e:	2a00      	cmp	r2, #0
 8012110:	f47f aec1 	bne.w	8011e96 <read_submessage_list+0x12>
 8012114:	4629      	mov	r1, r5
 8012116:	4620      	mov	r0, r4
 8012118:	f000 fc64 	bl	80129e4 <uxr_read_create_session_status>
 801211c:	e6bb      	b.n	8011e96 <read_submessage_list+0x12>
 801211e:	4629      	mov	r1, r5
 8012120:	4620      	mov	r0, r4
 8012122:	f7ff fcf5 	bl	8011b10 <read_submessage_get_info>
 8012126:	e6b6      	b.n	8011e96 <read_submessage_list+0x12>
 8012128:	b017      	add	sp, #92	; 0x5c
 801212a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801212e:	4629      	mov	r1, r5
 8012130:	4620      	mov	r0, r4
 8012132:	f000 fc63 	bl	80129fc <uxr_read_delete_session_status>
 8012136:	e6ae      	b.n	8011e96 <read_submessage_list+0x12>
 8012138:	f000 feb8 	bl	8012eac <uxr_nanos>
 801213c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801213e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012140:	464f      	mov	r7, r9
 8012142:	fbc3 2706 	smlal	r2, r7, r3, r6
 8012146:	1812      	adds	r2, r2, r0
 8012148:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801214a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801214c:	eb47 0101 	adc.w	r1, r7, r1
 8012150:	464f      	mov	r7, r9
 8012152:	fbc3 0706 	smlal	r0, r7, r3, r6
 8012156:	463b      	mov	r3, r7
 8012158:	4684      	mov	ip, r0
 801215a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801215e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8012162:	eb1c 0c00 	adds.w	ip, ip, r0
 8012166:	464f      	mov	r7, r9
 8012168:	eb43 0307 	adc.w	r3, r3, r7
 801216c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8012170:	eb61 0303 	sbc.w	r3, r1, r3
 8012174:	0fda      	lsrs	r2, r3, #31
 8012176:	eb12 020c 	adds.w	r2, r2, ip
 801217a:	f143 0300 	adc.w	r3, r3, #0
 801217e:	0852      	lsrs	r2, r2, #1
 8012180:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8012184:	105b      	asrs	r3, r3, #1
 8012186:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 801218a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 801218e:	e6dd      	b.n	8011f4c <read_submessage_list+0xc8>
 8012190:	3b9aca00 	.word	0x3b9aca00

08012194 <listen_message_reliably>:
 8012194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012198:	1e0b      	subs	r3, r1, #0
 801219a:	b09d      	sub	sp, #116	; 0x74
 801219c:	bfb8      	it	lt
 801219e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80121a2:	4680      	mov	r8, r0
 80121a4:	9305      	str	r3, [sp, #20]
 80121a6:	f000 fe67 	bl	8012e78 <uxr_millis>
 80121aa:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 80121ae:	4681      	mov	r9, r0
 80121b0:	2a00      	cmp	r2, #0
 80121b2:	f000 80a1 	beq.w	80122f8 <listen_message_reliably+0x164>
 80121b6:	2600      	movs	r6, #0
 80121b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80121bc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80121c0:	9303      	str	r3, [sp, #12]
 80121c2:	4630      	mov	r0, r6
 80121c4:	460f      	mov	r7, r1
 80121c6:	e00f      	b.n	80121e8 <listen_message_reliably+0x54>
 80121c8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80121cc:	9903      	ldr	r1, [sp, #12]
 80121ce:	455a      	cmp	r2, fp
 80121d0:	f106 0601 	add.w	r6, r6, #1
 80121d4:	eb73 0101 	sbcs.w	r1, r3, r1
 80121d8:	b2f0      	uxtb	r0, r6
 80121da:	da01      	bge.n	80121e0 <listen_message_reliably+0x4c>
 80121dc:	4693      	mov	fp, r2
 80121de:	9303      	str	r3, [sp, #12]
 80121e0:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80121e4:	4283      	cmp	r3, r0
 80121e6:	d960      	bls.n	80122aa <listen_message_reliably+0x116>
 80121e8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80121ec:	2102      	movs	r1, #2
 80121ee:	2201      	movs	r2, #1
 80121f0:	f000 fcc4 	bl	8012b7c <uxr_stream_id>
 80121f4:	00e4      	lsls	r4, r4, #3
 80121f6:	f104 0520 	add.w	r5, r4, #32
 80121fa:	4445      	add	r5, r8
 80121fc:	4601      	mov	r1, r0
 80121fe:	463b      	mov	r3, r7
 8012200:	464a      	mov	r2, r9
 8012202:	4628      	mov	r0, r5
 8012204:	9109      	str	r1, [sp, #36]	; 0x24
 8012206:	f004 fed9 	bl	8016fbc <uxr_update_output_stream_heartbeat_timestamp>
 801220a:	eb08 0304 	add.w	r3, r8, r4
 801220e:	2800      	cmp	r0, #0
 8012210:	d0da      	beq.n	80121c8 <listen_message_reliably+0x34>
 8012212:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012216:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 801221a:	9304      	str	r3, [sp, #16]
 801221c:	4640      	mov	r0, r8
 801221e:	f000 fc75 	bl	8012b0c <uxr_session_header_offset>
 8012222:	3501      	adds	r5, #1
 8012224:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8012228:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801222c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8012230:	2300      	movs	r3, #0
 8012232:	2211      	movs	r2, #17
 8012234:	9000      	str	r0, [sp, #0]
 8012236:	a90c      	add	r1, sp, #48	; 0x30
 8012238:	4650      	mov	r0, sl
 801223a:	f7ff fa3b 	bl	80116b4 <ucdr_init_buffer_origin_offset>
 801223e:	2300      	movs	r3, #0
 8012240:	2205      	movs	r2, #5
 8012242:	210b      	movs	r1, #11
 8012244:	4650      	mov	r0, sl
 8012246:	f000 fdd1 	bl	8012dec <uxr_buffer_submessage_header>
 801224a:	8968      	ldrh	r0, [r5, #10]
 801224c:	2101      	movs	r1, #1
 801224e:	f005 f86d 	bl	801732c <uxr_seq_num_add>
 8012252:	892b      	ldrh	r3, [r5, #8]
 8012254:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8012258:	4602      	mov	r2, r0
 801225a:	9b04      	ldr	r3, [sp, #16]
 801225c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8012260:	a90a      	add	r1, sp, #40	; 0x28
 8012262:	4650      	mov	r0, sl
 8012264:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8012268:	f001 feba 	bl	8013fe0 <uxr_serialize_HEARTBEAT_Payload>
 801226c:	2200      	movs	r2, #0
 801226e:	4611      	mov	r1, r2
 8012270:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012272:	4640      	mov	r0, r8
 8012274:	f000 fbf4 	bl	8012a60 <uxr_stamp_session_header>
 8012278:	4650      	mov	r0, sl
 801227a:	f7ff fa59 	bl	8011730 <ucdr_buffer_length>
 801227e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8012282:	4602      	mov	r2, r0
 8012284:	a90c      	add	r1, sp, #48	; 0x30
 8012286:	e9d3 0500 	ldrd	r0, r5, [r3]
 801228a:	4444      	add	r4, r8
 801228c:	47a8      	blx	r5
 801228e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8012292:	9903      	ldr	r1, [sp, #12]
 8012294:	455a      	cmp	r2, fp
 8012296:	f106 0601 	add.w	r6, r6, #1
 801229a:	eb73 0101 	sbcs.w	r1, r3, r1
 801229e:	b2f0      	uxtb	r0, r6
 80122a0:	db9c      	blt.n	80121dc <listen_message_reliably+0x48>
 80122a2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80122a6:	4283      	cmp	r3, r0
 80122a8:	d89e      	bhi.n	80121e8 <listen_message_reliably+0x54>
 80122aa:	9a03      	ldr	r2, [sp, #12]
 80122ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80122b0:	429a      	cmp	r2, r3
 80122b2:	bf08      	it	eq
 80122b4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 80122b8:	d01e      	beq.n	80122f8 <listen_message_reliably+0x164>
 80122ba:	ebab 0309 	sub.w	r3, fp, r9
 80122be:	9905      	ldr	r1, [sp, #20]
 80122c0:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	bf08      	it	eq
 80122c8:	2301      	moveq	r3, #1
 80122ca:	4299      	cmp	r1, r3
 80122cc:	bfa8      	it	ge
 80122ce:	4619      	movge	r1, r3
 80122d0:	6894      	ldr	r4, [r2, #8]
 80122d2:	6810      	ldr	r0, [r2, #0]
 80122d4:	4689      	mov	r9, r1
 80122d6:	460b      	mov	r3, r1
 80122d8:	aa08      	add	r2, sp, #32
 80122da:	a907      	add	r1, sp, #28
 80122dc:	47a0      	blx	r4
 80122de:	b968      	cbnz	r0, 80122fc <listen_message_reliably+0x168>
 80122e0:	9b05      	ldr	r3, [sp, #20]
 80122e2:	eba3 0309 	sub.w	r3, r3, r9
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	9305      	str	r3, [sp, #20]
 80122ea:	f73f af5c 	bgt.w	80121a6 <listen_message_reliably+0x12>
 80122ee:	4604      	mov	r4, r0
 80122f0:	4620      	mov	r0, r4
 80122f2:	b01d      	add	sp, #116	; 0x74
 80122f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f8:	9b05      	ldr	r3, [sp, #20]
 80122fa:	e7e0      	b.n	80122be <listen_message_reliably+0x12a>
 80122fc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012300:	4604      	mov	r4, r0
 8012302:	a80c      	add	r0, sp, #48	; 0x30
 8012304:	f7ff f9e8 	bl	80116d8 <ucdr_init_buffer>
 8012308:	2500      	movs	r5, #0
 801230a:	f10d 031a 	add.w	r3, sp, #26
 801230e:	aa06      	add	r2, sp, #24
 8012310:	a90c      	add	r1, sp, #48	; 0x30
 8012312:	4640      	mov	r0, r8
 8012314:	f88d 5018 	strb.w	r5, [sp, #24]
 8012318:	f000 fbb6 	bl	8012a88 <uxr_read_session_header>
 801231c:	b918      	cbnz	r0, 8012326 <listen_message_reliably+0x192>
 801231e:	4620      	mov	r0, r4
 8012320:	b01d      	add	sp, #116	; 0x74
 8012322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012326:	4629      	mov	r1, r5
 8012328:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801232c:	f000 fc50 	bl	8012bd0 <uxr_stream_id_from_raw>
 8012330:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8012334:	2d01      	cmp	r5, #1
 8012336:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 801233a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801233e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012342:	d04b      	beq.n	80123dc <listen_message_reliably+0x248>
 8012344:	2d02      	cmp	r5, #2
 8012346:	d00f      	beq.n	8012368 <listen_message_reliably+0x1d4>
 8012348:	2d00      	cmp	r5, #0
 801234a:	d1e8      	bne.n	801231e <listen_message_reliably+0x18a>
 801234c:	4629      	mov	r1, r5
 801234e:	4628      	mov	r0, r5
 8012350:	f000 fc3e 	bl	8012bd0 <uxr_stream_id_from_raw>
 8012354:	a90c      	add	r1, sp, #48	; 0x30
 8012356:	4602      	mov	r2, r0
 8012358:	4640      	mov	r0, r8
 801235a:	920a      	str	r2, [sp, #40]	; 0x28
 801235c:	f7ff fd92 	bl	8011e84 <read_submessage_list>
 8012360:	4620      	mov	r0, r4
 8012362:	b01d      	add	sp, #116	; 0x74
 8012364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012368:	4631      	mov	r1, r6
 801236a:	f108 0008 	add.w	r0, r8, #8
 801236e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8012372:	f000 fd1b 	bl	8012dac <uxr_get_input_reliable_stream>
 8012376:	4607      	mov	r7, r0
 8012378:	b338      	cbz	r0, 80123ca <listen_message_reliably+0x236>
 801237a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801237c:	9203      	str	r2, [sp, #12]
 801237e:	a80c      	add	r0, sp, #48	; 0x30
 8012380:	f7ff f9da 	bl	8011738 <ucdr_buffer_remaining>
 8012384:	4603      	mov	r3, r0
 8012386:	f10d 0019 	add.w	r0, sp, #25
 801238a:	9000      	str	r0, [sp, #0]
 801238c:	9a03      	ldr	r2, [sp, #12]
 801238e:	4651      	mov	r1, sl
 8012390:	4638      	mov	r0, r7
 8012392:	f004 fa3b 	bl	801680c <uxr_receive_reliable_message>
 8012396:	b1c0      	cbz	r0, 80123ca <listen_message_reliably+0x236>
 8012398:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801239c:	b393      	cbz	r3, 8012404 <listen_message_reliably+0x270>
 801239e:	ad14      	add	r5, sp, #80	; 0x50
 80123a0:	f04f 0a02 	mov.w	sl, #2
 80123a4:	e00a      	b.n	80123bc <listen_message_reliably+0x228>
 80123a6:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 80123aa:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 80123ae:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80123b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123b4:	4629      	mov	r1, r5
 80123b6:	4640      	mov	r0, r8
 80123b8:	f7ff fd64 	bl	8011e84 <read_submessage_list>
 80123bc:	2204      	movs	r2, #4
 80123be:	4629      	mov	r1, r5
 80123c0:	4638      	mov	r0, r7
 80123c2:	f004 faa3 	bl	801690c <uxr_next_input_reliable_buffer_available>
 80123c6:	2800      	cmp	r0, #0
 80123c8:	d1ed      	bne.n	80123a6 <listen_message_reliably+0x212>
 80123ca:	4640      	mov	r0, r8
 80123cc:	4632      	mov	r2, r6
 80123ce:	4649      	mov	r1, r9
 80123d0:	f7ff fbd4 	bl	8011b7c <write_submessage_acknack.isra.0>
 80123d4:	4620      	mov	r0, r4
 80123d6:	b01d      	add	sp, #116	; 0x74
 80123d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123dc:	4631      	mov	r1, r6
 80123de:	f108 0008 	add.w	r0, r8, #8
 80123e2:	f000 fcd9 	bl	8012d98 <uxr_get_input_best_effort_stream>
 80123e6:	2800      	cmp	r0, #0
 80123e8:	d099      	beq.n	801231e <listen_message_reliably+0x18a>
 80123ea:	4651      	mov	r1, sl
 80123ec:	f004 f97a 	bl	80166e4 <uxr_receive_best_effort_message>
 80123f0:	2800      	cmp	r0, #0
 80123f2:	d094      	beq.n	801231e <listen_message_reliably+0x18a>
 80123f4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 80123f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123fa:	a90c      	add	r1, sp, #48	; 0x30
 80123fc:	4640      	mov	r0, r8
 80123fe:	f7ff fd41 	bl	8011e84 <read_submessage_list>
 8012402:	e78c      	b.n	801231e <listen_message_reliably+0x18a>
 8012404:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8012408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801240a:	a90c      	add	r1, sp, #48	; 0x30
 801240c:	4640      	mov	r0, r8
 801240e:	f7ff fd39 	bl	8011e84 <read_submessage_list>
 8012412:	e7c4      	b.n	801239e <listen_message_reliably+0x20a>

08012414 <uxr_run_session_until_confirm_delivery>:
 8012414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012418:	4606      	mov	r6, r0
 801241a:	460d      	mov	r5, r1
 801241c:	f000 fd2c 	bl	8012e78 <uxr_millis>
 8012420:	4607      	mov	r7, r0
 8012422:	4630      	mov	r0, r6
 8012424:	f7ff fc70 	bl	8011d08 <uxr_flash_output_streams>
 8012428:	2d00      	cmp	r5, #0
 801242a:	f106 0808 	add.w	r8, r6, #8
 801242e:	bfa8      	it	ge
 8012430:	462c      	movge	r4, r5
 8012432:	da07      	bge.n	8012444 <uxr_run_session_until_confirm_delivery+0x30>
 8012434:	e00e      	b.n	8012454 <uxr_run_session_until_confirm_delivery+0x40>
 8012436:	f7ff fead 	bl	8012194 <listen_message_reliably>
 801243a:	f000 fd1d 	bl	8012e78 <uxr_millis>
 801243e:	1bc3      	subs	r3, r0, r7
 8012440:	1aec      	subs	r4, r5, r3
 8012442:	d407      	bmi.n	8012454 <uxr_run_session_until_confirm_delivery+0x40>
 8012444:	4640      	mov	r0, r8
 8012446:	f000 fcbb 	bl	8012dc0 <uxr_output_streams_confirmed>
 801244a:	4603      	mov	r3, r0
 801244c:	4621      	mov	r1, r4
 801244e:	4630      	mov	r0, r6
 8012450:	2b00      	cmp	r3, #0
 8012452:	d0f0      	beq.n	8012436 <uxr_run_session_until_confirm_delivery+0x22>
 8012454:	4640      	mov	r0, r8
 8012456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801245a:	f000 bcb1 	b.w	8012dc0 <uxr_output_streams_confirmed>
 801245e:	bf00      	nop

08012460 <uxr_run_session_until_all_status>:
 8012460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012464:	9c08      	ldr	r4, [sp, #32]
 8012466:	4606      	mov	r6, r0
 8012468:	460f      	mov	r7, r1
 801246a:	4691      	mov	r9, r2
 801246c:	461d      	mov	r5, r3
 801246e:	f7ff fc4b 	bl	8011d08 <uxr_flash_output_streams>
 8012472:	b124      	cbz	r4, 801247e <uxr_run_session_until_all_status+0x1e>
 8012474:	4622      	mov	r2, r4
 8012476:	21ff      	movs	r1, #255	; 0xff
 8012478:	4628      	mov	r0, r5
 801247a:	f006 fa05 	bl	8018888 <memset>
 801247e:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 8012482:	67f4      	str	r4, [r6, #124]	; 0x7c
 8012484:	f000 fcf8 	bl	8012e78 <uxr_millis>
 8012488:	3d01      	subs	r5, #1
 801248a:	f1a9 0902 	sub.w	r9, r9, #2
 801248e:	4680      	mov	r8, r0
 8012490:	4639      	mov	r1, r7
 8012492:	4630      	mov	r0, r6
 8012494:	f7ff fe7e 	bl	8012194 <listen_message_reliably>
 8012498:	f000 fcee 	bl	8012e78 <uxr_millis>
 801249c:	eba0 0008 	sub.w	r0, r0, r8
 80124a0:	1a39      	subs	r1, r7, r0
 80124a2:	b344      	cbz	r4, 80124f6 <uxr_run_session_until_all_status+0x96>
 80124a4:	4628      	mov	r0, r5
 80124a6:	46ac      	mov	ip, r5
 80124a8:	2301      	movs	r3, #1
 80124aa:	e002      	b.n	80124b2 <uxr_run_session_until_all_status+0x52>
 80124ac:	42a3      	cmp	r3, r4
 80124ae:	d20d      	bcs.n	80124cc <uxr_run_session_until_all_status+0x6c>
 80124b0:	3301      	adds	r3, #1
 80124b2:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80124b6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80124ba:	d1f7      	bne.n	80124ac <uxr_run_session_until_all_status+0x4c>
 80124bc:	42a3      	cmp	r3, r4
 80124be:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80124c2:	d213      	bcs.n	80124ec <uxr_run_session_until_all_status+0x8c>
 80124c4:	2a00      	cmp	r2, #0
 80124c6:	d0f3      	beq.n	80124b0 <uxr_run_session_until_all_status+0x50>
 80124c8:	2900      	cmp	r1, #0
 80124ca:	dce2      	bgt.n	8012492 <uxr_run_session_until_all_status+0x32>
 80124cc:	2300      	movs	r3, #0
 80124ce:	67f3      	str	r3, [r6, #124]	; 0x7c
 80124d0:	442c      	add	r4, r5
 80124d2:	e001      	b.n	80124d8 <uxr_run_session_until_all_status+0x78>
 80124d4:	2b01      	cmp	r3, #1
 80124d6:	d812      	bhi.n	80124fe <uxr_run_session_until_all_status+0x9e>
 80124d8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80124dc:	4284      	cmp	r4, r0
 80124de:	d1f9      	bne.n	80124d4 <uxr_run_session_until_all_status+0x74>
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	bf8c      	ite	hi
 80124e4:	2000      	movhi	r0, #0
 80124e6:	2001      	movls	r0, #1
 80124e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124ec:	2900      	cmp	r1, #0
 80124ee:	dded      	ble.n	80124cc <uxr_run_session_until_all_status+0x6c>
 80124f0:	2a00      	cmp	r2, #0
 80124f2:	d1ce      	bne.n	8012492 <uxr_run_session_until_all_status+0x32>
 80124f4:	e7ea      	b.n	80124cc <uxr_run_session_until_all_status+0x6c>
 80124f6:	67f4      	str	r4, [r6, #124]	; 0x7c
 80124f8:	2001      	movs	r0, #1
 80124fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124fe:	2000      	movs	r0, #0
 8012500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012504 <wait_session_status>:
 8012504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012508:	4604      	mov	r4, r0
 801250a:	b09d      	sub	sp, #116	; 0x74
 801250c:	20ff      	movs	r0, #255	; 0xff
 801250e:	7160      	strb	r0, [r4, #5]
 8012510:	9303      	str	r3, [sp, #12]
 8012512:	2b00      	cmp	r3, #0
 8012514:	f000 80b6 	beq.w	8012684 <wait_session_status+0x180>
 8012518:	468a      	mov	sl, r1
 801251a:	4691      	mov	r9, r2
 801251c:	f04f 0b00 	mov.w	fp, #0
 8012520:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012522:	464a      	mov	r2, r9
 8012524:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012528:	4651      	mov	r1, sl
 801252a:	47a8      	blx	r5
 801252c:	f000 fca4 	bl	8012e78 <uxr_millis>
 8012530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012534:	4605      	mov	r5, r0
 8012536:	e009      	b.n	801254c <wait_session_status+0x48>
 8012538:	f000 fc9e 	bl	8012e78 <uxr_millis>
 801253c:	1b40      	subs	r0, r0, r5
 801253e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012542:	2b00      	cmp	r3, #0
 8012544:	dd40      	ble.n	80125c8 <wait_session_status+0xc4>
 8012546:	7960      	ldrb	r0, [r4, #5]
 8012548:	28ff      	cmp	r0, #255	; 0xff
 801254a:	d145      	bne.n	80125d8 <wait_session_status+0xd4>
 801254c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801254e:	a908      	add	r1, sp, #32
 8012550:	6896      	ldr	r6, [r2, #8]
 8012552:	6810      	ldr	r0, [r2, #0]
 8012554:	aa09      	add	r2, sp, #36	; 0x24
 8012556:	47b0      	blx	r6
 8012558:	2800      	cmp	r0, #0
 801255a:	d0ed      	beq.n	8012538 <wait_session_status+0x34>
 801255c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012560:	a80c      	add	r0, sp, #48	; 0x30
 8012562:	f7ff f8b9 	bl	80116d8 <ucdr_init_buffer>
 8012566:	2600      	movs	r6, #0
 8012568:	f10d 031e 	add.w	r3, sp, #30
 801256c:	aa07      	add	r2, sp, #28
 801256e:	a90c      	add	r1, sp, #48	; 0x30
 8012570:	4620      	mov	r0, r4
 8012572:	f88d 601c 	strb.w	r6, [sp, #28]
 8012576:	f000 fa87 	bl	8012a88 <uxr_read_session_header>
 801257a:	2800      	cmp	r0, #0
 801257c:	d0dc      	beq.n	8012538 <wait_session_status+0x34>
 801257e:	4631      	mov	r1, r6
 8012580:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012584:	f000 fb24 	bl	8012bd0 <uxr_stream_id_from_raw>
 8012588:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801258c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012590:	9302      	str	r3, [sp, #8]
 8012592:	2f01      	cmp	r7, #1
 8012594:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8012598:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801259c:	d05c      	beq.n	8012658 <wait_session_status+0x154>
 801259e:	2f02      	cmp	r7, #2
 80125a0:	d020      	beq.n	80125e4 <wait_session_status+0xe0>
 80125a2:	2f00      	cmp	r7, #0
 80125a4:	d1c8      	bne.n	8012538 <wait_session_status+0x34>
 80125a6:	4639      	mov	r1, r7
 80125a8:	4638      	mov	r0, r7
 80125aa:	f000 fb11 	bl	8012bd0 <uxr_stream_id_from_raw>
 80125ae:	a90c      	add	r1, sp, #48	; 0x30
 80125b0:	4602      	mov	r2, r0
 80125b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80125b4:	4620      	mov	r0, r4
 80125b6:	f7ff fc65 	bl	8011e84 <read_submessage_list>
 80125ba:	f000 fc5d 	bl	8012e78 <uxr_millis>
 80125be:	1b40      	subs	r0, r0, r5
 80125c0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	dcbe      	bgt.n	8012546 <wait_session_status+0x42>
 80125c8:	9b03      	ldr	r3, [sp, #12]
 80125ca:	7960      	ldrb	r0, [r4, #5]
 80125cc:	f10b 0b01 	add.w	fp, fp, #1
 80125d0:	455b      	cmp	r3, fp
 80125d2:	d001      	beq.n	80125d8 <wait_session_status+0xd4>
 80125d4:	28ff      	cmp	r0, #255	; 0xff
 80125d6:	d0a3      	beq.n	8012520 <wait_session_status+0x1c>
 80125d8:	38ff      	subs	r0, #255	; 0xff
 80125da:	bf18      	it	ne
 80125dc:	2001      	movne	r0, #1
 80125de:	b01d      	add	sp, #116	; 0x74
 80125e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125e4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80125e8:	9304      	str	r3, [sp, #16]
 80125ea:	4631      	mov	r1, r6
 80125ec:	f104 0008 	add.w	r0, r4, #8
 80125f0:	f000 fbdc 	bl	8012dac <uxr_get_input_reliable_stream>
 80125f4:	4680      	mov	r8, r0
 80125f6:	b348      	cbz	r0, 801264c <wait_session_status+0x148>
 80125f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80125fa:	9205      	str	r2, [sp, #20]
 80125fc:	a80c      	add	r0, sp, #48	; 0x30
 80125fe:	f7ff f89b 	bl	8011738 <ucdr_buffer_remaining>
 8012602:	4603      	mov	r3, r0
 8012604:	f10d 001d 	add.w	r0, sp, #29
 8012608:	9000      	str	r0, [sp, #0]
 801260a:	9a05      	ldr	r2, [sp, #20]
 801260c:	9902      	ldr	r1, [sp, #8]
 801260e:	4640      	mov	r0, r8
 8012610:	f004 f8fc 	bl	801680c <uxr_receive_reliable_message>
 8012614:	b1d0      	cbz	r0, 801264c <wait_session_status+0x148>
 8012616:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d03a      	beq.n	8012694 <wait_session_status+0x190>
 801261e:	9f04      	ldr	r7, [sp, #16]
 8012620:	e00a      	b.n	8012638 <wait_session_status+0x134>
 8012622:	f04f 0302 	mov.w	r3, #2
 8012626:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 801262a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801262e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8012632:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012634:	f7ff fc26 	bl	8011e84 <read_submessage_list>
 8012638:	a914      	add	r1, sp, #80	; 0x50
 801263a:	2204      	movs	r2, #4
 801263c:	4640      	mov	r0, r8
 801263e:	f004 f965 	bl	801690c <uxr_next_input_reliable_buffer_available>
 8012642:	4603      	mov	r3, r0
 8012644:	a914      	add	r1, sp, #80	; 0x50
 8012646:	4620      	mov	r0, r4
 8012648:	2b00      	cmp	r3, #0
 801264a:	d1ea      	bne.n	8012622 <wait_session_status+0x11e>
 801264c:	9904      	ldr	r1, [sp, #16]
 801264e:	4632      	mov	r2, r6
 8012650:	4620      	mov	r0, r4
 8012652:	f7ff fa93 	bl	8011b7c <write_submessage_acknack.isra.0>
 8012656:	e76f      	b.n	8012538 <wait_session_status+0x34>
 8012658:	4631      	mov	r1, r6
 801265a:	f104 0008 	add.w	r0, r4, #8
 801265e:	f000 fb9b 	bl	8012d98 <uxr_get_input_best_effort_stream>
 8012662:	2800      	cmp	r0, #0
 8012664:	f43f af68 	beq.w	8012538 <wait_session_status+0x34>
 8012668:	9902      	ldr	r1, [sp, #8]
 801266a:	f004 f83b 	bl	80166e4 <uxr_receive_best_effort_message>
 801266e:	2800      	cmp	r0, #0
 8012670:	f43f af62 	beq.w	8012538 <wait_session_status+0x34>
 8012674:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012678:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801267a:	a90c      	add	r1, sp, #48	; 0x30
 801267c:	4620      	mov	r0, r4
 801267e:	f7ff fc01 	bl	8011e84 <read_submessage_list>
 8012682:	e759      	b.n	8012538 <wait_session_status+0x34>
 8012684:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012686:	e9d3 0400 	ldrd	r0, r4, [r3]
 801268a:	47a0      	blx	r4
 801268c:	2001      	movs	r0, #1
 801268e:	b01d      	add	sp, #116	; 0x74
 8012690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012694:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012698:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801269a:	a90c      	add	r1, sp, #48	; 0x30
 801269c:	4620      	mov	r0, r4
 801269e:	f7ff fbf1 	bl	8011e84 <read_submessage_list>
 80126a2:	e7bc      	b.n	801261e <wait_session_status+0x11a>

080126a4 <uxr_delete_session_retries>:
 80126a4:	b530      	push	{r4, r5, lr}
 80126a6:	b08f      	sub	sp, #60	; 0x3c
 80126a8:	4604      	mov	r4, r0
 80126aa:	460d      	mov	r5, r1
 80126ac:	f000 fa2e 	bl	8012b0c <uxr_session_header_offset>
 80126b0:	2300      	movs	r3, #0
 80126b2:	2210      	movs	r2, #16
 80126b4:	9000      	str	r0, [sp, #0]
 80126b6:	a902      	add	r1, sp, #8
 80126b8:	a806      	add	r0, sp, #24
 80126ba:	f7fe fffb 	bl	80116b4 <ucdr_init_buffer_origin_offset>
 80126be:	a906      	add	r1, sp, #24
 80126c0:	4620      	mov	r0, r4
 80126c2:	f000 f973 	bl	80129ac <uxr_buffer_delete_session>
 80126c6:	2200      	movs	r2, #0
 80126c8:	4611      	mov	r1, r2
 80126ca:	9b06      	ldr	r3, [sp, #24]
 80126cc:	4620      	mov	r0, r4
 80126ce:	f000 f9c7 	bl	8012a60 <uxr_stamp_session_header>
 80126d2:	a806      	add	r0, sp, #24
 80126d4:	f7ff f82c 	bl	8011730 <ucdr_buffer_length>
 80126d8:	462b      	mov	r3, r5
 80126da:	4602      	mov	r2, r0
 80126dc:	a902      	add	r1, sp, #8
 80126de:	4620      	mov	r0, r4
 80126e0:	f7ff ff10 	bl	8012504 <wait_session_status>
 80126e4:	b118      	cbz	r0, 80126ee <uxr_delete_session_retries+0x4a>
 80126e6:	7960      	ldrb	r0, [r4, #5]
 80126e8:	fab0 f080 	clz	r0, r0
 80126ec:	0940      	lsrs	r0, r0, #5
 80126ee:	b00f      	add	sp, #60	; 0x3c
 80126f0:	bd30      	pop	{r4, r5, pc}
 80126f2:	bf00      	nop

080126f4 <uxr_create_session>:
 80126f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126f8:	f100 0b08 	add.w	fp, r0, #8
 80126fc:	b0ab      	sub	sp, #172	; 0xac
 80126fe:	4604      	mov	r4, r0
 8012700:	4658      	mov	r0, fp
 8012702:	f000 fa99 	bl	8012c38 <uxr_reset_stream_storage>
 8012706:	4620      	mov	r0, r4
 8012708:	f000 fa00 	bl	8012b0c <uxr_session_header_offset>
 801270c:	2300      	movs	r3, #0
 801270e:	9000      	str	r0, [sp, #0]
 8012710:	221c      	movs	r2, #28
 8012712:	a90b      	add	r1, sp, #44	; 0x2c
 8012714:	a812      	add	r0, sp, #72	; 0x48
 8012716:	f7fe ffcd 	bl	80116b4 <ucdr_init_buffer_origin_offset>
 801271a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801271c:	8a1a      	ldrh	r2, [r3, #16]
 801271e:	3a04      	subs	r2, #4
 8012720:	b292      	uxth	r2, r2
 8012722:	a912      	add	r1, sp, #72	; 0x48
 8012724:	4620      	mov	r0, r4
 8012726:	f000 f917 	bl	8012958 <uxr_buffer_create_session>
 801272a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801272c:	4620      	mov	r0, r4
 801272e:	f000 f983 	bl	8012a38 <uxr_stamp_create_session_header>
 8012732:	a812      	add	r0, sp, #72	; 0x48
 8012734:	f7fe fffc 	bl	8011730 <ucdr_buffer_length>
 8012738:	23ff      	movs	r3, #255	; 0xff
 801273a:	7163      	strb	r3, [r4, #5]
 801273c:	230a      	movs	r3, #10
 801273e:	46da      	mov	sl, fp
 8012740:	9303      	str	r3, [sp, #12]
 8012742:	4683      	mov	fp, r0
 8012744:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012746:	465a      	mov	r2, fp
 8012748:	e9d3 0500 	ldrd	r0, r5, [r3]
 801274c:	a90b      	add	r1, sp, #44	; 0x2c
 801274e:	47a8      	blx	r5
 8012750:	f000 fb92 	bl	8012e78 <uxr_millis>
 8012754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012758:	4605      	mov	r5, r0
 801275a:	e009      	b.n	8012770 <uxr_create_session+0x7c>
 801275c:	f000 fb8c 	bl	8012e78 <uxr_millis>
 8012760:	1b40      	subs	r0, r0, r5
 8012762:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012766:	2b00      	cmp	r3, #0
 8012768:	7962      	ldrb	r2, [r4, #5]
 801276a:	dd38      	ble.n	80127de <uxr_create_session+0xea>
 801276c:	2aff      	cmp	r2, #255	; 0xff
 801276e:	d13c      	bne.n	80127ea <uxr_create_session+0xf6>
 8012770:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012772:	a907      	add	r1, sp, #28
 8012774:	6896      	ldr	r6, [r2, #8]
 8012776:	6810      	ldr	r0, [r2, #0]
 8012778:	aa08      	add	r2, sp, #32
 801277a:	47b0      	blx	r6
 801277c:	2800      	cmp	r0, #0
 801277e:	d0ed      	beq.n	801275c <uxr_create_session+0x68>
 8012780:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012784:	a81a      	add	r0, sp, #104	; 0x68
 8012786:	f7fe ffa7 	bl	80116d8 <ucdr_init_buffer>
 801278a:	2600      	movs	r6, #0
 801278c:	f10d 031a 	add.w	r3, sp, #26
 8012790:	aa06      	add	r2, sp, #24
 8012792:	a91a      	add	r1, sp, #104	; 0x68
 8012794:	4620      	mov	r0, r4
 8012796:	f88d 6018 	strb.w	r6, [sp, #24]
 801279a:	f000 f975 	bl	8012a88 <uxr_read_session_header>
 801279e:	2800      	cmp	r0, #0
 80127a0:	d0dc      	beq.n	801275c <uxr_create_session+0x68>
 80127a2:	4631      	mov	r1, r6
 80127a4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80127a8:	f000 fa12 	bl	8012bd0 <uxr_stream_id_from_raw>
 80127ac:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80127b0:	2e01      	cmp	r6, #1
 80127b2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80127b6:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80127ba:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80127be:	d053      	beq.n	8012868 <uxr_create_session+0x174>
 80127c0:	2e02      	cmp	r6, #2
 80127c2:	d018      	beq.n	80127f6 <uxr_create_session+0x102>
 80127c4:	2e00      	cmp	r6, #0
 80127c6:	d1c9      	bne.n	801275c <uxr_create_session+0x68>
 80127c8:	4631      	mov	r1, r6
 80127ca:	4630      	mov	r0, r6
 80127cc:	f000 fa00 	bl	8012bd0 <uxr_stream_id_from_raw>
 80127d0:	a91a      	add	r1, sp, #104	; 0x68
 80127d2:	4602      	mov	r2, r0
 80127d4:	900a      	str	r0, [sp, #40]	; 0x28
 80127d6:	4620      	mov	r0, r4
 80127d8:	f7ff fb54 	bl	8011e84 <read_submessage_list>
 80127dc:	e7be      	b.n	801275c <uxr_create_session+0x68>
 80127de:	9b03      	ldr	r3, [sp, #12]
 80127e0:	3b01      	subs	r3, #1
 80127e2:	9303      	str	r3, [sp, #12]
 80127e4:	d001      	beq.n	80127ea <uxr_create_session+0xf6>
 80127e6:	2aff      	cmp	r2, #255	; 0xff
 80127e8:	d0ac      	beq.n	8012744 <uxr_create_session+0x50>
 80127ea:	2a00      	cmp	r2, #0
 80127ec:	d051      	beq.n	8012892 <uxr_create_session+0x19e>
 80127ee:	2000      	movs	r0, #0
 80127f0:	b02b      	add	sp, #172	; 0xac
 80127f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80127fa:	9304      	str	r3, [sp, #16]
 80127fc:	4639      	mov	r1, r7
 80127fe:	4650      	mov	r0, sl
 8012800:	f000 fad4 	bl	8012dac <uxr_get_input_reliable_stream>
 8012804:	4680      	mov	r8, r0
 8012806:	b348      	cbz	r0, 801285c <uxr_create_session+0x168>
 8012808:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801280a:	9205      	str	r2, [sp, #20]
 801280c:	a81a      	add	r0, sp, #104	; 0x68
 801280e:	f7fe ff93 	bl	8011738 <ucdr_buffer_remaining>
 8012812:	4603      	mov	r3, r0
 8012814:	f10d 0019 	add.w	r0, sp, #25
 8012818:	9000      	str	r0, [sp, #0]
 801281a:	9a05      	ldr	r2, [sp, #20]
 801281c:	4649      	mov	r1, r9
 801281e:	4640      	mov	r0, r8
 8012820:	f003 fff4 	bl	801680c <uxr_receive_reliable_message>
 8012824:	b1d0      	cbz	r0, 801285c <uxr_create_session+0x168>
 8012826:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d038      	beq.n	80128a0 <uxr_create_session+0x1ac>
 801282e:	9e04      	ldr	r6, [sp, #16]
 8012830:	e00a      	b.n	8012848 <uxr_create_session+0x154>
 8012832:	f04f 0302 	mov.w	r3, #2
 8012836:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 801283a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 801283e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012844:	f7ff fb1e 	bl	8011e84 <read_submessage_list>
 8012848:	a922      	add	r1, sp, #136	; 0x88
 801284a:	2204      	movs	r2, #4
 801284c:	4640      	mov	r0, r8
 801284e:	f004 f85d 	bl	801690c <uxr_next_input_reliable_buffer_available>
 8012852:	4603      	mov	r3, r0
 8012854:	a922      	add	r1, sp, #136	; 0x88
 8012856:	4620      	mov	r0, r4
 8012858:	2b00      	cmp	r3, #0
 801285a:	d1ea      	bne.n	8012832 <uxr_create_session+0x13e>
 801285c:	9904      	ldr	r1, [sp, #16]
 801285e:	463a      	mov	r2, r7
 8012860:	4620      	mov	r0, r4
 8012862:	f7ff f98b 	bl	8011b7c <write_submessage_acknack.isra.0>
 8012866:	e779      	b.n	801275c <uxr_create_session+0x68>
 8012868:	4639      	mov	r1, r7
 801286a:	4650      	mov	r0, sl
 801286c:	f000 fa94 	bl	8012d98 <uxr_get_input_best_effort_stream>
 8012870:	2800      	cmp	r0, #0
 8012872:	f43f af73 	beq.w	801275c <uxr_create_session+0x68>
 8012876:	4649      	mov	r1, r9
 8012878:	f003 ff34 	bl	80166e4 <uxr_receive_best_effort_message>
 801287c:	2800      	cmp	r0, #0
 801287e:	f43f af6d 	beq.w	801275c <uxr_create_session+0x68>
 8012882:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8012886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012888:	a91a      	add	r1, sp, #104	; 0x68
 801288a:	4620      	mov	r0, r4
 801288c:	f7ff fafa 	bl	8011e84 <read_submessage_list>
 8012890:	e764      	b.n	801275c <uxr_create_session+0x68>
 8012892:	4650      	mov	r0, sl
 8012894:	f000 f9d0 	bl	8012c38 <uxr_reset_stream_storage>
 8012898:	2001      	movs	r0, #1
 801289a:	b02b      	add	sp, #172	; 0xac
 801289c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128a0:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80128a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128a6:	a91a      	add	r1, sp, #104	; 0x68
 80128a8:	4620      	mov	r0, r4
 80128aa:	f7ff faeb 	bl	8011e84 <read_submessage_list>
 80128ae:	e7be      	b.n	801282e <uxr_create_session+0x13a>

080128b0 <uxr_prepare_stream_to_write_submessage>:
 80128b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128b4:	b082      	sub	sp, #8
 80128b6:	4682      	mov	sl, r0
 80128b8:	4610      	mov	r0, r2
 80128ba:	4615      	mov	r5, r2
 80128bc:	461e      	mov	r6, r3
 80128be:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80128c2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80128c6:	9101      	str	r1, [sp, #4]
 80128c8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80128cc:	f000 face 	bl	8012e6c <uxr_submessage_padding>
 80128d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80128d4:	f105 0904 	add.w	r9, r5, #4
 80128d8:	2b01      	cmp	r3, #1
 80128da:	4481      	add	r9, r0
 80128dc:	d01d      	beq.n	801291a <uxr_prepare_stream_to_write_submessage+0x6a>
 80128de:	2b02      	cmp	r3, #2
 80128e0:	d116      	bne.n	8012910 <uxr_prepare_stream_to_write_submessage+0x60>
 80128e2:	4621      	mov	r1, r4
 80128e4:	f10a 0008 	add.w	r0, sl, #8
 80128e8:	f000 fa4c 	bl	8012d84 <uxr_get_output_reliable_stream>
 80128ec:	4604      	mov	r4, r0
 80128ee:	b158      	cbz	r0, 8012908 <uxr_prepare_stream_to_write_submessage+0x58>
 80128f0:	4649      	mov	r1, r9
 80128f2:	4632      	mov	r2, r6
 80128f4:	f004 f9c6 	bl	8016c84 <uxr_prepare_reliable_buffer_to_write>
 80128f8:	4604      	mov	r4, r0
 80128fa:	b12c      	cbz	r4, 8012908 <uxr_prepare_stream_to_write_submessage+0x58>
 80128fc:	4643      	mov	r3, r8
 80128fe:	b2aa      	uxth	r2, r5
 8012900:	4639      	mov	r1, r7
 8012902:	4630      	mov	r0, r6
 8012904:	f000 fa72 	bl	8012dec <uxr_buffer_submessage_header>
 8012908:	4620      	mov	r0, r4
 801290a:	b002      	add	sp, #8
 801290c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012910:	2400      	movs	r4, #0
 8012912:	4620      	mov	r0, r4
 8012914:	b002      	add	sp, #8
 8012916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801291a:	4621      	mov	r1, r4
 801291c:	f10a 0008 	add.w	r0, sl, #8
 8012920:	f000 fa28 	bl	8012d74 <uxr_get_output_best_effort_stream>
 8012924:	4604      	mov	r4, r0
 8012926:	2800      	cmp	r0, #0
 8012928:	d0ee      	beq.n	8012908 <uxr_prepare_stream_to_write_submessage+0x58>
 801292a:	4649      	mov	r1, r9
 801292c:	4632      	mov	r2, r6
 801292e:	f004 f8d9 	bl	8016ae4 <uxr_prepare_best_effort_buffer_to_write>
 8012932:	4604      	mov	r4, r0
 8012934:	e7e1      	b.n	80128fa <uxr_prepare_stream_to_write_submessage+0x4a>
 8012936:	bf00      	nop

08012938 <uxr_init_session_info>:
 8012938:	0e13      	lsrs	r3, r2, #24
 801293a:	7043      	strb	r3, [r0, #1]
 801293c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8012940:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012944:	7001      	strb	r1, [r0, #0]
 8012946:	70c3      	strb	r3, [r0, #3]
 8012948:	2109      	movs	r1, #9
 801294a:	23ff      	movs	r3, #255	; 0xff
 801294c:	f880 c002 	strb.w	ip, [r0, #2]
 8012950:	7102      	strb	r2, [r0, #4]
 8012952:	80c1      	strh	r1, [r0, #6]
 8012954:	7143      	strb	r3, [r0, #5]
 8012956:	4770      	bx	lr

08012958 <uxr_buffer_create_session>:
 8012958:	b530      	push	{r4, r5, lr}
 801295a:	b089      	sub	sp, #36	; 0x24
 801295c:	2300      	movs	r3, #0
 801295e:	4d12      	ldr	r5, [pc, #72]	; (80129a8 <uxr_buffer_create_session+0x50>)
 8012960:	9307      	str	r3, [sp, #28]
 8012962:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012966:	2201      	movs	r2, #1
 8012968:	9301      	str	r3, [sp, #4]
 801296a:	80c2      	strh	r2, [r0, #6]
 801296c:	f88d 2004 	strb.w	r2, [sp, #4]
 8012970:	682a      	ldr	r2, [r5, #0]
 8012972:	9200      	str	r2, [sp, #0]
 8012974:	88aa      	ldrh	r2, [r5, #4]
 8012976:	f8ad 2006 	strh.w	r2, [sp, #6]
 801297a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801297e:	9202      	str	r2, [sp, #8]
 8012980:	460c      	mov	r4, r1
 8012982:	7802      	ldrb	r2, [r0, #0]
 8012984:	9303      	str	r3, [sp, #12]
 8012986:	4619      	mov	r1, r3
 8012988:	f88d 200c 	strb.w	r2, [sp, #12]
 801298c:	4620      	mov	r0, r4
 801298e:	2210      	movs	r2, #16
 8012990:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012994:	9306      	str	r3, [sp, #24]
 8012996:	f000 fa29 	bl	8012dec <uxr_buffer_submessage_header>
 801299a:	4669      	mov	r1, sp
 801299c:	4620      	mov	r0, r4
 801299e:	f001 f981 	bl	8013ca4 <uxr_serialize_CREATE_CLIENT_Payload>
 80129a2:	b009      	add	sp, #36	; 0x24
 80129a4:	bd30      	pop	{r4, r5, pc}
 80129a6:	bf00      	nop
 80129a8:	08019f44 	.word	0x08019f44

080129ac <uxr_buffer_delete_session>:
 80129ac:	b510      	push	{r4, lr}
 80129ae:	4b0c      	ldr	r3, [pc, #48]	; (80129e0 <uxr_buffer_delete_session+0x34>)
 80129b0:	b082      	sub	sp, #8
 80129b2:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80129b6:	f8ad c006 	strh.w	ip, [sp, #6]
 80129ba:	460c      	mov	r4, r1
 80129bc:	2202      	movs	r2, #2
 80129be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80129c2:	80c2      	strh	r2, [r0, #6]
 80129c4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80129c8:	2204      	movs	r2, #4
 80129ca:	2300      	movs	r3, #0
 80129cc:	2103      	movs	r1, #3
 80129ce:	4620      	mov	r0, r4
 80129d0:	f000 fa0c 	bl	8012dec <uxr_buffer_submessage_header>
 80129d4:	a901      	add	r1, sp, #4
 80129d6:	4620      	mov	r0, r4
 80129d8:	f001 fa0a 	bl	8013df0 <uxr_serialize_DELETE_Payload>
 80129dc:	b002      	add	sp, #8
 80129de:	bd10      	pop	{r4, pc}
 80129e0:	08019f44 	.word	0x08019f44

080129e4 <uxr_read_create_session_status>:
 80129e4:	b510      	push	{r4, lr}
 80129e6:	b088      	sub	sp, #32
 80129e8:	4604      	mov	r4, r0
 80129ea:	4608      	mov	r0, r1
 80129ec:	a901      	add	r1, sp, #4
 80129ee:	f001 fa0f 	bl	8013e10 <uxr_deserialize_STATUS_AGENT_Payload>
 80129f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80129f6:	7163      	strb	r3, [r4, #5]
 80129f8:	b008      	add	sp, #32
 80129fa:	bd10      	pop	{r4, pc}

080129fc <uxr_read_delete_session_status>:
 80129fc:	b510      	push	{r4, lr}
 80129fe:	4604      	mov	r4, r0
 8012a00:	b084      	sub	sp, #16
 8012a02:	4608      	mov	r0, r1
 8012a04:	a902      	add	r1, sp, #8
 8012a06:	f001 fa33 	bl	8013e70 <uxr_deserialize_STATUS_Payload>
 8012a0a:	88e3      	ldrh	r3, [r4, #6]
 8012a0c:	2b02      	cmp	r3, #2
 8012a0e:	d001      	beq.n	8012a14 <uxr_read_delete_session_status+0x18>
 8012a10:	b004      	add	sp, #16
 8012a12:	bd10      	pop	{r4, pc}
 8012a14:	f10d 000a 	add.w	r0, sp, #10
 8012a18:	f7ff f836 	bl	8011a88 <uxr_object_id_from_raw>
 8012a1c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012a20:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012a24:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012a28:	b29b      	uxth	r3, r3
 8012a2a:	2b02      	cmp	r3, #2
 8012a2c:	bf04      	itt	eq
 8012a2e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8012a32:	7163      	strbeq	r3, [r4, #5]
 8012a34:	b004      	add	sp, #16
 8012a36:	bd10      	pop	{r4, pc}

08012a38 <uxr_stamp_create_session_header>:
 8012a38:	b510      	push	{r4, lr}
 8012a3a:	2208      	movs	r2, #8
 8012a3c:	b08a      	sub	sp, #40	; 0x28
 8012a3e:	4604      	mov	r4, r0
 8012a40:	eb0d 0002 	add.w	r0, sp, r2
 8012a44:	f7fe fe48 	bl	80116d8 <ucdr_init_buffer>
 8012a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a4c:	9400      	str	r4, [sp, #0]
 8012a4e:	2300      	movs	r3, #0
 8012a50:	461a      	mov	r2, r3
 8012a52:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8012a56:	a802      	add	r0, sp, #8
 8012a58:	f000 fbc2 	bl	80131e0 <uxr_serialize_message_header>
 8012a5c:	b00a      	add	sp, #40	; 0x28
 8012a5e:	bd10      	pop	{r4, pc}

08012a60 <uxr_stamp_session_header>:
 8012a60:	b530      	push	{r4, r5, lr}
 8012a62:	b08d      	sub	sp, #52	; 0x34
 8012a64:	4604      	mov	r4, r0
 8012a66:	460d      	mov	r5, r1
 8012a68:	9203      	str	r2, [sp, #12]
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	a804      	add	r0, sp, #16
 8012a6e:	2208      	movs	r2, #8
 8012a70:	f7fe fe32 	bl	80116d8 <ucdr_init_buffer>
 8012a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a78:	9b03      	ldr	r3, [sp, #12]
 8012a7a:	9400      	str	r4, [sp, #0]
 8012a7c:	462a      	mov	r2, r5
 8012a7e:	a804      	add	r0, sp, #16
 8012a80:	f000 fbae 	bl	80131e0 <uxr_serialize_message_header>
 8012a84:	b00d      	add	sp, #52	; 0x34
 8012a86:	bd30      	pop	{r4, r5, pc}

08012a88 <uxr_read_session_header>:
 8012a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a8c:	4607      	mov	r7, r0
 8012a8e:	b084      	sub	sp, #16
 8012a90:	4608      	mov	r0, r1
 8012a92:	460c      	mov	r4, r1
 8012a94:	4615      	mov	r5, r2
 8012a96:	461e      	mov	r6, r3
 8012a98:	f7fe fe4e 	bl	8011738 <ucdr_buffer_remaining>
 8012a9c:	2808      	cmp	r0, #8
 8012a9e:	d803      	bhi.n	8012aa8 <uxr_read_session_header+0x20>
 8012aa0:	2000      	movs	r0, #0
 8012aa2:	b004      	add	sp, #16
 8012aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa8:	f10d 080c 	add.w	r8, sp, #12
 8012aac:	4633      	mov	r3, r6
 8012aae:	462a      	mov	r2, r5
 8012ab0:	f8cd 8000 	str.w	r8, [sp]
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	f10d 010b 	add.w	r1, sp, #11
 8012aba:	f000 fbaf 	bl	801321c <uxr_deserialize_message_header>
 8012abe:	783a      	ldrb	r2, [r7, #0]
 8012ac0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012ac4:	4293      	cmp	r3, r2
 8012ac6:	d1eb      	bne.n	8012aa0 <uxr_read_session_header+0x18>
 8012ac8:	061b      	lsls	r3, r3, #24
 8012aca:	d41c      	bmi.n	8012b06 <uxr_read_session_header+0x7e>
 8012acc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012ad0:	787b      	ldrb	r3, [r7, #1]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d003      	beq.n	8012ade <uxr_read_session_header+0x56>
 8012ad6:	2001      	movs	r0, #1
 8012ad8:	f080 0001 	eor.w	r0, r0, #1
 8012adc:	e7e1      	b.n	8012aa2 <uxr_read_session_header+0x1a>
 8012ade:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8012ae2:	78bb      	ldrb	r3, [r7, #2]
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	f107 0102 	add.w	r1, r7, #2
 8012aea:	d1f4      	bne.n	8012ad6 <uxr_read_session_header+0x4e>
 8012aec:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012af0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d1ee      	bne.n	8012ad6 <uxr_read_session_header+0x4e>
 8012af8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012afc:	784b      	ldrb	r3, [r1, #1]
 8012afe:	429a      	cmp	r2, r3
 8012b00:	d1e9      	bne.n	8012ad6 <uxr_read_session_header+0x4e>
 8012b02:	2000      	movs	r0, #0
 8012b04:	e7e8      	b.n	8012ad8 <uxr_read_session_header+0x50>
 8012b06:	2001      	movs	r0, #1
 8012b08:	e7cb      	b.n	8012aa2 <uxr_read_session_header+0x1a>
 8012b0a:	bf00      	nop

08012b0c <uxr_session_header_offset>:
 8012b0c:	f990 3000 	ldrsb.w	r3, [r0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	bfac      	ite	ge
 8012b14:	2008      	movge	r0, #8
 8012b16:	2004      	movlt	r0, #4
 8012b18:	4770      	bx	lr
 8012b1a:	bf00      	nop

08012b1c <uxr_init_base_object_request>:
 8012b1c:	b510      	push	{r4, lr}
 8012b1e:	88c3      	ldrh	r3, [r0, #6]
 8012b20:	b082      	sub	sp, #8
 8012b22:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8012b26:	9101      	str	r1, [sp, #4]
 8012b28:	f1a3 010a 	sub.w	r1, r3, #10
 8012b2c:	b289      	uxth	r1, r1
 8012b2e:	42a1      	cmp	r1, r4
 8012b30:	d80e      	bhi.n	8012b50 <uxr_init_base_object_request+0x34>
 8012b32:	3301      	adds	r3, #1
 8012b34:	b29c      	uxth	r4, r3
 8012b36:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012b3a:	b2db      	uxtb	r3, r3
 8012b3c:	80c4      	strh	r4, [r0, #6]
 8012b3e:	9801      	ldr	r0, [sp, #4]
 8012b40:	7011      	strb	r1, [r2, #0]
 8012b42:	7053      	strb	r3, [r2, #1]
 8012b44:	1c91      	adds	r1, r2, #2
 8012b46:	f7fe ffb3 	bl	8011ab0 <uxr_object_id_to_raw>
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	b002      	add	sp, #8
 8012b4e:	bd10      	pop	{r4, pc}
 8012b50:	230a      	movs	r3, #10
 8012b52:	2100      	movs	r1, #0
 8012b54:	461c      	mov	r4, r3
 8012b56:	e7f1      	b.n	8012b3c <uxr_init_base_object_request+0x20>

08012b58 <uxr_parse_base_object_request>:
 8012b58:	b570      	push	{r4, r5, r6, lr}
 8012b5a:	4604      	mov	r4, r0
 8012b5c:	3002      	adds	r0, #2
 8012b5e:	460d      	mov	r5, r1
 8012b60:	4616      	mov	r6, r2
 8012b62:	f7fe ff91 	bl	8011a88 <uxr_object_id_from_raw>
 8012b66:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012b6a:	8028      	strh	r0, [r5, #0]
 8012b6c:	806b      	strh	r3, [r5, #2]
 8012b6e:	7822      	ldrb	r2, [r4, #0]
 8012b70:	7863      	ldrb	r3, [r4, #1]
 8012b72:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012b76:	8033      	strh	r3, [r6, #0]
 8012b78:	bd70      	pop	{r4, r5, r6, pc}
 8012b7a:	bf00      	nop

08012b7c <uxr_stream_id>:
 8012b7c:	2901      	cmp	r1, #1
 8012b7e:	b082      	sub	sp, #8
 8012b80:	d01d      	beq.n	8012bbe <uxr_stream_id+0x42>
 8012b82:	2902      	cmp	r1, #2
 8012b84:	f04f 0c00 	mov.w	ip, #0
 8012b88:	d01e      	beq.n	8012bc8 <uxr_stream_id+0x4c>
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	f36c 0307 	bfi	r3, ip, #0, #8
 8012b90:	f360 230f 	bfi	r3, r0, #8, #8
 8012b94:	f361 4317 	bfi	r3, r1, #16, #8
 8012b98:	f362 631f 	bfi	r3, r2, #24, #8
 8012b9c:	b2da      	uxtb	r2, r3
 8012b9e:	2000      	movs	r0, #0
 8012ba0:	f362 0007 	bfi	r0, r2, #0, #8
 8012ba4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012ba8:	f362 200f 	bfi	r0, r2, #8, #8
 8012bac:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012bb0:	f362 4017 	bfi	r0, r2, #16, #8
 8012bb4:	0e1b      	lsrs	r3, r3, #24
 8012bb6:	f363 601f 	bfi	r0, r3, #24, #8
 8012bba:	b002      	add	sp, #8
 8012bbc:	4770      	bx	lr
 8012bbe:	f100 0c01 	add.w	ip, r0, #1
 8012bc2:	fa5f fc8c 	uxtb.w	ip, ip
 8012bc6:	e7e0      	b.n	8012b8a <uxr_stream_id+0xe>
 8012bc8:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 8012bcc:	e7dd      	b.n	8012b8a <uxr_stream_id+0xe>
 8012bce:	bf00      	nop

08012bd0 <uxr_stream_id_from_raw>:
 8012bd0:	b082      	sub	sp, #8
 8012bd2:	b130      	cbz	r0, 8012be2 <uxr_stream_id_from_raw+0x12>
 8012bd4:	0603      	lsls	r3, r0, #24
 8012bd6:	d420      	bmi.n	8012c1a <uxr_stream_id_from_raw+0x4a>
 8012bd8:	1e42      	subs	r2, r0, #1
 8012bda:	b2d2      	uxtb	r2, r2
 8012bdc:	f04f 0c01 	mov.w	ip, #1
 8012be0:	e001      	b.n	8012be6 <uxr_stream_id_from_raw+0x16>
 8012be2:	4684      	mov	ip, r0
 8012be4:	4602      	mov	r2, r0
 8012be6:	2300      	movs	r3, #0
 8012be8:	f360 0307 	bfi	r3, r0, #0, #8
 8012bec:	f362 230f 	bfi	r3, r2, #8, #8
 8012bf0:	f36c 4317 	bfi	r3, ip, #16, #8
 8012bf4:	f361 631f 	bfi	r3, r1, #24, #8
 8012bf8:	b2da      	uxtb	r2, r3
 8012bfa:	2000      	movs	r0, #0
 8012bfc:	f362 0007 	bfi	r0, r2, #0, #8
 8012c00:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012c04:	f362 200f 	bfi	r0, r2, #8, #8
 8012c08:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012c0c:	f362 4017 	bfi	r0, r2, #16, #8
 8012c10:	0e1b      	lsrs	r3, r3, #24
 8012c12:	f363 601f 	bfi	r0, r3, #24, #8
 8012c16:	b002      	add	sp, #8
 8012c18:	4770      	bx	lr
 8012c1a:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8012c1e:	f04f 0c02 	mov.w	ip, #2
 8012c22:	e7e0      	b.n	8012be6 <uxr_stream_id_from_raw+0x16>

08012c24 <uxr_init_stream_storage>:
 8012c24:	2300      	movs	r3, #0
 8012c26:	7403      	strb	r3, [r0, #16]
 8012c28:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8012c2c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8012c30:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8012c34:	4770      	bx	lr
 8012c36:	bf00      	nop

08012c38 <uxr_reset_stream_storage>:
 8012c38:	b570      	push	{r4, r5, r6, lr}
 8012c3a:	7c03      	ldrb	r3, [r0, #16]
 8012c3c:	4604      	mov	r4, r0
 8012c3e:	b153      	cbz	r3, 8012c56 <uxr_reset_stream_storage+0x1e>
 8012c40:	4606      	mov	r6, r0
 8012c42:	2500      	movs	r5, #0
 8012c44:	4630      	mov	r0, r6
 8012c46:	f003 ff47 	bl	8016ad8 <uxr_reset_output_best_effort_stream>
 8012c4a:	7c23      	ldrb	r3, [r4, #16]
 8012c4c:	3501      	adds	r5, #1
 8012c4e:	42ab      	cmp	r3, r5
 8012c50:	f106 0610 	add.w	r6, r6, #16
 8012c54:	d8f6      	bhi.n	8012c44 <uxr_reset_stream_storage+0xc>
 8012c56:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012c5a:	b163      	cbz	r3, 8012c76 <uxr_reset_stream_storage+0x3e>
 8012c5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012c60:	2500      	movs	r5, #0
 8012c62:	4630      	mov	r0, r6
 8012c64:	f003 fd3a 	bl	80166dc <uxr_reset_input_best_effort_stream>
 8012c68:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012c6c:	3501      	adds	r5, #1
 8012c6e:	42ab      	cmp	r3, r5
 8012c70:	f106 0602 	add.w	r6, r6, #2
 8012c74:	d8f5      	bhi.n	8012c62 <uxr_reset_stream_storage+0x2a>
 8012c76:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8012c7a:	b163      	cbz	r3, 8012c96 <uxr_reset_stream_storage+0x5e>
 8012c7c:	f104 0618 	add.w	r6, r4, #24
 8012c80:	2500      	movs	r5, #0
 8012c82:	4630      	mov	r0, r6
 8012c84:	f003 ffd4 	bl	8016c30 <uxr_reset_output_reliable_stream>
 8012c88:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8012c8c:	3501      	adds	r5, #1
 8012c8e:	42ab      	cmp	r3, r5
 8012c90:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8012c94:	d8f5      	bhi.n	8012c82 <uxr_reset_stream_storage+0x4a>
 8012c96:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8012c9a:	b163      	cbz	r3, 8012cb6 <uxr_reset_stream_storage+0x7e>
 8012c9c:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8012ca0:	2500      	movs	r5, #0
 8012ca2:	4630      	mov	r0, r6
 8012ca4:	f003 fd8e 	bl	80167c4 <uxr_reset_input_reliable_stream>
 8012ca8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8012cac:	3501      	adds	r5, #1
 8012cae:	42ab      	cmp	r3, r5
 8012cb0:	f106 0618 	add.w	r6, r6, #24
 8012cb4:	d8f5      	bhi.n	8012ca2 <uxr_reset_stream_storage+0x6a>
 8012cb6:	bd70      	pop	{r4, r5, r6, pc}

08012cb8 <uxr_add_output_best_effort_buffer>:
 8012cb8:	b510      	push	{r4, lr}
 8012cba:	7c04      	ldrb	r4, [r0, #16]
 8012cbc:	f104 0c01 	add.w	ip, r4, #1
 8012cc0:	b082      	sub	sp, #8
 8012cc2:	f880 c010 	strb.w	ip, [r0, #16]
 8012cc6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8012cca:	f003 fefb 	bl	8016ac4 <uxr_init_output_best_effort_stream>
 8012cce:	2201      	movs	r2, #1
 8012cd0:	4611      	mov	r1, r2
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	b002      	add	sp, #8
 8012cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cda:	f7ff bf4f 	b.w	8012b7c <uxr_stream_id>
 8012cde:	bf00      	nop

08012ce0 <uxr_add_output_reliable_buffer>:
 8012ce0:	b510      	push	{r4, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	4684      	mov	ip, r0
 8012ce6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012cea:	9000      	str	r0, [sp, #0]
 8012cec:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8012cf0:	2028      	movs	r0, #40	; 0x28
 8012cf2:	fb00 c004 	mla	r0, r0, r4, ip
 8012cf6:	f104 0e01 	add.w	lr, r4, #1
 8012cfa:	3018      	adds	r0, #24
 8012cfc:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8012d00:	f003 ff5e 	bl	8016bc0 <uxr_init_output_reliable_stream>
 8012d04:	2201      	movs	r2, #1
 8012d06:	2102      	movs	r1, #2
 8012d08:	4620      	mov	r0, r4
 8012d0a:	b004      	add	sp, #16
 8012d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d10:	f7ff bf34 	b.w	8012b7c <uxr_stream_id>

08012d14 <uxr_add_input_best_effort_buffer>:
 8012d14:	b510      	push	{r4, lr}
 8012d16:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	1c62      	adds	r2, r4, #1
 8012d1e:	f104 0021 	add.w	r0, r4, #33	; 0x21
 8012d22:	b082      	sub	sp, #8
 8012d24:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d2c:	f003 fcd2 	bl	80166d4 <uxr_init_input_best_effort_stream>
 8012d30:	2200      	movs	r2, #0
 8012d32:	2101      	movs	r1, #1
 8012d34:	4620      	mov	r0, r4
 8012d36:	b002      	add	sp, #8
 8012d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d3c:	f7ff bf1e 	b.w	8012b7c <uxr_stream_id>

08012d40 <uxr_add_input_reliable_buffer>:
 8012d40:	b510      	push	{r4, lr}
 8012d42:	b084      	sub	sp, #16
 8012d44:	4684      	mov	ip, r0
 8012d46:	9806      	ldr	r0, [sp, #24]
 8012d48:	9000      	str	r0, [sp, #0]
 8012d4a:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8012d4e:	2018      	movs	r0, #24
 8012d50:	fb00 c004 	mla	r0, r0, r4, ip
 8012d54:	f104 0e01 	add.w	lr, r4, #1
 8012d58:	3048      	adds	r0, #72	; 0x48
 8012d5a:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8012d5e:	f003 fd05 	bl	801676c <uxr_init_input_reliable_stream>
 8012d62:	2200      	movs	r2, #0
 8012d64:	2102      	movs	r1, #2
 8012d66:	4620      	mov	r0, r4
 8012d68:	b004      	add	sp, #16
 8012d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d6e:	f7ff bf05 	b.w	8012b7c <uxr_stream_id>
 8012d72:	bf00      	nop

08012d74 <uxr_get_output_best_effort_stream>:
 8012d74:	7c03      	ldrb	r3, [r0, #16]
 8012d76:	428b      	cmp	r3, r1
 8012d78:	bf8c      	ite	hi
 8012d7a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012d7e:	2000      	movls	r0, #0
 8012d80:	4770      	bx	lr
 8012d82:	bf00      	nop

08012d84 <uxr_get_output_reliable_stream>:
 8012d84:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8012d88:	428b      	cmp	r3, r1
 8012d8a:	bf83      	ittte	hi
 8012d8c:	2328      	movhi	r3, #40	; 0x28
 8012d8e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012d92:	3018      	addhi	r0, #24
 8012d94:	2000      	movls	r0, #0
 8012d96:	4770      	bx	lr

08012d98 <uxr_get_input_best_effort_stream>:
 8012d98:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8012d9c:	428b      	cmp	r3, r1
 8012d9e:	bf86      	itte	hi
 8012da0:	3121      	addhi	r1, #33	; 0x21
 8012da2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012da6:	2000      	movls	r0, #0
 8012da8:	4770      	bx	lr
 8012daa:	bf00      	nop

08012dac <uxr_get_input_reliable_stream>:
 8012dac:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8012db0:	428b      	cmp	r3, r1
 8012db2:	bf83      	ittte	hi
 8012db4:	2318      	movhi	r3, #24
 8012db6:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012dba:	3048      	addhi	r0, #72	; 0x48
 8012dbc:	2000      	movls	r0, #0
 8012dbe:	4770      	bx	lr

08012dc0 <uxr_output_streams_confirmed>:
 8012dc0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8012dc4:	b183      	cbz	r3, 8012de8 <uxr_output_streams_confirmed+0x28>
 8012dc6:	b570      	push	{r4, r5, r6, lr}
 8012dc8:	4606      	mov	r6, r0
 8012dca:	f100 0518 	add.w	r5, r0, #24
 8012dce:	2400      	movs	r4, #0
 8012dd0:	e001      	b.n	8012dd6 <uxr_output_streams_confirmed+0x16>
 8012dd2:	3528      	adds	r5, #40	; 0x28
 8012dd4:	b138      	cbz	r0, 8012de6 <uxr_output_streams_confirmed+0x26>
 8012dd6:	4628      	mov	r0, r5
 8012dd8:	f004 f988 	bl	80170ec <uxr_is_output_up_to_date>
 8012ddc:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8012de0:	3401      	adds	r4, #1
 8012de2:	42a3      	cmp	r3, r4
 8012de4:	d8f5      	bhi.n	8012dd2 <uxr_output_streams_confirmed+0x12>
 8012de6:	bd70      	pop	{r4, r5, r6, pc}
 8012de8:	2001      	movs	r0, #1
 8012dea:	4770      	bx	lr

08012dec <uxr_buffer_submessage_header>:
 8012dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dee:	4604      	mov	r4, r0
 8012df0:	460e      	mov	r6, r1
 8012df2:	2104      	movs	r1, #4
 8012df4:	4615      	mov	r5, r2
 8012df6:	461f      	mov	r7, r3
 8012df8:	f7fe fc88 	bl	801170c <ucdr_align_to>
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	ea47 0203 	orr.w	r2, r7, r3
 8012e02:	4631      	mov	r1, r6
 8012e04:	7523      	strb	r3, [r4, #20]
 8012e06:	4620      	mov	r0, r4
 8012e08:	462b      	mov	r3, r5
 8012e0a:	f000 fa27 	bl	801325c <uxr_serialize_submessage_header>
 8012e0e:	4620      	mov	r0, r4
 8012e10:	f7fe fc92 	bl	8011738 <ucdr_buffer_remaining>
 8012e14:	42a8      	cmp	r0, r5
 8012e16:	bf34      	ite	cc
 8012e18:	2000      	movcc	r0, #0
 8012e1a:	2001      	movcs	r0, #1
 8012e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e1e:	bf00      	nop

08012e20 <uxr_read_submessage_header>:
 8012e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e24:	4604      	mov	r4, r0
 8012e26:	460d      	mov	r5, r1
 8012e28:	2104      	movs	r1, #4
 8012e2a:	4616      	mov	r6, r2
 8012e2c:	4698      	mov	r8, r3
 8012e2e:	f7fe fc6d 	bl	801170c <ucdr_align_to>
 8012e32:	4620      	mov	r0, r4
 8012e34:	f7fe fc80 	bl	8011738 <ucdr_buffer_remaining>
 8012e38:	2803      	cmp	r0, #3
 8012e3a:	bf8c      	ite	hi
 8012e3c:	2701      	movhi	r7, #1
 8012e3e:	2700      	movls	r7, #0
 8012e40:	d802      	bhi.n	8012e48 <uxr_read_submessage_header+0x28>
 8012e42:	4638      	mov	r0, r7
 8012e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e48:	4633      	mov	r3, r6
 8012e4a:	4642      	mov	r2, r8
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	4629      	mov	r1, r5
 8012e50:	f000 fa18 	bl	8013284 <uxr_deserialize_submessage_header>
 8012e54:	f898 3000 	ldrb.w	r3, [r8]
 8012e58:	f003 0201 	and.w	r2, r3, #1
 8012e5c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8012e60:	f888 3000 	strb.w	r3, [r8]
 8012e64:	7522      	strb	r2, [r4, #20]
 8012e66:	4638      	mov	r0, r7
 8012e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e6c <uxr_submessage_padding>:
 8012e6c:	f010 0003 	ands.w	r0, r0, #3
 8012e70:	bf18      	it	ne
 8012e72:	f1c0 0004 	rsbne	r0, r0, #4
 8012e76:	4770      	bx	lr

08012e78 <uxr_millis>:
 8012e78:	b510      	push	{r4, lr}
 8012e7a:	b084      	sub	sp, #16
 8012e7c:	4669      	mov	r1, sp
 8012e7e:	2001      	movs	r0, #1
 8012e80:	f7ee fcfe 	bl	8001880 <clock_gettime>
 8012e84:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012e88:	4906      	ldr	r1, [pc, #24]	; (8012ea4 <uxr_millis+0x2c>)
 8012e8a:	fba0 0301 	umull	r0, r3, r0, r1
 8012e8e:	1900      	adds	r0, r0, r4
 8012e90:	fb01 3102 	mla	r1, r1, r2, r3
 8012e94:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012e98:	4a03      	ldr	r2, [pc, #12]	; (8012ea8 <uxr_millis+0x30>)
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	f7ed fa00 	bl	80002a0 <__aeabi_ldivmod>
 8012ea0:	b004      	add	sp, #16
 8012ea2:	bd10      	pop	{r4, pc}
 8012ea4:	3b9aca00 	.word	0x3b9aca00
 8012ea8:	000f4240 	.word	0x000f4240

08012eac <uxr_nanos>:
 8012eac:	b510      	push	{r4, lr}
 8012eae:	b084      	sub	sp, #16
 8012eb0:	4669      	mov	r1, sp
 8012eb2:	2001      	movs	r0, #1
 8012eb4:	f7ee fce4 	bl	8001880 <clock_gettime>
 8012eb8:	4a06      	ldr	r2, [pc, #24]	; (8012ed4 <uxr_nanos+0x28>)
 8012eba:	9800      	ldr	r0, [sp, #0]
 8012ebc:	9902      	ldr	r1, [sp, #8]
 8012ebe:	9c01      	ldr	r4, [sp, #4]
 8012ec0:	fba0 0302 	umull	r0, r3, r0, r2
 8012ec4:	1840      	adds	r0, r0, r1
 8012ec6:	fb02 3304 	mla	r3, r2, r4, r3
 8012eca:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8012ece:	b004      	add	sp, #16
 8012ed0:	bd10      	pop	{r4, pc}
 8012ed2:	bf00      	nop
 8012ed4:	3b9aca00 	.word	0x3b9aca00

08012ed8 <on_full_output_buffer_fragmented>:
 8012ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012edc:	460c      	mov	r4, r1
 8012ede:	b08a      	sub	sp, #40	; 0x28
 8012ee0:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8012ee4:	4606      	mov	r6, r0
 8012ee6:	f104 0008 	add.w	r0, r4, #8
 8012eea:	f7ff ff4b 	bl	8012d84 <uxr_get_output_reliable_stream>
 8012eee:	4605      	mov	r5, r0
 8012ef0:	f004 f906 	bl	8017100 <get_available_free_slots>
 8012ef4:	b968      	cbnz	r0, 8012f12 <on_full_output_buffer_fragmented+0x3a>
 8012ef6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8012efa:	4620      	mov	r0, r4
 8012efc:	4798      	blx	r3
 8012efe:	b918      	cbnz	r0, 8012f08 <on_full_output_buffer_fragmented+0x30>
 8012f00:	2001      	movs	r0, #1
 8012f02:	b00a      	add	sp, #40	; 0x28
 8012f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f08:	4628      	mov	r0, r5
 8012f0a:	f004 f8f9 	bl	8017100 <get_available_free_slots>
 8012f0e:	2800      	cmp	r0, #0
 8012f10:	d0f6      	beq.n	8012f00 <on_full_output_buffer_fragmented+0x28>
 8012f12:	8929      	ldrh	r1, [r5, #8]
 8012f14:	89eb      	ldrh	r3, [r5, #14]
 8012f16:	7b28      	ldrb	r0, [r5, #12]
 8012f18:	686a      	ldr	r2, [r5, #4]
 8012f1a:	fbb2 f8f1 	udiv	r8, r2, r1
 8012f1e:	fbb3 f2f1 	udiv	r2, r3, r1
 8012f22:	fb01 3112 	mls	r1, r1, r2, r3
 8012f26:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 8012f2a:	b289      	uxth	r1, r1
 8012f2c:	fb08 f101 	mul.w	r1, r8, r1
 8012f30:	30fc      	adds	r0, #252	; 0xfc
 8012f32:	f1a8 0804 	sub.w	r8, r8, #4
 8012f36:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8012f3a:	4440      	add	r0, r8
 8012f3c:	b287      	uxth	r7, r0
 8012f3e:	1bdb      	subs	r3, r3, r7
 8012f40:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8012f44:	682b      	ldr	r3, [r5, #0]
 8012f46:	3104      	adds	r1, #4
 8012f48:	4419      	add	r1, r3
 8012f4a:	4642      	mov	r2, r8
 8012f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f50:	9300      	str	r3, [sp, #0]
 8012f52:	a802      	add	r0, sp, #8
 8012f54:	2300      	movs	r3, #0
 8012f56:	f7fe fbad 	bl	80116b4 <ucdr_init_buffer_origin_offset>
 8012f5a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8012f5e:	f102 0308 	add.w	r3, r2, #8
 8012f62:	4543      	cmp	r3, r8
 8012f64:	d928      	bls.n	8012fb8 <on_full_output_buffer_fragmented+0xe0>
 8012f66:	463a      	mov	r2, r7
 8012f68:	2300      	movs	r3, #0
 8012f6a:	210d      	movs	r1, #13
 8012f6c:	a802      	add	r0, sp, #8
 8012f6e:	f7ff ff3d 	bl	8012dec <uxr_buffer_submessage_header>
 8012f72:	8929      	ldrh	r1, [r5, #8]
 8012f74:	89eb      	ldrh	r3, [r5, #14]
 8012f76:	fbb3 f2f1 	udiv	r2, r3, r1
 8012f7a:	fb01 3312 	mls	r3, r1, r2, r3
 8012f7e:	b29b      	uxth	r3, r3
 8012f80:	686a      	ldr	r2, [r5, #4]
 8012f82:	fbb2 f2f1 	udiv	r2, r2, r1
 8012f86:	fb02 f303 	mul.w	r3, r2, r3
 8012f8a:	682a      	ldr	r2, [r5, #0]
 8012f8c:	f842 8003 	str.w	r8, [r2, r3]
 8012f90:	89e8      	ldrh	r0, [r5, #14]
 8012f92:	2101      	movs	r1, #1
 8012f94:	f004 f9ca 	bl	801732c <uxr_seq_num_add>
 8012f98:	9904      	ldr	r1, [sp, #16]
 8012f9a:	9a03      	ldr	r2, [sp, #12]
 8012f9c:	81e8      	strh	r0, [r5, #14]
 8012f9e:	1a52      	subs	r2, r2, r1
 8012fa0:	4630      	mov	r0, r6
 8012fa2:	f7fe fb99 	bl	80116d8 <ucdr_init_buffer>
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	490f      	ldr	r1, [pc, #60]	; (8012fe8 <on_full_output_buffer_fragmented+0x110>)
 8012faa:	4622      	mov	r2, r4
 8012fac:	f7fe fb68 	bl	8011680 <ucdr_set_on_full_buffer_callback>
 8012fb0:	2000      	movs	r0, #0
 8012fb2:	b00a      	add	sp, #40	; 0x28
 8012fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fb8:	b292      	uxth	r2, r2
 8012fba:	2302      	movs	r3, #2
 8012fbc:	210d      	movs	r1, #13
 8012fbe:	a802      	add	r0, sp, #8
 8012fc0:	f7ff ff14 	bl	8012dec <uxr_buffer_submessage_header>
 8012fc4:	8928      	ldrh	r0, [r5, #8]
 8012fc6:	89eb      	ldrh	r3, [r5, #14]
 8012fc8:	fbb3 f1f0 	udiv	r1, r3, r0
 8012fcc:	fb00 3311 	mls	r3, r0, r1, r3
 8012fd0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8012fd4:	6869      	ldr	r1, [r5, #4]
 8012fd6:	fbb1 f1f0 	udiv	r1, r1, r0
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	fb01 f303 	mul.w	r3, r1, r3
 8012fe0:	6829      	ldr	r1, [r5, #0]
 8012fe2:	3208      	adds	r2, #8
 8012fe4:	50ca      	str	r2, [r1, r3]
 8012fe6:	e7d3      	b.n	8012f90 <on_full_output_buffer_fragmented+0xb8>
 8012fe8:	08012ed9 	.word	0x08012ed9

08012fec <uxr_prepare_output_stream>:
 8012fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fee:	b087      	sub	sp, #28
 8012ff0:	2707      	movs	r7, #7
 8012ff2:	9202      	str	r2, [sp, #8]
 8012ff4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ff6:	9103      	str	r1, [sp, #12]
 8012ff8:	2500      	movs	r5, #0
 8012ffa:	3204      	adds	r2, #4
 8012ffc:	e9cd 7500 	strd	r7, r5, [sp]
 8013000:	461c      	mov	r4, r3
 8013002:	4606      	mov	r6, r0
 8013004:	f7ff fc54 	bl	80128b0 <uxr_prepare_stream_to_write_submessage>
 8013008:	f080 0201 	eor.w	r2, r0, #1
 801300c:	b2d2      	uxtb	r2, r2
 801300e:	75a2      	strb	r2, [r4, #22]
 8013010:	b112      	cbz	r2, 8013018 <uxr_prepare_output_stream+0x2c>
 8013012:	4628      	mov	r0, r5
 8013014:	b007      	add	sp, #28
 8013016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013018:	aa05      	add	r2, sp, #20
 801301a:	9902      	ldr	r1, [sp, #8]
 801301c:	4630      	mov	r0, r6
 801301e:	f7ff fd7d 	bl	8012b1c <uxr_init_base_object_request>
 8013022:	a905      	add	r1, sp, #20
 8013024:	4605      	mov	r5, r0
 8013026:	4620      	mov	r0, r4
 8013028:	f000 ffa0 	bl	8013f6c <uxr_serialize_WRITE_DATA_Payload_Data>
 801302c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013030:	69a6      	ldr	r6, [r4, #24]
 8013032:	69e7      	ldr	r7, [r4, #28]
 8013034:	1a52      	subs	r2, r2, r1
 8013036:	4620      	mov	r0, r4
 8013038:	f7fe fb4e 	bl	80116d8 <ucdr_init_buffer>
 801303c:	4620      	mov	r0, r4
 801303e:	463a      	mov	r2, r7
 8013040:	4631      	mov	r1, r6
 8013042:	f7fe fb1d 	bl	8011680 <ucdr_set_on_full_buffer_callback>
 8013046:	4628      	mov	r0, r5
 8013048:	b007      	add	sp, #28
 801304a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801304c <uxr_prepare_output_stream_fragmented>:
 801304c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013050:	b091      	sub	sp, #68	; 0x44
 8013052:	4605      	mov	r5, r0
 8013054:	9105      	str	r1, [sp, #20]
 8013056:	3008      	adds	r0, #8
 8013058:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801305c:	461e      	mov	r6, r3
 801305e:	9204      	str	r2, [sp, #16]
 8013060:	f7ff fe90 	bl	8012d84 <uxr_get_output_reliable_stream>
 8013064:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013068:	2b01      	cmp	r3, #1
 801306a:	f000 8091 	beq.w	8013190 <uxr_prepare_output_stream_fragmented+0x144>
 801306e:	4604      	mov	r4, r0
 8013070:	2800      	cmp	r0, #0
 8013072:	f000 808d 	beq.w	8013190 <uxr_prepare_output_stream_fragmented+0x144>
 8013076:	f004 f843 	bl	8017100 <get_available_free_slots>
 801307a:	2800      	cmp	r0, #0
 801307c:	f000 8083 	beq.w	8013186 <uxr_prepare_output_stream_fragmented+0x13a>
 8013080:	8922      	ldrh	r2, [r4, #8]
 8013082:	89e7      	ldrh	r7, [r4, #14]
 8013084:	fbb7 f9f2 	udiv	r9, r7, r2
 8013088:	fb02 7919 	mls	r9, r2, r9, r7
 801308c:	fa1f f989 	uxth.w	r9, r9
 8013090:	6863      	ldr	r3, [r4, #4]
 8013092:	fbb3 f2f2 	udiv	r2, r3, r2
 8013096:	6823      	ldr	r3, [r4, #0]
 8013098:	9203      	str	r2, [sp, #12]
 801309a:	fb02 f909 	mul.w	r9, r2, r9
 801309e:	f109 0904 	add.w	r9, r9, #4
 80130a2:	4499      	add	r9, r3
 80130a4:	7b23      	ldrb	r3, [r4, #12]
 80130a6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80130aa:	4543      	cmp	r3, r8
 80130ac:	f1a2 0b04 	sub.w	fp, r2, #4
 80130b0:	d37a      	bcc.n	80131a8 <uxr_prepare_output_stream_fragmented+0x15c>
 80130b2:	f1ab 0a04 	sub.w	sl, fp, #4
 80130b6:	ebaa 0a03 	sub.w	sl, sl, r3
 80130ba:	465a      	mov	r2, fp
 80130bc:	2300      	movs	r3, #0
 80130be:	4649      	mov	r1, r9
 80130c0:	a808      	add	r0, sp, #32
 80130c2:	f8cd 8000 	str.w	r8, [sp]
 80130c6:	f7fe faf5 	bl	80116b4 <ucdr_init_buffer_origin_offset>
 80130ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80130cc:	fa1f fa8a 	uxth.w	sl, sl
 80130d0:	4652      	mov	r2, sl
 80130d2:	f103 0a08 	add.w	sl, r3, #8
 80130d6:	45da      	cmp	sl, fp
 80130d8:	bf34      	ite	cc
 80130da:	2302      	movcc	r3, #2
 80130dc:	2300      	movcs	r3, #0
 80130de:	210d      	movs	r1, #13
 80130e0:	a808      	add	r0, sp, #32
 80130e2:	f7ff fe83 	bl	8012dec <uxr_buffer_submessage_header>
 80130e6:	8921      	ldrh	r1, [r4, #8]
 80130e8:	fbb7 f2f1 	udiv	r2, r7, r1
 80130ec:	fb01 7212 	mls	r2, r1, r2, r7
 80130f0:	b292      	uxth	r2, r2
 80130f2:	6863      	ldr	r3, [r4, #4]
 80130f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80130f8:	fb02 f303 	mul.w	r3, r2, r3
 80130fc:	6822      	ldr	r2, [r4, #0]
 80130fe:	4638      	mov	r0, r7
 8013100:	f842 b003 	str.w	fp, [r2, r3]
 8013104:	2101      	movs	r1, #1
 8013106:	f004 f911 	bl	801732c <uxr_seq_num_add>
 801310a:	9b03      	ldr	r3, [sp, #12]
 801310c:	f108 0104 	add.w	r1, r8, #4
 8013110:	f1a3 0208 	sub.w	r2, r3, #8
 8013114:	eba2 0208 	sub.w	r2, r2, r8
 8013118:	4449      	add	r1, r9
 801311a:	4607      	mov	r7, r0
 801311c:	4630      	mov	r0, r6
 801311e:	f7fe fadb 	bl	80116d8 <ucdr_init_buffer>
 8013122:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013124:	81e7      	strh	r7, [r4, #14]
 8013126:	1d1a      	adds	r2, r3, #4
 8013128:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801312c:	bf28      	it	cs
 801312e:	2200      	movcs	r2, #0
 8013130:	2300      	movs	r3, #0
 8013132:	b292      	uxth	r2, r2
 8013134:	2107      	movs	r1, #7
 8013136:	4630      	mov	r0, r6
 8013138:	f7ff fe58 	bl	8012dec <uxr_buffer_submessage_header>
 801313c:	9904      	ldr	r1, [sp, #16]
 801313e:	aa07      	add	r2, sp, #28
 8013140:	4628      	mov	r0, r5
 8013142:	f7ff fceb 	bl	8012b1c <uxr_init_base_object_request>
 8013146:	4604      	mov	r4, r0
 8013148:	b318      	cbz	r0, 8013192 <uxr_prepare_output_stream_fragmented+0x146>
 801314a:	a907      	add	r1, sp, #28
 801314c:	4630      	mov	r0, r6
 801314e:	f000 ff0d 	bl	8013f6c <uxr_serialize_WRITE_DATA_Payload_Data>
 8013152:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8013156:	4630      	mov	r0, r6
 8013158:	1a52      	subs	r2, r2, r1
 801315a:	f7fe fabd 	bl	80116d8 <ucdr_init_buffer>
 801315e:	9b05      	ldr	r3, [sp, #20]
 8013160:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8013164:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013166:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 801316a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801316c:	491b      	ldr	r1, [pc, #108]	; (80131dc <uxr_prepare_output_stream_fragmented+0x190>)
 801316e:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 8013172:	4630      	mov	r0, r6
 8013174:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8013178:	462a      	mov	r2, r5
 801317a:	f7fe fa81 	bl	8011680 <ucdr_set_on_full_buffer_callback>
 801317e:	4620      	mov	r0, r4
 8013180:	b011      	add	sp, #68	; 0x44
 8013182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013186:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013188:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801318a:	4628      	mov	r0, r5
 801318c:	4798      	blx	r3
 801318e:	b920      	cbnz	r0, 801319a <uxr_prepare_output_stream_fragmented+0x14e>
 8013190:	2400      	movs	r4, #0
 8013192:	4620      	mov	r0, r4
 8013194:	b011      	add	sp, #68	; 0x44
 8013196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801319a:	4620      	mov	r0, r4
 801319c:	f003 ffb0 	bl	8017100 <get_available_free_slots>
 80131a0:	2800      	cmp	r0, #0
 80131a2:	f47f af6d 	bne.w	8013080 <uxr_prepare_output_stream_fragmented+0x34>
 80131a6:	e7f3      	b.n	8013190 <uxr_prepare_output_stream_fragmented+0x144>
 80131a8:	4638      	mov	r0, r7
 80131aa:	2101      	movs	r1, #1
 80131ac:	f004 f8be 	bl	801732c <uxr_seq_num_add>
 80131b0:	8921      	ldrh	r1, [r4, #8]
 80131b2:	fbb0 f2f1 	udiv	r2, r0, r1
 80131b6:	fb01 0912 	mls	r9, r1, r2, r0
 80131ba:	fa1f f289 	uxth.w	r2, r9
 80131be:	6863      	ldr	r3, [r4, #4]
 80131c0:	fbb3 f9f1 	udiv	r9, r3, r1
 80131c4:	6823      	ldr	r3, [r4, #0]
 80131c6:	fb02 f909 	mul.w	r9, r2, r9
 80131ca:	f109 0904 	add.w	r9, r9, #4
 80131ce:	4499      	add	r9, r3
 80131d0:	4607      	mov	r7, r0
 80131d2:	7b23      	ldrb	r3, [r4, #12]
 80131d4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80131d8:	e76b      	b.n	80130b2 <uxr_prepare_output_stream_fragmented+0x66>
 80131da:	bf00      	nop
 80131dc:	08012ed9 	.word	0x08012ed9

080131e0 <uxr_serialize_message_header>:
 80131e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131e2:	b083      	sub	sp, #12
 80131e4:	4616      	mov	r6, r2
 80131e6:	4604      	mov	r4, r0
 80131e8:	9301      	str	r3, [sp, #4]
 80131ea:	460d      	mov	r5, r1
 80131ec:	9f08      	ldr	r7, [sp, #32]
 80131ee:	f7fd fac7 	bl	8010780 <ucdr_serialize_uint8_t>
 80131f2:	4631      	mov	r1, r6
 80131f4:	4620      	mov	r0, r4
 80131f6:	f7fd fac3 	bl	8010780 <ucdr_serialize_uint8_t>
 80131fa:	9a01      	ldr	r2, [sp, #4]
 80131fc:	2101      	movs	r1, #1
 80131fe:	4620      	mov	r0, r4
 8013200:	f7fd fb6a 	bl	80108d8 <ucdr_serialize_endian_uint16_t>
 8013204:	062b      	lsls	r3, r5, #24
 8013206:	d501      	bpl.n	801320c <uxr_serialize_message_header+0x2c>
 8013208:	b003      	add	sp, #12
 801320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801320c:	2204      	movs	r2, #4
 801320e:	4639      	mov	r1, r7
 8013210:	4620      	mov	r0, r4
 8013212:	b003      	add	sp, #12
 8013214:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013218:	f003 b862 	b.w	80162e0 <ucdr_serialize_array_uint8_t>

0801321c <uxr_deserialize_message_header>:
 801321c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801321e:	b083      	sub	sp, #12
 8013220:	4616      	mov	r6, r2
 8013222:	4604      	mov	r4, r0
 8013224:	9301      	str	r3, [sp, #4]
 8013226:	460d      	mov	r5, r1
 8013228:	9f08      	ldr	r7, [sp, #32]
 801322a:	f7fd fabf 	bl	80107ac <ucdr_deserialize_uint8_t>
 801322e:	4631      	mov	r1, r6
 8013230:	4620      	mov	r0, r4
 8013232:	f7fd fabb 	bl	80107ac <ucdr_deserialize_uint8_t>
 8013236:	9a01      	ldr	r2, [sp, #4]
 8013238:	2101      	movs	r1, #1
 801323a:	4620      	mov	r0, r4
 801323c:	f7fd fc40 	bl	8010ac0 <ucdr_deserialize_endian_uint16_t>
 8013240:	f995 3000 	ldrsb.w	r3, [r5]
 8013244:	2b00      	cmp	r3, #0
 8013246:	da01      	bge.n	801324c <uxr_deserialize_message_header+0x30>
 8013248:	b003      	add	sp, #12
 801324a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801324c:	2204      	movs	r2, #4
 801324e:	4639      	mov	r1, r7
 8013250:	4620      	mov	r0, r4
 8013252:	b003      	add	sp, #12
 8013254:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013258:	f003 b8a6 	b.w	80163a8 <ucdr_deserialize_array_uint8_t>

0801325c <uxr_serialize_submessage_header>:
 801325c:	b530      	push	{r4, r5, lr}
 801325e:	b083      	sub	sp, #12
 8013260:	4615      	mov	r5, r2
 8013262:	4604      	mov	r4, r0
 8013264:	9301      	str	r3, [sp, #4]
 8013266:	f7fd fa8b 	bl	8010780 <ucdr_serialize_uint8_t>
 801326a:	4629      	mov	r1, r5
 801326c:	4620      	mov	r0, r4
 801326e:	f7fd fa87 	bl	8010780 <ucdr_serialize_uint8_t>
 8013272:	9a01      	ldr	r2, [sp, #4]
 8013274:	2101      	movs	r1, #1
 8013276:	4620      	mov	r0, r4
 8013278:	b003      	add	sp, #12
 801327a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801327e:	f7fd bb2b 	b.w	80108d8 <ucdr_serialize_endian_uint16_t>
 8013282:	bf00      	nop

08013284 <uxr_deserialize_submessage_header>:
 8013284:	b530      	push	{r4, r5, lr}
 8013286:	b083      	sub	sp, #12
 8013288:	4615      	mov	r5, r2
 801328a:	4604      	mov	r4, r0
 801328c:	9301      	str	r3, [sp, #4]
 801328e:	f7fd fa8d 	bl	80107ac <ucdr_deserialize_uint8_t>
 8013292:	4629      	mov	r1, r5
 8013294:	4620      	mov	r0, r4
 8013296:	f7fd fa89 	bl	80107ac <ucdr_deserialize_uint8_t>
 801329a:	9a01      	ldr	r2, [sp, #4]
 801329c:	2101      	movs	r1, #1
 801329e:	4620      	mov	r0, r4
 80132a0:	b003      	add	sp, #12
 80132a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132a6:	f7fd bc0b 	b.w	8010ac0 <ucdr_deserialize_endian_uint16_t>
 80132aa:	bf00      	nop

080132ac <uxr_serialize_CLIENT_Representation>:
 80132ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132b0:	2204      	movs	r2, #4
 80132b2:	460e      	mov	r6, r1
 80132b4:	4605      	mov	r5, r0
 80132b6:	f003 f813 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 80132ba:	2202      	movs	r2, #2
 80132bc:	4607      	mov	r7, r0
 80132be:	1d31      	adds	r1, r6, #4
 80132c0:	4628      	mov	r0, r5
 80132c2:	f003 f80d 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 80132c6:	4038      	ands	r0, r7
 80132c8:	2202      	movs	r2, #2
 80132ca:	1db1      	adds	r1, r6, #6
 80132cc:	b2c7      	uxtb	r7, r0
 80132ce:	4628      	mov	r0, r5
 80132d0:	f003 f806 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 80132d4:	2204      	movs	r2, #4
 80132d6:	4007      	ands	r7, r0
 80132d8:	f106 0108 	add.w	r1, r6, #8
 80132dc:	4628      	mov	r0, r5
 80132de:	f002 ffff 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 80132e2:	7b31      	ldrb	r1, [r6, #12]
 80132e4:	4007      	ands	r7, r0
 80132e6:	4628      	mov	r0, r5
 80132e8:	f7fd fa4a 	bl	8010780 <ucdr_serialize_uint8_t>
 80132ec:	7b71      	ldrb	r1, [r6, #13]
 80132ee:	4007      	ands	r7, r0
 80132f0:	4628      	mov	r0, r5
 80132f2:	f7fd fa17 	bl	8010724 <ucdr_serialize_bool>
 80132f6:	7b73      	ldrb	r3, [r6, #13]
 80132f8:	ea07 0800 	and.w	r8, r7, r0
 80132fc:	b93b      	cbnz	r3, 801330e <uxr_serialize_CLIENT_Representation+0x62>
 80132fe:	8bb1      	ldrh	r1, [r6, #28]
 8013300:	4628      	mov	r0, r5
 8013302:	f7fd fa69 	bl	80107d8 <ucdr_serialize_uint16_t>
 8013306:	ea08 0000 	and.w	r0, r8, r0
 801330a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801330e:	6931      	ldr	r1, [r6, #16]
 8013310:	4628      	mov	r0, r5
 8013312:	f7fd fc4b 	bl	8010bac <ucdr_serialize_uint32_t>
 8013316:	6933      	ldr	r3, [r6, #16]
 8013318:	b1e3      	cbz	r3, 8013354 <uxr_serialize_CLIENT_Representation+0xa8>
 801331a:	b1c0      	cbz	r0, 801334e <uxr_serialize_CLIENT_Representation+0xa2>
 801331c:	4637      	mov	r7, r6
 801331e:	f04f 0900 	mov.w	r9, #0
 8013322:	e001      	b.n	8013328 <uxr_serialize_CLIENT_Representation+0x7c>
 8013324:	3708      	adds	r7, #8
 8013326:	b194      	cbz	r4, 801334e <uxr_serialize_CLIENT_Representation+0xa2>
 8013328:	6979      	ldr	r1, [r7, #20]
 801332a:	4628      	mov	r0, r5
 801332c:	f003 f8f8 	bl	8016520 <ucdr_serialize_string>
 8013330:	69b9      	ldr	r1, [r7, #24]
 8013332:	4604      	mov	r4, r0
 8013334:	4628      	mov	r0, r5
 8013336:	f003 f8f3 	bl	8016520 <ucdr_serialize_string>
 801333a:	6933      	ldr	r3, [r6, #16]
 801333c:	f109 0901 	add.w	r9, r9, #1
 8013340:	4004      	ands	r4, r0
 8013342:	4599      	cmp	r9, r3
 8013344:	b2e4      	uxtb	r4, r4
 8013346:	d3ed      	bcc.n	8013324 <uxr_serialize_CLIENT_Representation+0x78>
 8013348:	ea08 0804 	and.w	r8, r8, r4
 801334c:	e7d7      	b.n	80132fe <uxr_serialize_CLIENT_Representation+0x52>
 801334e:	f04f 0800 	mov.w	r8, #0
 8013352:	e7d4      	b.n	80132fe <uxr_serialize_CLIENT_Representation+0x52>
 8013354:	ea08 0800 	and.w	r8, r8, r0
 8013358:	e7d1      	b.n	80132fe <uxr_serialize_CLIENT_Representation+0x52>
 801335a:	bf00      	nop

0801335c <uxr_deserialize_CLIENT_Representation>:
 801335c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013360:	2204      	movs	r2, #4
 8013362:	460c      	mov	r4, r1
 8013364:	4605      	mov	r5, r0
 8013366:	f003 f81f 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 801336a:	2202      	movs	r2, #2
 801336c:	4607      	mov	r7, r0
 801336e:	1d21      	adds	r1, r4, #4
 8013370:	4628      	mov	r0, r5
 8013372:	f003 f819 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013376:	4038      	ands	r0, r7
 8013378:	2202      	movs	r2, #2
 801337a:	1da1      	adds	r1, r4, #6
 801337c:	b2c6      	uxtb	r6, r0
 801337e:	4628      	mov	r0, r5
 8013380:	f003 f812 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013384:	2204      	movs	r2, #4
 8013386:	4006      	ands	r6, r0
 8013388:	f104 0108 	add.w	r1, r4, #8
 801338c:	4628      	mov	r0, r5
 801338e:	f003 f80b 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013392:	f104 010c 	add.w	r1, r4, #12
 8013396:	4006      	ands	r6, r0
 8013398:	4628      	mov	r0, r5
 801339a:	f7fd fa07 	bl	80107ac <ucdr_deserialize_uint8_t>
 801339e:	f104 010d 	add.w	r1, r4, #13
 80133a2:	ea06 0700 	and.w	r7, r6, r0
 80133a6:	4628      	mov	r0, r5
 80133a8:	f7fd f9d2 	bl	8010750 <ucdr_deserialize_bool>
 80133ac:	7b63      	ldrb	r3, [r4, #13]
 80133ae:	4007      	ands	r7, r0
 80133b0:	b93b      	cbnz	r3, 80133c2 <uxr_deserialize_CLIENT_Representation+0x66>
 80133b2:	f104 011c 	add.w	r1, r4, #28
 80133b6:	4628      	mov	r0, r5
 80133b8:	f7fd fb0e 	bl	80109d8 <ucdr_deserialize_uint16_t>
 80133bc:	4038      	ands	r0, r7
 80133be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133c2:	f104 0110 	add.w	r1, r4, #16
 80133c6:	4628      	mov	r0, r5
 80133c8:	f7fd fd20 	bl	8010e0c <ucdr_deserialize_uint32_t>
 80133cc:	6923      	ldr	r3, [r4, #16]
 80133ce:	2b01      	cmp	r3, #1
 80133d0:	d903      	bls.n	80133da <uxr_deserialize_CLIENT_Representation+0x7e>
 80133d2:	2301      	movs	r3, #1
 80133d4:	75ab      	strb	r3, [r5, #22]
 80133d6:	2700      	movs	r7, #0
 80133d8:	e7eb      	b.n	80133b2 <uxr_deserialize_CLIENT_Representation+0x56>
 80133da:	b30b      	cbz	r3, 8013420 <uxr_deserialize_CLIENT_Representation+0xc4>
 80133dc:	2800      	cmp	r0, #0
 80133de:	d0fa      	beq.n	80133d6 <uxr_deserialize_CLIENT_Representation+0x7a>
 80133e0:	46a0      	mov	r8, r4
 80133e2:	f04f 0900 	mov.w	r9, #0
 80133e6:	e001      	b.n	80133ec <uxr_deserialize_CLIENT_Representation+0x90>
 80133e8:	2e00      	cmp	r6, #0
 80133ea:	d0f4      	beq.n	80133d6 <uxr_deserialize_CLIENT_Representation+0x7a>
 80133ec:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80133f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80133f4:	4628      	mov	r0, r5
 80133f6:	f003 f8a3 	bl	8016540 <ucdr_deserialize_string>
 80133fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80133fe:	4606      	mov	r6, r0
 8013400:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013404:	4628      	mov	r0, r5
 8013406:	f003 f89b 	bl	8016540 <ucdr_deserialize_string>
 801340a:	6923      	ldr	r3, [r4, #16]
 801340c:	f109 0901 	add.w	r9, r9, #1
 8013410:	4006      	ands	r6, r0
 8013412:	4599      	cmp	r9, r3
 8013414:	f108 0808 	add.w	r8, r8, #8
 8013418:	b2f6      	uxtb	r6, r6
 801341a:	d3e5      	bcc.n	80133e8 <uxr_deserialize_CLIENT_Representation+0x8c>
 801341c:	4037      	ands	r7, r6
 801341e:	e7c8      	b.n	80133b2 <uxr_deserialize_CLIENT_Representation+0x56>
 8013420:	4007      	ands	r7, r0
 8013422:	e7c6      	b.n	80133b2 <uxr_deserialize_CLIENT_Representation+0x56>

08013424 <uxr_serialize_AGENT_Representation>:
 8013424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013428:	2204      	movs	r2, #4
 801342a:	460f      	mov	r7, r1
 801342c:	4605      	mov	r5, r0
 801342e:	f002 ff57 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013432:	2202      	movs	r2, #2
 8013434:	4604      	mov	r4, r0
 8013436:	1d39      	adds	r1, r7, #4
 8013438:	4628      	mov	r0, r5
 801343a:	f002 ff51 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 801343e:	4020      	ands	r0, r4
 8013440:	2202      	movs	r2, #2
 8013442:	1db9      	adds	r1, r7, #6
 8013444:	b2c4      	uxtb	r4, r0
 8013446:	4628      	mov	r0, r5
 8013448:	f002 ff4a 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 801344c:	7a39      	ldrb	r1, [r7, #8]
 801344e:	4004      	ands	r4, r0
 8013450:	4628      	mov	r0, r5
 8013452:	f7fd f967 	bl	8010724 <ucdr_serialize_bool>
 8013456:	7a3b      	ldrb	r3, [r7, #8]
 8013458:	ea00 0804 	and.w	r8, r0, r4
 801345c:	b913      	cbnz	r3, 8013464 <uxr_serialize_AGENT_Representation+0x40>
 801345e:	4640      	mov	r0, r8
 8013460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013464:	68f9      	ldr	r1, [r7, #12]
 8013466:	4628      	mov	r0, r5
 8013468:	f7fd fba0 	bl	8010bac <ucdr_serialize_uint32_t>
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	b303      	cbz	r3, 80134b2 <uxr_serialize_AGENT_Representation+0x8e>
 8013470:	b1d0      	cbz	r0, 80134a8 <uxr_serialize_AGENT_Representation+0x84>
 8013472:	463e      	mov	r6, r7
 8013474:	f04f 0900 	mov.w	r9, #0
 8013478:	e001      	b.n	801347e <uxr_serialize_AGENT_Representation+0x5a>
 801347a:	3608      	adds	r6, #8
 801347c:	b1a4      	cbz	r4, 80134a8 <uxr_serialize_AGENT_Representation+0x84>
 801347e:	6931      	ldr	r1, [r6, #16]
 8013480:	4628      	mov	r0, r5
 8013482:	f003 f84d 	bl	8016520 <ucdr_serialize_string>
 8013486:	6971      	ldr	r1, [r6, #20]
 8013488:	4604      	mov	r4, r0
 801348a:	4628      	mov	r0, r5
 801348c:	f003 f848 	bl	8016520 <ucdr_serialize_string>
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	f109 0901 	add.w	r9, r9, #1
 8013496:	4004      	ands	r4, r0
 8013498:	4599      	cmp	r9, r3
 801349a:	b2e4      	uxtb	r4, r4
 801349c:	d3ed      	bcc.n	801347a <uxr_serialize_AGENT_Representation+0x56>
 801349e:	ea08 0804 	and.w	r8, r8, r4
 80134a2:	4640      	mov	r0, r8
 80134a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134a8:	f04f 0800 	mov.w	r8, #0
 80134ac:	4640      	mov	r0, r8
 80134ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134b2:	ea08 0800 	and.w	r8, r8, r0
 80134b6:	e7d2      	b.n	801345e <uxr_serialize_AGENT_Representation+0x3a>

080134b8 <uxr_serialize_DATAWRITER_Representation>:
 80134b8:	b570      	push	{r4, r5, r6, lr}
 80134ba:	460d      	mov	r5, r1
 80134bc:	7809      	ldrb	r1, [r1, #0]
 80134be:	4606      	mov	r6, r0
 80134c0:	f7fd f95e 	bl	8010780 <ucdr_serialize_uint8_t>
 80134c4:	4604      	mov	r4, r0
 80134c6:	b130      	cbz	r0, 80134d6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80134c8:	782b      	ldrb	r3, [r5, #0]
 80134ca:	2b02      	cmp	r3, #2
 80134cc:	d00c      	beq.n	80134e8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80134ce:	2b03      	cmp	r3, #3
 80134d0:	d010      	beq.n	80134f4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80134d2:	2b01      	cmp	r3, #1
 80134d4:	d008      	beq.n	80134e8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80134d6:	2202      	movs	r2, #2
 80134d8:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80134dc:	4630      	mov	r0, r6
 80134de:	f002 feff 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 80134e2:	4020      	ands	r0, r4
 80134e4:	b2c0      	uxtb	r0, r0
 80134e6:	bd70      	pop	{r4, r5, r6, pc}
 80134e8:	6869      	ldr	r1, [r5, #4]
 80134ea:	4630      	mov	r0, r6
 80134ec:	f003 f818 	bl	8016520 <ucdr_serialize_string>
 80134f0:	4604      	mov	r4, r0
 80134f2:	e7f0      	b.n	80134d6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80134f4:	4629      	mov	r1, r5
 80134f6:	4630      	mov	r0, r6
 80134f8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80134fc:	3104      	adds	r1, #4
 80134fe:	f002 ffe3 	bl	80164c8 <ucdr_serialize_sequence_uint8_t>
 8013502:	4604      	mov	r4, r0
 8013504:	e7e7      	b.n	80134d6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013506:	bf00      	nop

08013508 <uxr_serialize_ObjectVariant.part.0>:
 8013508:	b570      	push	{r4, r5, r6, lr}
 801350a:	780b      	ldrb	r3, [r1, #0]
 801350c:	3b01      	subs	r3, #1
 801350e:	460c      	mov	r4, r1
 8013510:	4605      	mov	r5, r0
 8013512:	2b0d      	cmp	r3, #13
 8013514:	d854      	bhi.n	80135c0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013516:	e8df f003 	tbb	[pc, r3]
 801351a:	0730      	.short	0x0730
 801351c:	07071b1b 	.word	0x07071b1b
 8013520:	0c530707 	.word	0x0c530707
 8013524:	494e0c0c 	.word	0x494e0c0c
 8013528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801352c:	3104      	adds	r1, #4
 801352e:	f7ff bfc3 	b.w	80134b8 <uxr_serialize_DATAWRITER_Representation>
 8013532:	7909      	ldrb	r1, [r1, #4]
 8013534:	f7fd f924 	bl	8010780 <ucdr_serialize_uint8_t>
 8013538:	b1e8      	cbz	r0, 8013576 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801353a:	7923      	ldrb	r3, [r4, #4]
 801353c:	2b01      	cmp	r3, #1
 801353e:	d001      	beq.n	8013544 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013540:	2b02      	cmp	r3, #2
 8013542:	d13d      	bne.n	80135c0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013544:	68a1      	ldr	r1, [r4, #8]
 8013546:	4628      	mov	r0, r5
 8013548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801354c:	f002 bfe8 	b.w	8016520 <ucdr_serialize_string>
 8013550:	7909      	ldrb	r1, [r1, #4]
 8013552:	f7fd f915 	bl	8010780 <ucdr_serialize_uint8_t>
 8013556:	4606      	mov	r6, r0
 8013558:	b120      	cbz	r0, 8013564 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801355a:	7923      	ldrb	r3, [r4, #4]
 801355c:	2b02      	cmp	r3, #2
 801355e:	d039      	beq.n	80135d4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8013560:	2b03      	cmp	r3, #3
 8013562:	d02f      	beq.n	80135c4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8013564:	2202      	movs	r2, #2
 8013566:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801356a:	4628      	mov	r0, r5
 801356c:	f002 feb8 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013570:	4030      	ands	r0, r6
 8013572:	b2c0      	uxtb	r0, r0
 8013574:	bd70      	pop	{r4, r5, r6, pc}
 8013576:	2000      	movs	r0, #0
 8013578:	bd70      	pop	{r4, r5, r6, pc}
 801357a:	7909      	ldrb	r1, [r1, #4]
 801357c:	f7fd f900 	bl	8010780 <ucdr_serialize_uint8_t>
 8013580:	4606      	mov	r6, r0
 8013582:	b158      	cbz	r0, 801359c <uxr_serialize_ObjectVariant.part.0+0x94>
 8013584:	7923      	ldrb	r3, [r4, #4]
 8013586:	2b02      	cmp	r3, #2
 8013588:	d003      	beq.n	8013592 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801358a:	2b03      	cmp	r3, #3
 801358c:	d028      	beq.n	80135e0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801358e:	2b01      	cmp	r3, #1
 8013590:	d104      	bne.n	801359c <uxr_serialize_ObjectVariant.part.0+0x94>
 8013592:	68a1      	ldr	r1, [r4, #8]
 8013594:	4628      	mov	r0, r5
 8013596:	f002 ffc3 	bl	8016520 <ucdr_serialize_string>
 801359a:	4606      	mov	r6, r0
 801359c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 80135a0:	4628      	mov	r0, r5
 80135a2:	f7fd fe29 	bl	80111f8 <ucdr_serialize_int16_t>
 80135a6:	4030      	ands	r0, r6
 80135a8:	b2c0      	uxtb	r0, r0
 80135aa:	bd70      	pop	{r4, r5, r6, pc}
 80135ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135b0:	3104      	adds	r1, #4
 80135b2:	f7ff be7b 	b.w	80132ac <uxr_serialize_CLIENT_Representation>
 80135b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135ba:	3104      	adds	r1, #4
 80135bc:	f7ff bf32 	b.w	8013424 <uxr_serialize_AGENT_Representation>
 80135c0:	2001      	movs	r0, #1
 80135c2:	bd70      	pop	{r4, r5, r6, pc}
 80135c4:	68a2      	ldr	r2, [r4, #8]
 80135c6:	f104 010c 	add.w	r1, r4, #12
 80135ca:	4628      	mov	r0, r5
 80135cc:	f002 ff7c 	bl	80164c8 <ucdr_serialize_sequence_uint8_t>
 80135d0:	4606      	mov	r6, r0
 80135d2:	e7c7      	b.n	8013564 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80135d4:	68a1      	ldr	r1, [r4, #8]
 80135d6:	4628      	mov	r0, r5
 80135d8:	f002 ffa2 	bl	8016520 <ucdr_serialize_string>
 80135dc:	4606      	mov	r6, r0
 80135de:	e7c1      	b.n	8013564 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80135e0:	68a2      	ldr	r2, [r4, #8]
 80135e2:	f104 010c 	add.w	r1, r4, #12
 80135e6:	4628      	mov	r0, r5
 80135e8:	f002 ff6e 	bl	80164c8 <ucdr_serialize_sequence_uint8_t>
 80135ec:	4606      	mov	r6, r0
 80135ee:	e7d5      	b.n	801359c <uxr_serialize_ObjectVariant.part.0+0x94>

080135f0 <uxr_deserialize_DATAWRITER_Representation>:
 80135f0:	b570      	push	{r4, r5, r6, lr}
 80135f2:	4606      	mov	r6, r0
 80135f4:	460d      	mov	r5, r1
 80135f6:	f7fd f8d9 	bl	80107ac <ucdr_deserialize_uint8_t>
 80135fa:	4604      	mov	r4, r0
 80135fc:	b130      	cbz	r0, 801360c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80135fe:	782b      	ldrb	r3, [r5, #0]
 8013600:	2b02      	cmp	r3, #2
 8013602:	d00c      	beq.n	801361e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013604:	2b03      	cmp	r3, #3
 8013606:	d012      	beq.n	801362e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013608:	2b01      	cmp	r3, #1
 801360a:	d008      	beq.n	801361e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801360c:	2202      	movs	r2, #2
 801360e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8013612:	4630      	mov	r0, r6
 8013614:	f002 fec8 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013618:	4020      	ands	r0, r4
 801361a:	b2c0      	uxtb	r0, r0
 801361c:	bd70      	pop	{r4, r5, r6, pc}
 801361e:	6869      	ldr	r1, [r5, #4]
 8013620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013624:	4630      	mov	r0, r6
 8013626:	f002 ff8b 	bl	8016540 <ucdr_deserialize_string>
 801362a:	4604      	mov	r4, r0
 801362c:	e7ee      	b.n	801360c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801362e:	1d2b      	adds	r3, r5, #4
 8013630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013634:	f105 0108 	add.w	r1, r5, #8
 8013638:	4630      	mov	r0, r6
 801363a:	f002 ff57 	bl	80164ec <ucdr_deserialize_sequence_uint8_t>
 801363e:	4604      	mov	r4, r0
 8013640:	e7e4      	b.n	801360c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013642:	bf00      	nop

08013644 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013644:	b570      	push	{r4, r5, r6, lr}
 8013646:	460d      	mov	r5, r1
 8013648:	7809      	ldrb	r1, [r1, #0]
 801364a:	4606      	mov	r6, r0
 801364c:	f7fd f86a 	bl	8010724 <ucdr_serialize_bool>
 8013650:	782b      	ldrb	r3, [r5, #0]
 8013652:	4604      	mov	r4, r0
 8013654:	b94b      	cbnz	r3, 801366a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013656:	7a29      	ldrb	r1, [r5, #8]
 8013658:	4630      	mov	r0, r6
 801365a:	f7fd f863 	bl	8010724 <ucdr_serialize_bool>
 801365e:	7a2b      	ldrb	r3, [r5, #8]
 8013660:	4004      	ands	r4, r0
 8013662:	b2e4      	uxtb	r4, r4
 8013664:	b943      	cbnz	r3, 8013678 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013666:	4620      	mov	r0, r4
 8013668:	bd70      	pop	{r4, r5, r6, pc}
 801366a:	6869      	ldr	r1, [r5, #4]
 801366c:	4630      	mov	r0, r6
 801366e:	f002 ff57 	bl	8016520 <ucdr_serialize_string>
 8013672:	4004      	ands	r4, r0
 8013674:	b2e4      	uxtb	r4, r4
 8013676:	e7ee      	b.n	8013656 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013678:	68e9      	ldr	r1, [r5, #12]
 801367a:	4630      	mov	r0, r6
 801367c:	f002 ff50 	bl	8016520 <ucdr_serialize_string>
 8013680:	4004      	ands	r4, r0
 8013682:	4620      	mov	r0, r4
 8013684:	bd70      	pop	{r4, r5, r6, pc}
 8013686:	bf00      	nop

08013688 <uxr_serialize_OBJK_Topic_Binary>:
 8013688:	b570      	push	{r4, r5, r6, lr}
 801368a:	460d      	mov	r5, r1
 801368c:	6809      	ldr	r1, [r1, #0]
 801368e:	4606      	mov	r6, r0
 8013690:	f002 ff46 	bl	8016520 <ucdr_serialize_string>
 8013694:	7929      	ldrb	r1, [r5, #4]
 8013696:	4604      	mov	r4, r0
 8013698:	4630      	mov	r0, r6
 801369a:	f7fd f843 	bl	8010724 <ucdr_serialize_bool>
 801369e:	792b      	ldrb	r3, [r5, #4]
 80136a0:	4004      	ands	r4, r0
 80136a2:	b2e4      	uxtb	r4, r4
 80136a4:	b943      	cbnz	r3, 80136b8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80136a6:	7b29      	ldrb	r1, [r5, #12]
 80136a8:	4630      	mov	r0, r6
 80136aa:	f7fd f83b 	bl	8010724 <ucdr_serialize_bool>
 80136ae:	7b2b      	ldrb	r3, [r5, #12]
 80136b0:	4004      	ands	r4, r0
 80136b2:	b93b      	cbnz	r3, 80136c4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80136b4:	4620      	mov	r0, r4
 80136b6:	bd70      	pop	{r4, r5, r6, pc}
 80136b8:	68a9      	ldr	r1, [r5, #8]
 80136ba:	4630      	mov	r0, r6
 80136bc:	f002 ff30 	bl	8016520 <ucdr_serialize_string>
 80136c0:	4004      	ands	r4, r0
 80136c2:	e7f0      	b.n	80136a6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80136c4:	6929      	ldr	r1, [r5, #16]
 80136c6:	4630      	mov	r0, r6
 80136c8:	f002 ff2a 	bl	8016520 <ucdr_serialize_string>
 80136cc:	4004      	ands	r4, r0
 80136ce:	b2e4      	uxtb	r4, r4
 80136d0:	4620      	mov	r0, r4
 80136d2:	bd70      	pop	{r4, r5, r6, pc}

080136d4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80136d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136d8:	460c      	mov	r4, r1
 80136da:	7809      	ldrb	r1, [r1, #0]
 80136dc:	4606      	mov	r6, r0
 80136de:	f7fd f821 	bl	8010724 <ucdr_serialize_bool>
 80136e2:	7823      	ldrb	r3, [r4, #0]
 80136e4:	4605      	mov	r5, r0
 80136e6:	b96b      	cbnz	r3, 8013704 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80136e8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80136ec:	4630      	mov	r0, r6
 80136ee:	f7fd f819 	bl	8010724 <ucdr_serialize_bool>
 80136f2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80136f6:	4005      	ands	r5, r0
 80136f8:	b2ed      	uxtb	r5, r5
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d169      	bne.n	80137d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80136fe:	4628      	mov	r0, r5
 8013700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013704:	6861      	ldr	r1, [r4, #4]
 8013706:	4630      	mov	r0, r6
 8013708:	f7fd fa50 	bl	8010bac <ucdr_serialize_uint32_t>
 801370c:	6863      	ldr	r3, [r4, #4]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d06b      	beq.n	80137ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013712:	2800      	cmp	r0, #0
 8013714:	d067      	beq.n	80137e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013716:	68a1      	ldr	r1, [r4, #8]
 8013718:	4630      	mov	r0, r6
 801371a:	f002 ff01 	bl	8016520 <ucdr_serialize_string>
 801371e:	6863      	ldr	r3, [r4, #4]
 8013720:	2b01      	cmp	r3, #1
 8013722:	d953      	bls.n	80137cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013724:	2800      	cmp	r0, #0
 8013726:	d05e      	beq.n	80137e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013728:	68e1      	ldr	r1, [r4, #12]
 801372a:	4630      	mov	r0, r6
 801372c:	f002 fef8 	bl	8016520 <ucdr_serialize_string>
 8013730:	6863      	ldr	r3, [r4, #4]
 8013732:	2b02      	cmp	r3, #2
 8013734:	d94a      	bls.n	80137cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013736:	2800      	cmp	r0, #0
 8013738:	d055      	beq.n	80137e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801373a:	6921      	ldr	r1, [r4, #16]
 801373c:	4630      	mov	r0, r6
 801373e:	f002 feef 	bl	8016520 <ucdr_serialize_string>
 8013742:	6863      	ldr	r3, [r4, #4]
 8013744:	2b03      	cmp	r3, #3
 8013746:	d941      	bls.n	80137cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013748:	2800      	cmp	r0, #0
 801374a:	d04c      	beq.n	80137e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801374c:	6961      	ldr	r1, [r4, #20]
 801374e:	4630      	mov	r0, r6
 8013750:	f002 fee6 	bl	8016520 <ucdr_serialize_string>
 8013754:	6863      	ldr	r3, [r4, #4]
 8013756:	2b04      	cmp	r3, #4
 8013758:	d938      	bls.n	80137cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801375a:	2800      	cmp	r0, #0
 801375c:	d043      	beq.n	80137e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801375e:	69a1      	ldr	r1, [r4, #24]
 8013760:	4630      	mov	r0, r6
 8013762:	f002 fedd 	bl	8016520 <ucdr_serialize_string>
 8013766:	6863      	ldr	r3, [r4, #4]
 8013768:	2b05      	cmp	r3, #5
 801376a:	d92f      	bls.n	80137cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801376c:	2800      	cmp	r0, #0
 801376e:	d03a      	beq.n	80137e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013770:	69e1      	ldr	r1, [r4, #28]
 8013772:	4630      	mov	r0, r6
 8013774:	f002 fed4 	bl	8016520 <ucdr_serialize_string>
 8013778:	6863      	ldr	r3, [r4, #4]
 801377a:	2b06      	cmp	r3, #6
 801377c:	d926      	bls.n	80137cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801377e:	b390      	cbz	r0, 80137e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013780:	6a21      	ldr	r1, [r4, #32]
 8013782:	4630      	mov	r0, r6
 8013784:	f002 fecc 	bl	8016520 <ucdr_serialize_string>
 8013788:	6863      	ldr	r3, [r4, #4]
 801378a:	2b07      	cmp	r3, #7
 801378c:	d91e      	bls.n	80137cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801378e:	b350      	cbz	r0, 80137e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013790:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013792:	4630      	mov	r0, r6
 8013794:	f002 fec4 	bl	8016520 <ucdr_serialize_string>
 8013798:	6863      	ldr	r3, [r4, #4]
 801379a:	2b08      	cmp	r3, #8
 801379c:	d916      	bls.n	80137cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801379e:	b310      	cbz	r0, 80137e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80137a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80137a2:	4630      	mov	r0, r6
 80137a4:	f002 febc 	bl	8016520 <ucdr_serialize_string>
 80137a8:	6863      	ldr	r3, [r4, #4]
 80137aa:	2b09      	cmp	r3, #9
 80137ac:	d90e      	bls.n	80137cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80137ae:	b1d0      	cbz	r0, 80137e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80137b0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80137b4:	2709      	movs	r7, #9
 80137b6:	e000      	b.n	80137ba <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80137b8:	b1a8      	cbz	r0, 80137e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80137ba:	f858 1b04 	ldr.w	r1, [r8], #4
 80137be:	4630      	mov	r0, r6
 80137c0:	f002 feae 	bl	8016520 <ucdr_serialize_string>
 80137c4:	6862      	ldr	r2, [r4, #4]
 80137c6:	3701      	adds	r7, #1
 80137c8:	4297      	cmp	r7, r2
 80137ca:	d3f5      	bcc.n	80137b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80137cc:	4005      	ands	r5, r0
 80137ce:	b2ed      	uxtb	r5, r5
 80137d0:	e78a      	b.n	80136e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80137d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80137d4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80137d8:	4630      	mov	r0, r6
 80137da:	f002 fe75 	bl	80164c8 <ucdr_serialize_sequence_uint8_t>
 80137de:	4005      	ands	r5, r0
 80137e0:	4628      	mov	r0, r5
 80137e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e6:	2500      	movs	r5, #0
 80137e8:	e77e      	b.n	80136e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80137ea:	4028      	ands	r0, r5
 80137ec:	b2c5      	uxtb	r5, r0
 80137ee:	e77b      	b.n	80136e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080137f0 <uxr_serialize_OBJK_Publisher_Binary>:
 80137f0:	b570      	push	{r4, r5, r6, lr}
 80137f2:	460d      	mov	r5, r1
 80137f4:	7809      	ldrb	r1, [r1, #0]
 80137f6:	4606      	mov	r6, r0
 80137f8:	f7fc ff94 	bl	8010724 <ucdr_serialize_bool>
 80137fc:	782b      	ldrb	r3, [r5, #0]
 80137fe:	4604      	mov	r4, r0
 8013800:	b94b      	cbnz	r3, 8013816 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013802:	7a29      	ldrb	r1, [r5, #8]
 8013804:	4630      	mov	r0, r6
 8013806:	f7fc ff8d 	bl	8010724 <ucdr_serialize_bool>
 801380a:	7a2b      	ldrb	r3, [r5, #8]
 801380c:	4004      	ands	r4, r0
 801380e:	b2e4      	uxtb	r4, r4
 8013810:	b943      	cbnz	r3, 8013824 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013812:	4620      	mov	r0, r4
 8013814:	bd70      	pop	{r4, r5, r6, pc}
 8013816:	6869      	ldr	r1, [r5, #4]
 8013818:	4630      	mov	r0, r6
 801381a:	f002 fe81 	bl	8016520 <ucdr_serialize_string>
 801381e:	4004      	ands	r4, r0
 8013820:	b2e4      	uxtb	r4, r4
 8013822:	e7ee      	b.n	8013802 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013824:	f105 010c 	add.w	r1, r5, #12
 8013828:	4630      	mov	r0, r6
 801382a:	f7ff ff53 	bl	80136d4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801382e:	4004      	ands	r4, r0
 8013830:	4620      	mov	r0, r4
 8013832:	bd70      	pop	{r4, r5, r6, pc}

08013834 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013834:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013838:	4688      	mov	r8, r1
 801383a:	8809      	ldrh	r1, [r1, #0]
 801383c:	4681      	mov	r9, r0
 801383e:	f7fc ffcb 	bl	80107d8 <ucdr_serialize_uint16_t>
 8013842:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013846:	4606      	mov	r6, r0
 8013848:	4648      	mov	r0, r9
 801384a:	f7fc ff6b 	bl	8010724 <ucdr_serialize_bool>
 801384e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013852:	4006      	ands	r6, r0
 8013854:	b2f5      	uxtb	r5, r6
 8013856:	b9eb      	cbnz	r3, 8013894 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013858:	f898 1006 	ldrb.w	r1, [r8, #6]
 801385c:	4648      	mov	r0, r9
 801385e:	f7fc ff61 	bl	8010724 <ucdr_serialize_bool>
 8013862:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013866:	4005      	ands	r5, r0
 8013868:	bb7b      	cbnz	r3, 80138ca <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801386a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801386e:	4648      	mov	r0, r9
 8013870:	f7fc ff58 	bl	8010724 <ucdr_serialize_bool>
 8013874:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013878:	4005      	ands	r5, r0
 801387a:	b9f3      	cbnz	r3, 80138ba <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801387c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013880:	4648      	mov	r0, r9
 8013882:	f7fc ff4f 	bl	8010724 <ucdr_serialize_bool>
 8013886:	f898 3014 	ldrb.w	r3, [r8, #20]
 801388a:	4005      	ands	r5, r0
 801388c:	b94b      	cbnz	r3, 80138a2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801388e:	4628      	mov	r0, r5
 8013890:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013894:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013898:	4648      	mov	r0, r9
 801389a:	f7fc ff9d 	bl	80107d8 <ucdr_serialize_uint16_t>
 801389e:	4005      	ands	r5, r0
 80138a0:	e7da      	b.n	8013858 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80138a2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80138a6:	f108 011c 	add.w	r1, r8, #28
 80138aa:	4648      	mov	r0, r9
 80138ac:	f002 fe0c 	bl	80164c8 <ucdr_serialize_sequence_uint8_t>
 80138b0:	4028      	ands	r0, r5
 80138b2:	b2c5      	uxtb	r5, r0
 80138b4:	4628      	mov	r0, r5
 80138b6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80138ba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80138be:	4648      	mov	r0, r9
 80138c0:	f7fd f974 	bl	8010bac <ucdr_serialize_uint32_t>
 80138c4:	4028      	ands	r0, r5
 80138c6:	b2c5      	uxtb	r5, r0
 80138c8:	e7d8      	b.n	801387c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80138ca:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80138ce:	4648      	mov	r0, r9
 80138d0:	f7fd f96c 	bl	8010bac <ucdr_serialize_uint32_t>
 80138d4:	4028      	ands	r0, r5
 80138d6:	b2c5      	uxtb	r5, r0
 80138d8:	e7c7      	b.n	801386a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80138da:	bf00      	nop

080138dc <uxr_serialize_OBJK_DataWriter_Binary>:
 80138dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138de:	2202      	movs	r2, #2
 80138e0:	460d      	mov	r5, r1
 80138e2:	4606      	mov	r6, r0
 80138e4:	f002 fcfc 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 80138e8:	78a9      	ldrb	r1, [r5, #2]
 80138ea:	4604      	mov	r4, r0
 80138ec:	4630      	mov	r0, r6
 80138ee:	f7fc ff19 	bl	8010724 <ucdr_serialize_bool>
 80138f2:	78ab      	ldrb	r3, [r5, #2]
 80138f4:	4004      	ands	r4, r0
 80138f6:	b2e4      	uxtb	r4, r4
 80138f8:	b90b      	cbnz	r3, 80138fe <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80138fa:	4620      	mov	r0, r4
 80138fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138fe:	f105 0108 	add.w	r1, r5, #8
 8013902:	4630      	mov	r0, r6
 8013904:	f7ff ff96 	bl	8013834 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013908:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801390c:	4607      	mov	r7, r0
 801390e:	4630      	mov	r0, r6
 8013910:	f7fc ff08 	bl	8010724 <ucdr_serialize_bool>
 8013914:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8013918:	4038      	ands	r0, r7
 801391a:	b2c7      	uxtb	r7, r0
 801391c:	b913      	cbnz	r3, 8013924 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801391e:	403c      	ands	r4, r7
 8013920:	4620      	mov	r0, r4
 8013922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013924:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8013928:	4630      	mov	r0, r6
 801392a:	f7fd fb95 	bl	8011058 <ucdr_serialize_uint64_t>
 801392e:	4007      	ands	r7, r0
 8013930:	e7f5      	b.n	801391e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013932:	bf00      	nop

08013934 <uxr_deserialize_ObjectVariant>:
 8013934:	b570      	push	{r4, r5, r6, lr}
 8013936:	4605      	mov	r5, r0
 8013938:	460e      	mov	r6, r1
 801393a:	f7fc ff37 	bl	80107ac <ucdr_deserialize_uint8_t>
 801393e:	b168      	cbz	r0, 801395c <uxr_deserialize_ObjectVariant+0x28>
 8013940:	7833      	ldrb	r3, [r6, #0]
 8013942:	3b01      	subs	r3, #1
 8013944:	4604      	mov	r4, r0
 8013946:	2b0d      	cmp	r3, #13
 8013948:	d809      	bhi.n	801395e <uxr_deserialize_ObjectVariant+0x2a>
 801394a:	e8df f003 	tbb	[pc, r3]
 801394e:	0a41      	.short	0x0a41
 8013950:	0a0a2323 	.word	0x0a0a2323
 8013954:	10080a0a 	.word	0x10080a0a
 8013958:	565c1010 	.word	0x565c1010
 801395c:	2400      	movs	r4, #0
 801395e:	4620      	mov	r0, r4
 8013960:	bd70      	pop	{r4, r5, r6, pc}
 8013962:	1d31      	adds	r1, r6, #4
 8013964:	4628      	mov	r0, r5
 8013966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801396a:	f7ff be41 	b.w	80135f0 <uxr_deserialize_DATAWRITER_Representation>
 801396e:	1d31      	adds	r1, r6, #4
 8013970:	4628      	mov	r0, r5
 8013972:	f7fc ff1b 	bl	80107ac <ucdr_deserialize_uint8_t>
 8013976:	2800      	cmp	r0, #0
 8013978:	d0f0      	beq.n	801395c <uxr_deserialize_ObjectVariant+0x28>
 801397a:	7933      	ldrb	r3, [r6, #4]
 801397c:	2b01      	cmp	r3, #1
 801397e:	d001      	beq.n	8013984 <uxr_deserialize_ObjectVariant+0x50>
 8013980:	2b02      	cmp	r3, #2
 8013982:	d1ec      	bne.n	801395e <uxr_deserialize_ObjectVariant+0x2a>
 8013984:	68b1      	ldr	r1, [r6, #8]
 8013986:	4628      	mov	r0, r5
 8013988:	f44f 7200 	mov.w	r2, #512	; 0x200
 801398c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013990:	f002 bdd6 	b.w	8016540 <ucdr_deserialize_string>
 8013994:	1d31      	adds	r1, r6, #4
 8013996:	4628      	mov	r0, r5
 8013998:	f7fc ff08 	bl	80107ac <ucdr_deserialize_uint8_t>
 801399c:	4604      	mov	r4, r0
 801399e:	b170      	cbz	r0, 80139be <uxr_deserialize_ObjectVariant+0x8a>
 80139a0:	7933      	ldrb	r3, [r6, #4]
 80139a2:	2b02      	cmp	r3, #2
 80139a4:	d04c      	beq.n	8013a40 <uxr_deserialize_ObjectVariant+0x10c>
 80139a6:	2b03      	cmp	r3, #3
 80139a8:	d109      	bne.n	80139be <uxr_deserialize_ObjectVariant+0x8a>
 80139aa:	f106 0308 	add.w	r3, r6, #8
 80139ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80139b2:	f106 010c 	add.w	r1, r6, #12
 80139b6:	4628      	mov	r0, r5
 80139b8:	f002 fd98 	bl	80164ec <ucdr_deserialize_sequence_uint8_t>
 80139bc:	4604      	mov	r4, r0
 80139be:	2202      	movs	r2, #2
 80139c0:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80139c4:	4628      	mov	r0, r5
 80139c6:	f002 fcef 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 80139ca:	4020      	ands	r0, r4
 80139cc:	b2c4      	uxtb	r4, r0
 80139ce:	e7c6      	b.n	801395e <uxr_deserialize_ObjectVariant+0x2a>
 80139d0:	1d31      	adds	r1, r6, #4
 80139d2:	4628      	mov	r0, r5
 80139d4:	f7fc feea 	bl	80107ac <ucdr_deserialize_uint8_t>
 80139d8:	4604      	mov	r4, r0
 80139da:	b130      	cbz	r0, 80139ea <uxr_deserialize_ObjectVariant+0xb6>
 80139dc:	7933      	ldrb	r3, [r6, #4]
 80139de:	2b02      	cmp	r3, #2
 80139e0:	d036      	beq.n	8013a50 <uxr_deserialize_ObjectVariant+0x11c>
 80139e2:	2b03      	cmp	r3, #3
 80139e4:	d03c      	beq.n	8013a60 <uxr_deserialize_ObjectVariant+0x12c>
 80139e6:	2b01      	cmp	r3, #1
 80139e8:	d032      	beq.n	8013a50 <uxr_deserialize_ObjectVariant+0x11c>
 80139ea:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80139ee:	4628      	mov	r0, r5
 80139f0:	f7fd fc82 	bl	80112f8 <ucdr_deserialize_int16_t>
 80139f4:	4020      	ands	r0, r4
 80139f6:	b2c4      	uxtb	r4, r0
 80139f8:	e7b1      	b.n	801395e <uxr_deserialize_ObjectVariant+0x2a>
 80139fa:	1d31      	adds	r1, r6, #4
 80139fc:	4628      	mov	r0, r5
 80139fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a02:	f7ff bcab 	b.w	801335c <uxr_deserialize_CLIENT_Representation>
 8013a06:	2204      	movs	r2, #4
 8013a08:	18b1      	adds	r1, r6, r2
 8013a0a:	4628      	mov	r0, r5
 8013a0c:	f002 fccc 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013a10:	2202      	movs	r2, #2
 8013a12:	f106 0108 	add.w	r1, r6, #8
 8013a16:	4604      	mov	r4, r0
 8013a18:	4628      	mov	r0, r5
 8013a1a:	f002 fcc5 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013a1e:	2202      	movs	r2, #2
 8013a20:	4004      	ands	r4, r0
 8013a22:	f106 010a 	add.w	r1, r6, #10
 8013a26:	4628      	mov	r0, r5
 8013a28:	f002 fcbe 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013a2c:	b2e4      	uxtb	r4, r4
 8013a2e:	4603      	mov	r3, r0
 8013a30:	f106 010c 	add.w	r1, r6, #12
 8013a34:	4628      	mov	r0, r5
 8013a36:	401c      	ands	r4, r3
 8013a38:	f7fc fe8a 	bl	8010750 <ucdr_deserialize_bool>
 8013a3c:	4004      	ands	r4, r0
 8013a3e:	e78e      	b.n	801395e <uxr_deserialize_ObjectVariant+0x2a>
 8013a40:	68b1      	ldr	r1, [r6, #8]
 8013a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a46:	4628      	mov	r0, r5
 8013a48:	f002 fd7a 	bl	8016540 <ucdr_deserialize_string>
 8013a4c:	4604      	mov	r4, r0
 8013a4e:	e7b6      	b.n	80139be <uxr_deserialize_ObjectVariant+0x8a>
 8013a50:	68b1      	ldr	r1, [r6, #8]
 8013a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a56:	4628      	mov	r0, r5
 8013a58:	f002 fd72 	bl	8016540 <ucdr_deserialize_string>
 8013a5c:	4604      	mov	r4, r0
 8013a5e:	e7c4      	b.n	80139ea <uxr_deserialize_ObjectVariant+0xb6>
 8013a60:	f106 0308 	add.w	r3, r6, #8
 8013a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a68:	f106 010c 	add.w	r1, r6, #12
 8013a6c:	4628      	mov	r0, r5
 8013a6e:	f002 fd3d 	bl	80164ec <ucdr_deserialize_sequence_uint8_t>
 8013a72:	4604      	mov	r4, r0
 8013a74:	e7b9      	b.n	80139ea <uxr_deserialize_ObjectVariant+0xb6>
 8013a76:	bf00      	nop

08013a78 <uxr_deserialize_BaseObjectRequest>:
 8013a78:	b570      	push	{r4, r5, r6, lr}
 8013a7a:	2202      	movs	r2, #2
 8013a7c:	4605      	mov	r5, r0
 8013a7e:	460e      	mov	r6, r1
 8013a80:	f002 fc92 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013a84:	2202      	movs	r2, #2
 8013a86:	4604      	mov	r4, r0
 8013a88:	18b1      	adds	r1, r6, r2
 8013a8a:	4628      	mov	r0, r5
 8013a8c:	f002 fc8c 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013a90:	4020      	ands	r0, r4
 8013a92:	b2c0      	uxtb	r0, r0
 8013a94:	bd70      	pop	{r4, r5, r6, pc}
 8013a96:	bf00      	nop

08013a98 <uxr_serialize_ActivityInfoVariant>:
 8013a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a9c:	460d      	mov	r5, r1
 8013a9e:	7809      	ldrb	r1, [r1, #0]
 8013aa0:	4607      	mov	r7, r0
 8013aa2:	f7fc fe6d 	bl	8010780 <ucdr_serialize_uint8_t>
 8013aa6:	4681      	mov	r9, r0
 8013aa8:	b138      	cbz	r0, 8013aba <uxr_serialize_ActivityInfoVariant+0x22>
 8013aaa:	782b      	ldrb	r3, [r5, #0]
 8013aac:	2b06      	cmp	r3, #6
 8013aae:	f000 8082 	beq.w	8013bb6 <uxr_serialize_ActivityInfoVariant+0x11e>
 8013ab2:	2b0d      	cmp	r3, #13
 8013ab4:	d016      	beq.n	8013ae4 <uxr_serialize_ActivityInfoVariant+0x4c>
 8013ab6:	2b05      	cmp	r3, #5
 8013ab8:	d002      	beq.n	8013ac0 <uxr_serialize_ActivityInfoVariant+0x28>
 8013aba:	4648      	mov	r0, r9
 8013abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ac0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013ac4:	4638      	mov	r0, r7
 8013ac6:	f7fd fb97 	bl	80111f8 <ucdr_serialize_int16_t>
 8013aca:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013ace:	4681      	mov	r9, r0
 8013ad0:	4638      	mov	r0, r7
 8013ad2:	f7fd fac1 	bl	8011058 <ucdr_serialize_uint64_t>
 8013ad6:	ea09 0000 	and.w	r0, r9, r0
 8013ada:	fa5f f980 	uxtb.w	r9, r0
 8013ade:	4648      	mov	r0, r9
 8013ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ae4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013ae8:	4638      	mov	r0, r7
 8013aea:	f7fd fb85 	bl	80111f8 <ucdr_serialize_int16_t>
 8013aee:	68e9      	ldr	r1, [r5, #12]
 8013af0:	4681      	mov	r9, r0
 8013af2:	4638      	mov	r0, r7
 8013af4:	f7fd f85a 	bl	8010bac <ucdr_serialize_uint32_t>
 8013af8:	68eb      	ldr	r3, [r5, #12]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d0eb      	beq.n	8013ad6 <uxr_serialize_ActivityInfoVariant+0x3e>
 8013afe:	b320      	cbz	r0, 8013b4a <uxr_serialize_ActivityInfoVariant+0xb2>
 8013b00:	f105 080c 	add.w	r8, r5, #12
 8013b04:	2600      	movs	r6, #0
 8013b06:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8013b0a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8013b0e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8013b12:	4638      	mov	r0, r7
 8013b14:	f7fc fe34 	bl	8010780 <ucdr_serialize_uint8_t>
 8013b18:	2800      	cmp	r0, #0
 8013b1a:	d053      	beq.n	8013bc4 <uxr_serialize_ActivityInfoVariant+0x12c>
 8013b1c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8013b20:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8013b24:	0074      	lsls	r4, r6, #1
 8013b26:	00c9      	lsls	r1, r1, #3
 8013b28:	2b03      	cmp	r3, #3
 8013b2a:	d854      	bhi.n	8013bd6 <uxr_serialize_ActivityInfoVariant+0x13e>
 8013b2c:	e8df f003 	tbb	[pc, r3]
 8013b30:	02102132 	.word	0x02102132
 8013b34:	4441      	add	r1, r8
 8013b36:	4638      	mov	r0, r7
 8013b38:	6889      	ldr	r1, [r1, #8]
 8013b3a:	f002 fcf1 	bl	8016520 <ucdr_serialize_string>
 8013b3e:	68ea      	ldr	r2, [r5, #12]
 8013b40:	3601      	adds	r6, #1
 8013b42:	4296      	cmp	r6, r2
 8013b44:	d242      	bcs.n	8013bcc <uxr_serialize_ActivityInfoVariant+0x134>
 8013b46:	2800      	cmp	r0, #0
 8013b48:	d1dd      	bne.n	8013b06 <uxr_serialize_ActivityInfoVariant+0x6e>
 8013b4a:	f04f 0900 	mov.w	r9, #0
 8013b4e:	e7b4      	b.n	8013aba <uxr_serialize_ActivityInfoVariant+0x22>
 8013b50:	3108      	adds	r1, #8
 8013b52:	4441      	add	r1, r8
 8013b54:	2210      	movs	r2, #16
 8013b56:	4638      	mov	r0, r7
 8013b58:	f002 fbc2 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013b5c:	4434      	add	r4, r6
 8013b5e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013b62:	4604      	mov	r4, r0
 8013b64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013b66:	4638      	mov	r0, r7
 8013b68:	f7fd f820 	bl	8010bac <ucdr_serialize_uint32_t>
 8013b6c:	4020      	ands	r0, r4
 8013b6e:	b2c0      	uxtb	r0, r0
 8013b70:	e7e5      	b.n	8013b3e <uxr_serialize_ActivityInfoVariant+0xa6>
 8013b72:	3108      	adds	r1, #8
 8013b74:	4441      	add	r1, r8
 8013b76:	2204      	movs	r2, #4
 8013b78:	4638      	mov	r0, r7
 8013b7a:	f002 fbb1 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013b7e:	4434      	add	r4, r6
 8013b80:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013b84:	4604      	mov	r4, r0
 8013b86:	8b19      	ldrh	r1, [r3, #24]
 8013b88:	4638      	mov	r0, r7
 8013b8a:	f7fc fe25 	bl	80107d8 <ucdr_serialize_uint16_t>
 8013b8e:	4020      	ands	r0, r4
 8013b90:	b2c0      	uxtb	r0, r0
 8013b92:	e7d4      	b.n	8013b3e <uxr_serialize_ActivityInfoVariant+0xa6>
 8013b94:	3108      	adds	r1, #8
 8013b96:	4441      	add	r1, r8
 8013b98:	2202      	movs	r2, #2
 8013b9a:	4638      	mov	r0, r7
 8013b9c:	f002 fba0 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013ba0:	4434      	add	r4, r6
 8013ba2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013ba6:	4604      	mov	r4, r0
 8013ba8:	7d99      	ldrb	r1, [r3, #22]
 8013baa:	4638      	mov	r0, r7
 8013bac:	f7fc fde8 	bl	8010780 <ucdr_serialize_uint8_t>
 8013bb0:	4020      	ands	r0, r4
 8013bb2:	b2c0      	uxtb	r0, r0
 8013bb4:	e7c3      	b.n	8013b3e <uxr_serialize_ActivityInfoVariant+0xa6>
 8013bb6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013bba:	4638      	mov	r0, r7
 8013bbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bc0:	f7fd bb1a 	b.w	80111f8 <ucdr_serialize_int16_t>
 8013bc4:	68ea      	ldr	r2, [r5, #12]
 8013bc6:	3601      	adds	r6, #1
 8013bc8:	42b2      	cmp	r2, r6
 8013bca:	d8be      	bhi.n	8013b4a <uxr_serialize_ActivityInfoVariant+0xb2>
 8013bcc:	ea09 0900 	and.w	r9, r9, r0
 8013bd0:	fa5f f989 	uxtb.w	r9, r9
 8013bd4:	e771      	b.n	8013aba <uxr_serialize_ActivityInfoVariant+0x22>
 8013bd6:	68eb      	ldr	r3, [r5, #12]
 8013bd8:	3601      	adds	r6, #1
 8013bda:	429e      	cmp	r6, r3
 8013bdc:	f10a 0a18 	add.w	sl, sl, #24
 8013be0:	d395      	bcc.n	8013b0e <uxr_serialize_ActivityInfoVariant+0x76>
 8013be2:	e76a      	b.n	8013aba <uxr_serialize_ActivityInfoVariant+0x22>

08013be4 <uxr_deserialize_BaseObjectReply>:
 8013be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013be8:	2202      	movs	r2, #2
 8013bea:	4606      	mov	r6, r0
 8013bec:	460f      	mov	r7, r1
 8013bee:	f002 fbdb 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013bf2:	2202      	movs	r2, #2
 8013bf4:	18b9      	adds	r1, r7, r2
 8013bf6:	4605      	mov	r5, r0
 8013bf8:	4630      	mov	r0, r6
 8013bfa:	f002 fbd5 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013bfe:	1d39      	adds	r1, r7, #4
 8013c00:	4680      	mov	r8, r0
 8013c02:	4630      	mov	r0, r6
 8013c04:	f7fc fdd2 	bl	80107ac <ucdr_deserialize_uint8_t>
 8013c08:	1d79      	adds	r1, r7, #5
 8013c0a:	4604      	mov	r4, r0
 8013c0c:	4630      	mov	r0, r6
 8013c0e:	f7fc fdcd 	bl	80107ac <ucdr_deserialize_uint8_t>
 8013c12:	ea05 0508 	and.w	r5, r5, r8
 8013c16:	402c      	ands	r4, r5
 8013c18:	4020      	ands	r0, r4
 8013c1a:	b2c0      	uxtb	r0, r0
 8013c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c20 <uxr_serialize_ReadSpecification>:
 8013c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c24:	460e      	mov	r6, r1
 8013c26:	7809      	ldrb	r1, [r1, #0]
 8013c28:	4607      	mov	r7, r0
 8013c2a:	f7fc fda9 	bl	8010780 <ucdr_serialize_uint8_t>
 8013c2e:	7871      	ldrb	r1, [r6, #1]
 8013c30:	4604      	mov	r4, r0
 8013c32:	4638      	mov	r0, r7
 8013c34:	f7fc fda4 	bl	8010780 <ucdr_serialize_uint8_t>
 8013c38:	78b1      	ldrb	r1, [r6, #2]
 8013c3a:	4004      	ands	r4, r0
 8013c3c:	4638      	mov	r0, r7
 8013c3e:	f7fc fd71 	bl	8010724 <ucdr_serialize_bool>
 8013c42:	78b3      	ldrb	r3, [r6, #2]
 8013c44:	b2e4      	uxtb	r4, r4
 8013c46:	4004      	ands	r4, r0
 8013c48:	b94b      	cbnz	r3, 8013c5e <uxr_serialize_ReadSpecification+0x3e>
 8013c4a:	7a31      	ldrb	r1, [r6, #8]
 8013c4c:	4638      	mov	r0, r7
 8013c4e:	f7fc fd69 	bl	8010724 <ucdr_serialize_bool>
 8013c52:	7a33      	ldrb	r3, [r6, #8]
 8013c54:	4004      	ands	r4, r0
 8013c56:	b943      	cbnz	r3, 8013c6a <uxr_serialize_ReadSpecification+0x4a>
 8013c58:	4620      	mov	r0, r4
 8013c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c5e:	6871      	ldr	r1, [r6, #4]
 8013c60:	4638      	mov	r0, r7
 8013c62:	f002 fc5d 	bl	8016520 <ucdr_serialize_string>
 8013c66:	4004      	ands	r4, r0
 8013c68:	e7ef      	b.n	8013c4a <uxr_serialize_ReadSpecification+0x2a>
 8013c6a:	8971      	ldrh	r1, [r6, #10]
 8013c6c:	4638      	mov	r0, r7
 8013c6e:	f7fc fdb3 	bl	80107d8 <ucdr_serialize_uint16_t>
 8013c72:	89b1      	ldrh	r1, [r6, #12]
 8013c74:	4605      	mov	r5, r0
 8013c76:	4638      	mov	r0, r7
 8013c78:	f7fc fdae 	bl	80107d8 <ucdr_serialize_uint16_t>
 8013c7c:	89f1      	ldrh	r1, [r6, #14]
 8013c7e:	4005      	ands	r5, r0
 8013c80:	4638      	mov	r0, r7
 8013c82:	f7fc fda9 	bl	80107d8 <ucdr_serialize_uint16_t>
 8013c86:	8a31      	ldrh	r1, [r6, #16]
 8013c88:	4680      	mov	r8, r0
 8013c8a:	4638      	mov	r0, r7
 8013c8c:	f7fc fda4 	bl	80107d8 <ucdr_serialize_uint16_t>
 8013c90:	b2ed      	uxtb	r5, r5
 8013c92:	4025      	ands	r5, r4
 8013c94:	ea08 0505 	and.w	r5, r8, r5
 8013c98:	ea00 0405 	and.w	r4, r0, r5
 8013c9c:	4620      	mov	r0, r4
 8013c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ca2:	bf00      	nop

08013ca4 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013ca4:	f7ff bb02 	b.w	80132ac <uxr_serialize_CLIENT_Representation>

08013ca8 <uxr_serialize_CREATE_Payload>:
 8013ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013caa:	2202      	movs	r2, #2
 8013cac:	4607      	mov	r7, r0
 8013cae:	460e      	mov	r6, r1
 8013cb0:	f002 fb16 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013cb4:	2202      	movs	r2, #2
 8013cb6:	18b1      	adds	r1, r6, r2
 8013cb8:	4605      	mov	r5, r0
 8013cba:	4638      	mov	r0, r7
 8013cbc:	f002 fb10 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013cc0:	7931      	ldrb	r1, [r6, #4]
 8013cc2:	4604      	mov	r4, r0
 8013cc4:	4638      	mov	r0, r7
 8013cc6:	f7fc fd5b 	bl	8010780 <ucdr_serialize_uint8_t>
 8013cca:	b170      	cbz	r0, 8013cea <uxr_serialize_CREATE_Payload+0x42>
 8013ccc:	7933      	ldrb	r3, [r6, #4]
 8013cce:	402c      	ands	r4, r5
 8013cd0:	3b01      	subs	r3, #1
 8013cd2:	b2e4      	uxtb	r4, r4
 8013cd4:	2b0d      	cmp	r3, #13
 8013cd6:	d809      	bhi.n	8013cec <uxr_serialize_CREATE_Payload+0x44>
 8013cd8:	e8df f003 	tbb	[pc, r3]
 8013cdc:	23230a4c 	.word	0x23230a4c
 8013ce0:	0a0a0a0a 	.word	0x0a0a0a0a
 8013ce4:	12121208 	.word	0x12121208
 8013ce8:	3e45      	.short	0x3e45
 8013cea:	2400      	movs	r4, #0
 8013cec:	4620      	mov	r0, r4
 8013cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cf0:	f106 0108 	add.w	r1, r6, #8
 8013cf4:	4638      	mov	r0, r7
 8013cf6:	f7ff fbdf 	bl	80134b8 <uxr_serialize_DATAWRITER_Representation>
 8013cfa:	4004      	ands	r4, r0
 8013cfc:	4620      	mov	r0, r4
 8013cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d00:	7a31      	ldrb	r1, [r6, #8]
 8013d02:	4638      	mov	r0, r7
 8013d04:	f7fc fd3c 	bl	8010780 <ucdr_serialize_uint8_t>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	d0ee      	beq.n	8013cea <uxr_serialize_CREATE_Payload+0x42>
 8013d0c:	7a33      	ldrb	r3, [r6, #8]
 8013d0e:	2b01      	cmp	r3, #1
 8013d10:	d001      	beq.n	8013d16 <uxr_serialize_CREATE_Payload+0x6e>
 8013d12:	2b02      	cmp	r3, #2
 8013d14:	d1ea      	bne.n	8013cec <uxr_serialize_CREATE_Payload+0x44>
 8013d16:	68f1      	ldr	r1, [r6, #12]
 8013d18:	4638      	mov	r0, r7
 8013d1a:	f002 fc01 	bl	8016520 <ucdr_serialize_string>
 8013d1e:	4004      	ands	r4, r0
 8013d20:	e7e4      	b.n	8013cec <uxr_serialize_CREATE_Payload+0x44>
 8013d22:	7a31      	ldrb	r1, [r6, #8]
 8013d24:	4638      	mov	r0, r7
 8013d26:	f7fc fd2b 	bl	8010780 <ucdr_serialize_uint8_t>
 8013d2a:	4605      	mov	r5, r0
 8013d2c:	b158      	cbz	r0, 8013d46 <uxr_serialize_CREATE_Payload+0x9e>
 8013d2e:	7a33      	ldrb	r3, [r6, #8]
 8013d30:	2b02      	cmp	r3, #2
 8013d32:	d034      	beq.n	8013d9e <uxr_serialize_CREATE_Payload+0xf6>
 8013d34:	2b03      	cmp	r3, #3
 8013d36:	d106      	bne.n	8013d46 <uxr_serialize_CREATE_Payload+0x9e>
 8013d38:	68f2      	ldr	r2, [r6, #12]
 8013d3a:	f106 0110 	add.w	r1, r6, #16
 8013d3e:	4638      	mov	r0, r7
 8013d40:	f002 fbc2 	bl	80164c8 <ucdr_serialize_sequence_uint8_t>
 8013d44:	4605      	mov	r5, r0
 8013d46:	2202      	movs	r2, #2
 8013d48:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8013d4c:	4638      	mov	r0, r7
 8013d4e:	f002 fac7 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013d52:	4028      	ands	r0, r5
 8013d54:	4004      	ands	r4, r0
 8013d56:	e7c9      	b.n	8013cec <uxr_serialize_CREATE_Payload+0x44>
 8013d58:	f106 0108 	add.w	r1, r6, #8
 8013d5c:	4638      	mov	r0, r7
 8013d5e:	f7ff faa5 	bl	80132ac <uxr_serialize_CLIENT_Representation>
 8013d62:	4004      	ands	r4, r0
 8013d64:	e7c2      	b.n	8013cec <uxr_serialize_CREATE_Payload+0x44>
 8013d66:	f106 0108 	add.w	r1, r6, #8
 8013d6a:	4638      	mov	r0, r7
 8013d6c:	f7ff fb5a 	bl	8013424 <uxr_serialize_AGENT_Representation>
 8013d70:	4004      	ands	r4, r0
 8013d72:	e7bb      	b.n	8013cec <uxr_serialize_CREATE_Payload+0x44>
 8013d74:	7a31      	ldrb	r1, [r6, #8]
 8013d76:	4638      	mov	r0, r7
 8013d78:	f7fc fd02 	bl	8010780 <ucdr_serialize_uint8_t>
 8013d7c:	4605      	mov	r5, r0
 8013d7e:	b130      	cbz	r0, 8013d8e <uxr_serialize_CREATE_Payload+0xe6>
 8013d80:	7a33      	ldrb	r3, [r6, #8]
 8013d82:	2b02      	cmp	r3, #2
 8013d84:	d011      	beq.n	8013daa <uxr_serialize_CREATE_Payload+0x102>
 8013d86:	2b03      	cmp	r3, #3
 8013d88:	d015      	beq.n	8013db6 <uxr_serialize_CREATE_Payload+0x10e>
 8013d8a:	2b01      	cmp	r3, #1
 8013d8c:	d00d      	beq.n	8013daa <uxr_serialize_CREATE_Payload+0x102>
 8013d8e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8013d92:	4638      	mov	r0, r7
 8013d94:	f7fd fa30 	bl	80111f8 <ucdr_serialize_int16_t>
 8013d98:	4028      	ands	r0, r5
 8013d9a:	4004      	ands	r4, r0
 8013d9c:	e7a6      	b.n	8013cec <uxr_serialize_CREATE_Payload+0x44>
 8013d9e:	68f1      	ldr	r1, [r6, #12]
 8013da0:	4638      	mov	r0, r7
 8013da2:	f002 fbbd 	bl	8016520 <ucdr_serialize_string>
 8013da6:	4605      	mov	r5, r0
 8013da8:	e7cd      	b.n	8013d46 <uxr_serialize_CREATE_Payload+0x9e>
 8013daa:	68f1      	ldr	r1, [r6, #12]
 8013dac:	4638      	mov	r0, r7
 8013dae:	f002 fbb7 	bl	8016520 <ucdr_serialize_string>
 8013db2:	4605      	mov	r5, r0
 8013db4:	e7eb      	b.n	8013d8e <uxr_serialize_CREATE_Payload+0xe6>
 8013db6:	68f2      	ldr	r2, [r6, #12]
 8013db8:	f106 0110 	add.w	r1, r6, #16
 8013dbc:	4638      	mov	r0, r7
 8013dbe:	f002 fb83 	bl	80164c8 <ucdr_serialize_sequence_uint8_t>
 8013dc2:	4605      	mov	r5, r0
 8013dc4:	e7e3      	b.n	8013d8e <uxr_serialize_CREATE_Payload+0xe6>
 8013dc6:	bf00      	nop

08013dc8 <uxr_deserialize_GET_INFO_Payload>:
 8013dc8:	b570      	push	{r4, r5, r6, lr}
 8013dca:	2202      	movs	r2, #2
 8013dcc:	4605      	mov	r5, r0
 8013dce:	460e      	mov	r6, r1
 8013dd0:	f002 faea 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013dd4:	2202      	movs	r2, #2
 8013dd6:	18b1      	adds	r1, r6, r2
 8013dd8:	4604      	mov	r4, r0
 8013dda:	4628      	mov	r0, r5
 8013ddc:	f002 fae4 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013de0:	1d31      	adds	r1, r6, #4
 8013de2:	4004      	ands	r4, r0
 8013de4:	4628      	mov	r0, r5
 8013de6:	f7fd f811 	bl	8010e0c <ucdr_deserialize_uint32_t>
 8013dea:	b2e4      	uxtb	r4, r4
 8013dec:	4020      	ands	r0, r4
 8013dee:	bd70      	pop	{r4, r5, r6, pc}

08013df0 <uxr_serialize_DELETE_Payload>:
 8013df0:	b570      	push	{r4, r5, r6, lr}
 8013df2:	2202      	movs	r2, #2
 8013df4:	4605      	mov	r5, r0
 8013df6:	460e      	mov	r6, r1
 8013df8:	f002 fa72 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013dfc:	2202      	movs	r2, #2
 8013dfe:	4604      	mov	r4, r0
 8013e00:	18b1      	adds	r1, r6, r2
 8013e02:	4628      	mov	r0, r5
 8013e04:	f002 fa6c 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013e08:	4020      	ands	r0, r4
 8013e0a:	b2c0      	uxtb	r0, r0
 8013e0c:	bd70      	pop	{r4, r5, r6, pc}
 8013e0e:	bf00      	nop

08013e10 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e14:	4605      	mov	r5, r0
 8013e16:	460e      	mov	r6, r1
 8013e18:	f7fc fcc8 	bl	80107ac <ucdr_deserialize_uint8_t>
 8013e1c:	1c71      	adds	r1, r6, #1
 8013e1e:	4604      	mov	r4, r0
 8013e20:	4628      	mov	r0, r5
 8013e22:	f7fc fcc3 	bl	80107ac <ucdr_deserialize_uint8_t>
 8013e26:	2204      	movs	r2, #4
 8013e28:	18b1      	adds	r1, r6, r2
 8013e2a:	4680      	mov	r8, r0
 8013e2c:	4628      	mov	r0, r5
 8013e2e:	f002 fabb 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013e32:	f106 0108 	add.w	r1, r6, #8
 8013e36:	4607      	mov	r7, r0
 8013e38:	2202      	movs	r2, #2
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	f002 fab4 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013e40:	ea04 0308 	and.w	r3, r4, r8
 8013e44:	b2db      	uxtb	r3, r3
 8013e46:	ea03 0407 	and.w	r4, r3, r7
 8013e4a:	2202      	movs	r2, #2
 8013e4c:	4607      	mov	r7, r0
 8013e4e:	f106 010a 	add.w	r1, r6, #10
 8013e52:	4628      	mov	r0, r5
 8013e54:	f002 faa8 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013e58:	f106 010c 	add.w	r1, r6, #12
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	4628      	mov	r0, r5
 8013e60:	461d      	mov	r5, r3
 8013e62:	f7fc fc75 	bl	8010750 <ucdr_deserialize_bool>
 8013e66:	403c      	ands	r4, r7
 8013e68:	4025      	ands	r5, r4
 8013e6a:	4028      	ands	r0, r5
 8013e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e70 <uxr_deserialize_STATUS_Payload>:
 8013e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e74:	2202      	movs	r2, #2
 8013e76:	4606      	mov	r6, r0
 8013e78:	460f      	mov	r7, r1
 8013e7a:	f002 fa95 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013e7e:	2202      	movs	r2, #2
 8013e80:	18b9      	adds	r1, r7, r2
 8013e82:	4605      	mov	r5, r0
 8013e84:	4630      	mov	r0, r6
 8013e86:	f002 fa8f 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013e8a:	1d39      	adds	r1, r7, #4
 8013e8c:	4680      	mov	r8, r0
 8013e8e:	4630      	mov	r0, r6
 8013e90:	f7fc fc8c 	bl	80107ac <ucdr_deserialize_uint8_t>
 8013e94:	1d79      	adds	r1, r7, #5
 8013e96:	4604      	mov	r4, r0
 8013e98:	4630      	mov	r0, r6
 8013e9a:	f7fc fc87 	bl	80107ac <ucdr_deserialize_uint8_t>
 8013e9e:	ea05 0508 	and.w	r5, r5, r8
 8013ea2:	402c      	ands	r4, r5
 8013ea4:	4020      	ands	r0, r4
 8013ea6:	b2c0      	uxtb	r0, r0
 8013ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013eac <uxr_serialize_INFO_Payload>:
 8013eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eb0:	2202      	movs	r2, #2
 8013eb2:	460c      	mov	r4, r1
 8013eb4:	4605      	mov	r5, r0
 8013eb6:	f002 fa13 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013eba:	2202      	movs	r2, #2
 8013ebc:	18a1      	adds	r1, r4, r2
 8013ebe:	4680      	mov	r8, r0
 8013ec0:	4628      	mov	r0, r5
 8013ec2:	f002 fa0d 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013ec6:	7921      	ldrb	r1, [r4, #4]
 8013ec8:	4607      	mov	r7, r0
 8013eca:	4628      	mov	r0, r5
 8013ecc:	f7fc fc58 	bl	8010780 <ucdr_serialize_uint8_t>
 8013ed0:	7961      	ldrb	r1, [r4, #5]
 8013ed2:	4606      	mov	r6, r0
 8013ed4:	4628      	mov	r0, r5
 8013ed6:	f7fc fc53 	bl	8010780 <ucdr_serialize_uint8_t>
 8013eda:	ea08 0807 	and.w	r8, r8, r7
 8013ede:	ea06 0608 	and.w	r6, r6, r8
 8013ee2:	4006      	ands	r6, r0
 8013ee4:	7a21      	ldrb	r1, [r4, #8]
 8013ee6:	4628      	mov	r0, r5
 8013ee8:	f7fc fc1c 	bl	8010724 <ucdr_serialize_bool>
 8013eec:	7a23      	ldrb	r3, [r4, #8]
 8013eee:	b2f7      	uxtb	r7, r6
 8013ef0:	4606      	mov	r6, r0
 8013ef2:	b96b      	cbnz	r3, 8013f10 <uxr_serialize_INFO_Payload+0x64>
 8013ef4:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8013ef8:	4628      	mov	r0, r5
 8013efa:	f7fc fc13 	bl	8010724 <ucdr_serialize_bool>
 8013efe:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8013f02:	4030      	ands	r0, r6
 8013f04:	b2c6      	uxtb	r6, r0
 8013f06:	b983      	cbnz	r3, 8013f2a <uxr_serialize_INFO_Payload+0x7e>
 8013f08:	ea06 0007 	and.w	r0, r6, r7
 8013f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f10:	7b21      	ldrb	r1, [r4, #12]
 8013f12:	4628      	mov	r0, r5
 8013f14:	f7fc fc34 	bl	8010780 <ucdr_serialize_uint8_t>
 8013f18:	b188      	cbz	r0, 8013f3e <uxr_serialize_INFO_Payload+0x92>
 8013f1a:	f104 010c 	add.w	r1, r4, #12
 8013f1e:	4628      	mov	r0, r5
 8013f20:	f7ff faf2 	bl	8013508 <uxr_serialize_ObjectVariant.part.0>
 8013f24:	4030      	ands	r0, r6
 8013f26:	b2c6      	uxtb	r6, r0
 8013f28:	e7e4      	b.n	8013ef4 <uxr_serialize_INFO_Payload+0x48>
 8013f2a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8013f2e:	4628      	mov	r0, r5
 8013f30:	f7ff fdb2 	bl	8013a98 <uxr_serialize_ActivityInfoVariant>
 8013f34:	4006      	ands	r6, r0
 8013f36:	ea06 0007 	and.w	r0, r6, r7
 8013f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f3e:	4606      	mov	r6, r0
 8013f40:	e7d8      	b.n	8013ef4 <uxr_serialize_INFO_Payload+0x48>
 8013f42:	bf00      	nop

08013f44 <uxr_serialize_READ_DATA_Payload>:
 8013f44:	b570      	push	{r4, r5, r6, lr}
 8013f46:	2202      	movs	r2, #2
 8013f48:	4605      	mov	r5, r0
 8013f4a:	460e      	mov	r6, r1
 8013f4c:	f002 f9c8 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013f50:	2202      	movs	r2, #2
 8013f52:	18b1      	adds	r1, r6, r2
 8013f54:	4604      	mov	r4, r0
 8013f56:	4628      	mov	r0, r5
 8013f58:	f002 f9c2 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013f5c:	1d31      	adds	r1, r6, #4
 8013f5e:	4004      	ands	r4, r0
 8013f60:	4628      	mov	r0, r5
 8013f62:	f7ff fe5d 	bl	8013c20 <uxr_serialize_ReadSpecification>
 8013f66:	b2e4      	uxtb	r4, r4
 8013f68:	4020      	ands	r0, r4
 8013f6a:	bd70      	pop	{r4, r5, r6, pc}

08013f6c <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013f6c:	b570      	push	{r4, r5, r6, lr}
 8013f6e:	2202      	movs	r2, #2
 8013f70:	4605      	mov	r5, r0
 8013f72:	460e      	mov	r6, r1
 8013f74:	f002 f9b4 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013f78:	2202      	movs	r2, #2
 8013f7a:	4604      	mov	r4, r0
 8013f7c:	18b1      	adds	r1, r6, r2
 8013f7e:	4628      	mov	r0, r5
 8013f80:	f002 f9ae 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013f84:	4020      	ands	r0, r4
 8013f86:	b2c0      	uxtb	r0, r0
 8013f88:	bd70      	pop	{r4, r5, r6, pc}
 8013f8a:	bf00      	nop

08013f8c <uxr_serialize_ACKNACK_Payload>:
 8013f8c:	b570      	push	{r4, r5, r6, lr}
 8013f8e:	460c      	mov	r4, r1
 8013f90:	460e      	mov	r6, r1
 8013f92:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013f96:	4605      	mov	r5, r0
 8013f98:	f7fc fc1e 	bl	80107d8 <ucdr_serialize_uint16_t>
 8013f9c:	2202      	movs	r2, #2
 8013f9e:	4621      	mov	r1, r4
 8013fa0:	4604      	mov	r4, r0
 8013fa2:	4628      	mov	r0, r5
 8013fa4:	f002 f99c 	bl	80162e0 <ucdr_serialize_array_uint8_t>
 8013fa8:	7931      	ldrb	r1, [r6, #4]
 8013faa:	4004      	ands	r4, r0
 8013fac:	4628      	mov	r0, r5
 8013fae:	f7fc fbe7 	bl	8010780 <ucdr_serialize_uint8_t>
 8013fb2:	b2e4      	uxtb	r4, r4
 8013fb4:	4020      	ands	r0, r4
 8013fb6:	bd70      	pop	{r4, r5, r6, pc}

08013fb8 <uxr_deserialize_ACKNACK_Payload>:
 8013fb8:	b570      	push	{r4, r5, r6, lr}
 8013fba:	4605      	mov	r5, r0
 8013fbc:	460e      	mov	r6, r1
 8013fbe:	f7fc fd0b 	bl	80109d8 <ucdr_deserialize_uint16_t>
 8013fc2:	2202      	movs	r2, #2
 8013fc4:	18b1      	adds	r1, r6, r2
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	4628      	mov	r0, r5
 8013fca:	f002 f9ed 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8013fce:	1d31      	adds	r1, r6, #4
 8013fd0:	4004      	ands	r4, r0
 8013fd2:	4628      	mov	r0, r5
 8013fd4:	f7fc fbea 	bl	80107ac <ucdr_deserialize_uint8_t>
 8013fd8:	b2e4      	uxtb	r4, r4
 8013fda:	4020      	ands	r0, r4
 8013fdc:	bd70      	pop	{r4, r5, r6, pc}
 8013fde:	bf00      	nop

08013fe0 <uxr_serialize_HEARTBEAT_Payload>:
 8013fe0:	b570      	push	{r4, r5, r6, lr}
 8013fe2:	460d      	mov	r5, r1
 8013fe4:	8809      	ldrh	r1, [r1, #0]
 8013fe6:	4606      	mov	r6, r0
 8013fe8:	f7fc fbf6 	bl	80107d8 <ucdr_serialize_uint16_t>
 8013fec:	8869      	ldrh	r1, [r5, #2]
 8013fee:	4604      	mov	r4, r0
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	f7fc fbf1 	bl	80107d8 <ucdr_serialize_uint16_t>
 8013ff6:	7929      	ldrb	r1, [r5, #4]
 8013ff8:	4004      	ands	r4, r0
 8013ffa:	4630      	mov	r0, r6
 8013ffc:	f7fc fbc0 	bl	8010780 <ucdr_serialize_uint8_t>
 8014000:	b2e4      	uxtb	r4, r4
 8014002:	4020      	ands	r0, r4
 8014004:	bd70      	pop	{r4, r5, r6, pc}
 8014006:	bf00      	nop

08014008 <uxr_deserialize_HEARTBEAT_Payload>:
 8014008:	b570      	push	{r4, r5, r6, lr}
 801400a:	4605      	mov	r5, r0
 801400c:	460e      	mov	r6, r1
 801400e:	f7fc fce3 	bl	80109d8 <ucdr_deserialize_uint16_t>
 8014012:	1cb1      	adds	r1, r6, #2
 8014014:	4604      	mov	r4, r0
 8014016:	4628      	mov	r0, r5
 8014018:	f7fc fcde 	bl	80109d8 <ucdr_deserialize_uint16_t>
 801401c:	1d31      	adds	r1, r6, #4
 801401e:	4004      	ands	r4, r0
 8014020:	4628      	mov	r0, r5
 8014022:	f7fc fbc3 	bl	80107ac <ucdr_deserialize_uint8_t>
 8014026:	b2e4      	uxtb	r4, r4
 8014028:	4020      	ands	r0, r4
 801402a:	bd70      	pop	{r4, r5, r6, pc}

0801402c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801402c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014030:	4605      	mov	r5, r0
 8014032:	460e      	mov	r6, r1
 8014034:	f7fd fa6c 	bl	8011510 <ucdr_deserialize_int32_t>
 8014038:	1d31      	adds	r1, r6, #4
 801403a:	4607      	mov	r7, r0
 801403c:	4628      	mov	r0, r5
 801403e:	f7fc fee5 	bl	8010e0c <ucdr_deserialize_uint32_t>
 8014042:	f106 0108 	add.w	r1, r6, #8
 8014046:	4680      	mov	r8, r0
 8014048:	4628      	mov	r0, r5
 801404a:	f7fd fa61 	bl	8011510 <ucdr_deserialize_int32_t>
 801404e:	f106 010c 	add.w	r1, r6, #12
 8014052:	4604      	mov	r4, r0
 8014054:	4628      	mov	r0, r5
 8014056:	f7fc fed9 	bl	8010e0c <ucdr_deserialize_uint32_t>
 801405a:	ea07 0708 	and.w	r7, r7, r8
 801405e:	403c      	ands	r4, r7
 8014060:	f106 0110 	add.w	r1, r6, #16
 8014064:	4004      	ands	r4, r0
 8014066:	4628      	mov	r0, r5
 8014068:	f7fd fa52 	bl	8011510 <ucdr_deserialize_int32_t>
 801406c:	f106 0114 	add.w	r1, r6, #20
 8014070:	4607      	mov	r7, r0
 8014072:	4628      	mov	r0, r5
 8014074:	f7fc feca 	bl	8010e0c <ucdr_deserialize_uint32_t>
 8014078:	b2e4      	uxtb	r4, r4
 801407a:	403c      	ands	r4, r7
 801407c:	4020      	ands	r0, r4
 801407e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014082:	bf00      	nop

08014084 <uxr_deserialize_SampleIdentity>:
 8014084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014088:	220c      	movs	r2, #12
 801408a:	4604      	mov	r4, r0
 801408c:	460d      	mov	r5, r1
 801408e:	f002 f98b 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8014092:	2203      	movs	r2, #3
 8014094:	f105 010c 	add.w	r1, r5, #12
 8014098:	4607      	mov	r7, r0
 801409a:	4620      	mov	r0, r4
 801409c:	f002 f984 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 80140a0:	f105 010f 	add.w	r1, r5, #15
 80140a4:	4680      	mov	r8, r0
 80140a6:	4620      	mov	r0, r4
 80140a8:	f7fc fb80 	bl	80107ac <ucdr_deserialize_uint8_t>
 80140ac:	f105 0110 	add.w	r1, r5, #16
 80140b0:	4606      	mov	r6, r0
 80140b2:	4620      	mov	r0, r4
 80140b4:	f7fd fa2c 	bl	8011510 <ucdr_deserialize_int32_t>
 80140b8:	f105 0114 	add.w	r1, r5, #20
 80140bc:	4603      	mov	r3, r0
 80140be:	4620      	mov	r0, r4
 80140c0:	ea07 0708 	and.w	r7, r7, r8
 80140c4:	461c      	mov	r4, r3
 80140c6:	f7fc fea1 	bl	8010e0c <ucdr_deserialize_uint32_t>
 80140ca:	403e      	ands	r6, r7
 80140cc:	4034      	ands	r4, r6
 80140ce:	4020      	ands	r0, r4
 80140d0:	b2c0      	uxtb	r0, r0
 80140d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140d6:	bf00      	nop

080140d8 <rcl_convert_rmw_ret_to_rcl_ret>:
 80140d8:	280b      	cmp	r0, #11
 80140da:	dc0d      	bgt.n	80140f8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80140dc:	2800      	cmp	r0, #0
 80140de:	db09      	blt.n	80140f4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80140e0:	280b      	cmp	r0, #11
 80140e2:	d807      	bhi.n	80140f4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80140e4:	e8df f000 	tbb	[pc, r0]
 80140e8:	07060607 	.word	0x07060607
 80140ec:	06060606 	.word	0x06060606
 80140f0:	07070606 	.word	0x07070606
 80140f4:	2001      	movs	r0, #1
 80140f6:	4770      	bx	lr
 80140f8:	28cb      	cmp	r0, #203	; 0xcb
 80140fa:	bf18      	it	ne
 80140fc:	2001      	movne	r0, #1
 80140fe:	4770      	bx	lr

08014100 <rcl_get_zero_initialized_context>:
 8014100:	4a03      	ldr	r2, [pc, #12]	; (8014110 <rcl_get_zero_initialized_context+0x10>)
 8014102:	4603      	mov	r3, r0
 8014104:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014108:	e883 0003 	stmia.w	r3, {r0, r1}
 801410c:	4618      	mov	r0, r3
 801410e:	4770      	bx	lr
 8014110:	0801a234 	.word	0x0801a234

08014114 <rcl_context_is_valid>:
 8014114:	b118      	cbz	r0, 801411e <rcl_context_is_valid+0xa>
 8014116:	6840      	ldr	r0, [r0, #4]
 8014118:	3800      	subs	r0, #0
 801411a:	bf18      	it	ne
 801411c:	2001      	movne	r0, #1
 801411e:	4770      	bx	lr

08014120 <__cleanup_context>:
 8014120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014124:	4606      	mov	r6, r0
 8014126:	6800      	ldr	r0, [r0, #0]
 8014128:	2300      	movs	r3, #0
 801412a:	6073      	str	r3, [r6, #4]
 801412c:	2800      	cmp	r0, #0
 801412e:	d049      	beq.n	80141c4 <__cleanup_context+0xa4>
 8014130:	6947      	ldr	r7, [r0, #20]
 8014132:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014136:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801413a:	b137      	cbz	r7, 801414a <__cleanup_context+0x2a>
 801413c:	3014      	adds	r0, #20
 801413e:	f000 f9bb 	bl	80144b8 <rcl_init_options_fini>
 8014142:	4607      	mov	r7, r0
 8014144:	2800      	cmp	r0, #0
 8014146:	d144      	bne.n	80141d2 <__cleanup_context+0xb2>
 8014148:	6830      	ldr	r0, [r6, #0]
 801414a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801414c:	b143      	cbz	r3, 8014160 <__cleanup_context+0x40>
 801414e:	3028      	adds	r0, #40	; 0x28
 8014150:	f001 fd9a 	bl	8015c88 <rmw_context_fini>
 8014154:	b118      	cbz	r0, 801415e <__cleanup_context+0x3e>
 8014156:	2f00      	cmp	r7, #0
 8014158:	d03e      	beq.n	80141d8 <__cleanup_context+0xb8>
 801415a:	f7fb fdf1 	bl	800fd40 <rcutils_reset_error>
 801415e:	6830      	ldr	r0, [r6, #0]
 8014160:	6a03      	ldr	r3, [r0, #32]
 8014162:	b1db      	cbz	r3, 801419c <__cleanup_context+0x7c>
 8014164:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8014168:	2a01      	cmp	r2, #1
 801416a:	f17c 0100 	sbcs.w	r1, ip, #0
 801416e:	db11      	blt.n	8014194 <__cleanup_context+0x74>
 8014170:	2400      	movs	r4, #0
 8014172:	4625      	mov	r5, r4
 8014174:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014178:	4649      	mov	r1, r9
 801417a:	b1b8      	cbz	r0, 80141ac <__cleanup_context+0x8c>
 801417c:	47c0      	blx	r8
 801417e:	6833      	ldr	r3, [r6, #0]
 8014180:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8014184:	3401      	adds	r4, #1
 8014186:	f145 0500 	adc.w	r5, r5, #0
 801418a:	4294      	cmp	r4, r2
 801418c:	eb75 010c 	sbcs.w	r1, r5, ip
 8014190:	6a1b      	ldr	r3, [r3, #32]
 8014192:	dbef      	blt.n	8014174 <__cleanup_context+0x54>
 8014194:	4618      	mov	r0, r3
 8014196:	4649      	mov	r1, r9
 8014198:	47c0      	blx	r8
 801419a:	6830      	ldr	r0, [r6, #0]
 801419c:	4649      	mov	r1, r9
 801419e:	47c0      	blx	r8
 80141a0:	2300      	movs	r3, #0
 80141a2:	e9c6 3300 	strd	r3, r3, [r6]
 80141a6:	4638      	mov	r0, r7
 80141a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141ac:	3401      	adds	r4, #1
 80141ae:	f145 0500 	adc.w	r5, r5, #0
 80141b2:	4294      	cmp	r4, r2
 80141b4:	eb75 010c 	sbcs.w	r1, r5, ip
 80141b8:	dbdc      	blt.n	8014174 <__cleanup_context+0x54>
 80141ba:	4618      	mov	r0, r3
 80141bc:	4649      	mov	r1, r9
 80141be:	47c0      	blx	r8
 80141c0:	6830      	ldr	r0, [r6, #0]
 80141c2:	e7eb      	b.n	801419c <__cleanup_context+0x7c>
 80141c4:	4607      	mov	r7, r0
 80141c6:	2300      	movs	r3, #0
 80141c8:	e9c6 3300 	strd	r3, r3, [r6]
 80141cc:	4638      	mov	r0, r7
 80141ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141d2:	f7fb fdb5 	bl	800fd40 <rcutils_reset_error>
 80141d6:	e7b7      	b.n	8014148 <__cleanup_context+0x28>
 80141d8:	f7ff ff7e 	bl	80140d8 <rcl_convert_rmw_ret_to_rcl_ret>
 80141dc:	4607      	mov	r7, r0
 80141de:	e7bc      	b.n	801415a <__cleanup_context+0x3a>

080141e0 <rcl_init>:
 80141e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141e4:	1e05      	subs	r5, r0, #0
 80141e6:	b09e      	sub	sp, #120	; 0x78
 80141e8:	460e      	mov	r6, r1
 80141ea:	4690      	mov	r8, r2
 80141ec:	461f      	mov	r7, r3
 80141ee:	f340 809c 	ble.w	801432a <rcl_init+0x14a>
 80141f2:	2900      	cmp	r1, #0
 80141f4:	f000 809c 	beq.w	8014330 <rcl_init+0x150>
 80141f8:	f1a1 0e04 	sub.w	lr, r1, #4
 80141fc:	f04f 0c00 	mov.w	ip, #0
 8014200:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8014204:	f10c 0c01 	add.w	ip, ip, #1
 8014208:	2c00      	cmp	r4, #0
 801420a:	f000 8091 	beq.w	8014330 <rcl_init+0x150>
 801420e:	4565      	cmp	r5, ip
 8014210:	d1f6      	bne.n	8014200 <rcl_init+0x20>
 8014212:	f1b8 0f00 	cmp.w	r8, #0
 8014216:	f000 808b 	beq.w	8014330 <rcl_init+0x150>
 801421a:	f8d8 4000 	ldr.w	r4, [r8]
 801421e:	2c00      	cmp	r4, #0
 8014220:	f000 8086 	beq.w	8014330 <rcl_init+0x150>
 8014224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014226:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801422a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801422e:	6823      	ldr	r3, [r4, #0]
 8014230:	f8cc 3000 	str.w	r3, [ip]
 8014234:	a819      	add	r0, sp, #100	; 0x64
 8014236:	f7fb fd5f 	bl	800fcf8 <rcutils_allocator_is_valid>
 801423a:	2800      	cmp	r0, #0
 801423c:	d078      	beq.n	8014330 <rcl_init+0x150>
 801423e:	2f00      	cmp	r7, #0
 8014240:	d076      	beq.n	8014330 <rcl_init+0x150>
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d178      	bne.n	801433a <rcl_init+0x15a>
 8014248:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801424c:	2178      	movs	r1, #120	; 0x78
 801424e:	2001      	movs	r0, #1
 8014250:	4798      	blx	r3
 8014252:	4604      	mov	r4, r0
 8014254:	6038      	str	r0, [r7, #0]
 8014256:	2800      	cmp	r0, #0
 8014258:	f000 80b6 	beq.w	80143c8 <rcl_init+0x1e8>
 801425c:	a802      	add	r0, sp, #8
 801425e:	f001 f957 	bl	8015510 <rmw_get_zero_initialized_context>
 8014262:	a902      	add	r1, sp, #8
 8014264:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014268:	2250      	movs	r2, #80	; 0x50
 801426a:	ac19      	add	r4, sp, #100	; 0x64
 801426c:	f004 fafe 	bl	801886c <memcpy>
 8014270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014272:	f8d7 e000 	ldr.w	lr, [r7]
 8014276:	46f4      	mov	ip, lr
 8014278:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801427c:	6823      	ldr	r3, [r4, #0]
 801427e:	f8cc 3000 	str.w	r3, [ip]
 8014282:	f10e 0114 	add.w	r1, lr, #20
 8014286:	4640      	mov	r0, r8
 8014288:	f000 f940 	bl	801450c <rcl_init_options_copy>
 801428c:	4604      	mov	r4, r0
 801428e:	2800      	cmp	r0, #0
 8014290:	d144      	bne.n	801431c <rcl_init+0x13c>
 8014292:	f8d7 9000 	ldr.w	r9, [r7]
 8014296:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801429a:	f8c9 0020 	str.w	r0, [r9, #32]
 801429e:	f8c9 5018 	str.w	r5, [r9, #24]
 80142a2:	f8c9 801c 	str.w	r8, [r9, #28]
 80142a6:	2d00      	cmp	r5, #0
 80142a8:	d04e      	beq.n	8014348 <rcl_init+0x168>
 80142aa:	2e00      	cmp	r6, #0
 80142ac:	d04c      	beq.n	8014348 <rcl_init+0x168>
 80142ae:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 80142b2:	2104      	movs	r1, #4
 80142b4:	4628      	mov	r0, r5
 80142b6:	4798      	blx	r3
 80142b8:	f8c9 0020 	str.w	r0, [r9, #32]
 80142bc:	f8d7 9000 	ldr.w	r9, [r7]
 80142c0:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80142c4:	46ca      	mov	sl, r9
 80142c6:	b343      	cbz	r3, 801431a <rcl_init+0x13a>
 80142c8:	2d01      	cmp	r5, #1
 80142ca:	f178 0300 	sbcs.w	r3, r8, #0
 80142ce:	db3b      	blt.n	8014348 <rcl_init+0x168>
 80142d0:	2400      	movs	r4, #0
 80142d2:	3e04      	subs	r6, #4
 80142d4:	46a1      	mov	r9, r4
 80142d6:	e00b      	b.n	80142f0 <rcl_init+0x110>
 80142d8:	6831      	ldr	r1, [r6, #0]
 80142da:	f004 fac7 	bl	801886c <memcpy>
 80142de:	3401      	adds	r4, #1
 80142e0:	f149 0900 	adc.w	r9, r9, #0
 80142e4:	45c8      	cmp	r8, r9
 80142e6:	bf08      	it	eq
 80142e8:	42a5      	cmpeq	r5, r4
 80142ea:	d02b      	beq.n	8014344 <rcl_init+0x164>
 80142ec:	f8d7 a000 	ldr.w	sl, [r7]
 80142f0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80142f4:	f7eb ff76 	bl	80001e4 <strlen>
 80142f8:	1c42      	adds	r2, r0, #1
 80142fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80142fc:	991d      	ldr	r1, [sp, #116]	; 0x74
 80142fe:	f8da a020 	ldr.w	sl, [sl, #32]
 8014302:	9201      	str	r2, [sp, #4]
 8014304:	4610      	mov	r0, r2
 8014306:	4798      	blx	r3
 8014308:	683b      	ldr	r3, [r7, #0]
 801430a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801430e:	6a1b      	ldr	r3, [r3, #32]
 8014310:	9a01      	ldr	r2, [sp, #4]
 8014312:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014316:	2800      	cmp	r0, #0
 8014318:	d1de      	bne.n	80142d8 <rcl_init+0xf8>
 801431a:	240a      	movs	r4, #10
 801431c:	4638      	mov	r0, r7
 801431e:	f7ff feff 	bl	8014120 <__cleanup_context>
 8014322:	4620      	mov	r0, r4
 8014324:	b01e      	add	sp, #120	; 0x78
 8014326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801432a:	2900      	cmp	r1, #0
 801432c:	f43f af71 	beq.w	8014212 <rcl_init+0x32>
 8014330:	240b      	movs	r4, #11
 8014332:	4620      	mov	r0, r4
 8014334:	b01e      	add	sp, #120	; 0x78
 8014336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801433a:	2464      	movs	r4, #100	; 0x64
 801433c:	4620      	mov	r0, r4
 801433e:	b01e      	add	sp, #120	; 0x78
 8014340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014344:	f8d7 9000 	ldr.w	r9, [r7]
 8014348:	4926      	ldr	r1, [pc, #152]	; (80143e4 <rcl_init+0x204>)
 801434a:	680b      	ldr	r3, [r1, #0]
 801434c:	3301      	adds	r3, #1
 801434e:	d036      	beq.n	80143be <rcl_init+0x1de>
 8014350:	600b      	str	r3, [r1, #0]
 8014352:	461a      	mov	r2, r3
 8014354:	2400      	movs	r4, #0
 8014356:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801435a:	607b      	str	r3, [r7, #4]
 801435c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801435e:	3301      	adds	r3, #1
 8014360:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8014364:	d034      	beq.n	80143d0 <rcl_init+0x1f0>
 8014366:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801436a:	b93b      	cbnz	r3, 801437c <rcl_init+0x19c>
 801436c:	3030      	adds	r0, #48	; 0x30
 801436e:	f000 f939 	bl	80145e4 <rcl_get_localhost_only>
 8014372:	4604      	mov	r4, r0
 8014374:	2800      	cmp	r0, #0
 8014376:	d1d1      	bne.n	801431c <rcl_init+0x13c>
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	6958      	ldr	r0, [r3, #20]
 801437c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801437e:	aa18      	add	r2, sp, #96	; 0x60
 8014380:	a917      	add	r1, sp, #92	; 0x5c
 8014382:	f000 fd81 	bl	8014e88 <rcl_validate_enclave_name>
 8014386:	4604      	mov	r4, r0
 8014388:	2800      	cmp	r0, #0
 801438a:	d1c7      	bne.n	801431c <rcl_init+0x13c>
 801438c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801438e:	b9eb      	cbnz	r3, 80143cc <rcl_init+0x1ec>
 8014390:	6839      	ldr	r1, [r7, #0]
 8014392:	694b      	ldr	r3, [r1, #20]
 8014394:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014396:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801439a:	f000 fc3d 	bl	8014c18 <rcl_get_security_options_from_environment>
 801439e:	4604      	mov	r4, r0
 80143a0:	2800      	cmp	r0, #0
 80143a2:	d1bb      	bne.n	801431c <rcl_init+0x13c>
 80143a4:	6839      	ldr	r1, [r7, #0]
 80143a6:	6948      	ldr	r0, [r1, #20]
 80143a8:	3128      	adds	r1, #40	; 0x28
 80143aa:	3018      	adds	r0, #24
 80143ac:	f001 fb36 	bl	8015a1c <rmw_init>
 80143b0:	4604      	mov	r4, r0
 80143b2:	2800      	cmp	r0, #0
 80143b4:	d0bd      	beq.n	8014332 <rcl_init+0x152>
 80143b6:	f7ff fe8f 	bl	80140d8 <rcl_convert_rmw_ret_to_rcl_ret>
 80143ba:	4604      	mov	r4, r0
 80143bc:	e7ae      	b.n	801431c <rcl_init+0x13c>
 80143be:	2201      	movs	r2, #1
 80143c0:	461c      	mov	r4, r3
 80143c2:	600a      	str	r2, [r1, #0]
 80143c4:	4613      	mov	r3, r2
 80143c6:	e7c6      	b.n	8014356 <rcl_init+0x176>
 80143c8:	240a      	movs	r4, #10
 80143ca:	e7b2      	b.n	8014332 <rcl_init+0x152>
 80143cc:	2401      	movs	r4, #1
 80143ce:	e7a5      	b.n	801431c <rcl_init+0x13c>
 80143d0:	3024      	adds	r0, #36	; 0x24
 80143d2:	f003 fc5d 	bl	8017c90 <rcl_get_default_domain_id>
 80143d6:	4604      	mov	r4, r0
 80143d8:	2800      	cmp	r0, #0
 80143da:	d19f      	bne.n	801431c <rcl_init+0x13c>
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	6958      	ldr	r0, [r3, #20]
 80143e0:	e7c1      	b.n	8014366 <rcl_init+0x186>
 80143e2:	bf00      	nop
 80143e4:	20012c0c 	.word	0x20012c0c

080143e8 <rcl_get_zero_initialized_init_options>:
 80143e8:	2000      	movs	r0, #0
 80143ea:	4770      	bx	lr

080143ec <rcl_init_options_init>:
 80143ec:	b084      	sub	sp, #16
 80143ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143f0:	b097      	sub	sp, #92	; 0x5c
 80143f2:	ae1d      	add	r6, sp, #116	; 0x74
 80143f4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80143f8:	2800      	cmp	r0, #0
 80143fa:	d058      	beq.n	80144ae <rcl_init_options_init+0xc2>
 80143fc:	6803      	ldr	r3, [r0, #0]
 80143fe:	4605      	mov	r5, r0
 8014400:	b133      	cbz	r3, 8014410 <rcl_init_options_init+0x24>
 8014402:	2464      	movs	r4, #100	; 0x64
 8014404:	4620      	mov	r0, r4
 8014406:	b017      	add	sp, #92	; 0x5c
 8014408:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801440c:	b004      	add	sp, #16
 801440e:	4770      	bx	lr
 8014410:	4630      	mov	r0, r6
 8014412:	f7fb fc71 	bl	800fcf8 <rcutils_allocator_is_valid>
 8014416:	2800      	cmp	r0, #0
 8014418:	d049      	beq.n	80144ae <rcl_init_options_init+0xc2>
 801441a:	46b4      	mov	ip, r6
 801441c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014420:	ac11      	add	r4, sp, #68	; 0x44
 8014422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014424:	f8dc 3000 	ldr.w	r3, [ip]
 8014428:	6023      	str	r3, [r4, #0]
 801442a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801442c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801442e:	2050      	movs	r0, #80	; 0x50
 8014430:	4798      	blx	r3
 8014432:	4604      	mov	r4, r0
 8014434:	6028      	str	r0, [r5, #0]
 8014436:	2800      	cmp	r0, #0
 8014438:	d03b      	beq.n	80144b2 <rcl_init_options_init+0xc6>
 801443a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801443e:	4686      	mov	lr, r0
 8014440:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014444:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014448:	f8dc 3000 	ldr.w	r3, [ip]
 801444c:	f8ce 3000 	str.w	r3, [lr]
 8014450:	a802      	add	r0, sp, #8
 8014452:	f001 f86d 	bl	8015530 <rmw_get_zero_initialized_init_options>
 8014456:	f10d 0e08 	add.w	lr, sp, #8
 801445a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801445e:	f104 0c18 	add.w	ip, r4, #24
 8014462:	682f      	ldr	r7, [r5, #0]
 8014464:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014468:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801446c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014470:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014474:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014478:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801447c:	ac20      	add	r4, sp, #128	; 0x80
 801447e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014482:	e894 0003 	ldmia.w	r4, {r0, r1}
 8014486:	e88d 0003 	stmia.w	sp, {r0, r1}
 801448a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801448e:	f107 0018 	add.w	r0, r7, #24
 8014492:	f001 f9cb 	bl	801582c <rmw_init_options_init>
 8014496:	4604      	mov	r4, r0
 8014498:	2800      	cmp	r0, #0
 801449a:	d0b3      	beq.n	8014404 <rcl_init_options_init+0x18>
 801449c:	9921      	ldr	r1, [sp, #132]	; 0x84
 801449e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80144a0:	6828      	ldr	r0, [r5, #0]
 80144a2:	4798      	blx	r3
 80144a4:	4620      	mov	r0, r4
 80144a6:	f7ff fe17 	bl	80140d8 <rcl_convert_rmw_ret_to_rcl_ret>
 80144aa:	4604      	mov	r4, r0
 80144ac:	e7aa      	b.n	8014404 <rcl_init_options_init+0x18>
 80144ae:	240b      	movs	r4, #11
 80144b0:	e7a8      	b.n	8014404 <rcl_init_options_init+0x18>
 80144b2:	240a      	movs	r4, #10
 80144b4:	e7a6      	b.n	8014404 <rcl_init_options_init+0x18>
 80144b6:	bf00      	nop

080144b8 <rcl_init_options_fini>:
 80144b8:	b530      	push	{r4, r5, lr}
 80144ba:	b087      	sub	sp, #28
 80144bc:	b1f0      	cbz	r0, 80144fc <rcl_init_options_fini+0x44>
 80144be:	6803      	ldr	r3, [r0, #0]
 80144c0:	4604      	mov	r4, r0
 80144c2:	b1db      	cbz	r3, 80144fc <rcl_init_options_fini+0x44>
 80144c4:	469c      	mov	ip, r3
 80144c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80144ca:	f10d 0e04 	add.w	lr, sp, #4
 80144ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80144d2:	f8dc 3000 	ldr.w	r3, [ip]
 80144d6:	f8ce 3000 	str.w	r3, [lr]
 80144da:	a801      	add	r0, sp, #4
 80144dc:	f7fb fc0c 	bl	800fcf8 <rcutils_allocator_is_valid>
 80144e0:	b160      	cbz	r0, 80144fc <rcl_init_options_fini+0x44>
 80144e2:	6820      	ldr	r0, [r4, #0]
 80144e4:	3018      	adds	r0, #24
 80144e6:	f001 fa51 	bl	801598c <rmw_init_options_fini>
 80144ea:	4605      	mov	r5, r0
 80144ec:	b950      	cbnz	r0, 8014504 <rcl_init_options_fini+0x4c>
 80144ee:	6820      	ldr	r0, [r4, #0]
 80144f0:	9b02      	ldr	r3, [sp, #8]
 80144f2:	9905      	ldr	r1, [sp, #20]
 80144f4:	4798      	blx	r3
 80144f6:	4628      	mov	r0, r5
 80144f8:	b007      	add	sp, #28
 80144fa:	bd30      	pop	{r4, r5, pc}
 80144fc:	250b      	movs	r5, #11
 80144fe:	4628      	mov	r0, r5
 8014500:	b007      	add	sp, #28
 8014502:	bd30      	pop	{r4, r5, pc}
 8014504:	f7ff fde8 	bl	80140d8 <rcl_convert_rmw_ret_to_rcl_ret>
 8014508:	4605      	mov	r5, r0
 801450a:	e7f8      	b.n	80144fe <rcl_init_options_fini+0x46>

0801450c <rcl_init_options_copy>:
 801450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014510:	b094      	sub	sp, #80	; 0x50
 8014512:	2800      	cmp	r0, #0
 8014514:	d058      	beq.n	80145c8 <rcl_init_options_copy+0xbc>
 8014516:	4604      	mov	r4, r0
 8014518:	6800      	ldr	r0, [r0, #0]
 801451a:	2800      	cmp	r0, #0
 801451c:	d054      	beq.n	80145c8 <rcl_init_options_copy+0xbc>
 801451e:	460e      	mov	r6, r1
 8014520:	f7fb fbea 	bl	800fcf8 <rcutils_allocator_is_valid>
 8014524:	2800      	cmp	r0, #0
 8014526:	d04f      	beq.n	80145c8 <rcl_init_options_copy+0xbc>
 8014528:	2e00      	cmp	r6, #0
 801452a:	d04d      	beq.n	80145c8 <rcl_init_options_copy+0xbc>
 801452c:	6833      	ldr	r3, [r6, #0]
 801452e:	b123      	cbz	r3, 801453a <rcl_init_options_copy+0x2e>
 8014530:	2464      	movs	r4, #100	; 0x64
 8014532:	4620      	mov	r0, r4
 8014534:	b014      	add	sp, #80	; 0x50
 8014536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801453a:	6827      	ldr	r7, [r4, #0]
 801453c:	46bc      	mov	ip, r7
 801453e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014542:	ad0f      	add	r5, sp, #60	; 0x3c
 8014544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014546:	f8dc 3000 	ldr.w	r3, [ip]
 801454a:	f8d7 8000 	ldr.w	r8, [r7]
 801454e:	602b      	str	r3, [r5, #0]
 8014550:	4619      	mov	r1, r3
 8014552:	2050      	movs	r0, #80	; 0x50
 8014554:	47c0      	blx	r8
 8014556:	4605      	mov	r5, r0
 8014558:	6030      	str	r0, [r6, #0]
 801455a:	b3d0      	cbz	r0, 80145d2 <rcl_init_options_copy+0xc6>
 801455c:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8014560:	4686      	mov	lr, r0
 8014562:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014566:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801456a:	f8dc 3000 	ldr.w	r3, [ip]
 801456e:	f8ce 3000 	str.w	r3, [lr]
 8014572:	4668      	mov	r0, sp
 8014574:	f000 ffdc 	bl	8015530 <rmw_get_zero_initialized_init_options>
 8014578:	46ee      	mov	lr, sp
 801457a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801457e:	f105 0c18 	add.w	ip, r5, #24
 8014582:	6824      	ldr	r4, [r4, #0]
 8014584:	6835      	ldr	r5, [r6, #0]
 8014586:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801458a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801458e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014592:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014596:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801459a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801459e:	e88c 0003 	stmia.w	ip, {r0, r1}
 80145a2:	f104 0018 	add.w	r0, r4, #24
 80145a6:	f105 0118 	add.w	r1, r5, #24
 80145aa:	f001 f9a7 	bl	80158fc <rmw_init_options_copy>
 80145ae:	4604      	mov	r4, r0
 80145b0:	2800      	cmp	r0, #0
 80145b2:	d0be      	beq.n	8014532 <rcl_init_options_copy+0x26>
 80145b4:	f7fb fbae 	bl	800fd14 <rcutils_get_error_string>
 80145b8:	f7fb fbc2 	bl	800fd40 <rcutils_reset_error>
 80145bc:	4630      	mov	r0, r6
 80145be:	f7ff ff7b 	bl	80144b8 <rcl_init_options_fini>
 80145c2:	b140      	cbz	r0, 80145d6 <rcl_init_options_copy+0xca>
 80145c4:	4604      	mov	r4, r0
 80145c6:	e7b4      	b.n	8014532 <rcl_init_options_copy+0x26>
 80145c8:	240b      	movs	r4, #11
 80145ca:	4620      	mov	r0, r4
 80145cc:	b014      	add	sp, #80	; 0x50
 80145ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145d2:	240a      	movs	r4, #10
 80145d4:	e7ad      	b.n	8014532 <rcl_init_options_copy+0x26>
 80145d6:	4620      	mov	r0, r4
 80145d8:	b014      	add	sp, #80	; 0x50
 80145da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145de:	f7ff bd7b 	b.w	80140d8 <rcl_convert_rmw_ret_to_rcl_ret>
 80145e2:	bf00      	nop

080145e4 <rcl_get_localhost_only>:
 80145e4:	b510      	push	{r4, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	2300      	movs	r3, #0
 80145ea:	9301      	str	r3, [sp, #4]
 80145ec:	b1b8      	cbz	r0, 801461e <rcl_get_localhost_only+0x3a>
 80145ee:	4604      	mov	r4, r0
 80145f0:	a901      	add	r1, sp, #4
 80145f2:	480c      	ldr	r0, [pc, #48]	; (8014624 <rcl_get_localhost_only+0x40>)
 80145f4:	f000 fc90 	bl	8014f18 <rcutils_get_env>
 80145f8:	b110      	cbz	r0, 8014600 <rcl_get_localhost_only+0x1c>
 80145fa:	2001      	movs	r0, #1
 80145fc:	b002      	add	sp, #8
 80145fe:	bd10      	pop	{r4, pc}
 8014600:	9b01      	ldr	r3, [sp, #4]
 8014602:	b113      	cbz	r3, 801460a <rcl_get_localhost_only+0x26>
 8014604:	781a      	ldrb	r2, [r3, #0]
 8014606:	2a31      	cmp	r2, #49	; 0x31
 8014608:	d004      	beq.n	8014614 <rcl_get_localhost_only+0x30>
 801460a:	2302      	movs	r3, #2
 801460c:	2000      	movs	r0, #0
 801460e:	7023      	strb	r3, [r4, #0]
 8014610:	b002      	add	sp, #8
 8014612:	bd10      	pop	{r4, pc}
 8014614:	785b      	ldrb	r3, [r3, #1]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d1f7      	bne.n	801460a <rcl_get_localhost_only+0x26>
 801461a:	2301      	movs	r3, #1
 801461c:	e7f6      	b.n	801460c <rcl_get_localhost_only+0x28>
 801461e:	200b      	movs	r0, #11
 8014620:	b002      	add	sp, #8
 8014622:	bd10      	pop	{r4, pc}
 8014624:	0801a23c 	.word	0x0801a23c

08014628 <rcl_get_zero_initialized_node>:
 8014628:	4a03      	ldr	r2, [pc, #12]	; (8014638 <rcl_get_zero_initialized_node+0x10>)
 801462a:	4603      	mov	r3, r0
 801462c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014630:	e883 0003 	stmia.w	r3, {r0, r1}
 8014634:	4618      	mov	r0, r3
 8014636:	4770      	bx	lr
 8014638:	0801a264 	.word	0x0801a264

0801463c <rcl_node_init>:
 801463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014640:	b0a9      	sub	sp, #164	; 0xa4
 8014642:	4604      	mov	r4, r0
 8014644:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8014648:	a823      	add	r0, sp, #140	; 0x8c
 801464a:	460e      	mov	r6, r1
 801464c:	4615      	mov	r5, r2
 801464e:	461f      	mov	r7, r3
 8014650:	f003 fd46 	bl	80180e0 <rcl_guard_condition_get_default_options>
 8014654:	f1b8 0f00 	cmp.w	r8, #0
 8014658:	f000 80e6 	beq.w	8014828 <rcl_node_init+0x1ec>
 801465c:	4640      	mov	r0, r8
 801465e:	f7fb fb4b 	bl	800fcf8 <rcutils_allocator_is_valid>
 8014662:	2800      	cmp	r0, #0
 8014664:	f000 80e0 	beq.w	8014828 <rcl_node_init+0x1ec>
 8014668:	2e00      	cmp	r6, #0
 801466a:	f000 80dd 	beq.w	8014828 <rcl_node_init+0x1ec>
 801466e:	2d00      	cmp	r5, #0
 8014670:	f000 80da 	beq.w	8014828 <rcl_node_init+0x1ec>
 8014674:	2c00      	cmp	r4, #0
 8014676:	f000 80d7 	beq.w	8014828 <rcl_node_init+0x1ec>
 801467a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801467e:	f1b9 0f00 	cmp.w	r9, #0
 8014682:	f040 80fd 	bne.w	8014880 <rcl_node_init+0x244>
 8014686:	2f00      	cmp	r7, #0
 8014688:	f000 80ce 	beq.w	8014828 <rcl_node_init+0x1ec>
 801468c:	4638      	mov	r0, r7
 801468e:	f7ff fd41 	bl	8014114 <rcl_context_is_valid>
 8014692:	4682      	mov	sl, r0
 8014694:	2800      	cmp	r0, #0
 8014696:	f000 80cd 	beq.w	8014834 <rcl_node_init+0x1f8>
 801469a:	464a      	mov	r2, r9
 801469c:	a922      	add	r1, sp, #136	; 0x88
 801469e:	4630      	mov	r0, r6
 80146a0:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 80146a4:	f001 f83a 	bl	801571c <rmw_validate_node_name>
 80146a8:	4681      	mov	r9, r0
 80146aa:	2800      	cmp	r0, #0
 80146ac:	f040 80be 	bne.w	801482c <rcl_node_init+0x1f0>
 80146b0:	9822      	ldr	r0, [sp, #136]	; 0x88
 80146b2:	2800      	cmp	r0, #0
 80146b4:	f040 80f0 	bne.w	8014898 <rcl_node_init+0x25c>
 80146b8:	4628      	mov	r0, r5
 80146ba:	f7eb fd93 	bl	80001e4 <strlen>
 80146be:	2800      	cmp	r0, #0
 80146c0:	f040 80bb 	bne.w	801483a <rcl_node_init+0x1fe>
 80146c4:	4d7c      	ldr	r5, [pc, #496]	; (80148b8 <rcl_node_init+0x27c>)
 80146c6:	a922      	add	r1, sp, #136	; 0x88
 80146c8:	2200      	movs	r2, #0
 80146ca:	4628      	mov	r0, r5
 80146cc:	f001 f808 	bl	80156e0 <rmw_validate_namespace>
 80146d0:	4681      	mov	r9, r0
 80146d2:	2800      	cmp	r0, #0
 80146d4:	f040 80aa 	bne.w	801482c <rcl_node_init+0x1f0>
 80146d8:	4682      	mov	sl, r0
 80146da:	9822      	ldr	r0, [sp, #136]	; 0x88
 80146dc:	2800      	cmp	r0, #0
 80146de:	f040 80e0 	bne.w	80148a2 <rcl_node_init+0x266>
 80146e2:	f8d8 3000 	ldr.w	r3, [r8]
 80146e6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80146ea:	2078      	movs	r0, #120	; 0x78
 80146ec:	4798      	blx	r3
 80146ee:	4681      	mov	r9, r0
 80146f0:	6060      	str	r0, [r4, #4]
 80146f2:	2800      	cmp	r0, #0
 80146f4:	f000 80ca 	beq.w	801488c <rcl_node_init+0x250>
 80146f8:	2200      	movs	r2, #0
 80146fa:	2300      	movs	r3, #0
 80146fc:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 8014700:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 8014704:	a808      	add	r0, sp, #32
 8014706:	f000 f907 	bl	8014918 <rcl_node_get_default_options>
 801470a:	a908      	add	r1, sp, #32
 801470c:	4648      	mov	r0, r9
 801470e:	2268      	movs	r2, #104	; 0x68
 8014710:	f004 f8ac 	bl	801886c <memcpy>
 8014714:	6861      	ldr	r1, [r4, #4]
 8014716:	6027      	str	r7, [r4, #0]
 8014718:	4640      	mov	r0, r8
 801471a:	f000 f90b 	bl	8014934 <rcl_node_options_copy>
 801471e:	2800      	cmp	r0, #0
 8014720:	d158      	bne.n	80147d4 <rcl_node_init+0x198>
 8014722:	4628      	mov	r0, r5
 8014724:	f7eb fd5e 	bl	80001e4 <strlen>
 8014728:	4428      	add	r0, r5
 801472a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801472e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8014732:	2b2f      	cmp	r3, #47	; 0x2f
 8014734:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014738:	9300      	str	r3, [sp, #0]
 801473a:	bf0c      	ite	eq
 801473c:	4b5f      	ldreq	r3, [pc, #380]	; (80148bc <rcl_node_init+0x280>)
 801473e:	4b60      	ldrne	r3, [pc, #384]	; (80148c0 <rcl_node_init+0x284>)
 8014740:	9302      	str	r3, [sp, #8]
 8014742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014746:	9301      	str	r3, [sp, #4]
 8014748:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801474c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014750:	f000 fc0a 	bl	8014f68 <rcutils_format_string_limit>
 8014754:	6823      	ldr	r3, [r4, #0]
 8014756:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 801475a:	6818      	ldr	r0, [r3, #0]
 801475c:	4631      	mov	r1, r6
 801475e:	3028      	adds	r0, #40	; 0x28
 8014760:	462a      	mov	r2, r5
 8014762:	6866      	ldr	r6, [r4, #4]
 8014764:	f001 fbc2 	bl	8015eec <rmw_create_node>
 8014768:	6863      	ldr	r3, [r4, #4]
 801476a:	66b0      	str	r0, [r6, #104]	; 0x68
 801476c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801476e:	2800      	cmp	r0, #0
 8014770:	d032      	beq.n	80147d8 <rcl_node_init+0x19c>
 8014772:	f001 fc4d 	bl	8016010 <rmw_node_get_graph_guard_condition>
 8014776:	4681      	mov	r9, r0
 8014778:	b360      	cbz	r0, 80147d4 <rcl_node_init+0x198>
 801477a:	f8d8 3000 	ldr.w	r3, [r8]
 801477e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014782:	6866      	ldr	r6, [r4, #4]
 8014784:	2008      	movs	r0, #8
 8014786:	4798      	blx	r3
 8014788:	6863      	ldr	r3, [r4, #4]
 801478a:	66f0      	str	r0, [r6, #108]	; 0x6c
 801478c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8014790:	f1bb 0f00 	cmp.w	fp, #0
 8014794:	d020      	beq.n	80147d8 <rcl_node_init+0x19c>
 8014796:	a806      	add	r0, sp, #24
 8014798:	f003 fc12 	bl	8017fc0 <rcl_get_zero_initialized_guard_condition>
 801479c:	a806      	add	r0, sp, #24
 801479e:	c803      	ldmia	r0, {r0, r1}
 80147a0:	6863      	ldr	r3, [r4, #4]
 80147a2:	46c4      	mov	ip, r8
 80147a4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 80147a8:	e88b 0003 	stmia.w	fp, {r0, r1}
 80147ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147b0:	ae23      	add	r6, sp, #140	; 0x8c
 80147b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80147b4:	f8dc 3000 	ldr.w	r3, [ip]
 80147b8:	6033      	str	r3, [r6, #0]
 80147ba:	ab28      	add	r3, sp, #160	; 0xa0
 80147bc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80147c0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80147c4:	4649      	mov	r1, r9
 80147c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80147c8:	463a      	mov	r2, r7
 80147ca:	4670      	mov	r0, lr
 80147cc:	f003 fc02 	bl	8017fd4 <rcl_guard_condition_init_from_rmw>
 80147d0:	4681      	mov	r9, r0
 80147d2:	b328      	cbz	r0, 8014820 <rcl_node_init+0x1e4>
 80147d4:	6863      	ldr	r3, [r4, #4]
 80147d6:	b1f3      	cbz	r3, 8014816 <rcl_node_init+0x1da>
 80147d8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80147da:	b128      	cbz	r0, 80147e8 <rcl_node_init+0x1ac>
 80147dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80147e0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80147e4:	4798      	blx	r3
 80147e6:	6863      	ldr	r3, [r4, #4]
 80147e8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80147ea:	b110      	cbz	r0, 80147f2 <rcl_node_init+0x1b6>
 80147ec:	f001 fb96 	bl	8015f1c <rmw_destroy_node>
 80147f0:	6863      	ldr	r3, [r4, #4]
 80147f2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80147f4:	b148      	cbz	r0, 801480a <rcl_node_init+0x1ce>
 80147f6:	f003 fc4d 	bl	8018094 <rcl_guard_condition_fini>
 80147fa:	6863      	ldr	r3, [r4, #4]
 80147fc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014800:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8014802:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014806:	4798      	blx	r3
 8014808:	6863      	ldr	r3, [r4, #4]
 801480a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801480e:	4618      	mov	r0, r3
 8014810:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014814:	4798      	blx	r3
 8014816:	2300      	movs	r3, #0
 8014818:	e9c4 3300 	strd	r3, r3, [r4]
 801481c:	f04f 0901 	mov.w	r9, #1
 8014820:	f1ba 0f00 	cmp.w	sl, #0
 8014824:	d125      	bne.n	8014872 <rcl_node_init+0x236>
 8014826:	e001      	b.n	801482c <rcl_node_init+0x1f0>
 8014828:	f04f 090b 	mov.w	r9, #11
 801482c:	4648      	mov	r0, r9
 801482e:	b029      	add	sp, #164	; 0xa4
 8014830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014834:	f04f 0965 	mov.w	r9, #101	; 0x65
 8014838:	e7f8      	b.n	801482c <rcl_node_init+0x1f0>
 801483a:	782b      	ldrb	r3, [r5, #0]
 801483c:	2b2f      	cmp	r3, #47	; 0x2f
 801483e:	f43f af42 	beq.w	80146c6 <rcl_node_init+0x8a>
 8014842:	9503      	str	r5, [sp, #12]
 8014844:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014848:	9300      	str	r3, [sp, #0]
 801484a:	4b1e      	ldr	r3, [pc, #120]	; (80148c4 <rcl_node_init+0x288>)
 801484c:	9302      	str	r3, [sp, #8]
 801484e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014852:	9301      	str	r3, [sp, #4]
 8014854:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014858:	f000 fb86 	bl	8014f68 <rcutils_format_string_limit>
 801485c:	4605      	mov	r5, r0
 801485e:	b340      	cbz	r0, 80148b2 <rcl_node_init+0x276>
 8014860:	2200      	movs	r2, #0
 8014862:	a922      	add	r1, sp, #136	; 0x88
 8014864:	9222      	str	r2, [sp, #136]	; 0x88
 8014866:	f000 ff3b 	bl	80156e0 <rmw_validate_namespace>
 801486a:	4681      	mov	r9, r0
 801486c:	2800      	cmp	r0, #0
 801486e:	f43f af34 	beq.w	80146da <rcl_node_init+0x9e>
 8014872:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014876:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801487a:	4628      	mov	r0, r5
 801487c:	4798      	blx	r3
 801487e:	e7d5      	b.n	801482c <rcl_node_init+0x1f0>
 8014880:	f04f 0964 	mov.w	r9, #100	; 0x64
 8014884:	4648      	mov	r0, r9
 8014886:	b029      	add	sp, #164	; 0xa4
 8014888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801488c:	f04f 090a 	mov.w	r9, #10
 8014890:	f1ba 0f00 	cmp.w	sl, #0
 8014894:	d1ed      	bne.n	8014872 <rcl_node_init+0x236>
 8014896:	e7c9      	b.n	801482c <rcl_node_init+0x1f0>
 8014898:	f000 ff92 	bl	80157c0 <rmw_node_name_validation_result_string>
 801489c:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 80148a0:	e7c4      	b.n	801482c <rcl_node_init+0x1f0>
 80148a2:	f000 ff2f 	bl	8015704 <rmw_namespace_validation_result_string>
 80148a6:	f04f 09ca 	mov.w	r9, #202	; 0xca
 80148aa:	f1ba 0f00 	cmp.w	sl, #0
 80148ae:	d1e0      	bne.n	8014872 <rcl_node_init+0x236>
 80148b0:	e7bc      	b.n	801482c <rcl_node_init+0x1f0>
 80148b2:	f04f 090a 	mov.w	r9, #10
 80148b6:	e7b9      	b.n	801482c <rcl_node_init+0x1f0>
 80148b8:	0801a254 	.word	0x0801a254
 80148bc:	0801a0d8 	.word	0x0801a0d8
 80148c0:	0801a25c 	.word	0x0801a25c
 80148c4:	0801a258 	.word	0x0801a258

080148c8 <rcl_node_is_valid>:
 80148c8:	b130      	cbz	r0, 80148d8 <rcl_node_is_valid+0x10>
 80148ca:	6843      	ldr	r3, [r0, #4]
 80148cc:	b123      	cbz	r3, 80148d8 <rcl_node_is_valid+0x10>
 80148ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80148d0:	b113      	cbz	r3, 80148d8 <rcl_node_is_valid+0x10>
 80148d2:	6800      	ldr	r0, [r0, #0]
 80148d4:	f7ff bc1e 	b.w	8014114 <rcl_context_is_valid>
 80148d8:	2000      	movs	r0, #0
 80148da:	4770      	bx	lr

080148dc <rcl_node_get_name>:
 80148dc:	b120      	cbz	r0, 80148e8 <rcl_node_get_name+0xc>
 80148de:	6840      	ldr	r0, [r0, #4]
 80148e0:	b110      	cbz	r0, 80148e8 <rcl_node_get_name+0xc>
 80148e2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80148e4:	b100      	cbz	r0, 80148e8 <rcl_node_get_name+0xc>
 80148e6:	6880      	ldr	r0, [r0, #8]
 80148e8:	4770      	bx	lr
 80148ea:	bf00      	nop

080148ec <rcl_node_get_namespace>:
 80148ec:	b120      	cbz	r0, 80148f8 <rcl_node_get_namespace+0xc>
 80148ee:	6840      	ldr	r0, [r0, #4]
 80148f0:	b110      	cbz	r0, 80148f8 <rcl_node_get_namespace+0xc>
 80148f2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80148f4:	b100      	cbz	r0, 80148f8 <rcl_node_get_namespace+0xc>
 80148f6:	68c0      	ldr	r0, [r0, #12]
 80148f8:	4770      	bx	lr
 80148fa:	bf00      	nop

080148fc <rcl_node_get_options>:
 80148fc:	b128      	cbz	r0, 801490a <rcl_node_get_options+0xe>
 80148fe:	6840      	ldr	r0, [r0, #4]
 8014900:	b118      	cbz	r0, 801490a <rcl_node_get_options+0xe>
 8014902:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8014904:	2b00      	cmp	r3, #0
 8014906:	bf08      	it	eq
 8014908:	2000      	moveq	r0, #0
 801490a:	4770      	bx	lr

0801490c <rcl_node_get_rmw_handle>:
 801490c:	b110      	cbz	r0, 8014914 <rcl_node_get_rmw_handle+0x8>
 801490e:	6840      	ldr	r0, [r0, #4]
 8014910:	b100      	cbz	r0, 8014914 <rcl_node_get_rmw_handle+0x8>
 8014912:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8014914:	4770      	bx	lr
 8014916:	bf00      	nop

08014918 <rcl_node_get_default_options>:
 8014918:	b510      	push	{r4, lr}
 801491a:	2268      	movs	r2, #104	; 0x68
 801491c:	4604      	mov	r4, r0
 801491e:	2100      	movs	r1, #0
 8014920:	f003 ffb2 	bl	8018888 <memset>
 8014924:	4620      	mov	r0, r4
 8014926:	f7fb f9d9 	bl	800fcdc <rcutils_get_default_allocator>
 801492a:	2301      	movs	r3, #1
 801492c:	7523      	strb	r3, [r4, #20]
 801492e:	4620      	mov	r0, r4
 8014930:	bd10      	pop	{r4, pc}
 8014932:	bf00      	nop

08014934 <rcl_node_options_copy>:
 8014934:	b1d0      	cbz	r0, 801496c <rcl_node_options_copy+0x38>
 8014936:	b570      	push	{r4, r5, r6, lr}
 8014938:	460c      	mov	r4, r1
 801493a:	b1a9      	cbz	r1, 8014968 <rcl_node_options_copy+0x34>
 801493c:	4288      	cmp	r0, r1
 801493e:	4684      	mov	ip, r0
 8014940:	d012      	beq.n	8014968 <rcl_node_options_copy+0x34>
 8014942:	4605      	mov	r5, r0
 8014944:	8a86      	ldrh	r6, [r0, #20]
 8014946:	468e      	mov	lr, r1
 8014948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801494a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801494e:	682b      	ldr	r3, [r5, #0]
 8014950:	f8ce 3000 	str.w	r3, [lr]
 8014954:	f10c 0118 	add.w	r1, ip, #24
 8014958:	2250      	movs	r2, #80	; 0x50
 801495a:	82a6      	strh	r6, [r4, #20]
 801495c:	f104 0018 	add.w	r0, r4, #24
 8014960:	f003 ff84 	bl	801886c <memcpy>
 8014964:	2000      	movs	r0, #0
 8014966:	bd70      	pop	{r4, r5, r6, pc}
 8014968:	200b      	movs	r0, #11
 801496a:	bd70      	pop	{r4, r5, r6, pc}
 801496c:	200b      	movs	r0, #11
 801496e:	4770      	bx	lr

08014970 <rcl_node_resolve_name>:
 8014970:	b082      	sub	sp, #8
 8014972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014976:	b091      	sub	sp, #68	; 0x44
 8014978:	ac1a      	add	r4, sp, #104	; 0x68
 801497a:	e884 000c 	stmia.w	r4, {r2, r3}
 801497e:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8014982:	2800      	cmp	r0, #0
 8014984:	d03b      	beq.n	80149fe <rcl_node_resolve_name+0x8e>
 8014986:	460c      	mov	r4, r1
 8014988:	4605      	mov	r5, r0
 801498a:	f7ff ffb7 	bl	80148fc <rcl_node_get_options>
 801498e:	2800      	cmp	r0, #0
 8014990:	d037      	beq.n	8014a02 <rcl_node_resolve_name+0x92>
 8014992:	4628      	mov	r0, r5
 8014994:	f7ff ffa2 	bl	80148dc <rcl_node_get_name>
 8014998:	4606      	mov	r6, r0
 801499a:	4628      	mov	r0, r5
 801499c:	f7ff ffa6 	bl	80148ec <rcl_node_get_namespace>
 80149a0:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 80149a4:	4681      	mov	r9, r0
 80149a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80149aa:	ad0b      	add	r5, sp, #44	; 0x2c
 80149ac:	46ac      	mov	ip, r5
 80149ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149b2:	f8de 3000 	ldr.w	r3, [lr]
 80149b6:	f8cc 3000 	str.w	r3, [ip]
 80149ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149bc:	b1fb      	cbz	r3, 80149fe <rcl_node_resolve_name+0x8e>
 80149be:	468a      	mov	sl, r1
 80149c0:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 80149c4:	f000 fc28 	bl	8015218 <rcutils_get_zero_initialized_string_map>
 80149c8:	ab10      	add	r3, sp, #64	; 0x40
 80149ca:	9008      	str	r0, [sp, #32]
 80149cc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80149d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80149d4:	2100      	movs	r1, #0
 80149d6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80149da:	a808      	add	r0, sp, #32
 80149dc:	f000 fc94 	bl	8015308 <rcutils_string_map_init>
 80149e0:	4607      	mov	r7, r0
 80149e2:	b180      	cbz	r0, 8014a06 <rcl_node_resolve_name+0x96>
 80149e4:	f7fb f996 	bl	800fd14 <rcutils_get_error_string>
 80149e8:	f7fb f9aa 	bl	800fd40 <rcutils_reset_error>
 80149ec:	2f0a      	cmp	r7, #10
 80149ee:	bf18      	it	ne
 80149f0:	2701      	movne	r7, #1
 80149f2:	4638      	mov	r0, r7
 80149f4:	b011      	add	sp, #68	; 0x44
 80149f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149fa:	b002      	add	sp, #8
 80149fc:	4770      	bx	lr
 80149fe:	270b      	movs	r7, #11
 8014a00:	e7f7      	b.n	80149f2 <rcl_node_resolve_name+0x82>
 8014a02:	2701      	movs	r7, #1
 8014a04:	e7f5      	b.n	80149f2 <rcl_node_resolve_name+0x82>
 8014a06:	9009      	str	r0, [sp, #36]	; 0x24
 8014a08:	9007      	str	r0, [sp, #28]
 8014a0a:	a808      	add	r0, sp, #32
 8014a0c:	f003 fad2 	bl	8017fb4 <rcl_get_default_topic_name_substitutions>
 8014a10:	4607      	mov	r7, r0
 8014a12:	b1a8      	cbz	r0, 8014a40 <rcl_node_resolve_name+0xd0>
 8014a14:	280a      	cmp	r0, #10
 8014a16:	9c07      	ldr	r4, [sp, #28]
 8014a18:	d000      	beq.n	8014a1c <rcl_node_resolve_name+0xac>
 8014a1a:	2701      	movs	r7, #1
 8014a1c:	a808      	add	r0, sp, #32
 8014a1e:	f000 fcb3 	bl	8015388 <rcutils_string_map_fini>
 8014a22:	2800      	cmp	r0, #0
 8014a24:	d13d      	bne.n	8014aa2 <rcl_node_resolve_name+0x132>
 8014a26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a28:	4659      	mov	r1, fp
 8014a2a:	47d0      	blx	sl
 8014a2c:	4659      	mov	r1, fp
 8014a2e:	4620      	mov	r0, r4
 8014a30:	47d0      	blx	sl
 8014a32:	f1b8 0f00 	cmp.w	r8, #0
 8014a36:	d0dc      	beq.n	80149f2 <rcl_node_resolve_name+0x82>
 8014a38:	2f67      	cmp	r7, #103	; 0x67
 8014a3a:	bf08      	it	eq
 8014a3c:	2768      	moveq	r7, #104	; 0x68
 8014a3e:	e7d8      	b.n	80149f2 <rcl_node_resolve_name+0x82>
 8014a40:	ab09      	add	r3, sp, #36	; 0x24
 8014a42:	9305      	str	r3, [sp, #20]
 8014a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a46:	46ec      	mov	ip, sp
 8014a48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a4c:	682b      	ldr	r3, [r5, #0]
 8014a4e:	f8cc 3000 	str.w	r3, [ip]
 8014a52:	464a      	mov	r2, r9
 8014a54:	4631      	mov	r1, r6
 8014a56:	4620      	mov	r0, r4
 8014a58:	ab08      	add	r3, sp, #32
 8014a5a:	f003 f94d 	bl	8017cf8 <rcl_expand_topic_name>
 8014a5e:	4607      	mov	r7, r0
 8014a60:	b9b8      	cbnz	r0, 8014a92 <rcl_node_resolve_name+0x122>
 8014a62:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014a64:	9009      	str	r0, [sp, #36]	; 0x24
 8014a66:	4602      	mov	r2, r0
 8014a68:	a90a      	add	r1, sp, #40	; 0x28
 8014a6a:	4620      	mov	r0, r4
 8014a6c:	f000 fd74 	bl	8015558 <rmw_validate_full_topic_name>
 8014a70:	b988      	cbnz	r0, 8014a96 <rcl_node_resolve_name+0x126>
 8014a72:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8014a74:	b9d5      	cbnz	r5, 8014aac <rcl_node_resolve_name+0x13c>
 8014a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a78:	a808      	add	r0, sp, #32
 8014a7a:	601c      	str	r4, [r3, #0]
 8014a7c:	f000 fc84 	bl	8015388 <rcutils_string_map_fini>
 8014a80:	4607      	mov	r7, r0
 8014a82:	b1a8      	cbz	r0, 8014ab0 <rcl_node_resolve_name+0x140>
 8014a84:	f7fb f946 	bl	800fd14 <rcutils_get_error_string>
 8014a88:	462c      	mov	r4, r5
 8014a8a:	f7fb f959 	bl	800fd40 <rcutils_reset_error>
 8014a8e:	2701      	movs	r7, #1
 8014a90:	e7c9      	b.n	8014a26 <rcl_node_resolve_name+0xb6>
 8014a92:	9c07      	ldr	r4, [sp, #28]
 8014a94:	e7c2      	b.n	8014a1c <rcl_node_resolve_name+0xac>
 8014a96:	f7fb f93d 	bl	800fd14 <rcutils_get_error_string>
 8014a9a:	2701      	movs	r7, #1
 8014a9c:	f7fb f950 	bl	800fd40 <rcutils_reset_error>
 8014aa0:	e7bc      	b.n	8014a1c <rcl_node_resolve_name+0xac>
 8014aa2:	f7fb f937 	bl	800fd14 <rcutils_get_error_string>
 8014aa6:	f7fb f94b 	bl	800fd40 <rcutils_reset_error>
 8014aaa:	e7bc      	b.n	8014a26 <rcl_node_resolve_name+0xb6>
 8014aac:	2767      	movs	r7, #103	; 0x67
 8014aae:	e7b5      	b.n	8014a1c <rcl_node_resolve_name+0xac>
 8014ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ab2:	4659      	mov	r1, fp
 8014ab4:	47d0      	blx	sl
 8014ab6:	4659      	mov	r1, fp
 8014ab8:	4638      	mov	r0, r7
 8014aba:	47d0      	blx	sl
 8014abc:	e799      	b.n	80149f2 <rcl_node_resolve_name+0x82>
 8014abe:	bf00      	nop

08014ac0 <exact_match_lookup>:
 8014ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ac2:	f102 0708 	add.w	r7, r2, #8
 8014ac6:	460b      	mov	r3, r1
 8014ac8:	4614      	mov	r4, r2
 8014aca:	4606      	mov	r6, r0
 8014acc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014ad0:	b085      	sub	sp, #20
 8014ad2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	4919      	ldr	r1, [pc, #100]	; (8014b40 <exact_match_lookup+0x80>)
 8014ada:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014ade:	f000 fa35 	bl	8014f4c <rcutils_join_path>
 8014ae2:	7833      	ldrb	r3, [r6, #0]
 8014ae4:	2b2f      	cmp	r3, #47	; 0x2f
 8014ae6:	4605      	mov	r5, r0
 8014ae8:	d023      	beq.n	8014b32 <exact_match_lookup+0x72>
 8014aea:	f104 030c 	add.w	r3, r4, #12
 8014aee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014af2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014af6:	1c70      	adds	r0, r6, #1
 8014af8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014afc:	f000 fa2c 	bl	8014f58 <rcutils_to_native_path>
 8014b00:	4606      	mov	r6, r0
 8014b02:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014b06:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014b0a:	4631      	mov	r1, r6
 8014b0c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014b10:	4628      	mov	r0, r5
 8014b12:	f000 fa1b 	bl	8014f4c <rcutils_join_path>
 8014b16:	6862      	ldr	r2, [r4, #4]
 8014b18:	6921      	ldr	r1, [r4, #16]
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	4630      	mov	r0, r6
 8014b1e:	461e      	mov	r6, r3
 8014b20:	4790      	blx	r2
 8014b22:	4628      	mov	r0, r5
 8014b24:	6863      	ldr	r3, [r4, #4]
 8014b26:	6921      	ldr	r1, [r4, #16]
 8014b28:	4798      	blx	r3
 8014b2a:	4635      	mov	r5, r6
 8014b2c:	4628      	mov	r0, r5
 8014b2e:	b005      	add	sp, #20
 8014b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b32:	7873      	ldrb	r3, [r6, #1]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d1d8      	bne.n	8014aea <exact_match_lookup+0x2a>
 8014b38:	4628      	mov	r0, r5
 8014b3a:	b005      	add	sp, #20
 8014b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b3e:	bf00      	nop
 8014b40:	0801a2a8 	.word	0x0801a2a8

08014b44 <rcl_get_secure_root>:
 8014b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b48:	b085      	sub	sp, #20
 8014b4a:	b168      	cbz	r0, 8014b68 <rcl_get_secure_root+0x24>
 8014b4c:	4607      	mov	r7, r0
 8014b4e:	4608      	mov	r0, r1
 8014b50:	460c      	mov	r4, r1
 8014b52:	f7fb f8d1 	bl	800fcf8 <rcutils_allocator_is_valid>
 8014b56:	b138      	cbz	r0, 8014b68 <rcl_get_secure_root+0x24>
 8014b58:	2300      	movs	r3, #0
 8014b5a:	482d      	ldr	r0, [pc, #180]	; (8014c10 <rcl_get_secure_root+0xcc>)
 8014b5c:	9303      	str	r3, [sp, #12]
 8014b5e:	a903      	add	r1, sp, #12
 8014b60:	f000 f9da 	bl	8014f18 <rcutils_get_env>
 8014b64:	4605      	mov	r5, r0
 8014b66:	b120      	cbz	r0, 8014b72 <rcl_get_secure_root+0x2e>
 8014b68:	2500      	movs	r5, #0
 8014b6a:	4628      	mov	r0, r5
 8014b6c:	b005      	add	sp, #20
 8014b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b72:	9b03      	ldr	r3, [sp, #12]
 8014b74:	781a      	ldrb	r2, [r3, #0]
 8014b76:	2a00      	cmp	r2, #0
 8014b78:	d0f6      	beq.n	8014b68 <rcl_get_secure_root+0x24>
 8014b7a:	f104 090c 	add.w	r9, r4, #12
 8014b7e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014b82:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014b86:	4618      	mov	r0, r3
 8014b88:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014b8c:	f000 fb06 	bl	801519c <rcutils_strdup>
 8014b90:	4680      	mov	r8, r0
 8014b92:	2800      	cmp	r0, #0
 8014b94:	d0e8      	beq.n	8014b68 <rcl_get_secure_root+0x24>
 8014b96:	481f      	ldr	r0, [pc, #124]	; (8014c14 <rcl_get_secure_root+0xd0>)
 8014b98:	9503      	str	r5, [sp, #12]
 8014b9a:	a903      	add	r1, sp, #12
 8014b9c:	f000 f9bc 	bl	8014f18 <rcutils_get_env>
 8014ba0:	b160      	cbz	r0, 8014bbc <rcl_get_secure_root+0x78>
 8014ba2:	2600      	movs	r6, #0
 8014ba4:	6863      	ldr	r3, [r4, #4]
 8014ba6:	6921      	ldr	r1, [r4, #16]
 8014ba8:	4630      	mov	r0, r6
 8014baa:	4798      	blx	r3
 8014bac:	4640      	mov	r0, r8
 8014bae:	6863      	ldr	r3, [r4, #4]
 8014bb0:	6921      	ldr	r1, [r4, #16]
 8014bb2:	4798      	blx	r3
 8014bb4:	4628      	mov	r0, r5
 8014bb6:	b005      	add	sp, #20
 8014bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bbc:	9b03      	ldr	r3, [sp, #12]
 8014bbe:	781e      	ldrb	r6, [r3, #0]
 8014bc0:	b1f6      	cbz	r6, 8014c00 <rcl_get_secure_root+0xbc>
 8014bc2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014bc6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014bca:	4618      	mov	r0, r3
 8014bcc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014bd0:	f000 fae4 	bl	801519c <rcutils_strdup>
 8014bd4:	4606      	mov	r6, r0
 8014bd6:	2800      	cmp	r0, #0
 8014bd8:	d0e3      	beq.n	8014ba2 <rcl_get_secure_root+0x5e>
 8014bda:	4622      	mov	r2, r4
 8014bdc:	4641      	mov	r1, r8
 8014bde:	f7ff ff6f 	bl	8014ac0 <exact_match_lookup>
 8014be2:	4605      	mov	r5, r0
 8014be4:	2d00      	cmp	r5, #0
 8014be6:	d0dd      	beq.n	8014ba4 <rcl_get_secure_root+0x60>
 8014be8:	4628      	mov	r0, r5
 8014bea:	f000 f9ad 	bl	8014f48 <rcutils_is_directory>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	2800      	cmp	r0, #0
 8014bf2:	d1d7      	bne.n	8014ba4 <rcl_get_secure_root+0x60>
 8014bf4:	4628      	mov	r0, r5
 8014bf6:	6921      	ldr	r1, [r4, #16]
 8014bf8:	461d      	mov	r5, r3
 8014bfa:	6863      	ldr	r3, [r4, #4]
 8014bfc:	4798      	blx	r3
 8014bfe:	e7d1      	b.n	8014ba4 <rcl_get_secure_root+0x60>
 8014c00:	4622      	mov	r2, r4
 8014c02:	4638      	mov	r0, r7
 8014c04:	4641      	mov	r1, r8
 8014c06:	f7ff ff5b 	bl	8014ac0 <exact_match_lookup>
 8014c0a:	4605      	mov	r5, r0
 8014c0c:	e7ea      	b.n	8014be4 <rcl_get_secure_root+0xa0>
 8014c0e:	bf00      	nop
 8014c10:	0801a2b4 	.word	0x0801a2b4
 8014c14:	0801a2cc 	.word	0x0801a2cc

08014c18 <rcl_get_security_options_from_environment>:
 8014c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c1c:	b082      	sub	sp, #8
 8014c1e:	2300      	movs	r3, #0
 8014c20:	4606      	mov	r6, r0
 8014c22:	460f      	mov	r7, r1
 8014c24:	4820      	ldr	r0, [pc, #128]	; (8014ca8 <rcl_get_security_options_from_environment+0x90>)
 8014c26:	9301      	str	r3, [sp, #4]
 8014c28:	a901      	add	r1, sp, #4
 8014c2a:	4690      	mov	r8, r2
 8014c2c:	f000 f974 	bl	8014f18 <rcutils_get_env>
 8014c30:	b120      	cbz	r0, 8014c3c <rcl_get_security_options_from_environment+0x24>
 8014c32:	2501      	movs	r5, #1
 8014c34:	4628      	mov	r0, r5
 8014c36:	b002      	add	sp, #8
 8014c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c3c:	491b      	ldr	r1, [pc, #108]	; (8014cac <rcl_get_security_options_from_environment+0x94>)
 8014c3e:	4604      	mov	r4, r0
 8014c40:	9801      	ldr	r0, [sp, #4]
 8014c42:	f7eb fac5 	bl	80001d0 <strcmp>
 8014c46:	4605      	mov	r5, r0
 8014c48:	b9e8      	cbnz	r0, 8014c86 <rcl_get_security_options_from_environment+0x6e>
 8014c4a:	9001      	str	r0, [sp, #4]
 8014c4c:	f1b8 0f00 	cmp.w	r8, #0
 8014c50:	d020      	beq.n	8014c94 <rcl_get_security_options_from_environment+0x7c>
 8014c52:	4817      	ldr	r0, [pc, #92]	; (8014cb0 <rcl_get_security_options_from_environment+0x98>)
 8014c54:	a901      	add	r1, sp, #4
 8014c56:	f000 f95f 	bl	8014f18 <rcutils_get_env>
 8014c5a:	2800      	cmp	r0, #0
 8014c5c:	d1e9      	bne.n	8014c32 <rcl_get_security_options_from_environment+0x1a>
 8014c5e:	4915      	ldr	r1, [pc, #84]	; (8014cb4 <rcl_get_security_options_from_environment+0x9c>)
 8014c60:	9801      	ldr	r0, [sp, #4]
 8014c62:	f7eb fab5 	bl	80001d0 <strcmp>
 8014c66:	fab0 f080 	clz	r0, r0
 8014c6a:	0940      	lsrs	r0, r0, #5
 8014c6c:	f888 0000 	strb.w	r0, [r8]
 8014c70:	4639      	mov	r1, r7
 8014c72:	4630      	mov	r0, r6
 8014c74:	f7ff ff66 	bl	8014b44 <rcl_get_secure_root>
 8014c78:	b170      	cbz	r0, 8014c98 <rcl_get_security_options_from_environment+0x80>
 8014c7a:	f8c8 0004 	str.w	r0, [r8, #4]
 8014c7e:	4628      	mov	r0, r5
 8014c80:	b002      	add	sp, #8
 8014c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c86:	4625      	mov	r5, r4
 8014c88:	4628      	mov	r0, r5
 8014c8a:	f888 4000 	strb.w	r4, [r8]
 8014c8e:	b002      	add	sp, #8
 8014c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c94:	250b      	movs	r5, #11
 8014c96:	e7cd      	b.n	8014c34 <rcl_get_security_options_from_environment+0x1c>
 8014c98:	f898 5000 	ldrb.w	r5, [r8]
 8014c9c:	f1a5 0501 	sub.w	r5, r5, #1
 8014ca0:	fab5 f585 	clz	r5, r5
 8014ca4:	096d      	lsrs	r5, r5, #5
 8014ca6:	e7c5      	b.n	8014c34 <rcl_get_security_options_from_environment+0x1c>
 8014ca8:	0801a26c 	.word	0x0801a26c
 8014cac:	0801a280 	.word	0x0801a280
 8014cb0:	0801a288 	.word	0x0801a288
 8014cb4:	0801a2a0 	.word	0x0801a2a0

08014cb8 <rcl_get_system_time>:
 8014cb8:	4608      	mov	r0, r1
 8014cba:	f000 bbd9 	b.w	8015470 <rcutils_system_time_now>
 8014cbe:	bf00      	nop

08014cc0 <rcl_get_steady_time>:
 8014cc0:	4608      	mov	r0, r1
 8014cc2:	f000 bbfd 	b.w	80154c0 <rcutils_steady_time_now>
 8014cc6:	bf00      	nop

08014cc8 <rcl_get_ros_time>:
 8014cc8:	7a03      	ldrb	r3, [r0, #8]
 8014cca:	b510      	push	{r4, lr}
 8014ccc:	460c      	mov	r4, r1
 8014cce:	b133      	cbz	r3, 8014cde <rcl_get_ros_time+0x16>
 8014cd0:	2105      	movs	r1, #5
 8014cd2:	f000 f8eb 	bl	8014eac <__atomic_load_8>
 8014cd6:	e9c4 0100 	strd	r0, r1, [r4]
 8014cda:	2000      	movs	r0, #0
 8014cdc:	bd10      	pop	{r4, pc}
 8014cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ce2:	4608      	mov	r0, r1
 8014ce4:	f000 bbc4 	b.w	8015470 <rcutils_system_time_now>

08014ce8 <rcl_clock_init>:
 8014ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cea:	4605      	mov	r5, r0
 8014cec:	4610      	mov	r0, r2
 8014cee:	4614      	mov	r4, r2
 8014cf0:	460e      	mov	r6, r1
 8014cf2:	f7fb f801 	bl	800fcf8 <rcutils_allocator_is_valid>
 8014cf6:	b128      	cbz	r0, 8014d04 <rcl_clock_init+0x1c>
 8014cf8:	2d03      	cmp	r5, #3
 8014cfa:	d803      	bhi.n	8014d04 <rcl_clock_init+0x1c>
 8014cfc:	e8df f005 	tbb	[pc, r5]
 8014d00:	06532e1d 	.word	0x06532e1d
 8014d04:	f04f 0c0b 	mov.w	ip, #11
 8014d08:	4660      	mov	r0, ip
 8014d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d0c:	2e00      	cmp	r6, #0
 8014d0e:	d0f9      	beq.n	8014d04 <rcl_clock_init+0x1c>
 8014d10:	2c00      	cmp	r4, #0
 8014d12:	d0f7      	beq.n	8014d04 <rcl_clock_init+0x1c>
 8014d14:	2300      	movs	r3, #0
 8014d16:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014d1a:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8014dd0 <rcl_clock_init+0xe8>
 8014d1e:	6133      	str	r3, [r6, #16]
 8014d20:	f106 0514 	add.w	r5, r6, #20
 8014d24:	469c      	mov	ip, r3
 8014d26:	2703      	movs	r7, #3
 8014d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d2c:	6823      	ldr	r3, [r4, #0]
 8014d2e:	602b      	str	r3, [r5, #0]
 8014d30:	7037      	strb	r7, [r6, #0]
 8014d32:	f8c6 e00c 	str.w	lr, [r6, #12]
 8014d36:	4660      	mov	r0, ip
 8014d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d3a:	2e00      	cmp	r6, #0
 8014d3c:	d0e2      	beq.n	8014d04 <rcl_clock_init+0x1c>
 8014d3e:	2300      	movs	r3, #0
 8014d40:	7033      	strb	r3, [r6, #0]
 8014d42:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014d46:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014d4a:	469c      	mov	ip, r3
 8014d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d4e:	f106 0514 	add.w	r5, r6, #20
 8014d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d54:	6823      	ldr	r3, [r4, #0]
 8014d56:	602b      	str	r3, [r5, #0]
 8014d58:	4660      	mov	r0, ip
 8014d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d5c:	2e00      	cmp	r6, #0
 8014d5e:	d0d1      	beq.n	8014d04 <rcl_clock_init+0x1c>
 8014d60:	2c00      	cmp	r4, #0
 8014d62:	d0cf      	beq.n	8014d04 <rcl_clock_init+0x1c>
 8014d64:	2700      	movs	r7, #0
 8014d66:	7037      	strb	r7, [r6, #0]
 8014d68:	46a4      	mov	ip, r4
 8014d6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d6e:	f106 0514 	add.w	r5, r6, #20
 8014d72:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014d76:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d7c:	f8dc 3000 	ldr.w	r3, [ip]
 8014d80:	602b      	str	r3, [r5, #0]
 8014d82:	6921      	ldr	r1, [r4, #16]
 8014d84:	6823      	ldr	r3, [r4, #0]
 8014d86:	2010      	movs	r0, #16
 8014d88:	4798      	blx	r3
 8014d8a:	6130      	str	r0, [r6, #16]
 8014d8c:	b1d0      	cbz	r0, 8014dc4 <rcl_clock_init+0xdc>
 8014d8e:	2200      	movs	r2, #0
 8014d90:	2300      	movs	r3, #0
 8014d92:	e9c0 2300 	strd	r2, r3, [r0]
 8014d96:	2301      	movs	r3, #1
 8014d98:	7207      	strb	r7, [r0, #8]
 8014d9a:	4a0c      	ldr	r2, [pc, #48]	; (8014dcc <rcl_clock_init+0xe4>)
 8014d9c:	7033      	strb	r3, [r6, #0]
 8014d9e:	46bc      	mov	ip, r7
 8014da0:	60f2      	str	r2, [r6, #12]
 8014da2:	4660      	mov	r0, ip
 8014da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014da6:	2e00      	cmp	r6, #0
 8014da8:	d0ac      	beq.n	8014d04 <rcl_clock_init+0x1c>
 8014daa:	2c00      	cmp	r4, #0
 8014dac:	d0aa      	beq.n	8014d04 <rcl_clock_init+0x1c>
 8014dae:	2300      	movs	r3, #0
 8014db0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014db4:	f8df e01c 	ldr.w	lr, [pc, #28]	; 8014dd4 <rcl_clock_init+0xec>
 8014db8:	6133      	str	r3, [r6, #16]
 8014dba:	f106 0514 	add.w	r5, r6, #20
 8014dbe:	469c      	mov	ip, r3
 8014dc0:	2702      	movs	r7, #2
 8014dc2:	e7b1      	b.n	8014d28 <rcl_clock_init+0x40>
 8014dc4:	f04f 0c0a 	mov.w	ip, #10
 8014dc8:	e79e      	b.n	8014d08 <rcl_clock_init+0x20>
 8014dca:	bf00      	nop
 8014dcc:	08014cc9 	.word	0x08014cc9
 8014dd0:	08014cc1 	.word	0x08014cc1
 8014dd4:	08014cb9 	.word	0x08014cb9

08014dd8 <rcl_validate_enclave_name_with_size>:
 8014dd8:	b378      	cbz	r0, 8014e3a <rcl_validate_enclave_name_with_size+0x62>
 8014dda:	b570      	push	{r4, r5, r6, lr}
 8014ddc:	4615      	mov	r5, r2
 8014dde:	b0c2      	sub	sp, #264	; 0x108
 8014de0:	b302      	cbz	r2, 8014e24 <rcl_validate_enclave_name_with_size+0x4c>
 8014de2:	461e      	mov	r6, r3
 8014de4:	466a      	mov	r2, sp
 8014de6:	ab01      	add	r3, sp, #4
 8014de8:	460c      	mov	r4, r1
 8014dea:	f000 fc2b 	bl	8015644 <rmw_validate_namespace_with_size>
 8014dee:	4684      	mov	ip, r0
 8014df0:	b9e8      	cbnz	r0, 8014e2e <rcl_validate_enclave_name_with_size+0x56>
 8014df2:	9b00      	ldr	r3, [sp, #0]
 8014df4:	b923      	cbnz	r3, 8014e00 <rcl_validate_enclave_name_with_size+0x28>
 8014df6:	2300      	movs	r3, #0
 8014df8:	602b      	str	r3, [r5, #0]
 8014dfa:	4660      	mov	r0, ip
 8014dfc:	b042      	add	sp, #264	; 0x108
 8014dfe:	bd70      	pop	{r4, r5, r6, pc}
 8014e00:	2b07      	cmp	r3, #7
 8014e02:	d007      	beq.n	8014e14 <rcl_validate_enclave_name_with_size+0x3c>
 8014e04:	1e5a      	subs	r2, r3, #1
 8014e06:	2a05      	cmp	r2, #5
 8014e08:	d833      	bhi.n	8014e72 <rcl_validate_enclave_name_with_size+0x9a>
 8014e0a:	e8df f002 	tbb	[pc, r2]
 8014e0e:	2c2f      	.short	0x2c2f
 8014e10:	1a232629 	.word	0x1a232629
 8014e14:	2cff      	cmp	r4, #255	; 0xff
 8014e16:	d9ee      	bls.n	8014df6 <rcl_validate_enclave_name_with_size+0x1e>
 8014e18:	602b      	str	r3, [r5, #0]
 8014e1a:	2e00      	cmp	r6, #0
 8014e1c:	d0ed      	beq.n	8014dfa <rcl_validate_enclave_name_with_size+0x22>
 8014e1e:	23fe      	movs	r3, #254	; 0xfe
 8014e20:	6033      	str	r3, [r6, #0]
 8014e22:	e7ea      	b.n	8014dfa <rcl_validate_enclave_name_with_size+0x22>
 8014e24:	f04f 0c0b 	mov.w	ip, #11
 8014e28:	4660      	mov	r0, ip
 8014e2a:	b042      	add	sp, #264	; 0x108
 8014e2c:	bd70      	pop	{r4, r5, r6, pc}
 8014e2e:	f7ff f953 	bl	80140d8 <rcl_convert_rmw_ret_to_rcl_ret>
 8014e32:	4684      	mov	ip, r0
 8014e34:	4660      	mov	r0, ip
 8014e36:	b042      	add	sp, #264	; 0x108
 8014e38:	bd70      	pop	{r4, r5, r6, pc}
 8014e3a:	f04f 0c0b 	mov.w	ip, #11
 8014e3e:	4660      	mov	r0, ip
 8014e40:	4770      	bx	lr
 8014e42:	2306      	movs	r3, #6
 8014e44:	602b      	str	r3, [r5, #0]
 8014e46:	2e00      	cmp	r6, #0
 8014e48:	d0d7      	beq.n	8014dfa <rcl_validate_enclave_name_with_size+0x22>
 8014e4a:	9b01      	ldr	r3, [sp, #4]
 8014e4c:	6033      	str	r3, [r6, #0]
 8014e4e:	4660      	mov	r0, ip
 8014e50:	b042      	add	sp, #264	; 0x108
 8014e52:	bd70      	pop	{r4, r5, r6, pc}
 8014e54:	2305      	movs	r3, #5
 8014e56:	602b      	str	r3, [r5, #0]
 8014e58:	e7f5      	b.n	8014e46 <rcl_validate_enclave_name_with_size+0x6e>
 8014e5a:	2304      	movs	r3, #4
 8014e5c:	602b      	str	r3, [r5, #0]
 8014e5e:	e7f2      	b.n	8014e46 <rcl_validate_enclave_name_with_size+0x6e>
 8014e60:	2303      	movs	r3, #3
 8014e62:	602b      	str	r3, [r5, #0]
 8014e64:	e7ef      	b.n	8014e46 <rcl_validate_enclave_name_with_size+0x6e>
 8014e66:	2302      	movs	r3, #2
 8014e68:	602b      	str	r3, [r5, #0]
 8014e6a:	e7ec      	b.n	8014e46 <rcl_validate_enclave_name_with_size+0x6e>
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	602b      	str	r3, [r5, #0]
 8014e70:	e7e9      	b.n	8014e46 <rcl_validate_enclave_name_with_size+0x6e>
 8014e72:	4a04      	ldr	r2, [pc, #16]	; (8014e84 <rcl_validate_enclave_name_with_size+0xac>)
 8014e74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014e78:	a802      	add	r0, sp, #8
 8014e7a:	f000 f963 	bl	8015144 <rcutils_snprintf>
 8014e7e:	f04f 0c01 	mov.w	ip, #1
 8014e82:	e7ba      	b.n	8014dfa <rcl_validate_enclave_name_with_size+0x22>
 8014e84:	0801a2ec 	.word	0x0801a2ec

08014e88 <rcl_validate_enclave_name>:
 8014e88:	b168      	cbz	r0, 8014ea6 <rcl_validate_enclave_name+0x1e>
 8014e8a:	b570      	push	{r4, r5, r6, lr}
 8014e8c:	460d      	mov	r5, r1
 8014e8e:	4616      	mov	r6, r2
 8014e90:	4604      	mov	r4, r0
 8014e92:	f7eb f9a7 	bl	80001e4 <strlen>
 8014e96:	4633      	mov	r3, r6
 8014e98:	4601      	mov	r1, r0
 8014e9a:	462a      	mov	r2, r5
 8014e9c:	4620      	mov	r0, r4
 8014e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ea2:	f7ff bf99 	b.w	8014dd8 <rcl_validate_enclave_name_with_size>
 8014ea6:	200b      	movs	r0, #11
 8014ea8:	4770      	bx	lr
 8014eaa:	bf00      	nop

08014eac <__atomic_load_8>:
 8014eac:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014eb0:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8014eb4:	4a15      	ldr	r2, [pc, #84]	; (8014f0c <__atomic_load_8+0x60>)
 8014eb6:	4b16      	ldr	r3, [pc, #88]	; (8014f10 <__atomic_load_8+0x64>)
 8014eb8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014ebc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014ec0:	fb02 f101 	mul.w	r1, r2, r1
 8014ec4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014ec8:	fba3 2301 	umull	r2, r3, r3, r1
 8014ecc:	091b      	lsrs	r3, r3, #4
 8014ece:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014ed2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8014ed6:	b4d0      	push	{r4, r6, r7}
 8014ed8:	4c0e      	ldr	r4, [pc, #56]	; (8014f14 <__atomic_load_8+0x68>)
 8014eda:	1ac9      	subs	r1, r1, r3
 8014edc:	1862      	adds	r2, r4, r1
 8014ede:	f04f 0c01 	mov.w	ip, #1
 8014ee2:	e8d2 3f4f 	ldrexb	r3, [r2]
 8014ee6:	e8c2 cf46 	strexb	r6, ip, [r2]
 8014eea:	2e00      	cmp	r6, #0
 8014eec:	d1f9      	bne.n	8014ee2 <__atomic_load_8+0x36>
 8014eee:	f3bf 8f5b 	dmb	ish
 8014ef2:	b2db      	uxtb	r3, r3
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d1f4      	bne.n	8014ee2 <__atomic_load_8+0x36>
 8014ef8:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014efc:	f3bf 8f5b 	dmb	ish
 8014f00:	5463      	strb	r3, [r4, r1]
 8014f02:	4630      	mov	r0, r6
 8014f04:	4639      	mov	r1, r7
 8014f06:	bcd0      	pop	{r4, r6, r7}
 8014f08:	4770      	bx	lr
 8014f0a:	bf00      	nop
 8014f0c:	27d4eb2d 	.word	0x27d4eb2d
 8014f10:	b21642c9 	.word	0xb21642c9
 8014f14:	20012c10 	.word	0x20012c10

08014f18 <rcutils_get_env>:
 8014f18:	b168      	cbz	r0, 8014f36 <rcutils_get_env+0x1e>
 8014f1a:	b510      	push	{r4, lr}
 8014f1c:	460c      	mov	r4, r1
 8014f1e:	b129      	cbz	r1, 8014f2c <rcutils_get_env+0x14>
 8014f20:	f003 fc24 	bl	801876c <getenv>
 8014f24:	b120      	cbz	r0, 8014f30 <rcutils_get_env+0x18>
 8014f26:	6020      	str	r0, [r4, #0]
 8014f28:	2000      	movs	r0, #0
 8014f2a:	bd10      	pop	{r4, pc}
 8014f2c:	4803      	ldr	r0, [pc, #12]	; (8014f3c <rcutils_get_env+0x24>)
 8014f2e:	bd10      	pop	{r4, pc}
 8014f30:	4b03      	ldr	r3, [pc, #12]	; (8014f40 <rcutils_get_env+0x28>)
 8014f32:	6023      	str	r3, [r4, #0]
 8014f34:	bd10      	pop	{r4, pc}
 8014f36:	4803      	ldr	r0, [pc, #12]	; (8014f44 <rcutils_get_env+0x2c>)
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop
 8014f3c:	0801a368 	.word	0x0801a368
 8014f40:	0801a48c 	.word	0x0801a48c
 8014f44:	0801a34c 	.word	0x0801a34c

08014f48 <rcutils_is_directory>:
 8014f48:	2000      	movs	r0, #0
 8014f4a:	4770      	bx	lr

08014f4c <rcutils_join_path>:
 8014f4c:	b082      	sub	sp, #8
 8014f4e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014f52:	2000      	movs	r0, #0
 8014f54:	b002      	add	sp, #8
 8014f56:	4770      	bx	lr

08014f58 <rcutils_to_native_path>:
 8014f58:	b084      	sub	sp, #16
 8014f5a:	a801      	add	r0, sp, #4
 8014f5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014f60:	b004      	add	sp, #16
 8014f62:	2000      	movs	r0, #0
 8014f64:	4770      	bx	lr
 8014f66:	bf00      	nop

08014f68 <rcutils_format_string_limit>:
 8014f68:	b40f      	push	{r0, r1, r2, r3}
 8014f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f6c:	b083      	sub	sp, #12
 8014f6e:	ac08      	add	r4, sp, #32
 8014f70:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014f72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014f76:	b34e      	cbz	r6, 8014fcc <rcutils_format_string_limit+0x64>
 8014f78:	a808      	add	r0, sp, #32
 8014f7a:	f7fa febd 	bl	800fcf8 <rcutils_allocator_is_valid>
 8014f7e:	b328      	cbz	r0, 8014fcc <rcutils_format_string_limit+0x64>
 8014f80:	2100      	movs	r1, #0
 8014f82:	ab0f      	add	r3, sp, #60	; 0x3c
 8014f84:	4632      	mov	r2, r6
 8014f86:	4608      	mov	r0, r1
 8014f88:	e9cd 3300 	strd	r3, r3, [sp]
 8014f8c:	f000 f8f4 	bl	8015178 <rcutils_vsnprintf>
 8014f90:	1c43      	adds	r3, r0, #1
 8014f92:	4605      	mov	r5, r0
 8014f94:	d01a      	beq.n	8014fcc <rcutils_format_string_limit+0x64>
 8014f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014f9a:	1c47      	adds	r7, r0, #1
 8014f9c:	429f      	cmp	r7, r3
 8014f9e:	bf84      	itt	hi
 8014fa0:	461f      	movhi	r7, r3
 8014fa2:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8014fa6:	4638      	mov	r0, r7
 8014fa8:	9b08      	ldr	r3, [sp, #32]
 8014faa:	4798      	blx	r3
 8014fac:	4604      	mov	r4, r0
 8014fae:	b168      	cbz	r0, 8014fcc <rcutils_format_string_limit+0x64>
 8014fb0:	9b01      	ldr	r3, [sp, #4]
 8014fb2:	4632      	mov	r2, r6
 8014fb4:	4639      	mov	r1, r7
 8014fb6:	f000 f8df 	bl	8015178 <rcutils_vsnprintf>
 8014fba:	2800      	cmp	r0, #0
 8014fbc:	db02      	blt.n	8014fc4 <rcutils_format_string_limit+0x5c>
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	5563      	strb	r3, [r4, r5]
 8014fc2:	e004      	b.n	8014fce <rcutils_format_string_limit+0x66>
 8014fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014fc8:	4620      	mov	r0, r4
 8014fca:	4798      	blx	r3
 8014fcc:	2400      	movs	r4, #0
 8014fce:	4620      	mov	r0, r4
 8014fd0:	b003      	add	sp, #12
 8014fd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014fd6:	b004      	add	sp, #16
 8014fd8:	4770      	bx	lr
 8014fda:	bf00      	nop

08014fdc <rcutils_repl_str>:
 8014fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fe0:	ed2d 8b02 	vpush	{d8}
 8014fe4:	b087      	sub	sp, #28
 8014fe6:	4680      	mov	r8, r0
 8014fe8:	4608      	mov	r0, r1
 8014fea:	f8cd 8004 	str.w	r8, [sp, #4]
 8014fee:	ee08 2a10 	vmov	s16, r2
 8014ff2:	468a      	mov	sl, r1
 8014ff4:	4699      	mov	r9, r3
 8014ff6:	f7eb f8f5 	bl	80001e4 <strlen>
 8014ffa:	2600      	movs	r6, #0
 8014ffc:	4647      	mov	r7, r8
 8014ffe:	9002      	str	r0, [sp, #8]
 8015000:	46b3      	mov	fp, r6
 8015002:	2510      	movs	r5, #16
 8015004:	46b0      	mov	r8, r6
 8015006:	e01d      	b.n	8015044 <rcutils_repl_str+0x68>
 8015008:	f10b 0b01 	add.w	fp, fp, #1
 801500c:	455e      	cmp	r6, fp
 801500e:	d211      	bcs.n	8015034 <rcutils_repl_str+0x58>
 8015010:	442e      	add	r6, r5
 8015012:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015016:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801501a:	00b1      	lsls	r1, r6, #2
 801501c:	4798      	blx	r3
 801501e:	2800      	cmp	r0, #0
 8015020:	f000 8088 	beq.w	8015134 <rcutils_repl_str+0x158>
 8015024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015028:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801502c:	4680      	mov	r8, r0
 801502e:	bf28      	it	cs
 8015030:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8015034:	9a01      	ldr	r2, [sp, #4]
 8015036:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801503a:	1aa2      	subs	r2, r4, r2
 801503c:	f843 2c04 	str.w	r2, [r3, #-4]
 8015040:	9b02      	ldr	r3, [sp, #8]
 8015042:	18e7      	adds	r7, r4, r3
 8015044:	4651      	mov	r1, sl
 8015046:	4638      	mov	r0, r7
 8015048:	f003 fec2 	bl	8018dd0 <strstr>
 801504c:	4604      	mov	r4, r0
 801504e:	4640      	mov	r0, r8
 8015050:	2c00      	cmp	r4, #0
 8015052:	d1d9      	bne.n	8015008 <rcutils_repl_str+0x2c>
 8015054:	46b8      	mov	r8, r7
 8015056:	4607      	mov	r7, r0
 8015058:	4640      	mov	r0, r8
 801505a:	f7eb f8c3 	bl	80001e4 <strlen>
 801505e:	9b01      	ldr	r3, [sp, #4]
 8015060:	eba8 0303 	sub.w	r3, r8, r3
 8015064:	181c      	adds	r4, r3, r0
 8015066:	9404      	str	r4, [sp, #16]
 8015068:	f1bb 0f00 	cmp.w	fp, #0
 801506c:	d04a      	beq.n	8015104 <rcutils_repl_str+0x128>
 801506e:	ee18 0a10 	vmov	r0, s16
 8015072:	f7eb f8b7 	bl	80001e4 <strlen>
 8015076:	9b02      	ldr	r3, [sp, #8]
 8015078:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801507c:	1ac3      	subs	r3, r0, r3
 801507e:	fb0b 4303 	mla	r3, fp, r3, r4
 8015082:	461a      	mov	r2, r3
 8015084:	9305      	str	r3, [sp, #20]
 8015086:	4606      	mov	r6, r0
 8015088:	f8d9 3000 	ldr.w	r3, [r9]
 801508c:	1c50      	adds	r0, r2, #1
 801508e:	4798      	blx	r3
 8015090:	9003      	str	r0, [sp, #12]
 8015092:	2800      	cmp	r0, #0
 8015094:	d04f      	beq.n	8015136 <rcutils_repl_str+0x15a>
 8015096:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801509a:	683a      	ldr	r2, [r7, #0]
 801509c:	4641      	mov	r1, r8
 801509e:	f003 fbe5 	bl	801886c <memcpy>
 80150a2:	683d      	ldr	r5, [r7, #0]
 80150a4:	9b03      	ldr	r3, [sp, #12]
 80150a6:	9701      	str	r7, [sp, #4]
 80150a8:	46ba      	mov	sl, r7
 80150aa:	441d      	add	r5, r3
 80150ac:	9f02      	ldr	r7, [sp, #8]
 80150ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80150b2:	2401      	movs	r4, #1
 80150b4:	46d1      	mov	r9, sl
 80150b6:	ee18 aa10 	vmov	sl, s16
 80150ba:	e00a      	b.n	80150d2 <rcutils_repl_str+0xf6>
 80150bc:	f8d9 5000 	ldr.w	r5, [r9]
 80150c0:	1aaa      	subs	r2, r5, r2
 80150c2:	1885      	adds	r5, r0, r2
 80150c4:	f003 fbd2 	bl	801886c <memcpy>
 80150c8:	45a3      	cmp	fp, r4
 80150ca:	f104 0201 	add.w	r2, r4, #1
 80150ce:	d935      	bls.n	801513c <rcutils_repl_str+0x160>
 80150d0:	4614      	mov	r4, r2
 80150d2:	4632      	mov	r2, r6
 80150d4:	4651      	mov	r1, sl
 80150d6:	4628      	mov	r0, r5
 80150d8:	f003 fbc8 	bl	801886c <memcpy>
 80150dc:	f859 2b04 	ldr.w	r2, [r9], #4
 80150e0:	45a3      	cmp	fp, r4
 80150e2:	443a      	add	r2, r7
 80150e4:	eb05 0006 	add.w	r0, r5, r6
 80150e8:	eb08 0102 	add.w	r1, r8, r2
 80150ec:	d1e6      	bne.n	80150bc <rcutils_repl_str+0xe0>
 80150ee:	9b04      	ldr	r3, [sp, #16]
 80150f0:	1a9a      	subs	r2, r3, r2
 80150f2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80150f6:	f003 fbb9 	bl	801886c <memcpy>
 80150fa:	9a03      	ldr	r2, [sp, #12]
 80150fc:	9905      	ldr	r1, [sp, #20]
 80150fe:	2300      	movs	r3, #0
 8015100:	5453      	strb	r3, [r2, r1]
 8015102:	e00b      	b.n	801511c <rcutils_repl_str+0x140>
 8015104:	4620      	mov	r0, r4
 8015106:	f8d9 3000 	ldr.w	r3, [r9]
 801510a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801510e:	3001      	adds	r0, #1
 8015110:	4798      	blx	r3
 8015112:	9003      	str	r0, [sp, #12]
 8015114:	b110      	cbz	r0, 801511c <rcutils_repl_str+0x140>
 8015116:	9901      	ldr	r1, [sp, #4]
 8015118:	f003 fe3e 	bl	8018d98 <strcpy>
 801511c:	4638      	mov	r0, r7
 801511e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015122:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015126:	4798      	blx	r3
 8015128:	9803      	ldr	r0, [sp, #12]
 801512a:	b007      	add	sp, #28
 801512c:	ecbd 8b02 	vpop	{d8}
 8015130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015134:	4647      	mov	r7, r8
 8015136:	2300      	movs	r3, #0
 8015138:	9303      	str	r3, [sp, #12]
 801513a:	e7ef      	b.n	801511c <rcutils_repl_str+0x140>
 801513c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8015140:	e7db      	b.n	80150fa <rcutils_repl_str+0x11e>
 8015142:	bf00      	nop

08015144 <rcutils_snprintf>:
 8015144:	b40c      	push	{r2, r3}
 8015146:	b530      	push	{r4, r5, lr}
 8015148:	b083      	sub	sp, #12
 801514a:	ab06      	add	r3, sp, #24
 801514c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015150:	9301      	str	r3, [sp, #4]
 8015152:	b152      	cbz	r2, 801516a <rcutils_snprintf+0x26>
 8015154:	b138      	cbz	r0, 8015166 <rcutils_snprintf+0x22>
 8015156:	b141      	cbz	r1, 801516a <rcutils_snprintf+0x26>
 8015158:	f003 fef8 	bl	8018f4c <vsniprintf>
 801515c:	b003      	add	sp, #12
 801515e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015162:	b002      	add	sp, #8
 8015164:	4770      	bx	lr
 8015166:	2900      	cmp	r1, #0
 8015168:	d0f6      	beq.n	8015158 <rcutils_snprintf+0x14>
 801516a:	f003 fa03 	bl	8018574 <__errno>
 801516e:	2316      	movs	r3, #22
 8015170:	6003      	str	r3, [r0, #0]
 8015172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015176:	e7f1      	b.n	801515c <rcutils_snprintf+0x18>

08015178 <rcutils_vsnprintf>:
 8015178:	b570      	push	{r4, r5, r6, lr}
 801517a:	b13a      	cbz	r2, 801518c <rcutils_vsnprintf+0x14>
 801517c:	b120      	cbz	r0, 8015188 <rcutils_vsnprintf+0x10>
 801517e:	b129      	cbz	r1, 801518c <rcutils_vsnprintf+0x14>
 8015180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015184:	f003 bee2 	b.w	8018f4c <vsniprintf>
 8015188:	2900      	cmp	r1, #0
 801518a:	d0f9      	beq.n	8015180 <rcutils_vsnprintf+0x8>
 801518c:	f003 f9f2 	bl	8018574 <__errno>
 8015190:	2316      	movs	r3, #22
 8015192:	6003      	str	r3, [r0, #0]
 8015194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015198:	bd70      	pop	{r4, r5, r6, pc}
 801519a:	bf00      	nop

0801519c <rcutils_strdup>:
 801519c:	b084      	sub	sp, #16
 801519e:	b570      	push	{r4, r5, r6, lr}
 80151a0:	b082      	sub	sp, #8
 80151a2:	ac07      	add	r4, sp, #28
 80151a4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80151a8:	4605      	mov	r5, r0
 80151aa:	b1b0      	cbz	r0, 80151da <rcutils_strdup+0x3e>
 80151ac:	f7eb f81a 	bl	80001e4 <strlen>
 80151b0:	1c42      	adds	r2, r0, #1
 80151b2:	9b07      	ldr	r3, [sp, #28]
 80151b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80151b6:	9201      	str	r2, [sp, #4]
 80151b8:	4606      	mov	r6, r0
 80151ba:	4610      	mov	r0, r2
 80151bc:	4798      	blx	r3
 80151be:	4604      	mov	r4, r0
 80151c0:	b128      	cbz	r0, 80151ce <rcutils_strdup+0x32>
 80151c2:	9a01      	ldr	r2, [sp, #4]
 80151c4:	4629      	mov	r1, r5
 80151c6:	f003 fb51 	bl	801886c <memcpy>
 80151ca:	2300      	movs	r3, #0
 80151cc:	55a3      	strb	r3, [r4, r6]
 80151ce:	4620      	mov	r0, r4
 80151d0:	b002      	add	sp, #8
 80151d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151d6:	b004      	add	sp, #16
 80151d8:	4770      	bx	lr
 80151da:	4604      	mov	r4, r0
 80151dc:	e7f7      	b.n	80151ce <rcutils_strdup+0x32>
 80151de:	bf00      	nop

080151e0 <rcutils_strndup>:
 80151e0:	b082      	sub	sp, #8
 80151e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151e4:	ac06      	add	r4, sp, #24
 80151e6:	e884 000c 	stmia.w	r4, {r2, r3}
 80151ea:	4605      	mov	r5, r0
 80151ec:	b188      	cbz	r0, 8015212 <rcutils_strndup+0x32>
 80151ee:	1c4f      	adds	r7, r1, #1
 80151f0:	460e      	mov	r6, r1
 80151f2:	4638      	mov	r0, r7
 80151f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80151f6:	4790      	blx	r2
 80151f8:	4604      	mov	r4, r0
 80151fa:	b128      	cbz	r0, 8015208 <rcutils_strndup+0x28>
 80151fc:	463a      	mov	r2, r7
 80151fe:	4629      	mov	r1, r5
 8015200:	f003 fb34 	bl	801886c <memcpy>
 8015204:	2300      	movs	r3, #0
 8015206:	55a3      	strb	r3, [r4, r6]
 8015208:	4620      	mov	r0, r4
 801520a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801520e:	b002      	add	sp, #8
 8015210:	4770      	bx	lr
 8015212:	4604      	mov	r4, r0
 8015214:	e7f8      	b.n	8015208 <rcutils_strndup+0x28>
 8015216:	bf00      	nop

08015218 <rcutils_get_zero_initialized_string_map>:
 8015218:	4b01      	ldr	r3, [pc, #4]	; (8015220 <rcutils_get_zero_initialized_string_map+0x8>)
 801521a:	2000      	movs	r0, #0
 801521c:	6018      	str	r0, [r3, #0]
 801521e:	4770      	bx	lr
 8015220:	20012c28 	.word	0x20012c28

08015224 <rcutils_string_map_reserve>:
 8015224:	2800      	cmp	r0, #0
 8015226:	d05f      	beq.n	80152e8 <rcutils_string_map_reserve+0xc4>
 8015228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801522c:	460c      	mov	r4, r1
 801522e:	6801      	ldr	r1, [r0, #0]
 8015230:	b082      	sub	sp, #8
 8015232:	4605      	mov	r5, r0
 8015234:	b129      	cbz	r1, 8015242 <rcutils_string_map_reserve+0x1e>
 8015236:	68cb      	ldr	r3, [r1, #12]
 8015238:	42a3      	cmp	r3, r4
 801523a:	d906      	bls.n	801524a <rcutils_string_map_reserve+0x26>
 801523c:	461c      	mov	r4, r3
 801523e:	2900      	cmp	r1, #0
 8015240:	d1f9      	bne.n	8015236 <rcutils_string_map_reserve+0x12>
 8015242:	201f      	movs	r0, #31
 8015244:	b002      	add	sp, #8
 8015246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801524a:	688b      	ldr	r3, [r1, #8]
 801524c:	42a3      	cmp	r3, r4
 801524e:	d047      	beq.n	80152e0 <rcutils_string_map_reserve+0xbc>
 8015250:	6a0e      	ldr	r6, [r1, #32]
 8015252:	2c00      	cmp	r4, #0
 8015254:	d034      	beq.n	80152c0 <rcutils_string_map_reserve+0x9c>
 8015256:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801525a:	d243      	bcs.n	80152e4 <rcutils_string_map_reserve+0xc0>
 801525c:	00a7      	lsls	r7, r4, #2
 801525e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8015262:	6808      	ldr	r0, [r1, #0]
 8015264:	4632      	mov	r2, r6
 8015266:	4639      	mov	r1, r7
 8015268:	47c0      	blx	r8
 801526a:	2800      	cmp	r0, #0
 801526c:	d03a      	beq.n	80152e4 <rcutils_string_map_reserve+0xc0>
 801526e:	682b      	ldr	r3, [r5, #0]
 8015270:	4632      	mov	r2, r6
 8015272:	6018      	str	r0, [r3, #0]
 8015274:	4639      	mov	r1, r7
 8015276:	6858      	ldr	r0, [r3, #4]
 8015278:	47c0      	blx	r8
 801527a:	2800      	cmp	r0, #0
 801527c:	d032      	beq.n	80152e4 <rcutils_string_map_reserve+0xc0>
 801527e:	682d      	ldr	r5, [r5, #0]
 8015280:	68ab      	ldr	r3, [r5, #8]
 8015282:	6068      	str	r0, [r5, #4]
 8015284:	42a3      	cmp	r3, r4
 8015286:	d226      	bcs.n	80152d6 <rcutils_string_map_reserve+0xb2>
 8015288:	682a      	ldr	r2, [r5, #0]
 801528a:	eb00 0c07 	add.w	ip, r0, r7
 801528e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8015292:	45e6      	cmp	lr, ip
 8015294:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8015298:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801529c:	d203      	bcs.n	80152a6 <rcutils_string_map_reserve+0x82>
 801529e:	eb02 0c07 	add.w	ip, r2, r7
 80152a2:	4566      	cmp	r6, ip
 80152a4:	d322      	bcc.n	80152ec <rcutils_string_map_reserve+0xc8>
 80152a6:	1ae3      	subs	r3, r4, r3
 80152a8:	009a      	lsls	r2, r3, #2
 80152aa:	4670      	mov	r0, lr
 80152ac:	2100      	movs	r1, #0
 80152ae:	9201      	str	r2, [sp, #4]
 80152b0:	f003 faea 	bl	8018888 <memset>
 80152b4:	9a01      	ldr	r2, [sp, #4]
 80152b6:	2100      	movs	r1, #0
 80152b8:	4630      	mov	r0, r6
 80152ba:	f003 fae5 	bl	8018888 <memset>
 80152be:	e00a      	b.n	80152d6 <rcutils_string_map_reserve+0xb2>
 80152c0:	694f      	ldr	r7, [r1, #20]
 80152c2:	6808      	ldr	r0, [r1, #0]
 80152c4:	4631      	mov	r1, r6
 80152c6:	47b8      	blx	r7
 80152c8:	682b      	ldr	r3, [r5, #0]
 80152ca:	4631      	mov	r1, r6
 80152cc:	6858      	ldr	r0, [r3, #4]
 80152ce:	601c      	str	r4, [r3, #0]
 80152d0:	47b8      	blx	r7
 80152d2:	682d      	ldr	r5, [r5, #0]
 80152d4:	606c      	str	r4, [r5, #4]
 80152d6:	2000      	movs	r0, #0
 80152d8:	60ac      	str	r4, [r5, #8]
 80152da:	b002      	add	sp, #8
 80152dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152e0:	2000      	movs	r0, #0
 80152e2:	e7af      	b.n	8015244 <rcutils_string_map_reserve+0x20>
 80152e4:	200a      	movs	r0, #10
 80152e6:	e7ad      	b.n	8015244 <rcutils_string_map_reserve+0x20>
 80152e8:	200b      	movs	r0, #11
 80152ea:	4770      	bx	lr
 80152ec:	1f0b      	subs	r3, r1, #4
 80152ee:	4418      	add	r0, r3
 80152f0:	4413      	add	r3, r2
 80152f2:	3a04      	subs	r2, #4
 80152f4:	4417      	add	r7, r2
 80152f6:	2200      	movs	r2, #0
 80152f8:	f843 2f04 	str.w	r2, [r3, #4]!
 80152fc:	42bb      	cmp	r3, r7
 80152fe:	f840 2f04 	str.w	r2, [r0, #4]!
 8015302:	d1f9      	bne.n	80152f8 <rcutils_string_map_reserve+0xd4>
 8015304:	e7e7      	b.n	80152d6 <rcutils_string_map_reserve+0xb2>
 8015306:	bf00      	nop

08015308 <rcutils_string_map_init>:
 8015308:	b082      	sub	sp, #8
 801530a:	b570      	push	{r4, r5, r6, lr}
 801530c:	ac04      	add	r4, sp, #16
 801530e:	e884 000c 	stmia.w	r4, {r2, r3}
 8015312:	b380      	cbz	r0, 8015376 <rcutils_string_map_init+0x6e>
 8015314:	6806      	ldr	r6, [r0, #0]
 8015316:	4604      	mov	r4, r0
 8015318:	b12e      	cbz	r6, 8015326 <rcutils_string_map_init+0x1e>
 801531a:	251e      	movs	r5, #30
 801531c:	4628      	mov	r0, r5
 801531e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015322:	b002      	add	sp, #8
 8015324:	4770      	bx	lr
 8015326:	a804      	add	r0, sp, #16
 8015328:	460d      	mov	r5, r1
 801532a:	f7fa fce5 	bl	800fcf8 <rcutils_allocator_is_valid>
 801532e:	b310      	cbz	r0, 8015376 <rcutils_string_map_init+0x6e>
 8015330:	9b04      	ldr	r3, [sp, #16]
 8015332:	9908      	ldr	r1, [sp, #32]
 8015334:	2024      	movs	r0, #36	; 0x24
 8015336:	4798      	blx	r3
 8015338:	6020      	str	r0, [r4, #0]
 801533a:	b310      	cbz	r0, 8015382 <rcutils_string_map_init+0x7a>
 801533c:	f10d 0e10 	add.w	lr, sp, #16
 8015340:	e9c0 6600 	strd	r6, r6, [r0]
 8015344:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8015348:	f100 0c10 	add.w	ip, r0, #16
 801534c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015350:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015354:	f8de 3000 	ldr.w	r3, [lr]
 8015358:	f8cc 3000 	str.w	r3, [ip]
 801535c:	4629      	mov	r1, r5
 801535e:	4620      	mov	r0, r4
 8015360:	f7ff ff60 	bl	8015224 <rcutils_string_map_reserve>
 8015364:	4605      	mov	r5, r0
 8015366:	2800      	cmp	r0, #0
 8015368:	d0d8      	beq.n	801531c <rcutils_string_map_init+0x14>
 801536a:	9b05      	ldr	r3, [sp, #20]
 801536c:	9908      	ldr	r1, [sp, #32]
 801536e:	6820      	ldr	r0, [r4, #0]
 8015370:	4798      	blx	r3
 8015372:	6026      	str	r6, [r4, #0]
 8015374:	e7d2      	b.n	801531c <rcutils_string_map_init+0x14>
 8015376:	250b      	movs	r5, #11
 8015378:	4628      	mov	r0, r5
 801537a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801537e:	b002      	add	sp, #8
 8015380:	4770      	bx	lr
 8015382:	250a      	movs	r5, #10
 8015384:	e7ca      	b.n	801531c <rcutils_string_map_init+0x14>
 8015386:	bf00      	nop

08015388 <rcutils_string_map_fini>:
 8015388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801538c:	b082      	sub	sp, #8
 801538e:	2800      	cmp	r0, #0
 8015390:	d03a      	beq.n	8015408 <rcutils_string_map_fini+0x80>
 8015392:	6804      	ldr	r4, [r0, #0]
 8015394:	4606      	mov	r6, r0
 8015396:	2c00      	cmp	r4, #0
 8015398:	d032      	beq.n	8015400 <rcutils_string_map_fini+0x78>
 801539a:	68a3      	ldr	r3, [r4, #8]
 801539c:	b32b      	cbz	r3, 80153ea <rcutils_string_map_fini+0x62>
 801539e:	2500      	movs	r5, #0
 80153a0:	6822      	ldr	r2, [r4, #0]
 80153a2:	462f      	mov	r7, r5
 80153a4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80153a8:	b1e0      	cbz	r0, 80153e4 <rcutils_string_map_fini+0x5c>
 80153aa:	6a21      	ldr	r1, [r4, #32]
 80153ac:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80153b0:	9101      	str	r1, [sp, #4]
 80153b2:	47c0      	blx	r8
 80153b4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80153b8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80153bc:	9901      	ldr	r1, [sp, #4]
 80153be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80153c2:	47c0      	blx	r8
 80153c4:	68e3      	ldr	r3, [r4, #12]
 80153c6:	6862      	ldr	r2, [r4, #4]
 80153c8:	3b01      	subs	r3, #1
 80153ca:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80153ce:	60e3      	str	r3, [r4, #12]
 80153d0:	6834      	ldr	r4, [r6, #0]
 80153d2:	68a3      	ldr	r3, [r4, #8]
 80153d4:	3501      	adds	r5, #1
 80153d6:	429d      	cmp	r5, r3
 80153d8:	d207      	bcs.n	80153ea <rcutils_string_map_fini+0x62>
 80153da:	6822      	ldr	r2, [r4, #0]
 80153dc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80153e0:	2800      	cmp	r0, #0
 80153e2:	d1e2      	bne.n	80153aa <rcutils_string_map_fini+0x22>
 80153e4:	3501      	adds	r5, #1
 80153e6:	429d      	cmp	r5, r3
 80153e8:	d3dc      	bcc.n	80153a4 <rcutils_string_map_fini+0x1c>
 80153ea:	2100      	movs	r1, #0
 80153ec:	4630      	mov	r0, r6
 80153ee:	f7ff ff19 	bl	8015224 <rcutils_string_map_reserve>
 80153f2:	4604      	mov	r4, r0
 80153f4:	b920      	cbnz	r0, 8015400 <rcutils_string_map_fini+0x78>
 80153f6:	6830      	ldr	r0, [r6, #0]
 80153f8:	6943      	ldr	r3, [r0, #20]
 80153fa:	6a01      	ldr	r1, [r0, #32]
 80153fc:	4798      	blx	r3
 80153fe:	6034      	str	r4, [r6, #0]
 8015400:	4620      	mov	r0, r4
 8015402:	b002      	add	sp, #8
 8015404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015408:	240b      	movs	r4, #11
 801540a:	4620      	mov	r0, r4
 801540c:	b002      	add	sp, #8
 801540e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015412:	bf00      	nop

08015414 <rcutils_string_map_getn>:
 8015414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015418:	b300      	cbz	r0, 801545c <rcutils_string_map_getn+0x48>
 801541a:	6807      	ldr	r7, [r0, #0]
 801541c:	b1ff      	cbz	r7, 801545e <rcutils_string_map_getn+0x4a>
 801541e:	4688      	mov	r8, r1
 8015420:	b1e1      	cbz	r1, 801545c <rcutils_string_map_getn+0x48>
 8015422:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8015426:	683e      	ldr	r6, [r7, #0]
 8015428:	f1ba 0f00 	cmp.w	sl, #0
 801542c:	d016      	beq.n	801545c <rcutils_string_map_getn+0x48>
 801542e:	4691      	mov	r9, r2
 8015430:	3e04      	subs	r6, #4
 8015432:	2400      	movs	r4, #0
 8015434:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8015438:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801543c:	4628      	mov	r0, r5
 801543e:	3401      	adds	r4, #1
 8015440:	b155      	cbz	r5, 8015458 <rcutils_string_map_getn+0x44>
 8015442:	f7ea fecf 	bl	80001e4 <strlen>
 8015446:	4548      	cmp	r0, r9
 8015448:	4602      	mov	r2, r0
 801544a:	4629      	mov	r1, r5
 801544c:	bf38      	it	cc
 801544e:	464a      	movcc	r2, r9
 8015450:	4640      	mov	r0, r8
 8015452:	f003 fca9 	bl	8018da8 <strncmp>
 8015456:	b128      	cbz	r0, 8015464 <rcutils_string_map_getn+0x50>
 8015458:	45a2      	cmp	sl, r4
 801545a:	d1eb      	bne.n	8015434 <rcutils_string_map_getn+0x20>
 801545c:	2700      	movs	r7, #0
 801545e:	4638      	mov	r0, r7
 8015460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	f853 700b 	ldr.w	r7, [r3, fp]
 801546a:	4638      	mov	r0, r7
 801546c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015470 <rcutils_system_time_now>:
 8015470:	b308      	cbz	r0, 80154b6 <rcutils_system_time_now+0x46>
 8015472:	b570      	push	{r4, r5, r6, lr}
 8015474:	b084      	sub	sp, #16
 8015476:	4604      	mov	r4, r0
 8015478:	4669      	mov	r1, sp
 801547a:	2001      	movs	r0, #1
 801547c:	f7ec fa00 	bl	8001880 <clock_gettime>
 8015480:	e9dd 3500 	ldrd	r3, r5, [sp]
 8015484:	2d00      	cmp	r5, #0
 8015486:	db13      	blt.n	80154b0 <rcutils_system_time_now+0x40>
 8015488:	9902      	ldr	r1, [sp, #8]
 801548a:	2900      	cmp	r1, #0
 801548c:	db0d      	blt.n	80154aa <rcutils_system_time_now+0x3a>
 801548e:	4e0b      	ldr	r6, [pc, #44]	; (80154bc <rcutils_system_time_now+0x4c>)
 8015490:	fba3 3206 	umull	r3, r2, r3, r6
 8015494:	185b      	adds	r3, r3, r1
 8015496:	fb06 2205 	mla	r2, r6, r5, r2
 801549a:	f04f 0000 	mov.w	r0, #0
 801549e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80154a2:	e9c4 3200 	strd	r3, r2, [r4]
 80154a6:	b004      	add	sp, #16
 80154a8:	bd70      	pop	{r4, r5, r6, pc}
 80154aa:	ea53 0205 	orrs.w	r2, r3, r5
 80154ae:	d1ee      	bne.n	801548e <rcutils_system_time_now+0x1e>
 80154b0:	2002      	movs	r0, #2
 80154b2:	b004      	add	sp, #16
 80154b4:	bd70      	pop	{r4, r5, r6, pc}
 80154b6:	200b      	movs	r0, #11
 80154b8:	4770      	bx	lr
 80154ba:	bf00      	nop
 80154bc:	3b9aca00 	.word	0x3b9aca00

080154c0 <rcutils_steady_time_now>:
 80154c0:	b308      	cbz	r0, 8015506 <rcutils_steady_time_now+0x46>
 80154c2:	b570      	push	{r4, r5, r6, lr}
 80154c4:	b084      	sub	sp, #16
 80154c6:	4604      	mov	r4, r0
 80154c8:	4669      	mov	r1, sp
 80154ca:	2000      	movs	r0, #0
 80154cc:	f7ec f9d8 	bl	8001880 <clock_gettime>
 80154d0:	e9dd 3500 	ldrd	r3, r5, [sp]
 80154d4:	2d00      	cmp	r5, #0
 80154d6:	db13      	blt.n	8015500 <rcutils_steady_time_now+0x40>
 80154d8:	9902      	ldr	r1, [sp, #8]
 80154da:	2900      	cmp	r1, #0
 80154dc:	db0d      	blt.n	80154fa <rcutils_steady_time_now+0x3a>
 80154de:	4e0b      	ldr	r6, [pc, #44]	; (801550c <rcutils_steady_time_now+0x4c>)
 80154e0:	fba3 3206 	umull	r3, r2, r3, r6
 80154e4:	185b      	adds	r3, r3, r1
 80154e6:	fb06 2205 	mla	r2, r6, r5, r2
 80154ea:	f04f 0000 	mov.w	r0, #0
 80154ee:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80154f2:	e9c4 3200 	strd	r3, r2, [r4]
 80154f6:	b004      	add	sp, #16
 80154f8:	bd70      	pop	{r4, r5, r6, pc}
 80154fa:	ea53 0205 	orrs.w	r2, r3, r5
 80154fe:	d1ee      	bne.n	80154de <rcutils_steady_time_now+0x1e>
 8015500:	2002      	movs	r0, #2
 8015502:	b004      	add	sp, #16
 8015504:	bd70      	pop	{r4, r5, r6, pc}
 8015506:	200b      	movs	r0, #11
 8015508:	4770      	bx	lr
 801550a:	bf00      	nop
 801550c:	3b9aca00 	.word	0x3b9aca00

08015510 <rmw_get_zero_initialized_context>:
 8015510:	b510      	push	{r4, lr}
 8015512:	4604      	mov	r4, r0
 8015514:	3010      	adds	r0, #16
 8015516:	f000 f80b 	bl	8015530 <rmw_get_zero_initialized_init_options>
 801551a:	2300      	movs	r3, #0
 801551c:	2000      	movs	r0, #0
 801551e:	2100      	movs	r1, #0
 8015520:	e9c4 0100 	strd	r0, r1, [r4]
 8015524:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015528:	60a3      	str	r3, [r4, #8]
 801552a:	4620      	mov	r0, r4
 801552c:	bd10      	pop	{r4, pc}
 801552e:	bf00      	nop

08015530 <rmw_get_zero_initialized_init_options>:
 8015530:	b510      	push	{r4, lr}
 8015532:	2238      	movs	r2, #56	; 0x38
 8015534:	4604      	mov	r4, r0
 8015536:	2100      	movs	r1, #0
 8015538:	f003 f9a6 	bl	8018888 <memset>
 801553c:	f104 0010 	add.w	r0, r4, #16
 8015540:	f000 f806 	bl	8015550 <rmw_get_default_security_options>
 8015544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015548:	60e3      	str	r3, [r4, #12]
 801554a:	4620      	mov	r0, r4
 801554c:	bd10      	pop	{r4, pc}
 801554e:	bf00      	nop

08015550 <rmw_get_default_security_options>:
 8015550:	2200      	movs	r2, #0
 8015552:	7002      	strb	r2, [r0, #0]
 8015554:	6042      	str	r2, [r0, #4]
 8015556:	4770      	bx	lr

08015558 <rmw_validate_full_topic_name>:
 8015558:	2800      	cmp	r0, #0
 801555a:	d057      	beq.n	801560c <rmw_validate_full_topic_name+0xb4>
 801555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015560:	460d      	mov	r5, r1
 8015562:	2900      	cmp	r1, #0
 8015564:	d054      	beq.n	8015610 <rmw_validate_full_topic_name+0xb8>
 8015566:	4616      	mov	r6, r2
 8015568:	4604      	mov	r4, r0
 801556a:	f7ea fe3b 	bl	80001e4 <strlen>
 801556e:	b148      	cbz	r0, 8015584 <rmw_validate_full_topic_name+0x2c>
 8015570:	7823      	ldrb	r3, [r4, #0]
 8015572:	2b2f      	cmp	r3, #47	; 0x2f
 8015574:	d00d      	beq.n	8015592 <rmw_validate_full_topic_name+0x3a>
 8015576:	2302      	movs	r3, #2
 8015578:	602b      	str	r3, [r5, #0]
 801557a:	b13e      	cbz	r6, 801558c <rmw_validate_full_topic_name+0x34>
 801557c:	2000      	movs	r0, #0
 801557e:	6030      	str	r0, [r6, #0]
 8015580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015584:	2301      	movs	r3, #1
 8015586:	602b      	str	r3, [r5, #0]
 8015588:	2e00      	cmp	r6, #0
 801558a:	d1f7      	bne.n	801557c <rmw_validate_full_topic_name+0x24>
 801558c:	2000      	movs	r0, #0
 801558e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015592:	1e43      	subs	r3, r0, #1
 8015594:	5ce2      	ldrb	r2, [r4, r3]
 8015596:	2a2f      	cmp	r2, #47	; 0x2f
 8015598:	d03c      	beq.n	8015614 <rmw_validate_full_topic_name+0xbc>
 801559a:	1e63      	subs	r3, r4, #1
 801559c:	eb03 0800 	add.w	r8, r3, r0
 80155a0:	f1c4 0e01 	rsb	lr, r4, #1
 80155a4:	eb0e 0703 	add.w	r7, lr, r3
 80155a8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80155ac:	f021 0220 	bic.w	r2, r1, #32
 80155b0:	3a41      	subs	r2, #65	; 0x41
 80155b2:	2a19      	cmp	r2, #25
 80155b4:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 80155b8:	d90b      	bls.n	80155d2 <rmw_validate_full_topic_name+0x7a>
 80155ba:	295f      	cmp	r1, #95	; 0x5f
 80155bc:	d009      	beq.n	80155d2 <rmw_validate_full_topic_name+0x7a>
 80155be:	f1bc 0f0a 	cmp.w	ip, #10
 80155c2:	d906      	bls.n	80155d2 <rmw_validate_full_topic_name+0x7a>
 80155c4:	2304      	movs	r3, #4
 80155c6:	602b      	str	r3, [r5, #0]
 80155c8:	2e00      	cmp	r6, #0
 80155ca:	d0df      	beq.n	801558c <rmw_validate_full_topic_name+0x34>
 80155cc:	6037      	str	r7, [r6, #0]
 80155ce:	2000      	movs	r0, #0
 80155d0:	e7d6      	b.n	8015580 <rmw_validate_full_topic_name+0x28>
 80155d2:	4543      	cmp	r3, r8
 80155d4:	d1e6      	bne.n	80155a4 <rmw_validate_full_topic_name+0x4c>
 80155d6:	4f1a      	ldr	r7, [pc, #104]	; (8015640 <rmw_validate_full_topic_name+0xe8>)
 80155d8:	2301      	movs	r3, #1
 80155da:	e004      	b.n	80155e6 <rmw_validate_full_topic_name+0x8e>
 80155dc:	4298      	cmp	r0, r3
 80155de:	f104 0401 	add.w	r4, r4, #1
 80155e2:	d91c      	bls.n	801561e <rmw_validate_full_topic_name+0xc6>
 80155e4:	4613      	mov	r3, r2
 80155e6:	4298      	cmp	r0, r3
 80155e8:	f103 0201 	add.w	r2, r3, #1
 80155ec:	d0f6      	beq.n	80155dc <rmw_validate_full_topic_name+0x84>
 80155ee:	7821      	ldrb	r1, [r4, #0]
 80155f0:	292f      	cmp	r1, #47	; 0x2f
 80155f2:	d1f3      	bne.n	80155dc <rmw_validate_full_topic_name+0x84>
 80155f4:	7861      	ldrb	r1, [r4, #1]
 80155f6:	292f      	cmp	r1, #47	; 0x2f
 80155f8:	d01c      	beq.n	8015634 <rmw_validate_full_topic_name+0xdc>
 80155fa:	5dc9      	ldrb	r1, [r1, r7]
 80155fc:	0749      	lsls	r1, r1, #29
 80155fe:	d5ed      	bpl.n	80155dc <rmw_validate_full_topic_name+0x84>
 8015600:	2206      	movs	r2, #6
 8015602:	602a      	str	r2, [r5, #0]
 8015604:	2e00      	cmp	r6, #0
 8015606:	d0c1      	beq.n	801558c <rmw_validate_full_topic_name+0x34>
 8015608:	6033      	str	r3, [r6, #0]
 801560a:	e7bf      	b.n	801558c <rmw_validate_full_topic_name+0x34>
 801560c:	200b      	movs	r0, #11
 801560e:	4770      	bx	lr
 8015610:	200b      	movs	r0, #11
 8015612:	e7b5      	b.n	8015580 <rmw_validate_full_topic_name+0x28>
 8015614:	2203      	movs	r2, #3
 8015616:	602a      	str	r2, [r5, #0]
 8015618:	2e00      	cmp	r6, #0
 801561a:	d1f5      	bne.n	8015608 <rmw_validate_full_topic_name+0xb0>
 801561c:	e7b6      	b.n	801558c <rmw_validate_full_topic_name+0x34>
 801561e:	28f7      	cmp	r0, #247	; 0xf7
 8015620:	d802      	bhi.n	8015628 <rmw_validate_full_topic_name+0xd0>
 8015622:	2000      	movs	r0, #0
 8015624:	6028      	str	r0, [r5, #0]
 8015626:	e7ab      	b.n	8015580 <rmw_validate_full_topic_name+0x28>
 8015628:	2307      	movs	r3, #7
 801562a:	602b      	str	r3, [r5, #0]
 801562c:	2e00      	cmp	r6, #0
 801562e:	d0ad      	beq.n	801558c <rmw_validate_full_topic_name+0x34>
 8015630:	23f6      	movs	r3, #246	; 0xf6
 8015632:	e7e9      	b.n	8015608 <rmw_validate_full_topic_name+0xb0>
 8015634:	2205      	movs	r2, #5
 8015636:	602a      	str	r2, [r5, #0]
 8015638:	2e00      	cmp	r6, #0
 801563a:	d1e5      	bne.n	8015608 <rmw_validate_full_topic_name+0xb0>
 801563c:	e7a6      	b.n	801558c <rmw_validate_full_topic_name+0x34>
 801563e:	bf00      	nop
 8015640:	0801a90d 	.word	0x0801a90d

08015644 <rmw_validate_namespace_with_size>:
 8015644:	b340      	cbz	r0, 8015698 <rmw_validate_namespace_with_size+0x54>
 8015646:	b570      	push	{r4, r5, r6, lr}
 8015648:	4614      	mov	r4, r2
 801564a:	b0c2      	sub	sp, #264	; 0x108
 801564c:	b332      	cbz	r2, 801569c <rmw_validate_namespace_with_size+0x58>
 801564e:	2901      	cmp	r1, #1
 8015650:	460d      	mov	r5, r1
 8015652:	461e      	mov	r6, r3
 8015654:	d102      	bne.n	801565c <rmw_validate_namespace_with_size+0x18>
 8015656:	7803      	ldrb	r3, [r0, #0]
 8015658:	2b2f      	cmp	r3, #47	; 0x2f
 801565a:	d012      	beq.n	8015682 <rmw_validate_namespace_with_size+0x3e>
 801565c:	aa01      	add	r2, sp, #4
 801565e:	4669      	mov	r1, sp
 8015660:	f7ff ff7a 	bl	8015558 <rmw_validate_full_topic_name>
 8015664:	b978      	cbnz	r0, 8015686 <rmw_validate_namespace_with_size+0x42>
 8015666:	9b00      	ldr	r3, [sp, #0]
 8015668:	b14b      	cbz	r3, 801567e <rmw_validate_namespace_with_size+0x3a>
 801566a:	2b07      	cmp	r3, #7
 801566c:	d007      	beq.n	801567e <rmw_validate_namespace_with_size+0x3a>
 801566e:	1e5a      	subs	r2, r3, #1
 8015670:	2a05      	cmp	r2, #5
 8015672:	d82b      	bhi.n	80156cc <rmw_validate_namespace_with_size+0x88>
 8015674:	e8df f002 	tbb	[pc, r2]
 8015678:	1e212427 	.word	0x1e212427
 801567c:	141b      	.short	0x141b
 801567e:	2df5      	cmp	r5, #245	; 0xf5
 8015680:	d803      	bhi.n	801568a <rmw_validate_namespace_with_size+0x46>
 8015682:	2000      	movs	r0, #0
 8015684:	6020      	str	r0, [r4, #0]
 8015686:	b042      	add	sp, #264	; 0x108
 8015688:	bd70      	pop	{r4, r5, r6, pc}
 801568a:	2307      	movs	r3, #7
 801568c:	6023      	str	r3, [r4, #0]
 801568e:	2e00      	cmp	r6, #0
 8015690:	d0f9      	beq.n	8015686 <rmw_validate_namespace_with_size+0x42>
 8015692:	23f4      	movs	r3, #244	; 0xf4
 8015694:	6033      	str	r3, [r6, #0]
 8015696:	e7f6      	b.n	8015686 <rmw_validate_namespace_with_size+0x42>
 8015698:	200b      	movs	r0, #11
 801569a:	4770      	bx	lr
 801569c:	200b      	movs	r0, #11
 801569e:	e7f2      	b.n	8015686 <rmw_validate_namespace_with_size+0x42>
 80156a0:	2306      	movs	r3, #6
 80156a2:	6023      	str	r3, [r4, #0]
 80156a4:	2e00      	cmp	r6, #0
 80156a6:	d0ee      	beq.n	8015686 <rmw_validate_namespace_with_size+0x42>
 80156a8:	9b01      	ldr	r3, [sp, #4]
 80156aa:	6033      	str	r3, [r6, #0]
 80156ac:	e7eb      	b.n	8015686 <rmw_validate_namespace_with_size+0x42>
 80156ae:	2305      	movs	r3, #5
 80156b0:	6023      	str	r3, [r4, #0]
 80156b2:	e7f7      	b.n	80156a4 <rmw_validate_namespace_with_size+0x60>
 80156b4:	2304      	movs	r3, #4
 80156b6:	6023      	str	r3, [r4, #0]
 80156b8:	e7f4      	b.n	80156a4 <rmw_validate_namespace_with_size+0x60>
 80156ba:	2303      	movs	r3, #3
 80156bc:	6023      	str	r3, [r4, #0]
 80156be:	e7f1      	b.n	80156a4 <rmw_validate_namespace_with_size+0x60>
 80156c0:	2302      	movs	r3, #2
 80156c2:	6023      	str	r3, [r4, #0]
 80156c4:	e7ee      	b.n	80156a4 <rmw_validate_namespace_with_size+0x60>
 80156c6:	2301      	movs	r3, #1
 80156c8:	6023      	str	r3, [r4, #0]
 80156ca:	e7eb      	b.n	80156a4 <rmw_validate_namespace_with_size+0x60>
 80156cc:	4a03      	ldr	r2, [pc, #12]	; (80156dc <rmw_validate_namespace_with_size+0x98>)
 80156ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80156d2:	a802      	add	r0, sp, #8
 80156d4:	f7ff fd36 	bl	8015144 <rcutils_snprintf>
 80156d8:	2001      	movs	r0, #1
 80156da:	e7d4      	b.n	8015686 <rmw_validate_namespace_with_size+0x42>
 80156dc:	0801a384 	.word	0x0801a384

080156e0 <rmw_validate_namespace>:
 80156e0:	b168      	cbz	r0, 80156fe <rmw_validate_namespace+0x1e>
 80156e2:	b570      	push	{r4, r5, r6, lr}
 80156e4:	460d      	mov	r5, r1
 80156e6:	4616      	mov	r6, r2
 80156e8:	4604      	mov	r4, r0
 80156ea:	f7ea fd7b 	bl	80001e4 <strlen>
 80156ee:	4633      	mov	r3, r6
 80156f0:	4601      	mov	r1, r0
 80156f2:	462a      	mov	r2, r5
 80156f4:	4620      	mov	r0, r4
 80156f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80156fa:	f7ff bfa3 	b.w	8015644 <rmw_validate_namespace_with_size>
 80156fe:	200b      	movs	r0, #11
 8015700:	4770      	bx	lr
 8015702:	bf00      	nop

08015704 <rmw_namespace_validation_result_string>:
 8015704:	2807      	cmp	r0, #7
 8015706:	bf9a      	itte	ls
 8015708:	4b02      	ldrls	r3, [pc, #8]	; (8015714 <rmw_namespace_validation_result_string+0x10>)
 801570a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801570e:	4802      	ldrhi	r0, [pc, #8]	; (8015718 <rmw_namespace_validation_result_string+0x14>)
 8015710:	4770      	bx	lr
 8015712:	bf00      	nop
 8015714:	0801a57c 	.word	0x0801a57c
 8015718:	0801a3d4 	.word	0x0801a3d4

0801571c <rmw_validate_node_name>:
 801571c:	2800      	cmp	r0, #0
 801571e:	d03b      	beq.n	8015798 <rmw_validate_node_name+0x7c>
 8015720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015724:	460d      	mov	r5, r1
 8015726:	2900      	cmp	r1, #0
 8015728:	d038      	beq.n	801579c <rmw_validate_node_name+0x80>
 801572a:	4616      	mov	r6, r2
 801572c:	4604      	mov	r4, r0
 801572e:	f7ea fd59 	bl	80001e4 <strlen>
 8015732:	b1e0      	cbz	r0, 801576e <rmw_validate_node_name+0x52>
 8015734:	1e63      	subs	r3, r4, #1
 8015736:	eb03 0800 	add.w	r8, r3, r0
 801573a:	f1c4 0101 	rsb	r1, r4, #1
 801573e:	18cf      	adds	r7, r1, r3
 8015740:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8015744:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8015748:	f02e 0c20 	bic.w	ip, lr, #32
 801574c:	2a09      	cmp	r2, #9
 801574e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8015752:	d914      	bls.n	801577e <rmw_validate_node_name+0x62>
 8015754:	f1bc 0f19 	cmp.w	ip, #25
 8015758:	d911      	bls.n	801577e <rmw_validate_node_name+0x62>
 801575a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 801575e:	d00e      	beq.n	801577e <rmw_validate_node_name+0x62>
 8015760:	2302      	movs	r3, #2
 8015762:	602b      	str	r3, [r5, #0]
 8015764:	b106      	cbz	r6, 8015768 <rmw_validate_node_name+0x4c>
 8015766:	6037      	str	r7, [r6, #0]
 8015768:	2000      	movs	r0, #0
 801576a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801576e:	2301      	movs	r3, #1
 8015770:	602b      	str	r3, [r5, #0]
 8015772:	2e00      	cmp	r6, #0
 8015774:	d0f8      	beq.n	8015768 <rmw_validate_node_name+0x4c>
 8015776:	2000      	movs	r0, #0
 8015778:	6030      	str	r0, [r6, #0]
 801577a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801577e:	4543      	cmp	r3, r8
 8015780:	d1dd      	bne.n	801573e <rmw_validate_node_name+0x22>
 8015782:	7822      	ldrb	r2, [r4, #0]
 8015784:	4b0d      	ldr	r3, [pc, #52]	; (80157bc <rmw_validate_node_name+0xa0>)
 8015786:	5cd3      	ldrb	r3, [r2, r3]
 8015788:	f013 0304 	ands.w	r3, r3, #4
 801578c:	d110      	bne.n	80157b0 <rmw_validate_node_name+0x94>
 801578e:	28ff      	cmp	r0, #255	; 0xff
 8015790:	d806      	bhi.n	80157a0 <rmw_validate_node_name+0x84>
 8015792:	602b      	str	r3, [r5, #0]
 8015794:	4618      	mov	r0, r3
 8015796:	e7e8      	b.n	801576a <rmw_validate_node_name+0x4e>
 8015798:	200b      	movs	r0, #11
 801579a:	4770      	bx	lr
 801579c:	200b      	movs	r0, #11
 801579e:	e7e4      	b.n	801576a <rmw_validate_node_name+0x4e>
 80157a0:	2204      	movs	r2, #4
 80157a2:	602a      	str	r2, [r5, #0]
 80157a4:	2e00      	cmp	r6, #0
 80157a6:	d0df      	beq.n	8015768 <rmw_validate_node_name+0x4c>
 80157a8:	22fe      	movs	r2, #254	; 0xfe
 80157aa:	6032      	str	r2, [r6, #0]
 80157ac:	4618      	mov	r0, r3
 80157ae:	e7dc      	b.n	801576a <rmw_validate_node_name+0x4e>
 80157b0:	2303      	movs	r3, #3
 80157b2:	602b      	str	r3, [r5, #0]
 80157b4:	2e00      	cmp	r6, #0
 80157b6:	d1de      	bne.n	8015776 <rmw_validate_node_name+0x5a>
 80157b8:	e7d6      	b.n	8015768 <rmw_validate_node_name+0x4c>
 80157ba:	bf00      	nop
 80157bc:	0801a90d 	.word	0x0801a90d

080157c0 <rmw_node_name_validation_result_string>:
 80157c0:	2804      	cmp	r0, #4
 80157c2:	bf9a      	itte	ls
 80157c4:	4b02      	ldrls	r3, [pc, #8]	; (80157d0 <rmw_node_name_validation_result_string+0x10>)
 80157c6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80157ca:	4802      	ldrhi	r0, [pc, #8]	; (80157d4 <rmw_node_name_validation_result_string+0x14>)
 80157cc:	4770      	bx	lr
 80157ce:	bf00      	nop
 80157d0:	0801a688 	.word	0x0801a688
 80157d4:	0801a59c 	.word	0x0801a59c

080157d8 <get_memory>:
 80157d8:	4603      	mov	r3, r0
 80157da:	6840      	ldr	r0, [r0, #4]
 80157dc:	b158      	cbz	r0, 80157f6 <get_memory+0x1e>
 80157de:	6842      	ldr	r2, [r0, #4]
 80157e0:	605a      	str	r2, [r3, #4]
 80157e2:	b10a      	cbz	r2, 80157e8 <get_memory+0x10>
 80157e4:	2100      	movs	r1, #0
 80157e6:	6011      	str	r1, [r2, #0]
 80157e8:	681a      	ldr	r2, [r3, #0]
 80157ea:	6042      	str	r2, [r0, #4]
 80157ec:	b102      	cbz	r2, 80157f0 <get_memory+0x18>
 80157ee:	6010      	str	r0, [r2, #0]
 80157f0:	2200      	movs	r2, #0
 80157f2:	6002      	str	r2, [r0, #0]
 80157f4:	6018      	str	r0, [r3, #0]
 80157f6:	4770      	bx	lr

080157f8 <put_memory>:
 80157f8:	680b      	ldr	r3, [r1, #0]
 80157fa:	b10b      	cbz	r3, 8015800 <put_memory+0x8>
 80157fc:	684a      	ldr	r2, [r1, #4]
 80157fe:	605a      	str	r2, [r3, #4]
 8015800:	684a      	ldr	r2, [r1, #4]
 8015802:	b102      	cbz	r2, 8015806 <put_memory+0xe>
 8015804:	6013      	str	r3, [r2, #0]
 8015806:	6803      	ldr	r3, [r0, #0]
 8015808:	428b      	cmp	r3, r1
 801580a:	6843      	ldr	r3, [r0, #4]
 801580c:	bf08      	it	eq
 801580e:	6002      	streq	r2, [r0, #0]
 8015810:	604b      	str	r3, [r1, #4]
 8015812:	b103      	cbz	r3, 8015816 <put_memory+0x1e>
 8015814:	6019      	str	r1, [r3, #0]
 8015816:	2300      	movs	r3, #0
 8015818:	600b      	str	r3, [r1, #0]
 801581a:	6041      	str	r1, [r0, #4]
 801581c:	4770      	bx	lr
 801581e:	bf00      	nop

08015820 <rmw_get_implementation_identifier>:
 8015820:	4b01      	ldr	r3, [pc, #4]	; (8015828 <rmw_get_implementation_identifier+0x8>)
 8015822:	6818      	ldr	r0, [r3, #0]
 8015824:	4770      	bx	lr
 8015826:	bf00      	nop
 8015828:	0801a6b4 	.word	0x0801a6b4

0801582c <rmw_init_options_init>:
 801582c:	b084      	sub	sp, #16
 801582e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015830:	b083      	sub	sp, #12
 8015832:	ad09      	add	r5, sp, #36	; 0x24
 8015834:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015838:	b130      	cbz	r0, 8015848 <rmw_init_options_init+0x1c>
 801583a:	4604      	mov	r4, r0
 801583c:	4628      	mov	r0, r5
 801583e:	f7fa fa5b 	bl	800fcf8 <rcutils_allocator_is_valid>
 8015842:	b108      	cbz	r0, 8015848 <rmw_init_options_init+0x1c>
 8015844:	68a6      	ldr	r6, [r4, #8]
 8015846:	b12e      	cbz	r6, 8015854 <rmw_init_options_init+0x28>
 8015848:	200b      	movs	r0, #11
 801584a:	b003      	add	sp, #12
 801584c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015850:	b004      	add	sp, #16
 8015852:	4770      	bx	lr
 8015854:	2200      	movs	r2, #0
 8015856:	2300      	movs	r3, #0
 8015858:	e9c4 2300 	strd	r2, r3, [r4]
 801585c:	4b22      	ldr	r3, [pc, #136]	; (80158e8 <rmw_init_options_init+0xbc>)
 801585e:	f8df e098 	ldr.w	lr, [pc, #152]	; 80158f8 <rmw_init_options_init+0xcc>
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	60a3      	str	r3, [r4, #8]
 8015866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015868:	f104 0c20 	add.w	ip, r4, #32
 801586c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015870:	466f      	mov	r7, sp
 8015872:	682b      	ldr	r3, [r5, #0]
 8015874:	f8cc 3000 	str.w	r3, [ip]
 8015878:	4638      	mov	r0, r7
 801587a:	f8c4 e01c 	str.w	lr, [r4, #28]
 801587e:	60e6      	str	r6, [r4, #12]
 8015880:	f7ff fe66 	bl	8015550 <rmw_get_default_security_options>
 8015884:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015888:	f104 0310 	add.w	r3, r4, #16
 801588c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015890:	2203      	movs	r2, #3
 8015892:	4816      	ldr	r0, [pc, #88]	; (80158ec <rmw_init_options_init+0xc0>)
 8015894:	4916      	ldr	r1, [pc, #88]	; (80158f0 <rmw_init_options_init+0xc4>)
 8015896:	7626      	strb	r6, [r4, #24]
 8015898:	f7fa fd20 	bl	80102dc <rmw_uxrce_init_init_options_impl_memory>
 801589c:	4813      	ldr	r0, [pc, #76]	; (80158ec <rmw_init_options_init+0xc0>)
 801589e:	f7ff ff9b 	bl	80157d8 <get_memory>
 80158a2:	b1f0      	cbz	r0, 80158e2 <rmw_init_options_init+0xb6>
 80158a4:	4a13      	ldr	r2, [pc, #76]	; (80158f4 <rmw_init_options_init+0xc8>)
 80158a6:	6883      	ldr	r3, [r0, #8]
 80158a8:	6851      	ldr	r1, [r2, #4]
 80158aa:	7810      	ldrb	r0, [r2, #0]
 80158ac:	6363      	str	r3, [r4, #52]	; 0x34
 80158ae:	7418      	strb	r0, [r3, #16]
 80158b0:	6159      	str	r1, [r3, #20]
 80158b2:	68d1      	ldr	r1, [r2, #12]
 80158b4:	61d9      	str	r1, [r3, #28]
 80158b6:	6911      	ldr	r1, [r2, #16]
 80158b8:	6219      	str	r1, [r3, #32]
 80158ba:	6951      	ldr	r1, [r2, #20]
 80158bc:	6892      	ldr	r2, [r2, #8]
 80158be:	619a      	str	r2, [r3, #24]
 80158c0:	6259      	str	r1, [r3, #36]	; 0x24
 80158c2:	f7fd faf3 	bl	8012eac <uxr_nanos>
 80158c6:	f003 f8f5 	bl	8018ab4 <srand>
 80158ca:	f003 f921 	bl	8018b10 <rand>
 80158ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80158d0:	6298      	str	r0, [r3, #40]	; 0x28
 80158d2:	2800      	cmp	r0, #0
 80158d4:	d0f9      	beq.n	80158ca <rmw_init_options_init+0x9e>
 80158d6:	2000      	movs	r0, #0
 80158d8:	b003      	add	sp, #12
 80158da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80158de:	b004      	add	sp, #16
 80158e0:	4770      	bx	lr
 80158e2:	2001      	movs	r0, #1
 80158e4:	e7b1      	b.n	801584a <rmw_init_options_init+0x1e>
 80158e6:	bf00      	nop
 80158e8:	0801a6b4 	.word	0x0801a6b4
 80158ec:	20012b7c 	.word	0x20012b7c
 80158f0:	2000e418 	.word	0x2000e418
 80158f4:	2000e2a4 	.word	0x2000e2a4
 80158f8:	0801a254 	.word	0x0801a254

080158fc <rmw_init_options_copy>:
 80158fc:	b570      	push	{r4, r5, r6, lr}
 80158fe:	b158      	cbz	r0, 8015918 <rmw_init_options_copy+0x1c>
 8015900:	460d      	mov	r5, r1
 8015902:	b149      	cbz	r1, 8015918 <rmw_init_options_copy+0x1c>
 8015904:	4604      	mov	r4, r0
 8015906:	6880      	ldr	r0, [r0, #8]
 8015908:	b120      	cbz	r0, 8015914 <rmw_init_options_copy+0x18>
 801590a:	4b1e      	ldr	r3, [pc, #120]	; (8015984 <rmw_init_options_copy+0x88>)
 801590c:	6819      	ldr	r1, [r3, #0]
 801590e:	f7ea fc5f 	bl	80001d0 <strcmp>
 8015912:	bb90      	cbnz	r0, 801597a <rmw_init_options_copy+0x7e>
 8015914:	68ab      	ldr	r3, [r5, #8]
 8015916:	b113      	cbz	r3, 801591e <rmw_init_options_copy+0x22>
 8015918:	250b      	movs	r5, #11
 801591a:	4628      	mov	r0, r5
 801591c:	bd70      	pop	{r4, r5, r6, pc}
 801591e:	4623      	mov	r3, r4
 8015920:	462a      	mov	r2, r5
 8015922:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8015926:	f8d3 c000 	ldr.w	ip, [r3]
 801592a:	6858      	ldr	r0, [r3, #4]
 801592c:	6899      	ldr	r1, [r3, #8]
 801592e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8015932:	f8c2 e00c 	str.w	lr, [r2, #12]
 8015936:	3310      	adds	r3, #16
 8015938:	42b3      	cmp	r3, r6
 801593a:	f8c2 c000 	str.w	ip, [r2]
 801593e:	6050      	str	r0, [r2, #4]
 8015940:	6091      	str	r1, [r2, #8]
 8015942:	f102 0210 	add.w	r2, r2, #16
 8015946:	d1ee      	bne.n	8015926 <rmw_init_options_copy+0x2a>
 8015948:	6819      	ldr	r1, [r3, #0]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	480e      	ldr	r0, [pc, #56]	; (8015988 <rmw_init_options_copy+0x8c>)
 801594e:	6053      	str	r3, [r2, #4]
 8015950:	6011      	str	r1, [r2, #0]
 8015952:	f7ff ff41 	bl	80157d8 <get_memory>
 8015956:	b198      	cbz	r0, 8015980 <rmw_init_options_copy+0x84>
 8015958:	6883      	ldr	r3, [r0, #8]
 801595a:	636b      	str	r3, [r5, #52]	; 0x34
 801595c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801595e:	f102 0c10 	add.w	ip, r2, #16
 8015962:	f103 0410 	add.w	r4, r3, #16
 8015966:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801596a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801596c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8015970:	2500      	movs	r5, #0
 8015972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015976:	4628      	mov	r0, r5
 8015978:	bd70      	pop	{r4, r5, r6, pc}
 801597a:	250c      	movs	r5, #12
 801597c:	4628      	mov	r0, r5
 801597e:	bd70      	pop	{r4, r5, r6, pc}
 8015980:	2501      	movs	r5, #1
 8015982:	e7ca      	b.n	801591a <rmw_init_options_copy+0x1e>
 8015984:	0801a6b4 	.word	0x0801a6b4
 8015988:	20012b7c 	.word	0x20012b7c

0801598c <rmw_init_options_fini>:
 801598c:	2800      	cmp	r0, #0
 801598e:	d03d      	beq.n	8015a0c <rmw_init_options_fini+0x80>
 8015990:	b510      	push	{r4, lr}
 8015992:	4604      	mov	r4, r0
 8015994:	b08e      	sub	sp, #56	; 0x38
 8015996:	3020      	adds	r0, #32
 8015998:	f7fa f9ae 	bl	800fcf8 <rcutils_allocator_is_valid>
 801599c:	b360      	cbz	r0, 80159f8 <rmw_init_options_fini+0x6c>
 801599e:	68a0      	ldr	r0, [r4, #8]
 80159a0:	b120      	cbz	r0, 80159ac <rmw_init_options_fini+0x20>
 80159a2:	4b1c      	ldr	r3, [pc, #112]	; (8015a14 <rmw_init_options_fini+0x88>)
 80159a4:	6819      	ldr	r1, [r3, #0]
 80159a6:	f7ea fc13 	bl	80001d0 <strcmp>
 80159aa:	bb68      	cbnz	r0, 8015a08 <rmw_init_options_fini+0x7c>
 80159ac:	4b1a      	ldr	r3, [pc, #104]	; (8015a18 <rmw_init_options_fini+0x8c>)
 80159ae:	6819      	ldr	r1, [r3, #0]
 80159b0:	b331      	cbz	r1, 8015a00 <rmw_init_options_fini+0x74>
 80159b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80159b4:	e001      	b.n	80159ba <rmw_init_options_fini+0x2e>
 80159b6:	6849      	ldr	r1, [r1, #4]
 80159b8:	b311      	cbz	r1, 8015a00 <rmw_init_options_fini+0x74>
 80159ba:	688b      	ldr	r3, [r1, #8]
 80159bc:	429a      	cmp	r2, r3
 80159be:	d1fa      	bne.n	80159b6 <rmw_init_options_fini+0x2a>
 80159c0:	4815      	ldr	r0, [pc, #84]	; (8015a18 <rmw_init_options_fini+0x8c>)
 80159c2:	f7ff ff19 	bl	80157f8 <put_memory>
 80159c6:	4668      	mov	r0, sp
 80159c8:	f7ff fdb2 	bl	8015530 <rmw_get_zero_initialized_init_options>
 80159cc:	46ee      	mov	lr, sp
 80159ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159d2:	46a4      	mov	ip, r4
 80159d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80159ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 80159f0:	2300      	movs	r3, #0
 80159f2:	4618      	mov	r0, r3
 80159f4:	b00e      	add	sp, #56	; 0x38
 80159f6:	bd10      	pop	{r4, pc}
 80159f8:	230b      	movs	r3, #11
 80159fa:	4618      	mov	r0, r3
 80159fc:	b00e      	add	sp, #56	; 0x38
 80159fe:	bd10      	pop	{r4, pc}
 8015a00:	2301      	movs	r3, #1
 8015a02:	4618      	mov	r0, r3
 8015a04:	b00e      	add	sp, #56	; 0x38
 8015a06:	bd10      	pop	{r4, pc}
 8015a08:	230c      	movs	r3, #12
 8015a0a:	e7f2      	b.n	80159f2 <rmw_init_options_fini+0x66>
 8015a0c:	230b      	movs	r3, #11
 8015a0e:	4618      	mov	r0, r3
 8015a10:	4770      	bx	lr
 8015a12:	bf00      	nop
 8015a14:	0801a6b4 	.word	0x0801a6b4
 8015a18:	20012b7c 	.word	0x20012b7c

08015a1c <rmw_init>:
 8015a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a20:	b083      	sub	sp, #12
 8015a22:	2800      	cmp	r0, #0
 8015a24:	f000 80d3 	beq.w	8015bce <rmw_init+0x1b2>
 8015a28:	460e      	mov	r6, r1
 8015a2a:	2900      	cmp	r1, #0
 8015a2c:	f000 80cf 	beq.w	8015bce <rmw_init+0x1b2>
 8015a30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015a32:	4605      	mov	r5, r0
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	f000 80ca 	beq.w	8015bce <rmw_init+0x1b2>
 8015a3a:	4b78      	ldr	r3, [pc, #480]	; (8015c1c <rmw_init+0x200>)
 8015a3c:	6880      	ldr	r0, [r0, #8]
 8015a3e:	681f      	ldr	r7, [r3, #0]
 8015a40:	b128      	cbz	r0, 8015a4e <rmw_init+0x32>
 8015a42:	4639      	mov	r1, r7
 8015a44:	f7ea fbc4 	bl	80001d0 <strcmp>
 8015a48:	2800      	cmp	r0, #0
 8015a4a:	f040 80ca 	bne.w	8015be2 <rmw_init+0x1c6>
 8015a4e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015a52:	4c73      	ldr	r4, [pc, #460]	; (8015c20 <rmw_init+0x204>)
 8015a54:	4973      	ldr	r1, [pc, #460]	; (8015c24 <rmw_init+0x208>)
 8015a56:	4874      	ldr	r0, [pc, #464]	; (8015c28 <rmw_init+0x20c>)
 8015a58:	60b7      	str	r7, [r6, #8]
 8015a5a:	e9c6 2300 	strd	r2, r3, [r6]
 8015a5e:	68eb      	ldr	r3, [r5, #12]
 8015a60:	64b3      	str	r3, [r6, #72]	; 0x48
 8015a62:	2201      	movs	r2, #1
 8015a64:	f7fa fbda 	bl	801021c <rmw_uxrce_init_session_memory>
 8015a68:	4620      	mov	r0, r4
 8015a6a:	4970      	ldr	r1, [pc, #448]	; (8015c2c <rmw_init+0x210>)
 8015a6c:	2204      	movs	r2, #4
 8015a6e:	f7fa fc15 	bl	801029c <rmw_uxrce_init_static_input_buffer_memory>
 8015a72:	f04f 0800 	mov.w	r8, #0
 8015a76:	486c      	ldr	r0, [pc, #432]	; (8015c28 <rmw_init+0x20c>)
 8015a78:	f884 800d 	strb.w	r8, [r4, #13]
 8015a7c:	f7ff feac 	bl	80157d8 <get_memory>
 8015a80:	2800      	cmp	r0, #0
 8015a82:	f000 80a9 	beq.w	8015bd8 <rmw_init+0x1bc>
 8015a86:	6884      	ldr	r4, [r0, #8]
 8015a88:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8015a8a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8015a8c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8015a90:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8015a94:	9101      	str	r1, [sp, #4]
 8015a96:	6a00      	ldr	r0, [r0, #32]
 8015a98:	9000      	str	r0, [sp, #0]
 8015a9a:	f104 0910 	add.w	r9, r4, #16
 8015a9e:	4661      	mov	r1, ip
 8015aa0:	4648      	mov	r0, r9
 8015aa2:	f000 fdd1 	bl	8016648 <uxr_set_custom_transport_callbacks>
 8015aa6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8015aaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015aae:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8015ab2:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8015ab6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8015aba:	495d      	ldr	r1, [pc, #372]	; (8015c30 <rmw_init+0x214>)
 8015abc:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8015ac0:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8015ac4:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8015ac8:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8015acc:	4859      	ldr	r0, [pc, #356]	; (8015c34 <rmw_init+0x218>)
 8015ace:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8015ad2:	2201      	movs	r2, #1
 8015ad4:	64f4      	str	r4, [r6, #76]	; 0x4c
 8015ad6:	f7fa fb81 	bl	80101dc <rmw_uxrce_init_node_memory>
 8015ada:	4957      	ldr	r1, [pc, #348]	; (8015c38 <rmw_init+0x21c>)
 8015adc:	4857      	ldr	r0, [pc, #348]	; (8015c3c <rmw_init+0x220>)
 8015ade:	2205      	movs	r2, #5
 8015ae0:	f7fa fb5c 	bl	801019c <rmw_uxrce_init_subscription_memory>
 8015ae4:	4956      	ldr	r1, [pc, #344]	; (8015c40 <rmw_init+0x224>)
 8015ae6:	4857      	ldr	r0, [pc, #348]	; (8015c44 <rmw_init+0x228>)
 8015ae8:	220a      	movs	r2, #10
 8015aea:	f7fa fb37 	bl	801015c <rmw_uxrce_init_publisher_memory>
 8015aee:	4956      	ldr	r1, [pc, #344]	; (8015c48 <rmw_init+0x22c>)
 8015af0:	4856      	ldr	r0, [pc, #344]	; (8015c4c <rmw_init+0x230>)
 8015af2:	2201      	movs	r2, #1
 8015af4:	f7fa faf2 	bl	80100dc <rmw_uxrce_init_service_memory>
 8015af8:	4955      	ldr	r1, [pc, #340]	; (8015c50 <rmw_init+0x234>)
 8015afa:	4856      	ldr	r0, [pc, #344]	; (8015c54 <rmw_init+0x238>)
 8015afc:	2201      	movs	r2, #1
 8015afe:	f7fa fb0d 	bl	801011c <rmw_uxrce_init_client_memory>
 8015b02:	4955      	ldr	r1, [pc, #340]	; (8015c58 <rmw_init+0x23c>)
 8015b04:	4855      	ldr	r0, [pc, #340]	; (8015c5c <rmw_init+0x240>)
 8015b06:	220f      	movs	r2, #15
 8015b08:	f7fa fba8 	bl	801025c <rmw_uxrce_init_topic_memory>
 8015b0c:	4954      	ldr	r1, [pc, #336]	; (8015c60 <rmw_init+0x244>)
 8015b0e:	4855      	ldr	r0, [pc, #340]	; (8015c64 <rmw_init+0x248>)
 8015b10:	2203      	movs	r2, #3
 8015b12:	f7fa fbe3 	bl	80102dc <rmw_uxrce_init_init_options_impl_memory>
 8015b16:	4954      	ldr	r1, [pc, #336]	; (8015c68 <rmw_init+0x24c>)
 8015b18:	4854      	ldr	r0, [pc, #336]	; (8015c6c <rmw_init+0x250>)
 8015b1a:	2204      	movs	r2, #4
 8015b1c:	f7fa fbfe 	bl	801031c <rmw_uxrce_init_wait_set_memory>
 8015b20:	4953      	ldr	r1, [pc, #332]	; (8015c70 <rmw_init+0x254>)
 8015b22:	4854      	ldr	r0, [pc, #336]	; (8015c74 <rmw_init+0x258>)
 8015b24:	2204      	movs	r2, #4
 8015b26:	f7fa fc19 	bl	801035c <rmw_uxrce_init_guard_condition_memory>
 8015b2a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8015b2c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015b2e:	4642      	mov	r2, r8
 8015b30:	f000 fb18 	bl	8016164 <rmw_uxrce_transport_init>
 8015b34:	4607      	mov	r7, r0
 8015b36:	2800      	cmp	r0, #0
 8015b38:	d158      	bne.n	8015bec <rmw_init+0x1d0>
 8015b3a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8015b3c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8015b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015b42:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8015b46:	4628      	mov	r0, r5
 8015b48:	f7fc f84e 	bl	8011be8 <uxr_init_session>
 8015b4c:	494a      	ldr	r1, [pc, #296]	; (8015c78 <rmw_init+0x25c>)
 8015b4e:	4622      	mov	r2, r4
 8015b50:	4628      	mov	r0, r5
 8015b52:	f7fc f86d 	bl	8011c30 <uxr_set_topic_callback>
 8015b56:	4949      	ldr	r1, [pc, #292]	; (8015c7c <rmw_init+0x260>)
 8015b58:	463a      	mov	r2, r7
 8015b5a:	4628      	mov	r0, r5
 8015b5c:	f7fc f864 	bl	8011c28 <uxr_set_status_callback>
 8015b60:	4947      	ldr	r1, [pc, #284]	; (8015c80 <rmw_init+0x264>)
 8015b62:	463a      	mov	r2, r7
 8015b64:	4628      	mov	r0, r5
 8015b66:	f7fc f867 	bl	8011c38 <uxr_set_request_callback>
 8015b6a:	4946      	ldr	r1, [pc, #280]	; (8015c84 <rmw_init+0x268>)
 8015b6c:	463a      	mov	r2, r7
 8015b6e:	4628      	mov	r0, r5
 8015b70:	f7fc f866 	bl	8011c40 <uxr_set_reply_callback>
 8015b74:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015b78:	2304      	movs	r3, #4
 8015b7a:	0092      	lsls	r2, r2, #2
 8015b7c:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8015b80:	4628      	mov	r0, r5
 8015b82:	f7fc f89b 	bl	8011cbc <uxr_create_input_reliable_stream>
 8015b86:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015b8a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8015b8e:	0092      	lsls	r2, r2, #2
 8015b90:	2304      	movs	r3, #4
 8015b92:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8015b96:	4628      	mov	r0, r5
 8015b98:	f7fc f868 	bl	8011c6c <uxr_create_output_reliable_stream>
 8015b9c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8015ba0:	4628      	mov	r0, r5
 8015ba2:	f7fc f885 	bl	8011cb0 <uxr_create_input_best_effort_stream>
 8015ba6:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8015baa:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8015bae:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015bb2:	3114      	adds	r1, #20
 8015bb4:	4628      	mov	r0, r5
 8015bb6:	f7fc f847 	bl	8011c48 <uxr_create_output_best_effort_stream>
 8015bba:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8015bbe:	4628      	mov	r0, r5
 8015bc0:	f7fc fd98 	bl	80126f4 <uxr_create_session>
 8015bc4:	b1f8      	cbz	r0, 8015c06 <rmw_init+0x1ea>
 8015bc6:	4638      	mov	r0, r7
 8015bc8:	b003      	add	sp, #12
 8015bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bce:	270b      	movs	r7, #11
 8015bd0:	4638      	mov	r0, r7
 8015bd2:	b003      	add	sp, #12
 8015bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bd8:	2701      	movs	r7, #1
 8015bda:	4638      	mov	r0, r7
 8015bdc:	b003      	add	sp, #12
 8015bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015be2:	270c      	movs	r7, #12
 8015be4:	4638      	mov	r0, r7
 8015be6:	b003      	add	sp, #12
 8015be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bec:	4648      	mov	r0, r9
 8015bee:	f000 fd6d 	bl	80166cc <uxr_close_custom_transport>
 8015bf2:	480d      	ldr	r0, [pc, #52]	; (8015c28 <rmw_init+0x20c>)
 8015bf4:	4621      	mov	r1, r4
 8015bf6:	f7ff fdff 	bl	80157f8 <put_memory>
 8015bfa:	4638      	mov	r0, r7
 8015bfc:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8015c00:	b003      	add	sp, #12
 8015c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c06:	4648      	mov	r0, r9
 8015c08:	f000 fd60 	bl	80166cc <uxr_close_custom_transport>
 8015c0c:	4806      	ldr	r0, [pc, #24]	; (8015c28 <rmw_init+0x20c>)
 8015c0e:	4621      	mov	r1, r4
 8015c10:	f7ff fdf2 	bl	80157f8 <put_memory>
 8015c14:	64f7      	str	r7, [r6, #76]	; 0x4c
 8015c16:	2701      	movs	r7, #1
 8015c18:	e7d5      	b.n	8015bc6 <rmw_init+0x1aa>
 8015c1a:	bf00      	nop
 8015c1c:	0801a6b4 	.word	0x0801a6b4
 8015c20:	20012bcc 	.word	0x20012bcc
 8015c24:	2000ee78 	.word	0x2000ee78
 8015c28:	20012bbc 	.word	0x20012bbc
 8015c2c:	20010420 	.word	0x20010420
 8015c30:	2000e49c 	.word	0x2000e49c
 8015c34:	20012b8c 	.word	0x20012b8c
 8015c38:	20012520 	.word	0x20012520
 8015c3c:	20012bdc 	.word	0x20012bdc
 8015c40:	2000e540 	.word	0x2000e540
 8015c44:	20012b9c 	.word	0x20012b9c
 8015c48:	2000edb0 	.word	0x2000edb0
 8015c4c:	20012bac 	.word	0x20012bac
 8015c50:	2000e2d0 	.word	0x2000e2d0
 8015c54:	2000e2c0 	.word	0x2000e2c0
 8015c58:	20012958 	.word	0x20012958
 8015c5c:	20012bec 	.word	0x20012bec
 8015c60:	2000e418 	.word	0x2000e418
 8015c64:	20012b7c 	.word	0x20012b7c
 8015c68:	20012afc 	.word	0x20012afc
 8015c6c:	20012bfc 	.word	0x20012bfc
 8015c70:	2000e398 	.word	0x2000e398
 8015c74:	20012b6c 	.word	0x20012b6c
 8015c78:	080182c5 	.word	0x080182c5
 8015c7c:	080182bd 	.word	0x080182bd
 8015c80:	0801835d 	.word	0x0801835d
 8015c84:	080183f9 	.word	0x080183f9

08015c88 <rmw_context_fini>:
 8015c88:	4b17      	ldr	r3, [pc, #92]	; (8015ce8 <rmw_context_fini+0x60>)
 8015c8a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8015c8c:	b570      	push	{r4, r5, r6, lr}
 8015c8e:	681c      	ldr	r4, [r3, #0]
 8015c90:	4605      	mov	r5, r0
 8015c92:	b334      	cbz	r4, 8015ce2 <rmw_context_fini+0x5a>
 8015c94:	2600      	movs	r6, #0
 8015c96:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8015c9a:	6902      	ldr	r2, [r0, #16]
 8015c9c:	428a      	cmp	r2, r1
 8015c9e:	d018      	beq.n	8015cd2 <rmw_context_fini+0x4a>
 8015ca0:	2c00      	cmp	r4, #0
 8015ca2:	d1f8      	bne.n	8015c96 <rmw_context_fini+0xe>
 8015ca4:	b189      	cbz	r1, 8015cca <rmw_context_fini+0x42>
 8015ca6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8015caa:	789b      	ldrb	r3, [r3, #2]
 8015cac:	2b01      	cmp	r3, #1
 8015cae:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8015cb2:	bf14      	ite	ne
 8015cb4:	210a      	movne	r1, #10
 8015cb6:	2100      	moveq	r1, #0
 8015cb8:	f7fc fcf4 	bl	80126a4 <uxr_delete_session_retries>
 8015cbc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015cbe:	f7fa fb6d 	bl	801039c <rmw_uxrce_fini_session_memory>
 8015cc2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8015cc4:	3010      	adds	r0, #16
 8015cc6:	f000 fd01 	bl	80166cc <uxr_close_custom_transport>
 8015cca:	2300      	movs	r3, #0
 8015ccc:	64eb      	str	r3, [r5, #76]	; 0x4c
 8015cce:	4630      	mov	r0, r6
 8015cd0:	bd70      	pop	{r4, r5, r6, pc}
 8015cd2:	3018      	adds	r0, #24
 8015cd4:	f000 f922 	bl	8015f1c <rmw_destroy_node>
 8015cd8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8015cda:	4606      	mov	r6, r0
 8015cdc:	2c00      	cmp	r4, #0
 8015cde:	d1da      	bne.n	8015c96 <rmw_context_fini+0xe>
 8015ce0:	e7e0      	b.n	8015ca4 <rmw_context_fini+0x1c>
 8015ce2:	4626      	mov	r6, r4
 8015ce4:	e7de      	b.n	8015ca4 <rmw_context_fini+0x1c>
 8015ce6:	bf00      	nop
 8015ce8:	20012b8c 	.word	0x20012b8c

08015cec <create_topic>:
 8015cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cf0:	4605      	mov	r5, r0
 8015cf2:	b084      	sub	sp, #16
 8015cf4:	482c      	ldr	r0, [pc, #176]	; (8015da8 <create_topic+0xbc>)
 8015cf6:	460f      	mov	r7, r1
 8015cf8:	4616      	mov	r6, r2
 8015cfa:	f7ff fd6d 	bl	80157d8 <get_memory>
 8015cfe:	4604      	mov	r4, r0
 8015d00:	2800      	cmp	r0, #0
 8015d02:	d038      	beq.n	8015d76 <create_topic+0x8a>
 8015d04:	692b      	ldr	r3, [r5, #16]
 8015d06:	6884      	ldr	r4, [r0, #8]
 8015d08:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8015db0 <create_topic+0xc4>
 8015d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015d10:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8015d14:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8015d18:	1c42      	adds	r2, r0, #1
 8015d1a:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8015d1e:	2102      	movs	r1, #2
 8015d20:	f7fb fea4 	bl	8011a6c <uxr_object_id>
 8015d24:	223c      	movs	r2, #60	; 0x3c
 8015d26:	6120      	str	r0, [r4, #16]
 8015d28:	4641      	mov	r1, r8
 8015d2a:	4638      	mov	r0, r7
 8015d2c:	f7fa fc6e 	bl	801060c <generate_topic_name>
 8015d30:	4607      	mov	r7, r0
 8015d32:	b320      	cbz	r0, 8015d7e <create_topic+0x92>
 8015d34:	4f1d      	ldr	r7, [pc, #116]	; (8015dac <create_topic+0xc0>)
 8015d36:	4630      	mov	r0, r6
 8015d38:	2264      	movs	r2, #100	; 0x64
 8015d3a:	4639      	mov	r1, r7
 8015d3c:	f7fa fc36 	bl	80105ac <generate_type_name>
 8015d40:	4606      	mov	r6, r0
 8015d42:	b320      	cbz	r0, 8015d8e <create_topic+0xa2>
 8015d44:	6928      	ldr	r0, [r5, #16]
 8015d46:	2306      	movs	r3, #6
 8015d48:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015d4c:	f8cd 8000 	str.w	r8, [sp]
 8015d50:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015d54:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015d58:	696b      	ldr	r3, [r5, #20]
 8015d5a:	6811      	ldr	r1, [r2, #0]
 8015d5c:	6922      	ldr	r2, [r4, #16]
 8015d5e:	f7fb fda9 	bl	80118b4 <uxr_buffer_create_topic_bin>
 8015d62:	4602      	mov	r2, r0
 8015d64:	6928      	ldr	r0, [r5, #16]
 8015d66:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015d6a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015d6e:	f7fa fbe7 	bl	8010540 <run_xrce_session>
 8015d72:	4605      	mov	r5, r0
 8015d74:	b198      	cbz	r0, 8015d9e <create_topic+0xb2>
 8015d76:	4620      	mov	r0, r4
 8015d78:	b004      	add	sp, #16
 8015d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d7e:	4620      	mov	r0, r4
 8015d80:	f7fa fb82 	bl	8010488 <rmw_uxrce_fini_topic_memory>
 8015d84:	463c      	mov	r4, r7
 8015d86:	4620      	mov	r0, r4
 8015d88:	b004      	add	sp, #16
 8015d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d8e:	4620      	mov	r0, r4
 8015d90:	f7fa fb7a 	bl	8010488 <rmw_uxrce_fini_topic_memory>
 8015d94:	4634      	mov	r4, r6
 8015d96:	4620      	mov	r0, r4
 8015d98:	b004      	add	sp, #16
 8015d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d9e:	4620      	mov	r0, r4
 8015da0:	f7fa fb72 	bl	8010488 <rmw_uxrce_fini_topic_memory>
 8015da4:	462c      	mov	r4, r5
 8015da6:	e7e6      	b.n	8015d76 <create_topic+0x8a>
 8015da8:	20012bec 	.word	0x20012bec
 8015dac:	20012c68 	.word	0x20012c68
 8015db0:	20012c2c 	.word	0x20012c2c

08015db4 <destroy_topic>:
 8015db4:	b538      	push	{r3, r4, r5, lr}
 8015db6:	6985      	ldr	r5, [r0, #24]
 8015db8:	b1d5      	cbz	r5, 8015df0 <destroy_topic+0x3c>
 8015dba:	4604      	mov	r4, r0
 8015dbc:	6928      	ldr	r0, [r5, #16]
 8015dbe:	6922      	ldr	r2, [r4, #16]
 8015dc0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015dc4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015dc8:	6819      	ldr	r1, [r3, #0]
 8015dca:	f7fb fcf5 	bl	80117b8 <uxr_buffer_delete_entity>
 8015dce:	4602      	mov	r2, r0
 8015dd0:	6928      	ldr	r0, [r5, #16]
 8015dd2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015dd6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015dda:	f7fa fbb1 	bl	8010540 <run_xrce_session>
 8015dde:	2800      	cmp	r0, #0
 8015de0:	4620      	mov	r0, r4
 8015de2:	bf14      	ite	ne
 8015de4:	2400      	movne	r4, #0
 8015de6:	2402      	moveq	r4, #2
 8015de8:	f7fa fb4e 	bl	8010488 <rmw_uxrce_fini_topic_memory>
 8015dec:	4620      	mov	r0, r4
 8015dee:	bd38      	pop	{r3, r4, r5, pc}
 8015df0:	2401      	movs	r4, #1
 8015df2:	4620      	mov	r0, r4
 8015df4:	bd38      	pop	{r3, r4, r5, pc}
 8015df6:	bf00      	nop

08015df8 <create_node>:
 8015df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015dfc:	b083      	sub	sp, #12
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d05f      	beq.n	8015ec2 <create_node+0xca>
 8015e02:	4606      	mov	r6, r0
 8015e04:	4835      	ldr	r0, [pc, #212]	; (8015edc <create_node+0xe4>)
 8015e06:	460f      	mov	r7, r1
 8015e08:	4690      	mov	r8, r2
 8015e0a:	461d      	mov	r5, r3
 8015e0c:	f7ff fce4 	bl	80157d8 <get_memory>
 8015e10:	2800      	cmp	r0, #0
 8015e12:	d056      	beq.n	8015ec2 <create_node+0xca>
 8015e14:	6884      	ldr	r4, [r0, #8]
 8015e16:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015e18:	6123      	str	r3, [r4, #16]
 8015e1a:	f7ff fd01 	bl	8015820 <rmw_get_implementation_identifier>
 8015e1e:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8015e22:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8015e26:	f8c4 9020 	str.w	r9, [r4, #32]
 8015e2a:	4630      	mov	r0, r6
 8015e2c:	f7ea f9da 	bl	80001e4 <strlen>
 8015e30:	1c42      	adds	r2, r0, #1
 8015e32:	2a3c      	cmp	r2, #60	; 0x3c
 8015e34:	f104 0518 	add.w	r5, r4, #24
 8015e38:	d840      	bhi.n	8015ebc <create_node+0xc4>
 8015e3a:	4648      	mov	r0, r9
 8015e3c:	4631      	mov	r1, r6
 8015e3e:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8015e42:	f002 fd13 	bl	801886c <memcpy>
 8015e46:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8015e4a:	4638      	mov	r0, r7
 8015e4c:	f7ea f9ca 	bl	80001e4 <strlen>
 8015e50:	1c42      	adds	r2, r0, #1
 8015e52:	2a3c      	cmp	r2, #60	; 0x3c
 8015e54:	d832      	bhi.n	8015ebc <create_node+0xc4>
 8015e56:	4639      	mov	r1, r7
 8015e58:	4648      	mov	r0, r9
 8015e5a:	f002 fd07 	bl	801886c <memcpy>
 8015e5e:	6923      	ldr	r3, [r4, #16]
 8015e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e64:	2101      	movs	r1, #1
 8015e66:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8015e6a:	1842      	adds	r2, r0, r1
 8015e6c:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8015e70:	f7fb fdfc 	bl	8011a6c <uxr_object_id>
 8015e74:	6160      	str	r0, [r4, #20]
 8015e76:	783b      	ldrb	r3, [r7, #0]
 8015e78:	2b2f      	cmp	r3, #47	; 0x2f
 8015e7a:	d127      	bne.n	8015ecc <create_node+0xd4>
 8015e7c:	787b      	ldrb	r3, [r7, #1]
 8015e7e:	bb2b      	cbnz	r3, 8015ecc <create_node+0xd4>
 8015e80:	4a17      	ldr	r2, [pc, #92]	; (8015ee0 <create_node+0xe8>)
 8015e82:	4818      	ldr	r0, [pc, #96]	; (8015ee4 <create_node+0xec>)
 8015e84:	4633      	mov	r3, r6
 8015e86:	213c      	movs	r1, #60	; 0x3c
 8015e88:	f002 ff02 	bl	8018c90 <sniprintf>
 8015e8c:	6920      	ldr	r0, [r4, #16]
 8015e8e:	4915      	ldr	r1, [pc, #84]	; (8015ee4 <create_node+0xec>)
 8015e90:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015e94:	9100      	str	r1, [sp, #0]
 8015e96:	2106      	movs	r1, #6
 8015e98:	9101      	str	r1, [sp, #4]
 8015e9a:	6811      	ldr	r1, [r2, #0]
 8015e9c:	6962      	ldr	r2, [r4, #20]
 8015e9e:	fa1f f388 	uxth.w	r3, r8
 8015ea2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015ea6:	f7fb fcd3 	bl	8011850 <uxr_buffer_create_participant_bin>
 8015eaa:	4602      	mov	r2, r0
 8015eac:	6920      	ldr	r0, [r4, #16]
 8015eae:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8015eb2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015eb6:	f7fa fb43 	bl	8010540 <run_xrce_session>
 8015eba:	b918      	cbnz	r0, 8015ec4 <create_node+0xcc>
 8015ebc:	4628      	mov	r0, r5
 8015ebe:	f7fa fa73 	bl	80103a8 <rmw_uxrce_fini_node_memory>
 8015ec2:	2500      	movs	r5, #0
 8015ec4:	4628      	mov	r0, r5
 8015ec6:	b003      	add	sp, #12
 8015ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ecc:	4a06      	ldr	r2, [pc, #24]	; (8015ee8 <create_node+0xf0>)
 8015ece:	9600      	str	r6, [sp, #0]
 8015ed0:	463b      	mov	r3, r7
 8015ed2:	213c      	movs	r1, #60	; 0x3c
 8015ed4:	4803      	ldr	r0, [pc, #12]	; (8015ee4 <create_node+0xec>)
 8015ed6:	f002 fedb 	bl	8018c90 <sniprintf>
 8015eda:	e7d7      	b.n	8015e8c <create_node+0x94>
 8015edc:	20012b8c 	.word	0x20012b8c
 8015ee0:	0801a0cc 	.word	0x0801a0cc
 8015ee4:	20012ccc 	.word	0x20012ccc
 8015ee8:	0801a25c 	.word	0x0801a25c

08015eec <rmw_create_node>:
 8015eec:	b199      	cbz	r1, 8015f16 <rmw_create_node+0x2a>
 8015eee:	780b      	ldrb	r3, [r1, #0]
 8015ef0:	468c      	mov	ip, r1
 8015ef2:	b183      	cbz	r3, 8015f16 <rmw_create_node+0x2a>
 8015ef4:	b410      	push	{r4}
 8015ef6:	4614      	mov	r4, r2
 8015ef8:	b14a      	cbz	r2, 8015f0e <rmw_create_node+0x22>
 8015efa:	7813      	ldrb	r3, [r2, #0]
 8015efc:	b13b      	cbz	r3, 8015f0e <rmw_create_node+0x22>
 8015efe:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8015f00:	4603      	mov	r3, r0
 8015f02:	4621      	mov	r1, r4
 8015f04:	4660      	mov	r0, ip
 8015f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f0a:	f7ff bf75 	b.w	8015df8 <create_node>
 8015f0e:	2000      	movs	r0, #0
 8015f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f14:	4770      	bx	lr
 8015f16:	2000      	movs	r0, #0
 8015f18:	4770      	bx	lr
 8015f1a:	bf00      	nop

08015f1c <rmw_destroy_node>:
 8015f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f1e:	2800      	cmp	r0, #0
 8015f20:	d066      	beq.n	8015ff0 <rmw_destroy_node+0xd4>
 8015f22:	4607      	mov	r7, r0
 8015f24:	6800      	ldr	r0, [r0, #0]
 8015f26:	b128      	cbz	r0, 8015f34 <rmw_destroy_node+0x18>
 8015f28:	4b34      	ldr	r3, [pc, #208]	; (8015ffc <rmw_destroy_node+0xe0>)
 8015f2a:	6819      	ldr	r1, [r3, #0]
 8015f2c:	f7ea f950 	bl	80001d0 <strcmp>
 8015f30:	2800      	cmp	r0, #0
 8015f32:	d15d      	bne.n	8015ff0 <rmw_destroy_node+0xd4>
 8015f34:	687c      	ldr	r4, [r7, #4]
 8015f36:	2c00      	cmp	r4, #0
 8015f38:	d05a      	beq.n	8015ff0 <rmw_destroy_node+0xd4>
 8015f3a:	4b31      	ldr	r3, [pc, #196]	; (8016000 <rmw_destroy_node+0xe4>)
 8015f3c:	681d      	ldr	r5, [r3, #0]
 8015f3e:	2d00      	cmp	r5, #0
 8015f40:	d059      	beq.n	8015ff6 <rmw_destroy_node+0xda>
 8015f42:	2600      	movs	r6, #0
 8015f44:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8015f48:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8015f4c:	429c      	cmp	r4, r3
 8015f4e:	d047      	beq.n	8015fe0 <rmw_destroy_node+0xc4>
 8015f50:	2d00      	cmp	r5, #0
 8015f52:	d1f7      	bne.n	8015f44 <rmw_destroy_node+0x28>
 8015f54:	4b2b      	ldr	r3, [pc, #172]	; (8016004 <rmw_destroy_node+0xe8>)
 8015f56:	681d      	ldr	r5, [r3, #0]
 8015f58:	b15d      	cbz	r5, 8015f72 <rmw_destroy_node+0x56>
 8015f5a:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8015f5e:	6a0b      	ldr	r3, [r1, #32]
 8015f60:	429c      	cmp	r4, r3
 8015f62:	d1f9      	bne.n	8015f58 <rmw_destroy_node+0x3c>
 8015f64:	317c      	adds	r1, #124	; 0x7c
 8015f66:	4638      	mov	r0, r7
 8015f68:	f000 f89c 	bl	80160a4 <rmw_destroy_subscription>
 8015f6c:	4606      	mov	r6, r0
 8015f6e:	2d00      	cmp	r5, #0
 8015f70:	d1f3      	bne.n	8015f5a <rmw_destroy_node+0x3e>
 8015f72:	4b25      	ldr	r3, [pc, #148]	; (8016008 <rmw_destroy_node+0xec>)
 8015f74:	681d      	ldr	r5, [r3, #0]
 8015f76:	b15d      	cbz	r5, 8015f90 <rmw_destroy_node+0x74>
 8015f78:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8015f7c:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015f7e:	429c      	cmp	r4, r3
 8015f80:	d1f9      	bne.n	8015f76 <rmw_destroy_node+0x5a>
 8015f82:	317c      	adds	r1, #124	; 0x7c
 8015f84:	4638      	mov	r0, r7
 8015f86:	f000 f849 	bl	801601c <rmw_destroy_service>
 8015f8a:	4606      	mov	r6, r0
 8015f8c:	2d00      	cmp	r5, #0
 8015f8e:	d1f3      	bne.n	8015f78 <rmw_destroy_node+0x5c>
 8015f90:	4b1e      	ldr	r3, [pc, #120]	; (801600c <rmw_destroy_node+0xf0>)
 8015f92:	681d      	ldr	r5, [r3, #0]
 8015f94:	b15d      	cbz	r5, 8015fae <rmw_destroy_node+0x92>
 8015f96:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8015f9a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015f9c:	429c      	cmp	r4, r3
 8015f9e:	d1f9      	bne.n	8015f94 <rmw_destroy_node+0x78>
 8015fa0:	317c      	adds	r1, #124	; 0x7c
 8015fa2:	4638      	mov	r0, r7
 8015fa4:	f002 fa72 	bl	801848c <rmw_destroy_client>
 8015fa8:	4606      	mov	r6, r0
 8015faa:	2d00      	cmp	r5, #0
 8015fac:	d1f3      	bne.n	8015f96 <rmw_destroy_node+0x7a>
 8015fae:	6920      	ldr	r0, [r4, #16]
 8015fb0:	6962      	ldr	r2, [r4, #20]
 8015fb2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015fb6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015fba:	6819      	ldr	r1, [r3, #0]
 8015fbc:	f7fb fbfc 	bl	80117b8 <uxr_buffer_delete_entity>
 8015fc0:	4602      	mov	r2, r0
 8015fc2:	6920      	ldr	r0, [r4, #16]
 8015fc4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015fc8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015fcc:	f7fa fab8 	bl	8010540 <run_xrce_session>
 8015fd0:	2800      	cmp	r0, #0
 8015fd2:	bf08      	it	eq
 8015fd4:	2602      	moveq	r6, #2
 8015fd6:	4638      	mov	r0, r7
 8015fd8:	f7fa f9e6 	bl	80103a8 <rmw_uxrce_fini_node_memory>
 8015fdc:	4630      	mov	r0, r6
 8015fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fe0:	3184      	adds	r1, #132	; 0x84
 8015fe2:	4638      	mov	r0, r7
 8015fe4:	f7fa f828 	bl	8010038 <rmw_destroy_publisher>
 8015fe8:	4606      	mov	r6, r0
 8015fea:	2d00      	cmp	r5, #0
 8015fec:	d1aa      	bne.n	8015f44 <rmw_destroy_node+0x28>
 8015fee:	e7b1      	b.n	8015f54 <rmw_destroy_node+0x38>
 8015ff0:	2601      	movs	r6, #1
 8015ff2:	4630      	mov	r0, r6
 8015ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ff6:	462e      	mov	r6, r5
 8015ff8:	e7ac      	b.n	8015f54 <rmw_destroy_node+0x38>
 8015ffa:	bf00      	nop
 8015ffc:	0801a6b4 	.word	0x0801a6b4
 8016000:	20012b9c 	.word	0x20012b9c
 8016004:	20012bdc 	.word	0x20012bdc
 8016008:	20012bac 	.word	0x20012bac
 801600c:	2000e2c0 	.word	0x2000e2c0

08016010 <rmw_node_get_graph_guard_condition>:
 8016010:	6843      	ldr	r3, [r0, #4]
 8016012:	6918      	ldr	r0, [r3, #16]
 8016014:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8016018:	4770      	bx	lr
 801601a:	bf00      	nop

0801601c <rmw_destroy_service>:
 801601c:	b570      	push	{r4, r5, r6, lr}
 801601e:	b128      	cbz	r0, 801602c <rmw_destroy_service+0x10>
 8016020:	4604      	mov	r4, r0
 8016022:	6800      	ldr	r0, [r0, #0]
 8016024:	460d      	mov	r5, r1
 8016026:	f7fa fb0b 	bl	8010640 <is_uxrce_rmw_identifier_valid>
 801602a:	b910      	cbnz	r0, 8016032 <rmw_destroy_service+0x16>
 801602c:	2401      	movs	r4, #1
 801602e:	4620      	mov	r0, r4
 8016030:	bd70      	pop	{r4, r5, r6, pc}
 8016032:	6863      	ldr	r3, [r4, #4]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d0f9      	beq.n	801602c <rmw_destroy_service+0x10>
 8016038:	2d00      	cmp	r5, #0
 801603a:	d0f7      	beq.n	801602c <rmw_destroy_service+0x10>
 801603c:	6828      	ldr	r0, [r5, #0]
 801603e:	f7fa faff 	bl	8010640 <is_uxrce_rmw_identifier_valid>
 8016042:	2800      	cmp	r0, #0
 8016044:	d0f2      	beq.n	801602c <rmw_destroy_service+0x10>
 8016046:	686e      	ldr	r6, [r5, #4]
 8016048:	2e00      	cmp	r6, #0
 801604a:	d0ef      	beq.n	801602c <rmw_destroy_service+0x10>
 801604c:	6864      	ldr	r4, [r4, #4]
 801604e:	6932      	ldr	r2, [r6, #16]
 8016050:	6920      	ldr	r0, [r4, #16]
 8016052:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016056:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801605a:	6819      	ldr	r1, [r3, #0]
 801605c:	f001 f870 	bl	8017140 <uxr_buffer_cancel_data>
 8016060:	4602      	mov	r2, r0
 8016062:	6920      	ldr	r0, [r4, #16]
 8016064:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016068:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801606c:	f7fa fa68 	bl	8010540 <run_xrce_session>
 8016070:	6920      	ldr	r0, [r4, #16]
 8016072:	6932      	ldr	r2, [r6, #16]
 8016074:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016078:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801607c:	6819      	ldr	r1, [r3, #0]
 801607e:	f7fb fb9b 	bl	80117b8 <uxr_buffer_delete_entity>
 8016082:	4602      	mov	r2, r0
 8016084:	6920      	ldr	r0, [r4, #16]
 8016086:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801608a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801608e:	f7fa fa57 	bl	8010540 <run_xrce_session>
 8016092:	2800      	cmp	r0, #0
 8016094:	4628      	mov	r0, r5
 8016096:	bf14      	ite	ne
 8016098:	2400      	movne	r4, #0
 801609a:	2402      	moveq	r4, #2
 801609c:	f7fa f9c8 	bl	8010430 <rmw_uxrce_fini_service_memory>
 80160a0:	e7c5      	b.n	801602e <rmw_destroy_service+0x12>
 80160a2:	bf00      	nop

080160a4 <rmw_destroy_subscription>:
 80160a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160a6:	b128      	cbz	r0, 80160b4 <rmw_destroy_subscription+0x10>
 80160a8:	4604      	mov	r4, r0
 80160aa:	6800      	ldr	r0, [r0, #0]
 80160ac:	460d      	mov	r5, r1
 80160ae:	f7fa fac7 	bl	8010640 <is_uxrce_rmw_identifier_valid>
 80160b2:	b910      	cbnz	r0, 80160ba <rmw_destroy_subscription+0x16>
 80160b4:	2401      	movs	r4, #1
 80160b6:	4620      	mov	r0, r4
 80160b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160ba:	6863      	ldr	r3, [r4, #4]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d0f9      	beq.n	80160b4 <rmw_destroy_subscription+0x10>
 80160c0:	2d00      	cmp	r5, #0
 80160c2:	d0f7      	beq.n	80160b4 <rmw_destroy_subscription+0x10>
 80160c4:	6828      	ldr	r0, [r5, #0]
 80160c6:	f7fa fabb 	bl	8010640 <is_uxrce_rmw_identifier_valid>
 80160ca:	2800      	cmp	r0, #0
 80160cc:	d0f2      	beq.n	80160b4 <rmw_destroy_subscription+0x10>
 80160ce:	686c      	ldr	r4, [r5, #4]
 80160d0:	2c00      	cmp	r4, #0
 80160d2:	d0ef      	beq.n	80160b4 <rmw_destroy_subscription+0x10>
 80160d4:	6a26      	ldr	r6, [r4, #32]
 80160d6:	6962      	ldr	r2, [r4, #20]
 80160d8:	6930      	ldr	r0, [r6, #16]
 80160da:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80160de:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80160e2:	6819      	ldr	r1, [r3, #0]
 80160e4:	f001 f82c 	bl	8017140 <uxr_buffer_cancel_data>
 80160e8:	4602      	mov	r2, r0
 80160ea:	6930      	ldr	r0, [r6, #16]
 80160ec:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80160f0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80160f4:	f7fa fa24 	bl	8010540 <run_xrce_session>
 80160f8:	69e0      	ldr	r0, [r4, #28]
 80160fa:	f7ff fe5b 	bl	8015db4 <destroy_topic>
 80160fe:	6a23      	ldr	r3, [r4, #32]
 8016100:	6962      	ldr	r2, [r4, #20]
 8016102:	6918      	ldr	r0, [r3, #16]
 8016104:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016108:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801610c:	6819      	ldr	r1, [r3, #0]
 801610e:	f7fb fb53 	bl	80117b8 <uxr_buffer_delete_entity>
 8016112:	6a23      	ldr	r3, [r4, #32]
 8016114:	6922      	ldr	r2, [r4, #16]
 8016116:	691b      	ldr	r3, [r3, #16]
 8016118:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 801611c:	4604      	mov	r4, r0
 801611e:	6809      	ldr	r1, [r1, #0]
 8016120:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8016124:	f7fb fb48 	bl	80117b8 <uxr_buffer_delete_entity>
 8016128:	6937      	ldr	r7, [r6, #16]
 801612a:	4622      	mov	r2, r4
 801612c:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8016130:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8016134:	4604      	mov	r4, r0
 8016136:	4638      	mov	r0, r7
 8016138:	f7fa fa02 	bl	8010540 <run_xrce_session>
 801613c:	6936      	ldr	r6, [r6, #16]
 801613e:	4622      	mov	r2, r4
 8016140:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8016144:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8016148:	4604      	mov	r4, r0
 801614a:	4630      	mov	r0, r6
 801614c:	f7fa f9f8 	bl	8010540 <run_xrce_session>
 8016150:	b12c      	cbz	r4, 801615e <rmw_destroy_subscription+0xba>
 8016152:	b120      	cbz	r0, 801615e <rmw_destroy_subscription+0xba>
 8016154:	2400      	movs	r4, #0
 8016156:	4628      	mov	r0, r5
 8016158:	f7fa f954 	bl	8010404 <rmw_uxrce_fini_subscription_memory>
 801615c:	e7ab      	b.n	80160b6 <rmw_destroy_subscription+0x12>
 801615e:	2402      	movs	r4, #2
 8016160:	e7f9      	b.n	8016156 <rmw_destroy_subscription+0xb2>
 8016162:	bf00      	nop

08016164 <rmw_uxrce_transport_init>:
 8016164:	b508      	push	{r3, lr}
 8016166:	b108      	cbz	r0, 801616c <rmw_uxrce_transport_init+0x8>
 8016168:	f100 0210 	add.w	r2, r0, #16
 801616c:	b139      	cbz	r1, 801617e <rmw_uxrce_transport_init+0x1a>
 801616e:	6949      	ldr	r1, [r1, #20]
 8016170:	4610      	mov	r0, r2
 8016172:	f000 fa77 	bl	8016664 <uxr_init_custom_transport>
 8016176:	f080 0001 	eor.w	r0, r0, #1
 801617a:	b2c0      	uxtb	r0, r0
 801617c:	bd08      	pop	{r3, pc}
 801617e:	4b04      	ldr	r3, [pc, #16]	; (8016190 <rmw_uxrce_transport_init+0x2c>)
 8016180:	4610      	mov	r0, r2
 8016182:	6859      	ldr	r1, [r3, #4]
 8016184:	f000 fa6e 	bl	8016664 <uxr_init_custom_transport>
 8016188:	f080 0001 	eor.w	r0, r0, #1
 801618c:	b2c0      	uxtb	r0, r0
 801618e:	bd08      	pop	{r3, pc}
 8016190:	2000e2a4 	.word	0x2000e2a4

08016194 <rmw_uros_epoch_nanos>:
 8016194:	4b05      	ldr	r3, [pc, #20]	; (80161ac <rmw_uros_epoch_nanos+0x18>)
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	b123      	cbz	r3, 80161a4 <rmw_uros_epoch_nanos+0x10>
 801619a:	6898      	ldr	r0, [r3, #8]
 801619c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80161a0:	f7fb bda8 	b.w	8011cf4 <uxr_epoch_nanos>
 80161a4:	2000      	movs	r0, #0
 80161a6:	2100      	movs	r1, #0
 80161a8:	4770      	bx	lr
 80161aa:	bf00      	nop
 80161ac:	20012bbc 	.word	0x20012bbc

080161b0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80161b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161b4:	6805      	ldr	r5, [r0, #0]
 80161b6:	4604      	mov	r4, r0
 80161b8:	4628      	mov	r0, r5
 80161ba:	460e      	mov	r6, r1
 80161bc:	f7ea f808 	bl	80001d0 <strcmp>
 80161c0:	b1c8      	cbz	r0, 80161f6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80161c2:	4b11      	ldr	r3, [pc, #68]	; (8016208 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	429d      	cmp	r5, r3
 80161c8:	d112      	bne.n	80161f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80161ca:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80161ce:	f8d8 4000 	ldr.w	r4, [r8]
 80161d2:	b16c      	cbz	r4, 80161f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80161d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80161d8:	2700      	movs	r7, #0
 80161da:	3d04      	subs	r5, #4
 80161dc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80161e0:	4631      	mov	r1, r6
 80161e2:	f7e9 fff5 	bl	80001d0 <strcmp>
 80161e6:	00bb      	lsls	r3, r7, #2
 80161e8:	b140      	cbz	r0, 80161fc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80161ea:	3701      	adds	r7, #1
 80161ec:	42bc      	cmp	r4, r7
 80161ee:	d1f5      	bne.n	80161dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80161f0:	2000      	movs	r0, #0
 80161f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161f6:	4620      	mov	r0, r4
 80161f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016204:	58d3      	ldr	r3, [r2, r3]
 8016206:	4718      	bx	r3
 8016208:	2000019c 	.word	0x2000019c

0801620c <std_msgs__msg__Int32__init>:
 801620c:	3800      	subs	r0, #0
 801620e:	bf18      	it	ne
 8016210:	2001      	movne	r0, #1
 8016212:	4770      	bx	lr

08016214 <std_msgs__msg__Int32__fini>:
 8016214:	4770      	bx	lr
 8016216:	bf00      	nop

08016218 <ucdr_serialize_endian_array_char>:
 8016218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801621c:	4619      	mov	r1, r3
 801621e:	461f      	mov	r7, r3
 8016220:	4605      	mov	r5, r0
 8016222:	4690      	mov	r8, r2
 8016224:	f7fb fa04 	bl	8011630 <ucdr_check_buffer_available_for>
 8016228:	b9e0      	cbnz	r0, 8016264 <ucdr_serialize_endian_array_char+0x4c>
 801622a:	463e      	mov	r6, r7
 801622c:	e009      	b.n	8016242 <ucdr_serialize_endian_array_char+0x2a>
 801622e:	68a8      	ldr	r0, [r5, #8]
 8016230:	f002 fb1c 	bl	801886c <memcpy>
 8016234:	68ab      	ldr	r3, [r5, #8]
 8016236:	6928      	ldr	r0, [r5, #16]
 8016238:	4423      	add	r3, r4
 801623a:	4420      	add	r0, r4
 801623c:	1b36      	subs	r6, r6, r4
 801623e:	60ab      	str	r3, [r5, #8]
 8016240:	6128      	str	r0, [r5, #16]
 8016242:	4631      	mov	r1, r6
 8016244:	2201      	movs	r2, #1
 8016246:	4628      	mov	r0, r5
 8016248:	f7fb fa7a 	bl	8011740 <ucdr_check_final_buffer_behavior_array>
 801624c:	1bb9      	subs	r1, r7, r6
 801624e:	4441      	add	r1, r8
 8016250:	4604      	mov	r4, r0
 8016252:	4602      	mov	r2, r0
 8016254:	2800      	cmp	r0, #0
 8016256:	d1ea      	bne.n	801622e <ucdr_serialize_endian_array_char+0x16>
 8016258:	2301      	movs	r3, #1
 801625a:	7da8      	ldrb	r0, [r5, #22]
 801625c:	756b      	strb	r3, [r5, #21]
 801625e:	4058      	eors	r0, r3
 8016260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016264:	463a      	mov	r2, r7
 8016266:	68a8      	ldr	r0, [r5, #8]
 8016268:	4641      	mov	r1, r8
 801626a:	f002 faff 	bl	801886c <memcpy>
 801626e:	68aa      	ldr	r2, [r5, #8]
 8016270:	692b      	ldr	r3, [r5, #16]
 8016272:	443a      	add	r2, r7
 8016274:	443b      	add	r3, r7
 8016276:	60aa      	str	r2, [r5, #8]
 8016278:	612b      	str	r3, [r5, #16]
 801627a:	e7ed      	b.n	8016258 <ucdr_serialize_endian_array_char+0x40>

0801627c <ucdr_deserialize_endian_array_char>:
 801627c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016280:	4619      	mov	r1, r3
 8016282:	461f      	mov	r7, r3
 8016284:	4605      	mov	r5, r0
 8016286:	4690      	mov	r8, r2
 8016288:	f7fb f9d2 	bl	8011630 <ucdr_check_buffer_available_for>
 801628c:	b9e0      	cbnz	r0, 80162c8 <ucdr_deserialize_endian_array_char+0x4c>
 801628e:	463e      	mov	r6, r7
 8016290:	e009      	b.n	80162a6 <ucdr_deserialize_endian_array_char+0x2a>
 8016292:	68a9      	ldr	r1, [r5, #8]
 8016294:	f002 faea 	bl	801886c <memcpy>
 8016298:	68ab      	ldr	r3, [r5, #8]
 801629a:	6928      	ldr	r0, [r5, #16]
 801629c:	4423      	add	r3, r4
 801629e:	4420      	add	r0, r4
 80162a0:	1b36      	subs	r6, r6, r4
 80162a2:	60ab      	str	r3, [r5, #8]
 80162a4:	6128      	str	r0, [r5, #16]
 80162a6:	2201      	movs	r2, #1
 80162a8:	4631      	mov	r1, r6
 80162aa:	4628      	mov	r0, r5
 80162ac:	f7fb fa48 	bl	8011740 <ucdr_check_final_buffer_behavior_array>
 80162b0:	4604      	mov	r4, r0
 80162b2:	1bb8      	subs	r0, r7, r6
 80162b4:	4440      	add	r0, r8
 80162b6:	4622      	mov	r2, r4
 80162b8:	2c00      	cmp	r4, #0
 80162ba:	d1ea      	bne.n	8016292 <ucdr_deserialize_endian_array_char+0x16>
 80162bc:	2301      	movs	r3, #1
 80162be:	7da8      	ldrb	r0, [r5, #22]
 80162c0:	756b      	strb	r3, [r5, #21]
 80162c2:	4058      	eors	r0, r3
 80162c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162c8:	463a      	mov	r2, r7
 80162ca:	68a9      	ldr	r1, [r5, #8]
 80162cc:	4640      	mov	r0, r8
 80162ce:	f002 facd 	bl	801886c <memcpy>
 80162d2:	68aa      	ldr	r2, [r5, #8]
 80162d4:	692b      	ldr	r3, [r5, #16]
 80162d6:	443a      	add	r2, r7
 80162d8:	443b      	add	r3, r7
 80162da:	60aa      	str	r2, [r5, #8]
 80162dc:	612b      	str	r3, [r5, #16]
 80162de:	e7ed      	b.n	80162bc <ucdr_deserialize_endian_array_char+0x40>

080162e0 <ucdr_serialize_array_uint8_t>:
 80162e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162e4:	4688      	mov	r8, r1
 80162e6:	4611      	mov	r1, r2
 80162e8:	4617      	mov	r7, r2
 80162ea:	4605      	mov	r5, r0
 80162ec:	f7fb f9a0 	bl	8011630 <ucdr_check_buffer_available_for>
 80162f0:	b9e0      	cbnz	r0, 801632c <ucdr_serialize_array_uint8_t+0x4c>
 80162f2:	463e      	mov	r6, r7
 80162f4:	e009      	b.n	801630a <ucdr_serialize_array_uint8_t+0x2a>
 80162f6:	68a8      	ldr	r0, [r5, #8]
 80162f8:	f002 fab8 	bl	801886c <memcpy>
 80162fc:	68aa      	ldr	r2, [r5, #8]
 80162fe:	692b      	ldr	r3, [r5, #16]
 8016300:	4422      	add	r2, r4
 8016302:	4423      	add	r3, r4
 8016304:	1b36      	subs	r6, r6, r4
 8016306:	60aa      	str	r2, [r5, #8]
 8016308:	612b      	str	r3, [r5, #16]
 801630a:	4631      	mov	r1, r6
 801630c:	2201      	movs	r2, #1
 801630e:	4628      	mov	r0, r5
 8016310:	f7fb fa16 	bl	8011740 <ucdr_check_final_buffer_behavior_array>
 8016314:	1bb9      	subs	r1, r7, r6
 8016316:	4441      	add	r1, r8
 8016318:	4604      	mov	r4, r0
 801631a:	4602      	mov	r2, r0
 801631c:	2800      	cmp	r0, #0
 801631e:	d1ea      	bne.n	80162f6 <ucdr_serialize_array_uint8_t+0x16>
 8016320:	2301      	movs	r3, #1
 8016322:	7da8      	ldrb	r0, [r5, #22]
 8016324:	756b      	strb	r3, [r5, #21]
 8016326:	4058      	eors	r0, r3
 8016328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801632c:	463a      	mov	r2, r7
 801632e:	68a8      	ldr	r0, [r5, #8]
 8016330:	4641      	mov	r1, r8
 8016332:	f002 fa9b 	bl	801886c <memcpy>
 8016336:	68aa      	ldr	r2, [r5, #8]
 8016338:	692b      	ldr	r3, [r5, #16]
 801633a:	443a      	add	r2, r7
 801633c:	443b      	add	r3, r7
 801633e:	60aa      	str	r2, [r5, #8]
 8016340:	612b      	str	r3, [r5, #16]
 8016342:	e7ed      	b.n	8016320 <ucdr_serialize_array_uint8_t+0x40>

08016344 <ucdr_serialize_endian_array_uint8_t>:
 8016344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016348:	4619      	mov	r1, r3
 801634a:	461f      	mov	r7, r3
 801634c:	4605      	mov	r5, r0
 801634e:	4690      	mov	r8, r2
 8016350:	f7fb f96e 	bl	8011630 <ucdr_check_buffer_available_for>
 8016354:	b9e0      	cbnz	r0, 8016390 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8016356:	463e      	mov	r6, r7
 8016358:	e009      	b.n	801636e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801635a:	68a8      	ldr	r0, [r5, #8]
 801635c:	f002 fa86 	bl	801886c <memcpy>
 8016360:	68ab      	ldr	r3, [r5, #8]
 8016362:	6928      	ldr	r0, [r5, #16]
 8016364:	4423      	add	r3, r4
 8016366:	4420      	add	r0, r4
 8016368:	1b36      	subs	r6, r6, r4
 801636a:	60ab      	str	r3, [r5, #8]
 801636c:	6128      	str	r0, [r5, #16]
 801636e:	4631      	mov	r1, r6
 8016370:	2201      	movs	r2, #1
 8016372:	4628      	mov	r0, r5
 8016374:	f7fb f9e4 	bl	8011740 <ucdr_check_final_buffer_behavior_array>
 8016378:	1bb9      	subs	r1, r7, r6
 801637a:	4441      	add	r1, r8
 801637c:	4604      	mov	r4, r0
 801637e:	4602      	mov	r2, r0
 8016380:	2800      	cmp	r0, #0
 8016382:	d1ea      	bne.n	801635a <ucdr_serialize_endian_array_uint8_t+0x16>
 8016384:	2301      	movs	r3, #1
 8016386:	7da8      	ldrb	r0, [r5, #22]
 8016388:	756b      	strb	r3, [r5, #21]
 801638a:	4058      	eors	r0, r3
 801638c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016390:	463a      	mov	r2, r7
 8016392:	68a8      	ldr	r0, [r5, #8]
 8016394:	4641      	mov	r1, r8
 8016396:	f002 fa69 	bl	801886c <memcpy>
 801639a:	68aa      	ldr	r2, [r5, #8]
 801639c:	692b      	ldr	r3, [r5, #16]
 801639e:	443a      	add	r2, r7
 80163a0:	443b      	add	r3, r7
 80163a2:	60aa      	str	r2, [r5, #8]
 80163a4:	612b      	str	r3, [r5, #16]
 80163a6:	e7ed      	b.n	8016384 <ucdr_serialize_endian_array_uint8_t+0x40>

080163a8 <ucdr_deserialize_array_uint8_t>:
 80163a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163ac:	4688      	mov	r8, r1
 80163ae:	4611      	mov	r1, r2
 80163b0:	4617      	mov	r7, r2
 80163b2:	4605      	mov	r5, r0
 80163b4:	f7fb f93c 	bl	8011630 <ucdr_check_buffer_available_for>
 80163b8:	b9e0      	cbnz	r0, 80163f4 <ucdr_deserialize_array_uint8_t+0x4c>
 80163ba:	463e      	mov	r6, r7
 80163bc:	e009      	b.n	80163d2 <ucdr_deserialize_array_uint8_t+0x2a>
 80163be:	68a9      	ldr	r1, [r5, #8]
 80163c0:	f002 fa54 	bl	801886c <memcpy>
 80163c4:	68aa      	ldr	r2, [r5, #8]
 80163c6:	692b      	ldr	r3, [r5, #16]
 80163c8:	4422      	add	r2, r4
 80163ca:	4423      	add	r3, r4
 80163cc:	1b36      	subs	r6, r6, r4
 80163ce:	60aa      	str	r2, [r5, #8]
 80163d0:	612b      	str	r3, [r5, #16]
 80163d2:	2201      	movs	r2, #1
 80163d4:	4631      	mov	r1, r6
 80163d6:	4628      	mov	r0, r5
 80163d8:	f7fb f9b2 	bl	8011740 <ucdr_check_final_buffer_behavior_array>
 80163dc:	4604      	mov	r4, r0
 80163de:	1bb8      	subs	r0, r7, r6
 80163e0:	4440      	add	r0, r8
 80163e2:	4622      	mov	r2, r4
 80163e4:	2c00      	cmp	r4, #0
 80163e6:	d1ea      	bne.n	80163be <ucdr_deserialize_array_uint8_t+0x16>
 80163e8:	2301      	movs	r3, #1
 80163ea:	7da8      	ldrb	r0, [r5, #22]
 80163ec:	756b      	strb	r3, [r5, #21]
 80163ee:	4058      	eors	r0, r3
 80163f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163f4:	463a      	mov	r2, r7
 80163f6:	68a9      	ldr	r1, [r5, #8]
 80163f8:	4640      	mov	r0, r8
 80163fa:	f002 fa37 	bl	801886c <memcpy>
 80163fe:	68aa      	ldr	r2, [r5, #8]
 8016400:	692b      	ldr	r3, [r5, #16]
 8016402:	443a      	add	r2, r7
 8016404:	443b      	add	r3, r7
 8016406:	60aa      	str	r2, [r5, #8]
 8016408:	612b      	str	r3, [r5, #16]
 801640a:	e7ed      	b.n	80163e8 <ucdr_deserialize_array_uint8_t+0x40>

0801640c <ucdr_deserialize_endian_array_uint8_t>:
 801640c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016410:	4619      	mov	r1, r3
 8016412:	461f      	mov	r7, r3
 8016414:	4605      	mov	r5, r0
 8016416:	4690      	mov	r8, r2
 8016418:	f7fb f90a 	bl	8011630 <ucdr_check_buffer_available_for>
 801641c:	b9e0      	cbnz	r0, 8016458 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801641e:	463e      	mov	r6, r7
 8016420:	e009      	b.n	8016436 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8016422:	68a9      	ldr	r1, [r5, #8]
 8016424:	f002 fa22 	bl	801886c <memcpy>
 8016428:	68ab      	ldr	r3, [r5, #8]
 801642a:	6928      	ldr	r0, [r5, #16]
 801642c:	4423      	add	r3, r4
 801642e:	4420      	add	r0, r4
 8016430:	1b36      	subs	r6, r6, r4
 8016432:	60ab      	str	r3, [r5, #8]
 8016434:	6128      	str	r0, [r5, #16]
 8016436:	2201      	movs	r2, #1
 8016438:	4631      	mov	r1, r6
 801643a:	4628      	mov	r0, r5
 801643c:	f7fb f980 	bl	8011740 <ucdr_check_final_buffer_behavior_array>
 8016440:	4604      	mov	r4, r0
 8016442:	1bb8      	subs	r0, r7, r6
 8016444:	4440      	add	r0, r8
 8016446:	4622      	mov	r2, r4
 8016448:	2c00      	cmp	r4, #0
 801644a:	d1ea      	bne.n	8016422 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801644c:	2301      	movs	r3, #1
 801644e:	7da8      	ldrb	r0, [r5, #22]
 8016450:	756b      	strb	r3, [r5, #21]
 8016452:	4058      	eors	r0, r3
 8016454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016458:	463a      	mov	r2, r7
 801645a:	68a9      	ldr	r1, [r5, #8]
 801645c:	4640      	mov	r0, r8
 801645e:	f002 fa05 	bl	801886c <memcpy>
 8016462:	68aa      	ldr	r2, [r5, #8]
 8016464:	692b      	ldr	r3, [r5, #16]
 8016466:	443a      	add	r2, r7
 8016468:	443b      	add	r3, r7
 801646a:	60aa      	str	r2, [r5, #8]
 801646c:	612b      	str	r3, [r5, #16]
 801646e:	e7ed      	b.n	801644c <ucdr_deserialize_endian_array_uint8_t+0x40>

08016470 <ucdr_serialize_sequence_char>:
 8016470:	b570      	push	{r4, r5, r6, lr}
 8016472:	4615      	mov	r5, r2
 8016474:	460e      	mov	r6, r1
 8016476:	7d01      	ldrb	r1, [r0, #20]
 8016478:	4604      	mov	r4, r0
 801647a:	f7fa fc2f 	bl	8010cdc <ucdr_serialize_endian_uint32_t>
 801647e:	b90d      	cbnz	r5, 8016484 <ucdr_serialize_sequence_char+0x14>
 8016480:	2001      	movs	r0, #1
 8016482:	bd70      	pop	{r4, r5, r6, pc}
 8016484:	7d21      	ldrb	r1, [r4, #20]
 8016486:	462b      	mov	r3, r5
 8016488:	4632      	mov	r2, r6
 801648a:	4620      	mov	r0, r4
 801648c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016490:	f7ff bec2 	b.w	8016218 <ucdr_serialize_endian_array_char>

08016494 <ucdr_deserialize_sequence_char>:
 8016494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016498:	461d      	mov	r5, r3
 801649a:	4616      	mov	r6, r2
 801649c:	460f      	mov	r7, r1
 801649e:	461a      	mov	r2, r3
 80164a0:	7d01      	ldrb	r1, [r0, #20]
 80164a2:	4604      	mov	r4, r0
 80164a4:	f7fa fd42 	bl	8010f2c <ucdr_deserialize_endian_uint32_t>
 80164a8:	682b      	ldr	r3, [r5, #0]
 80164aa:	429e      	cmp	r6, r3
 80164ac:	bf3c      	itt	cc
 80164ae:	2201      	movcc	r2, #1
 80164b0:	75a2      	strbcc	r2, [r4, #22]
 80164b2:	b913      	cbnz	r3, 80164ba <ucdr_deserialize_sequence_char+0x26>
 80164b4:	2001      	movs	r0, #1
 80164b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164ba:	7d21      	ldrb	r1, [r4, #20]
 80164bc:	463a      	mov	r2, r7
 80164be:	4620      	mov	r0, r4
 80164c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164c4:	f7ff beda 	b.w	801627c <ucdr_deserialize_endian_array_char>

080164c8 <ucdr_serialize_sequence_uint8_t>:
 80164c8:	b570      	push	{r4, r5, r6, lr}
 80164ca:	4615      	mov	r5, r2
 80164cc:	460e      	mov	r6, r1
 80164ce:	7d01      	ldrb	r1, [r0, #20]
 80164d0:	4604      	mov	r4, r0
 80164d2:	f7fa fc03 	bl	8010cdc <ucdr_serialize_endian_uint32_t>
 80164d6:	b90d      	cbnz	r5, 80164dc <ucdr_serialize_sequence_uint8_t+0x14>
 80164d8:	2001      	movs	r0, #1
 80164da:	bd70      	pop	{r4, r5, r6, pc}
 80164dc:	7d21      	ldrb	r1, [r4, #20]
 80164de:	462b      	mov	r3, r5
 80164e0:	4632      	mov	r2, r6
 80164e2:	4620      	mov	r0, r4
 80164e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80164e8:	f7ff bf2c 	b.w	8016344 <ucdr_serialize_endian_array_uint8_t>

080164ec <ucdr_deserialize_sequence_uint8_t>:
 80164ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164f0:	461d      	mov	r5, r3
 80164f2:	4616      	mov	r6, r2
 80164f4:	460f      	mov	r7, r1
 80164f6:	461a      	mov	r2, r3
 80164f8:	7d01      	ldrb	r1, [r0, #20]
 80164fa:	4604      	mov	r4, r0
 80164fc:	f7fa fd16 	bl	8010f2c <ucdr_deserialize_endian_uint32_t>
 8016500:	682b      	ldr	r3, [r5, #0]
 8016502:	429e      	cmp	r6, r3
 8016504:	bf3c      	itt	cc
 8016506:	2201      	movcc	r2, #1
 8016508:	75a2      	strbcc	r2, [r4, #22]
 801650a:	b913      	cbnz	r3, 8016512 <ucdr_deserialize_sequence_uint8_t+0x26>
 801650c:	2001      	movs	r0, #1
 801650e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016512:	7d21      	ldrb	r1, [r4, #20]
 8016514:	463a      	mov	r2, r7
 8016516:	4620      	mov	r0, r4
 8016518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801651c:	f7ff bf76 	b.w	801640c <ucdr_deserialize_endian_array_uint8_t>

08016520 <ucdr_serialize_string>:
 8016520:	b510      	push	{r4, lr}
 8016522:	b082      	sub	sp, #8
 8016524:	4604      	mov	r4, r0
 8016526:	4608      	mov	r0, r1
 8016528:	9101      	str	r1, [sp, #4]
 801652a:	f7e9 fe5b 	bl	80001e4 <strlen>
 801652e:	9901      	ldr	r1, [sp, #4]
 8016530:	1c42      	adds	r2, r0, #1
 8016532:	4620      	mov	r0, r4
 8016534:	b002      	add	sp, #8
 8016536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801653a:	f7ff bf99 	b.w	8016470 <ucdr_serialize_sequence_char>
 801653e:	bf00      	nop

08016540 <ucdr_deserialize_string>:
 8016540:	b500      	push	{lr}
 8016542:	b083      	sub	sp, #12
 8016544:	ab01      	add	r3, sp, #4
 8016546:	f7ff ffa5 	bl	8016494 <ucdr_deserialize_sequence_char>
 801654a:	b003      	add	sp, #12
 801654c:	f85d fb04 	ldr.w	pc, [sp], #4

08016550 <get_custom_error>:
 8016550:	4b01      	ldr	r3, [pc, #4]	; (8016558 <get_custom_error+0x8>)
 8016552:	7818      	ldrb	r0, [r3, #0]
 8016554:	4770      	bx	lr
 8016556:	bf00      	nop
 8016558:	20012d08 	.word	0x20012d08

0801655c <recv_custom_msg>:
 801655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016560:	4693      	mov	fp, r2
 8016562:	b089      	sub	sp, #36	; 0x24
 8016564:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8016568:	9305      	str	r3, [sp, #20]
 801656a:	468a      	mov	sl, r1
 801656c:	2100      	movs	r1, #0
 801656e:	4604      	mov	r4, r0
 8016570:	f88d 101e 	strb.w	r1, [sp, #30]
 8016574:	b322      	cbz	r2, 80165c0 <recv_custom_msg+0x64>
 8016576:	f200 2902 	addw	r9, r0, #514	; 0x202
 801657a:	f10d 081f 	add.w	r8, sp, #31
 801657e:	af05      	add	r7, sp, #20
 8016580:	f10d 061e 	add.w	r6, sp, #30
 8016584:	f44f 7500 	mov.w	r5, #512	; 0x200
 8016588:	e002      	b.n	8016590 <recv_custom_msg+0x34>
 801658a:	9b05      	ldr	r3, [sp, #20]
 801658c:	2b00      	cmp	r3, #0
 801658e:	dd0f      	ble.n	80165b0 <recv_custom_msg+0x54>
 8016590:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8016594:	4623      	mov	r3, r4
 8016596:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801659a:	e9cd 5600 	strd	r5, r6, [sp]
 801659e:	4622      	mov	r2, r4
 80165a0:	4648      	mov	r0, r9
 80165a2:	f001 f8e1 	bl	8017768 <uxr_read_framed_msg>
 80165a6:	2800      	cmp	r0, #0
 80165a8:	d0ef      	beq.n	801658a <recv_custom_msg+0x2e>
 80165aa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80165ae:	b1b3      	cbz	r3, 80165de <recv_custom_msg+0x82>
 80165b0:	4b0f      	ldr	r3, [pc, #60]	; (80165f0 <recv_custom_msg+0x94>)
 80165b2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80165b6:	701a      	strb	r2, [r3, #0]
 80165b8:	2000      	movs	r0, #0
 80165ba:	b009      	add	sp, #36	; 0x24
 80165bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165c0:	f10d 021f 	add.w	r2, sp, #31
 80165c4:	9200      	str	r2, [sp, #0]
 80165c6:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80165ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80165ce:	4601      	mov	r1, r0
 80165d0:	47a8      	blx	r5
 80165d2:	2800      	cmp	r0, #0
 80165d4:	d0ec      	beq.n	80165b0 <recv_custom_msg+0x54>
 80165d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d1e8      	bne.n	80165b0 <recv_custom_msg+0x54>
 80165de:	f8cb 0000 	str.w	r0, [fp]
 80165e2:	2001      	movs	r0, #1
 80165e4:	f8ca 4000 	str.w	r4, [sl]
 80165e8:	b009      	add	sp, #36	; 0x24
 80165ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ee:	bf00      	nop
 80165f0:	20012d08 	.word	0x20012d08

080165f4 <send_custom_msg>:
 80165f4:	b530      	push	{r4, r5, lr}
 80165f6:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 80165fa:	b087      	sub	sp, #28
 80165fc:	4615      	mov	r5, r2
 80165fe:	b974      	cbnz	r4, 801661e <send_custom_msg+0x2a>
 8016600:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8016604:	f10d 0317 	add.w	r3, sp, #23
 8016608:	47a0      	blx	r4
 801660a:	b108      	cbz	r0, 8016610 <send_custom_msg+0x1c>
 801660c:	42a8      	cmp	r0, r5
 801660e:	d015      	beq.n	801663c <send_custom_msg+0x48>
 8016610:	4b0c      	ldr	r3, [pc, #48]	; (8016644 <send_custom_msg+0x50>)
 8016612:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8016616:	701a      	strb	r2, [r3, #0]
 8016618:	2000      	movs	r0, #0
 801661a:	b007      	add	sp, #28
 801661c:	bd30      	pop	{r4, r5, pc}
 801661e:	460b      	mov	r3, r1
 8016620:	2200      	movs	r2, #0
 8016622:	f10d 0117 	add.w	r1, sp, #23
 8016626:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801662a:	4602      	mov	r2, r0
 801662c:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8016630:	9500      	str	r5, [sp, #0]
 8016632:	f200 2002 	addw	r0, r0, #514	; 0x202
 8016636:	f000 fe9f 	bl	8017378 <uxr_write_framed_msg>
 801663a:	e7e6      	b.n	801660a <send_custom_msg+0x16>
 801663c:	2001      	movs	r0, #1
 801663e:	b007      	add	sp, #28
 8016640:	bd30      	pop	{r4, r5, pc}
 8016642:	bf00      	nop
 8016644:	20012d08 	.word	0x20012d08

08016648 <uxr_set_custom_transport_callbacks>:
 8016648:	b410      	push	{r4}
 801664a:	9c01      	ldr	r4, [sp, #4]
 801664c:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8016650:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8016654:	9b02      	ldr	r3, [sp, #8]
 8016656:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801665a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801665e:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 8016662:	4770      	bx	lr

08016664 <uxr_init_custom_transport>:
 8016664:	b538      	push	{r3, r4, r5, lr}
 8016666:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801666a:	b303      	cbz	r3, 80166ae <uxr_init_custom_transport+0x4a>
 801666c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8016670:	4604      	mov	r4, r0
 8016672:	b1e2      	cbz	r2, 80166ae <uxr_init_custom_transport+0x4a>
 8016674:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8016678:	b1ca      	cbz	r2, 80166ae <uxr_init_custom_transport+0x4a>
 801667a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801667e:	b1b2      	cbz	r2, 80166ae <uxr_init_custom_transport+0x4a>
 8016680:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8016684:	4798      	blx	r3
 8016686:	4605      	mov	r5, r0
 8016688:	b188      	cbz	r0, 80166ae <uxr_init_custom_transport+0x4a>
 801668a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801668e:	b98b      	cbnz	r3, 80166b4 <uxr_init_custom_transport+0x50>
 8016690:	490b      	ldr	r1, [pc, #44]	; (80166c0 <uxr_init_custom_transport+0x5c>)
 8016692:	4b0c      	ldr	r3, [pc, #48]	; (80166c4 <uxr_init_custom_transport+0x60>)
 8016694:	4a0c      	ldr	r2, [pc, #48]	; (80166c8 <uxr_init_custom_transport+0x64>)
 8016696:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 801669a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801669e:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 80166a2:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80166a6:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80166aa:	4628      	mov	r0, r5
 80166ac:	bd38      	pop	{r3, r4, r5, pc}
 80166ae:	2500      	movs	r5, #0
 80166b0:	4628      	mov	r0, r5
 80166b2:	bd38      	pop	{r3, r4, r5, pc}
 80166b4:	2100      	movs	r1, #0
 80166b6:	f204 2002 	addw	r0, r4, #514	; 0x202
 80166ba:	f000 fe57 	bl	801736c <uxr_init_framing_io>
 80166be:	e7e7      	b.n	8016690 <uxr_init_custom_transport+0x2c>
 80166c0:	080165f5 	.word	0x080165f5
 80166c4:	0801655d 	.word	0x0801655d
 80166c8:	08016551 	.word	0x08016551

080166cc <uxr_close_custom_transport>:
 80166cc:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80166d0:	4718      	bx	r3
 80166d2:	bf00      	nop

080166d4 <uxr_init_input_best_effort_stream>:
 80166d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80166d8:	8003      	strh	r3, [r0, #0]
 80166da:	4770      	bx	lr

080166dc <uxr_reset_input_best_effort_stream>:
 80166dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80166e0:	8003      	strh	r3, [r0, #0]
 80166e2:	4770      	bx	lr

080166e4 <uxr_receive_best_effort_message>:
 80166e4:	b538      	push	{r3, r4, r5, lr}
 80166e6:	4604      	mov	r4, r0
 80166e8:	8800      	ldrh	r0, [r0, #0]
 80166ea:	460d      	mov	r5, r1
 80166ec:	f000 fe26 	bl	801733c <uxr_seq_num_cmp>
 80166f0:	4603      	mov	r3, r0
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80166f8:	bfb8      	it	lt
 80166fa:	8025      	strhlt	r5, [r4, #0]
 80166fc:	bd38      	pop	{r3, r4, r5, pc}
 80166fe:	bf00      	nop

08016700 <on_full_input_buffer>:
 8016700:	b570      	push	{r4, r5, r6, lr}
 8016702:	4605      	mov	r5, r0
 8016704:	460c      	mov	r4, r1
 8016706:	682b      	ldr	r3, [r5, #0]
 8016708:	6809      	ldr	r1, [r1, #0]
 801670a:	8920      	ldrh	r0, [r4, #8]
 801670c:	6862      	ldr	r2, [r4, #4]
 801670e:	fbb2 f2f0 	udiv	r2, r2, r0
 8016712:	eba3 0c01 	sub.w	ip, r3, r1
 8016716:	fbbc fcf2 	udiv	ip, ip, r2
 801671a:	f10c 0c01 	add.w	ip, ip, #1
 801671e:	fa1f f38c 	uxth.w	r3, ip
 8016722:	fbb3 f6f0 	udiv	r6, r3, r0
 8016726:	fb00 3316 	mls	r3, r0, r6, r3
 801672a:	b29b      	uxth	r3, r3
 801672c:	fb02 f303 	mul.w	r3, r2, r3
 8016730:	1d18      	adds	r0, r3, #4
 8016732:	4408      	add	r0, r1
 8016734:	7d26      	ldrb	r6, [r4, #20]
 8016736:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801673a:	b116      	cbz	r6, 8016742 <on_full_input_buffer+0x42>
 801673c:	2600      	movs	r6, #0
 801673e:	f840 6c04 	str.w	r6, [r0, #-4]
 8016742:	2a03      	cmp	r2, #3
 8016744:	d801      	bhi.n	801674a <on_full_input_buffer+0x4a>
 8016746:	2001      	movs	r0, #1
 8016748:	bd70      	pop	{r4, r5, r6, pc}
 801674a:	3308      	adds	r3, #8
 801674c:	4419      	add	r1, r3
 801674e:	4628      	mov	r0, r5
 8016750:	692b      	ldr	r3, [r5, #16]
 8016752:	3a04      	subs	r2, #4
 8016754:	f7fa ffb8 	bl	80116c8 <ucdr_init_buffer_origin>
 8016758:	4628      	mov	r0, r5
 801675a:	4903      	ldr	r1, [pc, #12]	; (8016768 <on_full_input_buffer+0x68>)
 801675c:	4622      	mov	r2, r4
 801675e:	f7fa ff8f 	bl	8011680 <ucdr_set_on_full_buffer_callback>
 8016762:	2000      	movs	r0, #0
 8016764:	bd70      	pop	{r4, r5, r6, pc}
 8016766:	bf00      	nop
 8016768:	08016701 	.word	0x08016701

0801676c <uxr_init_input_reliable_stream>:
 801676c:	b500      	push	{lr}
 801676e:	e9c0 1200 	strd	r1, r2, [r0]
 8016772:	f04f 0e00 	mov.w	lr, #0
 8016776:	9a01      	ldr	r2, [sp, #4]
 8016778:	8103      	strh	r3, [r0, #8]
 801677a:	6102      	str	r2, [r0, #16]
 801677c:	f880 e014 	strb.w	lr, [r0, #20]
 8016780:	b1d3      	cbz	r3, 80167b8 <uxr_init_input_reliable_stream+0x4c>
 8016782:	f8c1 e000 	str.w	lr, [r1]
 8016786:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801678a:	f1bc 0f01 	cmp.w	ip, #1
 801678e:	d913      	bls.n	80167b8 <uxr_init_input_reliable_stream+0x4c>
 8016790:	2301      	movs	r3, #1
 8016792:	fbb3 f1fc 	udiv	r1, r3, ip
 8016796:	fb0c 3111 	mls	r1, ip, r1, r3
 801679a:	b289      	uxth	r1, r1
 801679c:	6842      	ldr	r2, [r0, #4]
 801679e:	fbb2 f2fc 	udiv	r2, r2, ip
 80167a2:	fb01 f202 	mul.w	r2, r1, r2
 80167a6:	6801      	ldr	r1, [r0, #0]
 80167a8:	f841 e002 	str.w	lr, [r1, r2]
 80167ac:	3301      	adds	r3, #1
 80167ae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80167b2:	b29b      	uxth	r3, r3
 80167b4:	459c      	cmp	ip, r3
 80167b6:	d8ec      	bhi.n	8016792 <uxr_init_input_reliable_stream+0x26>
 80167b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80167bc:	60c3      	str	r3, [r0, #12]
 80167be:	f85d fb04 	ldr.w	pc, [sp], #4
 80167c2:	bf00      	nop

080167c4 <uxr_reset_input_reliable_stream>:
 80167c4:	8901      	ldrh	r1, [r0, #8]
 80167c6:	b1e9      	cbz	r1, 8016804 <uxr_reset_input_reliable_stream+0x40>
 80167c8:	f04f 0c00 	mov.w	ip, #0
 80167cc:	b500      	push	{lr}
 80167ce:	4663      	mov	r3, ip
 80167d0:	46e6      	mov	lr, ip
 80167d2:	fbb3 f2f1 	udiv	r2, r3, r1
 80167d6:	fb01 3312 	mls	r3, r1, r2, r3
 80167da:	b29b      	uxth	r3, r3
 80167dc:	6842      	ldr	r2, [r0, #4]
 80167de:	fbb2 f2f1 	udiv	r2, r2, r1
 80167e2:	fb02 f303 	mul.w	r3, r2, r3
 80167e6:	6802      	ldr	r2, [r0, #0]
 80167e8:	f842 e003 	str.w	lr, [r2, r3]
 80167ec:	f10c 0c01 	add.w	ip, ip, #1
 80167f0:	8901      	ldrh	r1, [r0, #8]
 80167f2:	fa1f f38c 	uxth.w	r3, ip
 80167f6:	4299      	cmp	r1, r3
 80167f8:	d8eb      	bhi.n	80167d2 <uxr_reset_input_reliable_stream+0xe>
 80167fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80167fe:	60c3      	str	r3, [r0, #12]
 8016800:	f85d fb04 	ldr.w	pc, [sp], #4
 8016804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016808:	60c3      	str	r3, [r0, #12]
 801680a:	4770      	bx	lr

0801680c <uxr_receive_reliable_message>:
 801680c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016810:	4604      	mov	r4, r0
 8016812:	460d      	mov	r5, r1
 8016814:	8901      	ldrh	r1, [r0, #8]
 8016816:	8980      	ldrh	r0, [r0, #12]
 8016818:	4690      	mov	r8, r2
 801681a:	461f      	mov	r7, r3
 801681c:	f000 fd86 	bl	801732c <uxr_seq_num_add>
 8016820:	4629      	mov	r1, r5
 8016822:	4606      	mov	r6, r0
 8016824:	89a0      	ldrh	r0, [r4, #12]
 8016826:	f000 fd89 	bl	801733c <uxr_seq_num_cmp>
 801682a:	2800      	cmp	r0, #0
 801682c:	db0a      	blt.n	8016844 <uxr_receive_reliable_message+0x38>
 801682e:	2600      	movs	r6, #0
 8016830:	89e0      	ldrh	r0, [r4, #14]
 8016832:	4629      	mov	r1, r5
 8016834:	f000 fd82 	bl	801733c <uxr_seq_num_cmp>
 8016838:	2800      	cmp	r0, #0
 801683a:	da00      	bge.n	801683e <uxr_receive_reliable_message+0x32>
 801683c:	81e5      	strh	r5, [r4, #14]
 801683e:	4630      	mov	r0, r6
 8016840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016844:	4630      	mov	r0, r6
 8016846:	4629      	mov	r1, r5
 8016848:	f000 fd78 	bl	801733c <uxr_seq_num_cmp>
 801684c:	2800      	cmp	r0, #0
 801684e:	dbee      	blt.n	801682e <uxr_receive_reliable_message+0x22>
 8016850:	6923      	ldr	r3, [r4, #16]
 8016852:	4640      	mov	r0, r8
 8016854:	4798      	blx	r3
 8016856:	2101      	movs	r1, #1
 8016858:	4681      	mov	r9, r0
 801685a:	89a0      	ldrh	r0, [r4, #12]
 801685c:	f000 fd66 	bl	801732c <uxr_seq_num_add>
 8016860:	f1b9 0f00 	cmp.w	r9, #0
 8016864:	d101      	bne.n	801686a <uxr_receive_reliable_message+0x5e>
 8016866:	4285      	cmp	r5, r0
 8016868:	d047      	beq.n	80168fa <uxr_receive_reliable_message+0xee>
 801686a:	8922      	ldrh	r2, [r4, #8]
 801686c:	fbb5 f0f2 	udiv	r0, r5, r2
 8016870:	fb02 5010 	mls	r0, r2, r0, r5
 8016874:	b280      	uxth	r0, r0
 8016876:	6863      	ldr	r3, [r4, #4]
 8016878:	fbb3 f3f2 	udiv	r3, r3, r2
 801687c:	fb00 f303 	mul.w	r3, r0, r3
 8016880:	6820      	ldr	r0, [r4, #0]
 8016882:	3304      	adds	r3, #4
 8016884:	4418      	add	r0, r3
 8016886:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d1cf      	bne.n	801682e <uxr_receive_reliable_message+0x22>
 801688e:	4641      	mov	r1, r8
 8016890:	463a      	mov	r2, r7
 8016892:	f001 ffeb 	bl	801886c <memcpy>
 8016896:	8921      	ldrh	r1, [r4, #8]
 8016898:	fbb5 f2f1 	udiv	r2, r5, r1
 801689c:	fb01 5212 	mls	r2, r1, r2, r5
 80168a0:	b292      	uxth	r2, r2
 80168a2:	6863      	ldr	r3, [r4, #4]
 80168a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80168a8:	fb02 f303 	mul.w	r3, r2, r3
 80168ac:	6822      	ldr	r2, [r4, #0]
 80168ae:	50d7      	str	r7, [r2, r3]
 80168b0:	9a08      	ldr	r2, [sp, #32]
 80168b2:	2301      	movs	r3, #1
 80168b4:	7013      	strb	r3, [r2, #0]
 80168b6:	f1b9 0f00 	cmp.w	r9, #0
 80168ba:	d0b8      	beq.n	801682e <uxr_receive_reliable_message+0x22>
 80168bc:	89a6      	ldrh	r6, [r4, #12]
 80168be:	4630      	mov	r0, r6
 80168c0:	2101      	movs	r1, #1
 80168c2:	f000 fd33 	bl	801732c <uxr_seq_num_add>
 80168c6:	8922      	ldrh	r2, [r4, #8]
 80168c8:	6863      	ldr	r3, [r4, #4]
 80168ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80168ce:	4606      	mov	r6, r0
 80168d0:	fbb0 f0f2 	udiv	r0, r0, r2
 80168d4:	fb02 6010 	mls	r0, r2, r0, r6
 80168d8:	b280      	uxth	r0, r0
 80168da:	fb00 f303 	mul.w	r3, r0, r3
 80168de:	6820      	ldr	r0, [r4, #0]
 80168e0:	3304      	adds	r3, #4
 80168e2:	4418      	add	r0, r3
 80168e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d0a0      	beq.n	801682e <uxr_receive_reliable_message+0x22>
 80168ec:	6923      	ldr	r3, [r4, #16]
 80168ee:	4798      	blx	r3
 80168f0:	2802      	cmp	r0, #2
 80168f2:	d008      	beq.n	8016906 <uxr_receive_reliable_message+0xfa>
 80168f4:	2801      	cmp	r0, #1
 80168f6:	d0e2      	beq.n	80168be <uxr_receive_reliable_message+0xb2>
 80168f8:	e799      	b.n	801682e <uxr_receive_reliable_message+0x22>
 80168fa:	9b08      	ldr	r3, [sp, #32]
 80168fc:	81a5      	strh	r5, [r4, #12]
 80168fe:	2601      	movs	r6, #1
 8016900:	f883 9000 	strb.w	r9, [r3]
 8016904:	e794      	b.n	8016830 <uxr_receive_reliable_message+0x24>
 8016906:	2601      	movs	r6, #1
 8016908:	e792      	b.n	8016830 <uxr_receive_reliable_message+0x24>
 801690a:	bf00      	nop

0801690c <uxr_next_input_reliable_buffer_available>:
 801690c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016910:	4604      	mov	r4, r0
 8016912:	460f      	mov	r7, r1
 8016914:	8980      	ldrh	r0, [r0, #12]
 8016916:	2101      	movs	r1, #1
 8016918:	4690      	mov	r8, r2
 801691a:	f000 fd07 	bl	801732c <uxr_seq_num_add>
 801691e:	8922      	ldrh	r2, [r4, #8]
 8016920:	fbb0 f6f2 	udiv	r6, r0, r2
 8016924:	fb02 0616 	mls	r6, r2, r6, r0
 8016928:	b2b6      	uxth	r6, r6
 801692a:	6863      	ldr	r3, [r4, #4]
 801692c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016930:	fb06 f303 	mul.w	r3, r6, r3
 8016934:	6826      	ldr	r6, [r4, #0]
 8016936:	3304      	adds	r3, #4
 8016938:	441e      	add	r6, r3
 801693a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801693e:	f1b9 0f00 	cmp.w	r9, #0
 8016942:	d023      	beq.n	801698c <uxr_next_input_reliable_buffer_available+0x80>
 8016944:	6923      	ldr	r3, [r4, #16]
 8016946:	4605      	mov	r5, r0
 8016948:	4630      	mov	r0, r6
 801694a:	4798      	blx	r3
 801694c:	4682      	mov	sl, r0
 801694e:	b300      	cbz	r0, 8016992 <uxr_next_input_reliable_buffer_available+0x86>
 8016950:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016954:	2101      	movs	r1, #1
 8016956:	4650      	mov	r0, sl
 8016958:	f000 fce8 	bl	801732c <uxr_seq_num_add>
 801695c:	8921      	ldrh	r1, [r4, #8]
 801695e:	fbb0 f2f1 	udiv	r2, r0, r1
 8016962:	4682      	mov	sl, r0
 8016964:	fb01 0212 	mls	r2, r1, r2, r0
 8016968:	e9d4 0300 	ldrd	r0, r3, [r4]
 801696c:	b292      	uxth	r2, r2
 801696e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016972:	fb02 f303 	mul.w	r3, r2, r3
 8016976:	3304      	adds	r3, #4
 8016978:	4418      	add	r0, r3
 801697a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801697e:	b12b      	cbz	r3, 801698c <uxr_next_input_reliable_buffer_available+0x80>
 8016980:	6923      	ldr	r3, [r4, #16]
 8016982:	4798      	blx	r3
 8016984:	2802      	cmp	r0, #2
 8016986:	d01b      	beq.n	80169c0 <uxr_next_input_reliable_buffer_available+0xb4>
 8016988:	2801      	cmp	r0, #1
 801698a:	d0e3      	beq.n	8016954 <uxr_next_input_reliable_buffer_available+0x48>
 801698c:	2000      	movs	r0, #0
 801698e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016992:	464a      	mov	r2, r9
 8016994:	4631      	mov	r1, r6
 8016996:	4638      	mov	r0, r7
 8016998:	f7fa fe9e 	bl	80116d8 <ucdr_init_buffer>
 801699c:	8921      	ldrh	r1, [r4, #8]
 801699e:	fbb5 f2f1 	udiv	r2, r5, r1
 80169a2:	fb01 5212 	mls	r2, r1, r2, r5
 80169a6:	b292      	uxth	r2, r2
 80169a8:	6863      	ldr	r3, [r4, #4]
 80169aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80169ae:	fb02 f303 	mul.w	r3, r2, r3
 80169b2:	6822      	ldr	r2, [r4, #0]
 80169b4:	f842 a003 	str.w	sl, [r2, r3]
 80169b8:	2001      	movs	r0, #1
 80169ba:	81a5      	strh	r5, [r4, #12]
 80169bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169c0:	8920      	ldrh	r0, [r4, #8]
 80169c2:	fbb5 f3f0 	udiv	r3, r5, r0
 80169c6:	fb00 5513 	mls	r5, r0, r3, r5
 80169ca:	b2ad      	uxth	r5, r5
 80169cc:	6863      	ldr	r3, [r4, #4]
 80169ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80169d2:	fb03 f505 	mul.w	r5, r3, r5
 80169d6:	6823      	ldr	r3, [r4, #0]
 80169d8:	2000      	movs	r0, #0
 80169da:	5158      	str	r0, [r3, r5]
 80169dc:	eb06 0108 	add.w	r1, r6, r8
 80169e0:	eba9 0208 	sub.w	r2, r9, r8
 80169e4:	4638      	mov	r0, r7
 80169e6:	f7fa fe77 	bl	80116d8 <ucdr_init_buffer>
 80169ea:	4638      	mov	r0, r7
 80169ec:	4903      	ldr	r1, [pc, #12]	; (80169fc <uxr_next_input_reliable_buffer_available+0xf0>)
 80169ee:	4622      	mov	r2, r4
 80169f0:	f7fa fe46 	bl	8011680 <ucdr_set_on_full_buffer_callback>
 80169f4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80169f8:	2001      	movs	r0, #1
 80169fa:	e7c8      	b.n	801698e <uxr_next_input_reliable_buffer_available+0x82>
 80169fc:	08016701 	.word	0x08016701

08016a00 <uxr_process_heartbeat>:
 8016a00:	b538      	push	{r3, r4, r5, lr}
 8016a02:	4611      	mov	r1, r2
 8016a04:	4604      	mov	r4, r0
 8016a06:	89c0      	ldrh	r0, [r0, #14]
 8016a08:	4615      	mov	r5, r2
 8016a0a:	f000 fc97 	bl	801733c <uxr_seq_num_cmp>
 8016a0e:	2800      	cmp	r0, #0
 8016a10:	bfb8      	it	lt
 8016a12:	81e5      	strhlt	r5, [r4, #14]
 8016a14:	bd38      	pop	{r3, r4, r5, pc}
 8016a16:	bf00      	nop

08016a18 <uxr_compute_acknack>:
 8016a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a1c:	8903      	ldrh	r3, [r0, #8]
 8016a1e:	8985      	ldrh	r5, [r0, #12]
 8016a20:	4604      	mov	r4, r0
 8016a22:	460e      	mov	r6, r1
 8016a24:	b1d3      	cbz	r3, 8016a5c <uxr_compute_acknack+0x44>
 8016a26:	4628      	mov	r0, r5
 8016a28:	2701      	movs	r7, #1
 8016a2a:	e003      	b.n	8016a34 <uxr_compute_acknack+0x1c>
 8016a2c:	4567      	cmp	r7, ip
 8016a2e:	d215      	bcs.n	8016a5c <uxr_compute_acknack+0x44>
 8016a30:	89a0      	ldrh	r0, [r4, #12]
 8016a32:	3701      	adds	r7, #1
 8016a34:	b2b9      	uxth	r1, r7
 8016a36:	f000 fc79 	bl	801732c <uxr_seq_num_add>
 8016a3a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016a3e:	fbb0 f3fc 	udiv	r3, r0, ip
 8016a42:	fb0c 0313 	mls	r3, ip, r3, r0
 8016a46:	b29a      	uxth	r2, r3
 8016a48:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016a4c:	fbb3 f3fc 	udiv	r3, r3, ip
 8016a50:	fb02 f303 	mul.w	r3, r2, r3
 8016a54:	58cb      	ldr	r3, [r1, r3]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d1e8      	bne.n	8016a2c <uxr_compute_acknack+0x14>
 8016a5a:	4605      	mov	r5, r0
 8016a5c:	8035      	strh	r5, [r6, #0]
 8016a5e:	2101      	movs	r1, #1
 8016a60:	4628      	mov	r0, r5
 8016a62:	89e7      	ldrh	r7, [r4, #14]
 8016a64:	f000 fc66 	bl	8017334 <uxr_seq_num_sub>
 8016a68:	4601      	mov	r1, r0
 8016a6a:	4638      	mov	r0, r7
 8016a6c:	f000 fc62 	bl	8017334 <uxr_seq_num_sub>
 8016a70:	4605      	mov	r5, r0
 8016a72:	b318      	cbz	r0, 8016abc <uxr_compute_acknack+0xa4>
 8016a74:	f04f 0900 	mov.w	r9, #0
 8016a78:	464f      	mov	r7, r9
 8016a7a:	f04f 0801 	mov.w	r8, #1
 8016a7e:	fa1f f189 	uxth.w	r1, r9
 8016a82:	8830      	ldrh	r0, [r6, #0]
 8016a84:	f000 fc52 	bl	801732c <uxr_seq_num_add>
 8016a88:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016a8c:	fbb0 f3fc 	udiv	r3, r0, ip
 8016a90:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016a94:	fb03 001c 	mls	r0, r3, ip, r0
 8016a98:	b283      	uxth	r3, r0
 8016a9a:	fbb2 f2fc 	udiv	r2, r2, ip
 8016a9e:	fb02 f303 	mul.w	r3, r2, r3
 8016aa2:	fa08 f209 	lsl.w	r2, r8, r9
 8016aa6:	58cb      	ldr	r3, [r1, r3]
 8016aa8:	f109 0901 	add.w	r9, r9, #1
 8016aac:	b90b      	cbnz	r3, 8016ab2 <uxr_compute_acknack+0x9a>
 8016aae:	4317      	orrs	r7, r2
 8016ab0:	b2bf      	uxth	r7, r7
 8016ab2:	454d      	cmp	r5, r9
 8016ab4:	d1e3      	bne.n	8016a7e <uxr_compute_acknack+0x66>
 8016ab6:	4638      	mov	r0, r7
 8016ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016abc:	4607      	mov	r7, r0
 8016abe:	4638      	mov	r0, r7
 8016ac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016ac4 <uxr_init_output_best_effort_stream>:
 8016ac4:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8016ac8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016acc:	6001      	str	r1, [r0, #0]
 8016ace:	7303      	strb	r3, [r0, #12]
 8016ad0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016ad4:	4770      	bx	lr
 8016ad6:	bf00      	nop

08016ad8 <uxr_reset_output_best_effort_stream>:
 8016ad8:	7b02      	ldrb	r2, [r0, #12]
 8016ada:	6042      	str	r2, [r0, #4]
 8016adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ae0:	81c3      	strh	r3, [r0, #14]
 8016ae2:	4770      	bx	lr

08016ae4 <uxr_prepare_best_effort_buffer_to_write>:
 8016ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ae6:	4604      	mov	r4, r0
 8016ae8:	b083      	sub	sp, #12
 8016aea:	6840      	ldr	r0, [r0, #4]
 8016aec:	460d      	mov	r5, r1
 8016aee:	4616      	mov	r6, r2
 8016af0:	f7fc f9bc 	bl	8012e6c <uxr_submessage_padding>
 8016af4:	6863      	ldr	r3, [r4, #4]
 8016af6:	4418      	add	r0, r3
 8016af8:	68a3      	ldr	r3, [r4, #8]
 8016afa:	1942      	adds	r2, r0, r5
 8016afc:	4293      	cmp	r3, r2
 8016afe:	bf2c      	ite	cs
 8016b00:	2701      	movcs	r7, #1
 8016b02:	2700      	movcc	r7, #0
 8016b04:	d202      	bcs.n	8016b0c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016b06:	4638      	mov	r0, r7
 8016b08:	b003      	add	sp, #12
 8016b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b0c:	9000      	str	r0, [sp, #0]
 8016b0e:	6821      	ldr	r1, [r4, #0]
 8016b10:	4630      	mov	r0, r6
 8016b12:	2300      	movs	r3, #0
 8016b14:	f7fa fdce 	bl	80116b4 <ucdr_init_buffer_origin_offset>
 8016b18:	6861      	ldr	r1, [r4, #4]
 8016b1a:	4638      	mov	r0, r7
 8016b1c:	4429      	add	r1, r5
 8016b1e:	6061      	str	r1, [r4, #4]
 8016b20:	b003      	add	sp, #12
 8016b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016b24 <uxr_prepare_best_effort_buffer_to_send>:
 8016b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b28:	4604      	mov	r4, r0
 8016b2a:	461d      	mov	r5, r3
 8016b2c:	6840      	ldr	r0, [r0, #4]
 8016b2e:	7b23      	ldrb	r3, [r4, #12]
 8016b30:	4298      	cmp	r0, r3
 8016b32:	bf8c      	ite	hi
 8016b34:	2601      	movhi	r6, #1
 8016b36:	2600      	movls	r6, #0
 8016b38:	d802      	bhi.n	8016b40 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8016b3a:	4630      	mov	r0, r6
 8016b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b40:	4688      	mov	r8, r1
 8016b42:	89e0      	ldrh	r0, [r4, #14]
 8016b44:	2101      	movs	r1, #1
 8016b46:	4617      	mov	r7, r2
 8016b48:	f000 fbf0 	bl	801732c <uxr_seq_num_add>
 8016b4c:	6823      	ldr	r3, [r4, #0]
 8016b4e:	81e0      	strh	r0, [r4, #14]
 8016b50:	8028      	strh	r0, [r5, #0]
 8016b52:	f8c8 3000 	str.w	r3, [r8]
 8016b56:	6863      	ldr	r3, [r4, #4]
 8016b58:	603b      	str	r3, [r7, #0]
 8016b5a:	7b23      	ldrb	r3, [r4, #12]
 8016b5c:	6063      	str	r3, [r4, #4]
 8016b5e:	4630      	mov	r0, r6
 8016b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b64 <on_full_output_buffer>:
 8016b64:	b538      	push	{r3, r4, r5, lr}
 8016b66:	6802      	ldr	r2, [r0, #0]
 8016b68:	460c      	mov	r4, r1
 8016b6a:	6809      	ldr	r1, [r1, #0]
 8016b6c:	8923      	ldrh	r3, [r4, #8]
 8016b6e:	eba2 0c01 	sub.w	ip, r2, r1
 8016b72:	6862      	ldr	r2, [r4, #4]
 8016b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8016b78:	fbbc fcf2 	udiv	ip, ip, r2
 8016b7c:	f10c 0c01 	add.w	ip, ip, #1
 8016b80:	fa1f fc8c 	uxth.w	ip, ip
 8016b84:	fbbc fef3 	udiv	lr, ip, r3
 8016b88:	fb03 c31e 	mls	r3, r3, lr, ip
 8016b8c:	b29b      	uxth	r3, r3
 8016b8e:	fb02 f303 	mul.w	r3, r2, r3
 8016b92:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016b96:	58ca      	ldr	r2, [r1, r3]
 8016b98:	4463      	add	r3, ip
 8016b9a:	eba2 020c 	sub.w	r2, r2, ip
 8016b9e:	3308      	adds	r3, #8
 8016ba0:	4605      	mov	r5, r0
 8016ba2:	4419      	add	r1, r3
 8016ba4:	3a04      	subs	r2, #4
 8016ba6:	6903      	ldr	r3, [r0, #16]
 8016ba8:	f7fa fd8e 	bl	80116c8 <ucdr_init_buffer_origin>
 8016bac:	4628      	mov	r0, r5
 8016bae:	4903      	ldr	r1, [pc, #12]	; (8016bbc <on_full_output_buffer+0x58>)
 8016bb0:	4622      	mov	r2, r4
 8016bb2:	f7fa fd65 	bl	8011680 <ucdr_set_on_full_buffer_callback>
 8016bb6:	2000      	movs	r0, #0
 8016bb8:	bd38      	pop	{r3, r4, r5, pc}
 8016bba:	bf00      	nop
 8016bbc:	08016b65 	.word	0x08016b65

08016bc0 <uxr_init_output_reliable_stream>:
 8016bc0:	b410      	push	{r4}
 8016bc2:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016bc6:	8103      	strh	r3, [r0, #8]
 8016bc8:	e9c0 1200 	strd	r1, r2, [r0]
 8016bcc:	f880 c00c 	strb.w	ip, [r0, #12]
 8016bd0:	b1d3      	cbz	r3, 8016c08 <uxr_init_output_reliable_stream+0x48>
 8016bd2:	f8c1 c000 	str.w	ip, [r1]
 8016bd6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016bda:	f1bc 0f01 	cmp.w	ip, #1
 8016bde:	d913      	bls.n	8016c08 <uxr_init_output_reliable_stream+0x48>
 8016be0:	2301      	movs	r3, #1
 8016be2:	fbb3 f1fc 	udiv	r1, r3, ip
 8016be6:	fb0c 3111 	mls	r1, ip, r1, r3
 8016bea:	b289      	uxth	r1, r1
 8016bec:	6842      	ldr	r2, [r0, #4]
 8016bee:	6804      	ldr	r4, [r0, #0]
 8016bf0:	fbb2 f2fc 	udiv	r2, r2, ip
 8016bf4:	fb01 f202 	mul.w	r2, r1, r2
 8016bf8:	7b01      	ldrb	r1, [r0, #12]
 8016bfa:	50a1      	str	r1, [r4, r2]
 8016bfc:	3301      	adds	r3, #1
 8016bfe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016c02:	b29b      	uxth	r3, r3
 8016c04:	459c      	cmp	ip, r3
 8016c06:	d8ec      	bhi.n	8016be2 <uxr_init_output_reliable_stream+0x22>
 8016c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016c0c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016c10:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016c14:	4905      	ldr	r1, [pc, #20]	; (8016c2c <uxr_init_output_reliable_stream+0x6c>)
 8016c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c1a:	f8c0 100e 	str.w	r1, [r0, #14]
 8016c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c22:	2300      	movs	r3, #0
 8016c24:	8242      	strh	r2, [r0, #18]
 8016c26:	8403      	strh	r3, [r0, #32]
 8016c28:	4770      	bx	lr
 8016c2a:	bf00      	nop
 8016c2c:	ffff0000 	.word	0xffff0000

08016c30 <uxr_reset_output_reliable_stream>:
 8016c30:	8901      	ldrh	r1, [r0, #8]
 8016c32:	b1b1      	cbz	r1, 8016c62 <uxr_reset_output_reliable_stream+0x32>
 8016c34:	f04f 0c00 	mov.w	ip, #0
 8016c38:	4663      	mov	r3, ip
 8016c3a:	fbb3 f2f1 	udiv	r2, r3, r1
 8016c3e:	fb01 3312 	mls	r3, r1, r2, r3
 8016c42:	b29b      	uxth	r3, r3
 8016c44:	6842      	ldr	r2, [r0, #4]
 8016c46:	fbb2 f2f1 	udiv	r2, r2, r1
 8016c4a:	6801      	ldr	r1, [r0, #0]
 8016c4c:	fb02 f303 	mul.w	r3, r2, r3
 8016c50:	7b02      	ldrb	r2, [r0, #12]
 8016c52:	50ca      	str	r2, [r1, r3]
 8016c54:	f10c 0c01 	add.w	ip, ip, #1
 8016c58:	8901      	ldrh	r1, [r0, #8]
 8016c5a:	fa1f f38c 	uxth.w	r3, ip
 8016c5e:	4299      	cmp	r1, r3
 8016c60:	d8eb      	bhi.n	8016c3a <uxr_reset_output_reliable_stream+0xa>
 8016c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016c66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016c6a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016c6e:	4904      	ldr	r1, [pc, #16]	; (8016c80 <uxr_reset_output_reliable_stream+0x50>)
 8016c70:	f8c0 100e 	str.w	r1, [r0, #14]
 8016c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c78:	2300      	movs	r3, #0
 8016c7a:	8242      	strh	r2, [r0, #18]
 8016c7c:	8403      	strh	r3, [r0, #32]
 8016c7e:	4770      	bx	lr
 8016c80:	ffff0000 	.word	0xffff0000

08016c84 <uxr_prepare_reliable_buffer_to_write>:
 8016c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c88:	4604      	mov	r4, r0
 8016c8a:	8900      	ldrh	r0, [r0, #8]
 8016c8c:	89e5      	ldrh	r5, [r4, #14]
 8016c8e:	fbb5 f3f0 	udiv	r3, r5, r0
 8016c92:	b091      	sub	sp, #68	; 0x44
 8016c94:	fb00 5313 	mls	r3, r0, r3, r5
 8016c98:	b29b      	uxth	r3, r3
 8016c9a:	9205      	str	r2, [sp, #20]
 8016c9c:	6862      	ldr	r2, [r4, #4]
 8016c9e:	fbb2 f0f0 	udiv	r0, r2, r0
 8016ca2:	6822      	ldr	r2, [r4, #0]
 8016ca4:	9006      	str	r0, [sp, #24]
 8016ca6:	fb00 f303 	mul.w	r3, r0, r3
 8016caa:	3304      	adds	r3, #4
 8016cac:	18d3      	adds	r3, r2, r3
 8016cae:	4689      	mov	r9, r1
 8016cb0:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8016cb4:	9304      	str	r3, [sp, #16]
 8016cb6:	f1a0 0804 	sub.w	r8, r0, #4
 8016cba:	2104      	movs	r1, #4
 8016cbc:	4630      	mov	r0, r6
 8016cbe:	f7fa fd0f 	bl	80116e0 <ucdr_alignment>
 8016cc2:	1833      	adds	r3, r6, r0
 8016cc4:	eb03 0609 	add.w	r6, r3, r9
 8016cc8:	4546      	cmp	r6, r8
 8016cca:	9303      	str	r3, [sp, #12]
 8016ccc:	f240 80d6 	bls.w	8016e7c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8016cd0:	7b26      	ldrb	r6, [r4, #12]
 8016cd2:	eb06 0309 	add.w	r3, r6, r9
 8016cd6:	4543      	cmp	r3, r8
 8016cd8:	f240 80bd 	bls.w	8016e56 <uxr_prepare_reliable_buffer_to_write+0x1d2>
 8016cdc:	9b03      	ldr	r3, [sp, #12]
 8016cde:	3304      	adds	r3, #4
 8016ce0:	4543      	cmp	r3, r8
 8016ce2:	f080 810d 	bcs.w	8016f00 <uxr_prepare_reliable_buffer_to_write+0x27c>
 8016ce6:	8920      	ldrh	r0, [r4, #8]
 8016ce8:	2800      	cmp	r0, #0
 8016cea:	f000 8122 	beq.w	8016f32 <uxr_prepare_reliable_buffer_to_write+0x2ae>
 8016cee:	2100      	movs	r1, #0
 8016cf0:	6827      	ldr	r7, [r4, #0]
 8016cf2:	6862      	ldr	r2, [r4, #4]
 8016cf4:	fbb2 fef0 	udiv	lr, r2, r0
 8016cf8:	468c      	mov	ip, r1
 8016cfa:	460b      	mov	r3, r1
 8016cfc:	fbb3 f2f0 	udiv	r2, r3, r0
 8016d00:	fb00 3312 	mls	r3, r0, r2, r3
 8016d04:	b29b      	uxth	r3, r3
 8016d06:	fb0e f303 	mul.w	r3, lr, r3
 8016d0a:	3101      	adds	r1, #1
 8016d0c:	58fa      	ldr	r2, [r7, r3]
 8016d0e:	4296      	cmp	r6, r2
 8016d10:	bf08      	it	eq
 8016d12:	f10c 0c01 	addeq.w	ip, ip, #1
 8016d16:	b28b      	uxth	r3, r1
 8016d18:	bf08      	it	eq
 8016d1a:	fa1f fc8c 	uxtheq.w	ip, ip
 8016d1e:	4283      	cmp	r3, r0
 8016d20:	d3ec      	bcc.n	8016cfc <uxr_prepare_reliable_buffer_to_write+0x78>
 8016d22:	9b03      	ldr	r3, [sp, #12]
 8016d24:	f1a8 0704 	sub.w	r7, r8, #4
 8016d28:	b2bf      	uxth	r7, r7
 8016d2a:	1bbe      	subs	r6, r7, r6
 8016d2c:	1aff      	subs	r7, r7, r3
 8016d2e:	b2bf      	uxth	r7, r7
 8016d30:	b2b6      	uxth	r6, r6
 8016d32:	eba9 0907 	sub.w	r9, r9, r7
 8016d36:	fbb9 faf6 	udiv	sl, r9, r6
 8016d3a:	fb06 911a 	mls	r1, r6, sl, r9
 8016d3e:	9607      	str	r6, [sp, #28]
 8016d40:	2900      	cmp	r1, #0
 8016d42:	f040 80bc 	bne.w	8016ebe <uxr_prepare_reliable_buffer_to_write+0x23a>
 8016d46:	fa1f fa8a 	uxth.w	sl, sl
 8016d4a:	45e2      	cmp	sl, ip
 8016d4c:	f200 8092 	bhi.w	8016e74 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8016d50:	f10d 0b20 	add.w	fp, sp, #32
 8016d54:	f1ba 0f00 	cmp.w	sl, #0
 8016d58:	d03a      	beq.n	8016dd0 <uxr_prepare_reliable_buffer_to_write+0x14c>
 8016d5a:	f04f 0900 	mov.w	r9, #0
 8016d5e:	f10d 0b20 	add.w	fp, sp, #32
 8016d62:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016d66:	fbb5 fcf0 	udiv	ip, r5, r0
 8016d6a:	fb00 511c 	mls	r1, r0, ip, r5
 8016d6e:	fa1f fc81 	uxth.w	ip, r1
 8016d72:	fbb3 f1f0 	udiv	r1, r3, r0
 8016d76:	fb0c f101 	mul.w	r1, ip, r1
 8016d7a:	3104      	adds	r1, #4
 8016d7c:	4411      	add	r1, r2
 8016d7e:	4658      	mov	r0, fp
 8016d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d84:	9300      	str	r3, [sp, #0]
 8016d86:	4642      	mov	r2, r8
 8016d88:	2300      	movs	r3, #0
 8016d8a:	f7fa fc93 	bl	80116b4 <ucdr_init_buffer_origin_offset>
 8016d8e:	463a      	mov	r2, r7
 8016d90:	2300      	movs	r3, #0
 8016d92:	210d      	movs	r1, #13
 8016d94:	4658      	mov	r0, fp
 8016d96:	f7fc f829 	bl	8012dec <uxr_buffer_submessage_header>
 8016d9a:	8921      	ldrh	r1, [r4, #8]
 8016d9c:	fbb5 f2f1 	udiv	r2, r5, r1
 8016da0:	fb01 5212 	mls	r2, r1, r2, r5
 8016da4:	b292      	uxth	r2, r2
 8016da6:	6863      	ldr	r3, [r4, #4]
 8016da8:	fbb3 f3f1 	udiv	r3, r3, r1
 8016dac:	fb02 f303 	mul.w	r3, r2, r3
 8016db0:	6822      	ldr	r2, [r4, #0]
 8016db2:	4628      	mov	r0, r5
 8016db4:	f842 8003 	str.w	r8, [r2, r3]
 8016db8:	2101      	movs	r1, #1
 8016dba:	f000 fab7 	bl	801732c <uxr_seq_num_add>
 8016dbe:	f109 0901 	add.w	r9, r9, #1
 8016dc2:	fa1f f389 	uxth.w	r3, r9
 8016dc6:	459a      	cmp	sl, r3
 8016dc8:	4605      	mov	r5, r0
 8016dca:	4637      	mov	r7, r6
 8016dcc:	8920      	ldrh	r0, [r4, #8]
 8016dce:	d8c8      	bhi.n	8016d62 <uxr_prepare_reliable_buffer_to_write+0xde>
 8016dd0:	fbb5 f1f0 	udiv	r1, r5, r0
 8016dd4:	fb00 5111 	mls	r1, r0, r1, r5
 8016dd8:	b28e      	uxth	r6, r1
 8016dda:	6863      	ldr	r3, [r4, #4]
 8016ddc:	fbb3 f1f0 	udiv	r1, r3, r0
 8016de0:	6823      	ldr	r3, [r4, #0]
 8016de2:	fb06 f101 	mul.w	r1, r6, r1
 8016de6:	3104      	adds	r1, #4
 8016de8:	4419      	add	r1, r3
 8016dea:	4642      	mov	r2, r8
 8016dec:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016df0:	9000      	str	r0, [sp, #0]
 8016df2:	2300      	movs	r3, #0
 8016df4:	4658      	mov	r0, fp
 8016df6:	f7fa fc5d 	bl	80116b4 <ucdr_init_buffer_origin_offset>
 8016dfa:	9e07      	ldr	r6, [sp, #28]
 8016dfc:	4658      	mov	r0, fp
 8016dfe:	b2b2      	uxth	r2, r6
 8016e00:	2302      	movs	r3, #2
 8016e02:	210d      	movs	r1, #13
 8016e04:	f7fb fff2 	bl	8012dec <uxr_buffer_submessage_header>
 8016e08:	9b06      	ldr	r3, [sp, #24]
 8016e0a:	7b20      	ldrb	r0, [r4, #12]
 8016e0c:	8927      	ldrh	r7, [r4, #8]
 8016e0e:	f1a3 0208 	sub.w	r2, r3, #8
 8016e12:	9b03      	ldr	r3, [sp, #12]
 8016e14:	3004      	adds	r0, #4
 8016e16:	1ad2      	subs	r2, r2, r3
 8016e18:	1d19      	adds	r1, r3, #4
 8016e1a:	9b04      	ldr	r3, [sp, #16]
 8016e1c:	4430      	add	r0, r6
 8016e1e:	fbb5 f6f7 	udiv	r6, r5, r7
 8016e22:	fb07 5616 	mls	r6, r7, r6, r5
 8016e26:	440b      	add	r3, r1
 8016e28:	b2b6      	uxth	r6, r6
 8016e2a:	4619      	mov	r1, r3
 8016e2c:	6863      	ldr	r3, [r4, #4]
 8016e2e:	fbb3 f3f7 	udiv	r3, r3, r7
 8016e32:	fb06 f303 	mul.w	r3, r6, r3
 8016e36:	6826      	ldr	r6, [r4, #0]
 8016e38:	50f0      	str	r0, [r6, r3]
 8016e3a:	9e05      	ldr	r6, [sp, #20]
 8016e3c:	4630      	mov	r0, r6
 8016e3e:	f7fa fc4b 	bl	80116d8 <ucdr_init_buffer>
 8016e42:	4630      	mov	r0, r6
 8016e44:	493c      	ldr	r1, [pc, #240]	; (8016f38 <uxr_prepare_reliable_buffer_to_write+0x2b4>)
 8016e46:	4622      	mov	r2, r4
 8016e48:	f7fa fc1a 	bl	8011680 <ucdr_set_on_full_buffer_callback>
 8016e4c:	2001      	movs	r0, #1
 8016e4e:	81e5      	strh	r5, [r4, #14]
 8016e50:	b011      	add	sp, #68	; 0x44
 8016e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e56:	2101      	movs	r1, #1
 8016e58:	89e0      	ldrh	r0, [r4, #14]
 8016e5a:	f000 fa67 	bl	801732c <uxr_seq_num_add>
 8016e5e:	8921      	ldrh	r1, [r4, #8]
 8016e60:	4605      	mov	r5, r0
 8016e62:	8a60      	ldrh	r0, [r4, #18]
 8016e64:	f000 fa62 	bl	801732c <uxr_seq_num_add>
 8016e68:	4601      	mov	r1, r0
 8016e6a:	4628      	mov	r0, r5
 8016e6c:	f000 fa66 	bl	801733c <uxr_seq_num_cmp>
 8016e70:	2800      	cmp	r0, #0
 8016e72:	dd2a      	ble.n	8016eca <uxr_prepare_reliable_buffer_to_write+0x246>
 8016e74:	2000      	movs	r0, #0
 8016e76:	b011      	add	sp, #68	; 0x44
 8016e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e7c:	8921      	ldrh	r1, [r4, #8]
 8016e7e:	8a60      	ldrh	r0, [r4, #18]
 8016e80:	f000 fa54 	bl	801732c <uxr_seq_num_add>
 8016e84:	4601      	mov	r1, r0
 8016e86:	4628      	mov	r0, r5
 8016e88:	f000 fa58 	bl	801733c <uxr_seq_num_cmp>
 8016e8c:	2800      	cmp	r0, #0
 8016e8e:	dcf1      	bgt.n	8016e74 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8016e90:	8927      	ldrh	r7, [r4, #8]
 8016e92:	fbb5 f2f7 	udiv	r2, r5, r7
 8016e96:	fb07 5512 	mls	r5, r7, r2, r5
 8016e9a:	b2ad      	uxth	r5, r5
 8016e9c:	6863      	ldr	r3, [r4, #4]
 8016e9e:	6822      	ldr	r2, [r4, #0]
 8016ea0:	fbb3 f3f7 	udiv	r3, r3, r7
 8016ea4:	fb05 f303 	mul.w	r3, r5, r3
 8016ea8:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8016eac:	50d6      	str	r6, [r2, r3]
 8016eae:	9a03      	ldr	r2, [sp, #12]
 8016eb0:	9200      	str	r2, [sp, #0]
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	4632      	mov	r2, r6
 8016eb6:	f7fa fbfd 	bl	80116b4 <ucdr_init_buffer_origin_offset>
 8016eba:	2001      	movs	r0, #1
 8016ebc:	e7db      	b.n	8016e76 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 8016ebe:	f10a 0a01 	add.w	sl, sl, #1
 8016ec2:	fa1f fa8a 	uxth.w	sl, sl
 8016ec6:	9107      	str	r1, [sp, #28]
 8016ec8:	e73f      	b.n	8016d4a <uxr_prepare_reliable_buffer_to_write+0xc6>
 8016eca:	8921      	ldrh	r1, [r4, #8]
 8016ecc:	fbb5 f3f1 	udiv	r3, r5, r1
 8016ed0:	fb01 5313 	mls	r3, r1, r3, r5
 8016ed4:	b29a      	uxth	r2, r3
 8016ed6:	6863      	ldr	r3, [r4, #4]
 8016ed8:	fbb3 f3f1 	udiv	r3, r3, r1
 8016edc:	6821      	ldr	r1, [r4, #0]
 8016ede:	9805      	ldr	r0, [sp, #20]
 8016ee0:	fb02 f303 	mul.w	r3, r2, r3
 8016ee4:	3304      	adds	r3, #4
 8016ee6:	7b22      	ldrb	r2, [r4, #12]
 8016ee8:	4419      	add	r1, r3
 8016eea:	444a      	add	r2, r9
 8016eec:	f841 2c04 	str.w	r2, [r1, #-4]
 8016ef0:	7b23      	ldrb	r3, [r4, #12]
 8016ef2:	9300      	str	r3, [sp, #0]
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	f7fa fbdd 	bl	80116b4 <ucdr_init_buffer_origin_offset>
 8016efa:	81e5      	strh	r5, [r4, #14]
 8016efc:	2001      	movs	r0, #1
 8016efe:	e7ba      	b.n	8016e76 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 8016f00:	4628      	mov	r0, r5
 8016f02:	2101      	movs	r1, #1
 8016f04:	f000 fa12 	bl	801732c <uxr_seq_num_add>
 8016f08:	4605      	mov	r5, r0
 8016f0a:	8920      	ldrh	r0, [r4, #8]
 8016f0c:	fbb5 f3f0 	udiv	r3, r5, r0
 8016f10:	fb00 5313 	mls	r3, r0, r3, r5
 8016f14:	b29a      	uxth	r2, r3
 8016f16:	6863      	ldr	r3, [r4, #4]
 8016f18:	fbb3 f3f0 	udiv	r3, r3, r0
 8016f1c:	fb02 f303 	mul.w	r3, r2, r3
 8016f20:	6822      	ldr	r2, [r4, #0]
 8016f22:	7b26      	ldrb	r6, [r4, #12]
 8016f24:	3304      	adds	r3, #4
 8016f26:	18d3      	adds	r3, r2, r3
 8016f28:	9304      	str	r3, [sp, #16]
 8016f2a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016f2e:	9303      	str	r3, [sp, #12]
 8016f30:	e6da      	b.n	8016ce8 <uxr_prepare_reliable_buffer_to_write+0x64>
 8016f32:	4684      	mov	ip, r0
 8016f34:	e6f5      	b.n	8016d22 <uxr_prepare_reliable_buffer_to_write+0x9e>
 8016f36:	bf00      	nop
 8016f38:	08016b65 	.word	0x08016b65

08016f3c <uxr_prepare_next_reliable_buffer_to_send>:
 8016f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f3e:	4604      	mov	r4, r0
 8016f40:	460f      	mov	r7, r1
 8016f42:	8a00      	ldrh	r0, [r0, #16]
 8016f44:	2101      	movs	r1, #1
 8016f46:	4616      	mov	r6, r2
 8016f48:	461d      	mov	r5, r3
 8016f4a:	f000 f9ef 	bl	801732c <uxr_seq_num_add>
 8016f4e:	8028      	strh	r0, [r5, #0]
 8016f50:	8922      	ldrh	r2, [r4, #8]
 8016f52:	fbb0 f3f2 	udiv	r3, r0, r2
 8016f56:	fb02 0c13 	mls	ip, r2, r3, r0
 8016f5a:	fa1f fc8c 	uxth.w	ip, ip
 8016f5e:	6863      	ldr	r3, [r4, #4]
 8016f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8016f64:	fb0c fc03 	mul.w	ip, ip, r3
 8016f68:	6823      	ldr	r3, [r4, #0]
 8016f6a:	89e1      	ldrh	r1, [r4, #14]
 8016f6c:	f10c 0c04 	add.w	ip, ip, #4
 8016f70:	4463      	add	r3, ip
 8016f72:	603b      	str	r3, [r7, #0]
 8016f74:	6823      	ldr	r3, [r4, #0]
 8016f76:	449c      	add	ip, r3
 8016f78:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016f7c:	6033      	str	r3, [r6, #0]
 8016f7e:	f000 f9dd 	bl	801733c <uxr_seq_num_cmp>
 8016f82:	2800      	cmp	r0, #0
 8016f84:	dd01      	ble.n	8016f8a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8016f86:	2000      	movs	r0, #0
 8016f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f8a:	7b23      	ldrb	r3, [r4, #12]
 8016f8c:	6832      	ldr	r2, [r6, #0]
 8016f8e:	429a      	cmp	r2, r3
 8016f90:	d9f9      	bls.n	8016f86 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016f92:	8a61      	ldrh	r1, [r4, #18]
 8016f94:	8a20      	ldrh	r0, [r4, #16]
 8016f96:	f000 f9cd 	bl	8017334 <uxr_seq_num_sub>
 8016f9a:	8923      	ldrh	r3, [r4, #8]
 8016f9c:	4283      	cmp	r3, r0
 8016f9e:	d0f2      	beq.n	8016f86 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016fa0:	8828      	ldrh	r0, [r5, #0]
 8016fa2:	89e3      	ldrh	r3, [r4, #14]
 8016fa4:	8220      	strh	r0, [r4, #16]
 8016fa6:	4298      	cmp	r0, r3
 8016fa8:	d001      	beq.n	8016fae <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016faa:	2001      	movs	r0, #1
 8016fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fae:	2101      	movs	r1, #1
 8016fb0:	f000 f9bc 	bl	801732c <uxr_seq_num_add>
 8016fb4:	81e0      	strh	r0, [r4, #14]
 8016fb6:	2001      	movs	r0, #1
 8016fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fba:	bf00      	nop

08016fbc <uxr_update_output_stream_heartbeat_timestamp>:
 8016fbc:	b570      	push	{r4, r5, r6, lr}
 8016fbe:	8a01      	ldrh	r1, [r0, #16]
 8016fc0:	4604      	mov	r4, r0
 8016fc2:	8a40      	ldrh	r0, [r0, #18]
 8016fc4:	4615      	mov	r5, r2
 8016fc6:	461e      	mov	r6, r3
 8016fc8:	f000 f9b8 	bl	801733c <uxr_seq_num_cmp>
 8016fcc:	2800      	cmp	r0, #0
 8016fce:	db07      	blt.n	8016fe0 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016fd4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016fd8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016fdc:	2000      	movs	r0, #0
 8016fde:	bd70      	pop	{r4, r5, r6, pc}
 8016fe0:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016fe4:	b940      	cbnz	r0, 8016ff8 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8016fe6:	2301      	movs	r3, #1
 8016fe8:	f884 3020 	strb.w	r3, [r4, #32]
 8016fec:	3564      	adds	r5, #100	; 0x64
 8016fee:	f146 0600 	adc.w	r6, r6, #0
 8016ff2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016ff6:	bd70      	pop	{r4, r5, r6, pc}
 8016ff8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016ffc:	4295      	cmp	r5, r2
 8016ffe:	eb76 0303 	sbcs.w	r3, r6, r3
 8017002:	bfa5      	ittet	ge
 8017004:	3001      	addge	r0, #1
 8017006:	f884 0020 	strbge.w	r0, [r4, #32]
 801700a:	2000      	movlt	r0, #0
 801700c:	2001      	movge	r0, #1
 801700e:	e7ed      	b.n	8016fec <uxr_update_output_stream_heartbeat_timestamp+0x30>

08017010 <uxr_begin_output_nack_buffer_it>:
 8017010:	8a40      	ldrh	r0, [r0, #18]
 8017012:	4770      	bx	lr

08017014 <uxr_next_reliable_nack_buffer_to_send>:
 8017014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017018:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 801701c:	b082      	sub	sp, #8
 801701e:	f1b8 0f00 	cmp.w	r8, #0
 8017022:	d011      	beq.n	8017048 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8017024:	4604      	mov	r4, r0
 8017026:	8818      	ldrh	r0, [r3, #0]
 8017028:	460e      	mov	r6, r1
 801702a:	4617      	mov	r7, r2
 801702c:	461d      	mov	r5, r3
 801702e:	2101      	movs	r1, #1
 8017030:	f000 f97c 	bl	801732c <uxr_seq_num_add>
 8017034:	8028      	strh	r0, [r5, #0]
 8017036:	8a21      	ldrh	r1, [r4, #16]
 8017038:	f000 f980 	bl	801733c <uxr_seq_num_cmp>
 801703c:	2800      	cmp	r0, #0
 801703e:	dd07      	ble.n	8017050 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8017040:	f04f 0800 	mov.w	r8, #0
 8017044:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8017048:	4640      	mov	r0, r8
 801704a:	b002      	add	sp, #8
 801704c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017050:	8921      	ldrh	r1, [r4, #8]
 8017052:	8828      	ldrh	r0, [r5, #0]
 8017054:	6823      	ldr	r3, [r4, #0]
 8017056:	fbb0 f2f1 	udiv	r2, r0, r1
 801705a:	fb01 0c12 	mls	ip, r1, r2, r0
 801705e:	fa1f f28c 	uxth.w	r2, ip
 8017062:	9301      	str	r3, [sp, #4]
 8017064:	6863      	ldr	r3, [r4, #4]
 8017066:	fbb3 fcf1 	udiv	ip, r3, r1
 801706a:	9b01      	ldr	r3, [sp, #4]
 801706c:	fb02 fc0c 	mul.w	ip, r2, ip
 8017070:	f10c 0c04 	add.w	ip, ip, #4
 8017074:	4463      	add	r3, ip
 8017076:	6033      	str	r3, [r6, #0]
 8017078:	6823      	ldr	r3, [r4, #0]
 801707a:	4463      	add	r3, ip
 801707c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8017080:	603b      	str	r3, [r7, #0]
 8017082:	7b22      	ldrb	r2, [r4, #12]
 8017084:	429a      	cmp	r2, r3
 8017086:	d0d2      	beq.n	801702e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8017088:	4640      	mov	r0, r8
 801708a:	b002      	add	sp, #8
 801708c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017090 <uxr_process_acknack>:
 8017090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017092:	4604      	mov	r4, r0
 8017094:	460e      	mov	r6, r1
 8017096:	4610      	mov	r0, r2
 8017098:	2101      	movs	r1, #1
 801709a:	f000 f94b 	bl	8017334 <uxr_seq_num_sub>
 801709e:	8a61      	ldrh	r1, [r4, #18]
 80170a0:	f000 f948 	bl	8017334 <uxr_seq_num_sub>
 80170a4:	b1c0      	cbz	r0, 80170d8 <uxr_process_acknack+0x48>
 80170a6:	4605      	mov	r5, r0
 80170a8:	2700      	movs	r7, #0
 80170aa:	2101      	movs	r1, #1
 80170ac:	8a60      	ldrh	r0, [r4, #18]
 80170ae:	f000 f93d 	bl	801732c <uxr_seq_num_add>
 80170b2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80170b6:	fbb0 f1fc 	udiv	r1, r0, ip
 80170ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 80170be:	fb0c 0111 	mls	r1, ip, r1, r0
 80170c2:	b289      	uxth	r1, r1
 80170c4:	3701      	adds	r7, #1
 80170c6:	fbb3 f3fc 	udiv	r3, r3, ip
 80170ca:	fb01 f303 	mul.w	r3, r1, r3
 80170ce:	42bd      	cmp	r5, r7
 80170d0:	7b21      	ldrb	r1, [r4, #12]
 80170d2:	8260      	strh	r0, [r4, #18]
 80170d4:	50d1      	str	r1, [r2, r3]
 80170d6:	d1e8      	bne.n	80170aa <uxr_process_acknack+0x1a>
 80170d8:	3e00      	subs	r6, #0
 80170da:	f04f 0300 	mov.w	r3, #0
 80170de:	bf18      	it	ne
 80170e0:	2601      	movne	r6, #1
 80170e2:	f884 3020 	strb.w	r3, [r4, #32]
 80170e6:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 80170ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080170ec <uxr_is_output_up_to_date>:
 80170ec:	8a01      	ldrh	r1, [r0, #16]
 80170ee:	8a40      	ldrh	r0, [r0, #18]
 80170f0:	b508      	push	{r3, lr}
 80170f2:	f000 f923 	bl	801733c <uxr_seq_num_cmp>
 80170f6:	fab0 f080 	clz	r0, r0
 80170fa:	0940      	lsrs	r0, r0, #5
 80170fc:	bd08      	pop	{r3, pc}
 80170fe:	bf00      	nop

08017100 <get_available_free_slots>:
 8017100:	8902      	ldrh	r2, [r0, #8]
 8017102:	b1da      	cbz	r2, 801713c <get_available_free_slots+0x3c>
 8017104:	b530      	push	{r4, r5, lr}
 8017106:	2100      	movs	r1, #0
 8017108:	6843      	ldr	r3, [r0, #4]
 801710a:	6805      	ldr	r5, [r0, #0]
 801710c:	7b04      	ldrb	r4, [r0, #12]
 801710e:	fbb3 fef2 	udiv	lr, r3, r2
 8017112:	4608      	mov	r0, r1
 8017114:	460b      	mov	r3, r1
 8017116:	fbb3 fcf2 	udiv	ip, r3, r2
 801711a:	fb02 331c 	mls	r3, r2, ip, r3
 801711e:	b29b      	uxth	r3, r3
 8017120:	fb0e f303 	mul.w	r3, lr, r3
 8017124:	3101      	adds	r1, #1
 8017126:	f855 c003 	ldr.w	ip, [r5, r3]
 801712a:	4564      	cmp	r4, ip
 801712c:	bf08      	it	eq
 801712e:	3001      	addeq	r0, #1
 8017130:	b28b      	uxth	r3, r1
 8017132:	bf08      	it	eq
 8017134:	b280      	uxtheq	r0, r0
 8017136:	4293      	cmp	r3, r2
 8017138:	d3ed      	bcc.n	8017116 <get_available_free_slots+0x16>
 801713a:	bd30      	pop	{r4, r5, pc}
 801713c:	4610      	mov	r0, r2
 801713e:	4770      	bx	lr

08017140 <uxr_buffer_cancel_data>:
 8017140:	b510      	push	{r4, lr}
 8017142:	b094      	sub	sp, #80	; 0x50
 8017144:	2300      	movs	r3, #0
 8017146:	9202      	str	r2, [sp, #8]
 8017148:	9205      	str	r2, [sp, #20]
 801714a:	9301      	str	r3, [sp, #4]
 801714c:	2201      	movs	r2, #1
 801714e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017152:	f88d 301e 	strb.w	r3, [sp, #30]
 8017156:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801715a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801715e:	2308      	movs	r3, #8
 8017160:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8017164:	9300      	str	r3, [sp, #0]
 8017166:	2210      	movs	r2, #16
 8017168:	ab0c      	add	r3, sp, #48	; 0x30
 801716a:	4604      	mov	r4, r0
 801716c:	9103      	str	r1, [sp, #12]
 801716e:	f7fb fb9f 	bl	80128b0 <uxr_prepare_stream_to_write_submessage>
 8017172:	b918      	cbnz	r0, 801717c <uxr_buffer_cancel_data+0x3c>
 8017174:	4604      	mov	r4, r0
 8017176:	4620      	mov	r0, r4
 8017178:	b014      	add	sp, #80	; 0x50
 801717a:	bd10      	pop	{r4, pc}
 801717c:	9905      	ldr	r1, [sp, #20]
 801717e:	aa06      	add	r2, sp, #24
 8017180:	4620      	mov	r0, r4
 8017182:	f7fb fccb 	bl	8012b1c <uxr_init_base_object_request>
 8017186:	a906      	add	r1, sp, #24
 8017188:	4604      	mov	r4, r0
 801718a:	a80c      	add	r0, sp, #48	; 0x30
 801718c:	f7fc feda 	bl	8013f44 <uxr_serialize_READ_DATA_Payload>
 8017190:	4620      	mov	r0, r4
 8017192:	b014      	add	sp, #80	; 0x50
 8017194:	bd10      	pop	{r4, pc}
 8017196:	bf00      	nop

08017198 <read_submessage_format>:
 8017198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801719c:	b095      	sub	sp, #84	; 0x54
 801719e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 80171a2:	b113      	cbz	r3, 80171aa <read_submessage_format+0x12>
 80171a4:	b015      	add	sp, #84	; 0x54
 80171a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171aa:	460c      	mov	r4, r1
 80171ac:	4615      	mov	r5, r2
 80171ae:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80171b2:	4607      	mov	r7, r0
 80171b4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80171b6:	9004      	str	r0, [sp, #16]
 80171b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80171ba:	9005      	str	r0, [sp, #20]
 80171bc:	1a52      	subs	r2, r2, r1
 80171be:	a80c      	add	r0, sp, #48	; 0x30
 80171c0:	4699      	mov	r9, r3
 80171c2:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 80171c6:	f7fa fa87 	bl	80116d8 <ucdr_init_buffer>
 80171ca:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80171ce:	a80c      	add	r0, sp, #48	; 0x30
 80171d0:	f7fa fa56 	bl	8011680 <ucdr_set_on_full_buffer_callback>
 80171d4:	69e2      	ldr	r2, [r4, #28]
 80171d6:	b19a      	cbz	r2, 8017200 <read_submessage_format+0x68>
 80171d8:	f1b8 0f07 	cmp.w	r8, #7
 80171dc:	f882 9014 	strb.w	r9, [r2, #20]
 80171e0:	d040      	beq.n	8017264 <read_submessage_format+0xcc>
 80171e2:	f1b8 0f08 	cmp.w	r8, #8
 80171e6:	d02e      	beq.n	8017246 <read_submessage_format+0xae>
 80171e8:	f1b8 0f06 	cmp.w	r8, #6
 80171ec:	d011      	beq.n	8017212 <read_submessage_format+0x7a>
 80171ee:	2301      	movs	r3, #1
 80171f0:	7513      	strb	r3, [r2, #20]
 80171f2:	4629      	mov	r1, r5
 80171f4:	4620      	mov	r0, r4
 80171f6:	f7fa fabf 	bl	8011778 <ucdr_advance_buffer>
 80171fa:	b015      	add	sp, #84	; 0x54
 80171fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017200:	f1b8 0f07 	cmp.w	r8, #7
 8017204:	d02e      	beq.n	8017264 <read_submessage_format+0xcc>
 8017206:	f1b8 0f08 	cmp.w	r8, #8
 801720a:	d01c      	beq.n	8017246 <read_submessage_format+0xae>
 801720c:	f1b8 0f06 	cmp.w	r8, #6
 8017210:	d1ef      	bne.n	80171f2 <read_submessage_format+0x5a>
 8017212:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 8017216:	f1b8 0f00 	cmp.w	r8, #0
 801721a:	d011      	beq.n	8017240 <read_submessage_format+0xa8>
 801721c:	ab0c      	add	r3, sp, #48	; 0x30
 801721e:	e9cd 3500 	strd	r3, r5, [sp]
 8017222:	2306      	movs	r3, #6
 8017224:	f88d 3016 	strb.w	r3, [sp, #22]
 8017228:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801722c:	9302      	str	r3, [sp, #8]
 801722e:	4632      	mov	r2, r6
 8017230:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8017234:	4638      	mov	r0, r7
 8017236:	47c0      	blx	r8
 8017238:	2301      	movs	r3, #1
 801723a:	69e2      	ldr	r2, [r4, #28]
 801723c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8017240:	2a00      	cmp	r2, #0
 8017242:	d1d4      	bne.n	80171ee <read_submessage_format+0x56>
 8017244:	e7d5      	b.n	80171f2 <read_submessage_format+0x5a>
 8017246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801724a:	2b00      	cmp	r3, #0
 801724c:	d0f8      	beq.n	8017240 <read_submessage_format+0xa8>
 801724e:	a906      	add	r1, sp, #24
 8017250:	a80c      	add	r0, sp, #48	; 0x30
 8017252:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8017256:	f7fc ff15 	bl	8014084 <uxr_deserialize_SampleIdentity>
 801725a:	b9a0      	cbnz	r0, 8017286 <read_submessage_format+0xee>
 801725c:	69e2      	ldr	r2, [r4, #28]
 801725e:	2a00      	cmp	r2, #0
 8017260:	d1c5      	bne.n	80171ee <read_submessage_format+0x56>
 8017262:	e7c6      	b.n	80171f2 <read_submessage_format+0x5a>
 8017264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017268:	b13b      	cbz	r3, 801727a <read_submessage_format+0xe2>
 801726a:	a906      	add	r1, sp, #24
 801726c:	a80c      	add	r0, sp, #48	; 0x30
 801726e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8017272:	f7fc fc01 	bl	8013a78 <uxr_deserialize_BaseObjectRequest>
 8017276:	bb60      	cbnz	r0, 80172d2 <read_submessage_format+0x13a>
 8017278:	69e2      	ldr	r2, [r4, #28]
 801727a:	68a3      	ldr	r3, [r4, #8]
 801727c:	442b      	add	r3, r5
 801727e:	60a3      	str	r3, [r4, #8]
 8017280:	2a00      	cmp	r2, #0
 8017282:	d1b4      	bne.n	80171ee <read_submessage_format+0x56>
 8017284:	e7b5      	b.n	80171f2 <read_submessage_format+0x5a>
 8017286:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801728a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801728c:	1a52      	subs	r2, r2, r1
 801728e:	eba8 0803 	sub.w	r8, r8, r3
 8017292:	a80c      	add	r0, sp, #48	; 0x30
 8017294:	f7fa fa20 	bl	80116d8 <ucdr_init_buffer>
 8017298:	44a8      	add	r8, r5
 801729a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801729e:	a80c      	add	r0, sp, #48	; 0x30
 80172a0:	f7fa f9ee 	bl	8011680 <ucdr_set_on_full_buffer_callback>
 80172a4:	fa1f f888 	uxth.w	r8, r8
 80172a8:	ab0c      	add	r3, sp, #48	; 0x30
 80172aa:	9300      	str	r3, [sp, #0]
 80172ac:	f8cd 8004 	str.w	r8, [sp, #4]
 80172b0:	2108      	movs	r1, #8
 80172b2:	f88d 1016 	strb.w	r1, [sp, #22]
 80172b6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80172ba:	9102      	str	r1, [sp, #8]
 80172bc:	ab06      	add	r3, sp, #24
 80172be:	4632      	mov	r2, r6
 80172c0:	9905      	ldr	r1, [sp, #20]
 80172c2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 80172c6:	4638      	mov	r0, r7
 80172c8:	47b0      	blx	r6
 80172ca:	2301      	movs	r3, #1
 80172cc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80172d0:	e7c4      	b.n	801725c <read_submessage_format+0xc4>
 80172d2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80172d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80172d8:	1a52      	subs	r2, r2, r1
 80172da:	a80c      	add	r0, sp, #48	; 0x30
 80172dc:	eba8 0803 	sub.w	r8, r8, r3
 80172e0:	f7fa f9fa 	bl	80116d8 <ucdr_init_buffer>
 80172e4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80172e8:	a80c      	add	r0, sp, #48	; 0x30
 80172ea:	f7fa f9c9 	bl	8011680 <ucdr_set_on_full_buffer_callback>
 80172ee:	ab0c      	add	r3, sp, #48	; 0x30
 80172f0:	9300      	str	r3, [sp, #0]
 80172f2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80172f6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80172fa:	44a8      	add	r8, r5
 80172fc:	fa1f f888 	uxth.w	r8, r8
 8017300:	f8cd 8004 	str.w	r8, [sp, #4]
 8017304:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017308:	2107      	movs	r1, #7
 801730a:	f88d 1016 	strb.w	r1, [sp, #22]
 801730e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8017312:	9102      	str	r1, [sp, #8]
 8017314:	4632      	mov	r2, r6
 8017316:	b29b      	uxth	r3, r3
 8017318:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 801731c:	9905      	ldr	r1, [sp, #20]
 801731e:	4638      	mov	r0, r7
 8017320:	47b0      	blx	r6
 8017322:	2301      	movs	r3, #1
 8017324:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8017328:	e7a6      	b.n	8017278 <read_submessage_format+0xe0>
 801732a:	bf00      	nop

0801732c <uxr_seq_num_add>:
 801732c:	4408      	add	r0, r1
 801732e:	b280      	uxth	r0, r0
 8017330:	4770      	bx	lr
 8017332:	bf00      	nop

08017334 <uxr_seq_num_sub>:
 8017334:	1a40      	subs	r0, r0, r1
 8017336:	b280      	uxth	r0, r0
 8017338:	4770      	bx	lr
 801733a:	bf00      	nop

0801733c <uxr_seq_num_cmp>:
 801733c:	4288      	cmp	r0, r1
 801733e:	d011      	beq.n	8017364 <uxr_seq_num_cmp+0x28>
 8017340:	d309      	bcc.n	8017356 <uxr_seq_num_cmp+0x1a>
 8017342:	4288      	cmp	r0, r1
 8017344:	d910      	bls.n	8017368 <uxr_seq_num_cmp+0x2c>
 8017346:	1a40      	subs	r0, r0, r1
 8017348:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801734c:	bfd4      	ite	le
 801734e:	2001      	movle	r0, #1
 8017350:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8017354:	4770      	bx	lr
 8017356:	1a0b      	subs	r3, r1, r0
 8017358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801735c:	daf1      	bge.n	8017342 <uxr_seq_num_cmp+0x6>
 801735e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017362:	4770      	bx	lr
 8017364:	2000      	movs	r0, #0
 8017366:	4770      	bx	lr
 8017368:	2001      	movs	r0, #1
 801736a:	4770      	bx	lr

0801736c <uxr_init_framing_io>:
 801736c:	2300      	movs	r3, #0
 801736e:	7041      	strb	r1, [r0, #1]
 8017370:	7003      	strb	r3, [r0, #0]
 8017372:	8583      	strh	r3, [r0, #44]	; 0x2c
 8017374:	4770      	bx	lr
 8017376:	bf00      	nop

08017378 <uxr_write_framed_msg>:
 8017378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801737c:	4617      	mov	r7, r2
 801737e:	7842      	ldrb	r2, [r0, #1]
 8017380:	b083      	sub	sp, #12
 8017382:	460e      	mov	r6, r1
 8017384:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8017388:	469a      	mov	sl, r3
 801738a:	2901      	cmp	r1, #1
 801738c:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8017390:	4604      	mov	r4, r0
 8017392:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8017396:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801739a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801739e:	f240 8137 	bls.w	8017610 <uxr_write_framed_msg+0x298>
 80173a2:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80173a6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80173aa:	2901      	cmp	r1, #1
 80173ac:	f04f 0202 	mov.w	r2, #2
 80173b0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80173b4:	f240 808f 	bls.w	80174d6 <uxr_write_framed_msg+0x15e>
 80173b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173ba:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80173be:	b2dd      	uxtb	r5, r3
 80173c0:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 80173c4:	2203      	movs	r2, #3
 80173c6:	2901      	cmp	r1, #1
 80173c8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80173cc:	f240 809a 	bls.w	8017504 <uxr_write_framed_msg+0x18c>
 80173d0:	18a1      	adds	r1, r4, r2
 80173d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173d4:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 80173d8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80173dc:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80173e0:	3201      	adds	r2, #1
 80173e2:	2801      	cmp	r0, #1
 80173e4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80173e8:	f240 80a0 	bls.w	801752c <uxr_write_framed_msg+0x1b4>
 80173ec:	18a0      	adds	r0, r4, r2
 80173ee:	3201      	adds	r2, #1
 80173f0:	b2d2      	uxtb	r2, r2
 80173f2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80173f6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	f000 80a9 	beq.w	8017552 <uxr_write_framed_msg+0x1da>
 8017400:	f04f 0900 	mov.w	r9, #0
 8017404:	46c8      	mov	r8, r9
 8017406:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801740a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801740e:	2901      	cmp	r1, #1
 8017410:	f240 80c3 	bls.w	801759a <uxr_write_framed_msg+0x222>
 8017414:	2a29      	cmp	r2, #41	; 0x29
 8017416:	f200 809f 	bhi.w	8017558 <uxr_write_framed_msg+0x1e0>
 801741a:	18a1      	adds	r1, r4, r2
 801741c:	3201      	adds	r2, #1
 801741e:	b2d2      	uxtb	r2, r2
 8017420:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8017424:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017428:	ea89 0303 	eor.w	r3, r9, r3
 801742c:	498c      	ldr	r1, [pc, #560]	; (8017660 <uxr_write_framed_msg+0x2e8>)
 801742e:	b2db      	uxtb	r3, r3
 8017430:	f108 0801 	add.w	r8, r8, #1
 8017434:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8017438:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 801743c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801743e:	4543      	cmp	r3, r8
 8017440:	d8e1      	bhi.n	8017406 <uxr_write_framed_msg+0x8e>
 8017442:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017446:	fa5f f889 	uxtb.w	r8, r9
 801744a:	9301      	str	r3, [sp, #4]
 801744c:	f04f 0900 	mov.w	r9, #0
 8017450:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8017454:	fa5f f18a 	uxtb.w	r1, sl
 8017458:	2901      	cmp	r1, #1
 801745a:	d921      	bls.n	80174a0 <uxr_write_framed_msg+0x128>
 801745c:	2a29      	cmp	r2, #41	; 0x29
 801745e:	f240 80af 	bls.w	80175c0 <uxr_write_framed_msg+0x248>
 8017462:	2500      	movs	r5, #0
 8017464:	e000      	b.n	8017468 <uxr_write_framed_msg+0xf0>
 8017466:	b160      	cbz	r0, 8017482 <uxr_write_framed_msg+0x10a>
 8017468:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801746c:	1b52      	subs	r2, r2, r5
 801746e:	465b      	mov	r3, fp
 8017470:	4421      	add	r1, r4
 8017472:	4638      	mov	r0, r7
 8017474:	47b0      	blx	r6
 8017476:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801747a:	4405      	add	r5, r0
 801747c:	4295      	cmp	r5, r2
 801747e:	d3f2      	bcc.n	8017466 <uxr_write_framed_msg+0xee>
 8017480:	d003      	beq.n	801748a <uxr_write_framed_msg+0x112>
 8017482:	2000      	movs	r0, #0
 8017484:	b003      	add	sp, #12
 8017486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801748a:	fa5f f18a 	uxtb.w	r1, sl
 801748e:	f04f 0300 	mov.w	r3, #0
 8017492:	2901      	cmp	r1, #1
 8017494:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8017498:	f04f 0200 	mov.w	r2, #0
 801749c:	f200 8090 	bhi.w	80175c0 <uxr_write_framed_msg+0x248>
 80174a0:	1c51      	adds	r1, r2, #1
 80174a2:	b2c9      	uxtb	r1, r1
 80174a4:	2929      	cmp	r1, #41	; 0x29
 80174a6:	d8dc      	bhi.n	8017462 <uxr_write_framed_msg+0xea>
 80174a8:	18a5      	adds	r5, r4, r2
 80174aa:	4421      	add	r1, r4
 80174ac:	3202      	adds	r2, #2
 80174ae:	f088 0820 	eor.w	r8, r8, #32
 80174b2:	4648      	mov	r0, r9
 80174b4:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80174b8:	b2d2      	uxtb	r2, r2
 80174ba:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 80174be:	f04f 0901 	mov.w	r9, #1
 80174c2:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 80174c6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80174ca:	2800      	cmp	r0, #0
 80174cc:	f040 8085 	bne.w	80175da <uxr_write_framed_msg+0x262>
 80174d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80174d4:	e7bc      	b.n	8017450 <uxr_write_framed_msg+0xd8>
 80174d6:	4611      	mov	r1, r2
 80174d8:	f04f 0c03 	mov.w	ip, #3
 80174dc:	2204      	movs	r2, #4
 80174de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174e0:	4421      	add	r1, r4
 80174e2:	b2dd      	uxtb	r5, r3
 80174e4:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 80174e8:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 80174ec:	44a4      	add	ip, r4
 80174ee:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 80174f2:	f080 0020 	eor.w	r0, r0, #32
 80174f6:	2901      	cmp	r1, #1
 80174f8:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 80174fc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017500:	f63f af66 	bhi.w	80173d0 <uxr_write_framed_msg+0x58>
 8017504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017506:	18a0      	adds	r0, r4, r2
 8017508:	f085 0520 	eor.w	r5, r5, #32
 801750c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8017510:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8017514:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8017518:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801751c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8017520:	3202      	adds	r2, #2
 8017522:	2801      	cmp	r0, #1
 8017524:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017528:	f63f af60 	bhi.w	80173ec <uxr_write_framed_msg+0x74>
 801752c:	1c50      	adds	r0, r2, #1
 801752e:	18a5      	adds	r5, r4, r2
 8017530:	fa54 f080 	uxtab	r0, r4, r0
 8017534:	3202      	adds	r2, #2
 8017536:	f081 0120 	eor.w	r1, r1, #32
 801753a:	b2d2      	uxtb	r2, r2
 801753c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8017540:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8017544:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8017548:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801754c:	2b00      	cmp	r3, #0
 801754e:	f47f af57 	bne.w	8017400 <uxr_write_framed_msg+0x88>
 8017552:	9301      	str	r3, [sp, #4]
 8017554:	4698      	mov	r8, r3
 8017556:	e779      	b.n	801744c <uxr_write_framed_msg+0xd4>
 8017558:	2500      	movs	r5, #0
 801755a:	e001      	b.n	8017560 <uxr_write_framed_msg+0x1e8>
 801755c:	2800      	cmp	r0, #0
 801755e:	d090      	beq.n	8017482 <uxr_write_framed_msg+0x10a>
 8017560:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8017564:	1b52      	subs	r2, r2, r5
 8017566:	465b      	mov	r3, fp
 8017568:	4421      	add	r1, r4
 801756a:	4638      	mov	r0, r7
 801756c:	47b0      	blx	r6
 801756e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8017572:	4405      	add	r5, r0
 8017574:	4295      	cmp	r5, r2
 8017576:	d3f1      	bcc.n	801755c <uxr_write_framed_msg+0x1e4>
 8017578:	d183      	bne.n	8017482 <uxr_write_framed_msg+0x10a>
 801757a:	f04f 0300 	mov.w	r3, #0
 801757e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8017582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017584:	4543      	cmp	r3, r8
 8017586:	d964      	bls.n	8017652 <uxr_write_framed_msg+0x2da>
 8017588:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801758c:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8017590:	2901      	cmp	r1, #1
 8017592:	f04f 0200 	mov.w	r2, #0
 8017596:	f63f af3d 	bhi.w	8017414 <uxr_write_framed_msg+0x9c>
 801759a:	1c51      	adds	r1, r2, #1
 801759c:	b2c9      	uxtb	r1, r1
 801759e:	2929      	cmp	r1, #41	; 0x29
 80175a0:	d8da      	bhi.n	8017558 <uxr_write_framed_msg+0x1e0>
 80175a2:	18a0      	adds	r0, r4, r2
 80175a4:	4421      	add	r1, r4
 80175a6:	f04f 057d 	mov.w	r5, #125	; 0x7d
 80175aa:	3202      	adds	r2, #2
 80175ac:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 80175b0:	b2d2      	uxtb	r2, r2
 80175b2:	f083 0020 	eor.w	r0, r3, #32
 80175b6:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80175ba:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80175be:	e733      	b.n	8017428 <uxr_write_framed_msg+0xb0>
 80175c0:	18a1      	adds	r1, r4, r2
 80175c2:	3201      	adds	r2, #1
 80175c4:	4648      	mov	r0, r9
 80175c6:	b2d2      	uxtb	r2, r2
 80175c8:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 80175cc:	f04f 0901 	mov.w	r9, #1
 80175d0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80175d4:	2800      	cmp	r0, #0
 80175d6:	f43f af7b 	beq.w	80174d0 <uxr_write_framed_msg+0x158>
 80175da:	2500      	movs	r5, #0
 80175dc:	e002      	b.n	80175e4 <uxr_write_framed_msg+0x26c>
 80175de:	2800      	cmp	r0, #0
 80175e0:	f43f af4f 	beq.w	8017482 <uxr_write_framed_msg+0x10a>
 80175e4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80175e8:	1b52      	subs	r2, r2, r5
 80175ea:	465b      	mov	r3, fp
 80175ec:	4421      	add	r1, r4
 80175ee:	4638      	mov	r0, r7
 80175f0:	47b0      	blx	r6
 80175f2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80175f6:	4405      	add	r5, r0
 80175f8:	4295      	cmp	r5, r2
 80175fa:	d3f0      	bcc.n	80175de <uxr_write_framed_msg+0x266>
 80175fc:	f47f af41 	bne.w	8017482 <uxr_write_framed_msg+0x10a>
 8017600:	2300      	movs	r3, #0
 8017602:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8017606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017608:	b298      	uxth	r0, r3
 801760a:	b003      	add	sp, #12
 801760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017610:	217d      	movs	r1, #125	; 0x7d
 8017612:	f082 0220 	eor.w	r2, r2, #32
 8017616:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801761a:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801761e:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8017622:	2901      	cmp	r1, #1
 8017624:	f04f 0203 	mov.w	r2, #3
 8017628:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801762c:	d804      	bhi.n	8017638 <uxr_write_framed_msg+0x2c0>
 801762e:	4611      	mov	r1, r2
 8017630:	f04f 0c04 	mov.w	ip, #4
 8017634:	2205      	movs	r2, #5
 8017636:	e752      	b.n	80174de <uxr_write_framed_msg+0x166>
 8017638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801763a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801763e:	b2dd      	uxtb	r5, r3
 8017640:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8017644:	2204      	movs	r2, #4
 8017646:	2901      	cmp	r1, #1
 8017648:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801764c:	f63f aec0 	bhi.w	80173d0 <uxr_write_framed_msg+0x58>
 8017650:	e758      	b.n	8017504 <uxr_write_framed_msg+0x18c>
 8017652:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8017656:	fa5f f889 	uxtb.w	r8, r9
 801765a:	9301      	str	r3, [sp, #4]
 801765c:	2200      	movs	r2, #0
 801765e:	e6f5      	b.n	801744c <uxr_write_framed_msg+0xd4>
 8017660:	0801a6d0 	.word	0x0801a6d0

08017664 <uxr_framing_read_transport>:
 8017664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017668:	4604      	mov	r4, r0
 801766a:	b083      	sub	sp, #12
 801766c:	461f      	mov	r7, r3
 801766e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8017672:	4689      	mov	r9, r1
 8017674:	4692      	mov	sl, r2
 8017676:	f7fb fbff 	bl	8012e78 <uxr_millis>
 801767a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801767e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8017682:	42b3      	cmp	r3, r6
 8017684:	4680      	mov	r8, r0
 8017686:	d061      	beq.n	801774c <uxr_framing_read_transport+0xe8>
 8017688:	d81c      	bhi.n	80176c4 <uxr_framing_read_transport+0x60>
 801768a:	1e75      	subs	r5, r6, #1
 801768c:	1aed      	subs	r5, r5, r3
 801768e:	b2ed      	uxtb	r5, r5
 8017690:	2600      	movs	r6, #0
 8017692:	455d      	cmp	r5, fp
 8017694:	d81f      	bhi.n	80176d6 <uxr_framing_read_transport+0x72>
 8017696:	19ab      	adds	r3, r5, r6
 8017698:	455b      	cmp	r3, fp
 801769a:	bf84      	itt	hi
 801769c:	ebab 0605 	subhi.w	r6, fp, r5
 80176a0:	b2f6      	uxtbhi	r6, r6
 80176a2:	b9ed      	cbnz	r5, 80176e0 <uxr_framing_read_transport+0x7c>
 80176a4:	f04f 0b00 	mov.w	fp, #0
 80176a8:	f7fb fbe6 	bl	8012e78 <uxr_millis>
 80176ac:	683b      	ldr	r3, [r7, #0]
 80176ae:	eba0 0808 	sub.w	r8, r0, r8
 80176b2:	eba3 0308 	sub.w	r3, r3, r8
 80176b6:	4658      	mov	r0, fp
 80176b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80176bc:	603b      	str	r3, [r7, #0]
 80176be:	b003      	add	sp, #12
 80176c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176c4:	2e00      	cmp	r6, #0
 80176c6:	d049      	beq.n	801775c <uxr_framing_read_transport+0xf8>
 80176c8:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 80176cc:	b2ed      	uxtb	r5, r5
 80176ce:	3e01      	subs	r6, #1
 80176d0:	455d      	cmp	r5, fp
 80176d2:	b2f6      	uxtb	r6, r6
 80176d4:	d9df      	bls.n	8017696 <uxr_framing_read_transport+0x32>
 80176d6:	fa5f f58b 	uxtb.w	r5, fp
 80176da:	2600      	movs	r6, #0
 80176dc:	2d00      	cmp	r5, #0
 80176de:	d0e1      	beq.n	80176a4 <uxr_framing_read_transport+0x40>
 80176e0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80176e4:	3102      	adds	r1, #2
 80176e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176e8:	9300      	str	r3, [sp, #0]
 80176ea:	683b      	ldr	r3, [r7, #0]
 80176ec:	4421      	add	r1, r4
 80176ee:	462a      	mov	r2, r5
 80176f0:	4650      	mov	r0, sl
 80176f2:	47c8      	blx	r9
 80176f4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80176f8:	4a1a      	ldr	r2, [pc, #104]	; (8017764 <uxr_framing_read_transport+0x100>)
 80176fa:	4403      	add	r3, r0
 80176fc:	0859      	lsrs	r1, r3, #1
 80176fe:	fba2 2101 	umull	r2, r1, r2, r1
 8017702:	0889      	lsrs	r1, r1, #2
 8017704:	222a      	movs	r2, #42	; 0x2a
 8017706:	fb02 3111 	mls	r1, r2, r1, r3
 801770a:	4683      	mov	fp, r0
 801770c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8017710:	2800      	cmp	r0, #0
 8017712:	d0c7      	beq.n	80176a4 <uxr_framing_read_transport+0x40>
 8017714:	42a8      	cmp	r0, r5
 8017716:	d1c7      	bne.n	80176a8 <uxr_framing_read_transport+0x44>
 8017718:	2e00      	cmp	r6, #0
 801771a:	d0c5      	beq.n	80176a8 <uxr_framing_read_transport+0x44>
 801771c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801771e:	9300      	str	r3, [sp, #0]
 8017720:	3102      	adds	r1, #2
 8017722:	4632      	mov	r2, r6
 8017724:	4421      	add	r1, r4
 8017726:	2300      	movs	r3, #0
 8017728:	4650      	mov	r0, sl
 801772a:	47c8      	blx	r9
 801772c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017730:	4a0c      	ldr	r2, [pc, #48]	; (8017764 <uxr_framing_read_transport+0x100>)
 8017732:	180b      	adds	r3, r1, r0
 8017734:	0859      	lsrs	r1, r3, #1
 8017736:	fba2 1201 	umull	r1, r2, r2, r1
 801773a:	0892      	lsrs	r2, r2, #2
 801773c:	212a      	movs	r1, #42	; 0x2a
 801773e:	fb01 3312 	mls	r3, r1, r2, r3
 8017742:	eb00 0b05 	add.w	fp, r0, r5
 8017746:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801774a:	e7ad      	b.n	80176a8 <uxr_framing_read_transport+0x44>
 801774c:	2600      	movs	r6, #0
 801774e:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8017752:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8017754:	d9bf      	bls.n	80176d6 <uxr_framing_read_transport+0x72>
 8017756:	2102      	movs	r1, #2
 8017758:	2529      	movs	r5, #41	; 0x29
 801775a:	e7c4      	b.n	80176e6 <uxr_framing_read_transport+0x82>
 801775c:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8017760:	b2ed      	uxtb	r5, r5
 8017762:	e796      	b.n	8017692 <uxr_framing_read_transport+0x2e>
 8017764:	30c30c31 	.word	0x30c30c31

08017768 <uxr_read_framed_msg>:
 8017768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801776c:	461e      	mov	r6, r3
 801776e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8017772:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8017776:	429d      	cmp	r5, r3
 8017778:	b083      	sub	sp, #12
 801777a:	4604      	mov	r4, r0
 801777c:	4688      	mov	r8, r1
 801777e:	4691      	mov	r9, r2
 8017780:	f000 8188 	beq.w	8017a94 <uxr_read_framed_msg+0x32c>
 8017784:	7823      	ldrb	r3, [r4, #0]
 8017786:	4dc1      	ldr	r5, [pc, #772]	; (8017a8c <uxr_read_framed_msg+0x324>)
 8017788:	4fc1      	ldr	r7, [pc, #772]	; (8017a90 <uxr_read_framed_msg+0x328>)
 801778a:	2b07      	cmp	r3, #7
 801778c:	d8fd      	bhi.n	801778a <uxr_read_framed_msg+0x22>
 801778e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017792:	0115      	.short	0x0115
 8017794:	00d600f6 	.word	0x00d600f6
 8017798:	009000b9 	.word	0x009000b9
 801779c:	0030004d 	.word	0x0030004d
 80177a0:	0008      	.short	0x0008
 80177a2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80177a6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80177aa:	4299      	cmp	r1, r3
 80177ac:	f000 814a 	beq.w	8017a44 <uxr_read_framed_msg+0x2dc>
 80177b0:	18e2      	adds	r2, r4, r3
 80177b2:	7892      	ldrb	r2, [r2, #2]
 80177b4:	2a7d      	cmp	r2, #125	; 0x7d
 80177b6:	f000 8199 	beq.w	8017aec <uxr_read_framed_msg+0x384>
 80177ba:	3301      	adds	r3, #1
 80177bc:	0858      	lsrs	r0, r3, #1
 80177be:	fba5 1000 	umull	r1, r0, r5, r0
 80177c2:	0880      	lsrs	r0, r0, #2
 80177c4:	212a      	movs	r1, #42	; 0x2a
 80177c6:	fb01 3310 	mls	r3, r1, r0, r3
 80177ca:	2a7e      	cmp	r2, #126	; 0x7e
 80177cc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80177d0:	f000 8252 	beq.w	8017c78 <uxr_read_framed_msg+0x510>
 80177d4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80177d6:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80177d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80177dc:	b29b      	uxth	r3, r3
 80177de:	2200      	movs	r2, #0
 80177e0:	4299      	cmp	r1, r3
 80177e2:	86a3      	strh	r3, [r4, #52]	; 0x34
 80177e4:	7022      	strb	r2, [r4, #0]
 80177e6:	f000 8179 	beq.w	8017adc <uxr_read_framed_msg+0x374>
 80177ea:	2000      	movs	r0, #0
 80177ec:	b003      	add	sp, #12
 80177ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177f2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80177f6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80177fa:	4299      	cmp	r1, r3
 80177fc:	f000 8131 	beq.w	8017a62 <uxr_read_framed_msg+0x2fa>
 8017800:	18e2      	adds	r2, r4, r3
 8017802:	7890      	ldrb	r0, [r2, #2]
 8017804:	287d      	cmp	r0, #125	; 0x7d
 8017806:	f000 8190 	beq.w	8017b2a <uxr_read_framed_msg+0x3c2>
 801780a:	3301      	adds	r3, #1
 801780c:	085a      	lsrs	r2, r3, #1
 801780e:	fba5 1202 	umull	r1, r2, r5, r2
 8017812:	0892      	lsrs	r2, r2, #2
 8017814:	212a      	movs	r1, #42	; 0x2a
 8017816:	fb01 3312 	mls	r3, r1, r2, r3
 801781a:	287e      	cmp	r0, #126	; 0x7e
 801781c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017820:	f000 821a 	beq.w	8017c58 <uxr_read_framed_msg+0x4f0>
 8017824:	2307      	movs	r3, #7
 8017826:	86a0      	strh	r0, [r4, #52]	; 0x34
 8017828:	7023      	strb	r3, [r4, #0]
 801782a:	e7ae      	b.n	801778a <uxr_read_framed_msg+0x22>
 801782c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801782e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8017832:	459e      	cmp	lr, r3
 8017834:	d938      	bls.n	80178a8 <uxr_read_framed_msg+0x140>
 8017836:	ee07 8a90 	vmov	s15, r8
 801783a:	212a      	movs	r1, #42	; 0x2a
 801783c:	e020      	b.n	8017880 <uxr_read_framed_msg+0x118>
 801783e:	f89b c002 	ldrb.w	ip, [fp, #2]
 8017842:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8017846:	f000 80d4 	beq.w	80179f2 <uxr_read_framed_msg+0x28a>
 801784a:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801784e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8017852:	f000 8219 	beq.w	8017c88 <uxr_read_framed_msg+0x520>
 8017856:	f806 c003 	strb.w	ip, [r6, r3]
 801785a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 801785e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8017860:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8017864:	ea8a 000c 	eor.w	r0, sl, ip
 8017868:	b2c0      	uxtb	r0, r0
 801786a:	3301      	adds	r3, #1
 801786c:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8017870:	b29b      	uxth	r3, r3
 8017872:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8017876:	4573      	cmp	r3, lr
 8017878:	8663      	strh	r3, [r4, #50]	; 0x32
 801787a:	86e2      	strh	r2, [r4, #54]	; 0x36
 801787c:	f080 8120 	bcs.w	8017ac0 <uxr_read_framed_msg+0x358>
 8017880:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8017884:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8017888:	f100 0c01 	add.w	ip, r0, #1
 801788c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017890:	fba5 8202 	umull	r8, r2, r5, r2
 8017894:	0892      	lsrs	r2, r2, #2
 8017896:	4582      	cmp	sl, r0
 8017898:	eb04 0b00 	add.w	fp, r4, r0
 801789c:	fb01 c212 	mls	r2, r1, r2, ip
 80178a0:	d1cd      	bne.n	801783e <uxr_read_framed_msg+0xd6>
 80178a2:	ee17 8a90 	vmov	r8, s15
 80178a6:	459e      	cmp	lr, r3
 80178a8:	f040 8111 	bne.w	8017ace <uxr_read_framed_msg+0x366>
 80178ac:	2306      	movs	r3, #6
 80178ae:	7023      	strb	r3, [r4, #0]
 80178b0:	e76b      	b.n	801778a <uxr_read_framed_msg+0x22>
 80178b2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80178b6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80178ba:	4298      	cmp	r0, r3
 80178bc:	f000 80c2 	beq.w	8017a44 <uxr_read_framed_msg+0x2dc>
 80178c0:	18e2      	adds	r2, r4, r3
 80178c2:	7891      	ldrb	r1, [r2, #2]
 80178c4:	297d      	cmp	r1, #125	; 0x7d
 80178c6:	f000 814c 	beq.w	8017b62 <uxr_read_framed_msg+0x3fa>
 80178ca:	3301      	adds	r3, #1
 80178cc:	085a      	lsrs	r2, r3, #1
 80178ce:	fba5 0202 	umull	r0, r2, r5, r2
 80178d2:	0892      	lsrs	r2, r2, #2
 80178d4:	202a      	movs	r0, #42	; 0x2a
 80178d6:	fb00 3312 	mls	r3, r0, r2, r3
 80178da:	297e      	cmp	r1, #126	; 0x7e
 80178dc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80178e0:	f000 81ca 	beq.w	8017c78 <uxr_read_framed_msg+0x510>
 80178e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80178e6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80178ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80178ec:	b29b      	uxth	r3, r3
 80178ee:	2000      	movs	r0, #0
 80178f0:	428b      	cmp	r3, r1
 80178f2:	8623      	strh	r3, [r4, #48]	; 0x30
 80178f4:	8660      	strh	r0, [r4, #50]	; 0x32
 80178f6:	86e0      	strh	r0, [r4, #54]	; 0x36
 80178f8:	f240 80df 	bls.w	8017aba <uxr_read_framed_msg+0x352>
 80178fc:	7020      	strb	r0, [r4, #0]
 80178fe:	b003      	add	sp, #12
 8017900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017904:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017908:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801790c:	4299      	cmp	r1, r3
 801790e:	f000 80a8 	beq.w	8017a62 <uxr_read_framed_msg+0x2fa>
 8017912:	18e2      	adds	r2, r4, r3
 8017914:	7890      	ldrb	r0, [r2, #2]
 8017916:	287d      	cmp	r0, #125	; 0x7d
 8017918:	f000 8164 	beq.w	8017be4 <uxr_read_framed_msg+0x47c>
 801791c:	3301      	adds	r3, #1
 801791e:	085a      	lsrs	r2, r3, #1
 8017920:	fba5 1202 	umull	r1, r2, r5, r2
 8017924:	0892      	lsrs	r2, r2, #2
 8017926:	212a      	movs	r1, #42	; 0x2a
 8017928:	fb01 3312 	mls	r3, r1, r2, r3
 801792c:	287e      	cmp	r0, #126	; 0x7e
 801792e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017932:	f000 8191 	beq.w	8017c58 <uxr_read_framed_msg+0x4f0>
 8017936:	2304      	movs	r3, #4
 8017938:	8620      	strh	r0, [r4, #48]	; 0x30
 801793a:	7023      	strb	r3, [r4, #0]
 801793c:	e725      	b.n	801778a <uxr_read_framed_msg+0x22>
 801793e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017942:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017946:	4290      	cmp	r0, r2
 8017948:	f000 80b3 	beq.w	8017ab2 <uxr_read_framed_msg+0x34a>
 801794c:	18a3      	adds	r3, r4, r2
 801794e:	7899      	ldrb	r1, [r3, #2]
 8017950:	297d      	cmp	r1, #125	; 0x7d
 8017952:	f000 8164 	beq.w	8017c1e <uxr_read_framed_msg+0x4b6>
 8017956:	3201      	adds	r2, #1
 8017958:	0850      	lsrs	r0, r2, #1
 801795a:	fba5 3000 	umull	r3, r0, r5, r0
 801795e:	0880      	lsrs	r0, r0, #2
 8017960:	232a      	movs	r3, #42	; 0x2a
 8017962:	fb03 2210 	mls	r2, r3, r0, r2
 8017966:	297e      	cmp	r1, #126	; 0x7e
 8017968:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801796c:	f000 8188 	beq.w	8017c80 <uxr_read_framed_msg+0x518>
 8017970:	7863      	ldrb	r3, [r4, #1]
 8017972:	428b      	cmp	r3, r1
 8017974:	bf0c      	ite	eq
 8017976:	2303      	moveq	r3, #3
 8017978:	2300      	movne	r3, #0
 801797a:	7023      	strb	r3, [r4, #0]
 801797c:	e705      	b.n	801778a <uxr_read_framed_msg+0x22>
 801797e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017982:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017986:	2200      	movs	r2, #0
 8017988:	4299      	cmp	r1, r3
 801798a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801798e:	d06c      	beq.n	8017a6a <uxr_read_framed_msg+0x302>
 8017990:	18e2      	adds	r2, r4, r3
 8017992:	7890      	ldrb	r0, [r2, #2]
 8017994:	287d      	cmp	r0, #125	; 0x7d
 8017996:	f000 8101 	beq.w	8017b9c <uxr_read_framed_msg+0x434>
 801799a:	3301      	adds	r3, #1
 801799c:	085a      	lsrs	r2, r3, #1
 801799e:	fba5 1202 	umull	r1, r2, r5, r2
 80179a2:	0892      	lsrs	r2, r2, #2
 80179a4:	212a      	movs	r1, #42	; 0x2a
 80179a6:	fb01 3312 	mls	r3, r1, r2, r3
 80179aa:	287e      	cmp	r0, #126	; 0x7e
 80179ac:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 80179b0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80179b4:	d059      	beq.n	8017a6a <uxr_read_framed_msg+0x302>
 80179b6:	2302      	movs	r3, #2
 80179b8:	7023      	strb	r3, [r4, #0]
 80179ba:	e6e6      	b.n	801778a <uxr_read_framed_msg+0x22>
 80179bc:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 80179c0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80179c4:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 80179c8:	1c51      	adds	r1, r2, #1
 80179ca:	084b      	lsrs	r3, r1, #1
 80179cc:	fba5 c303 	umull	ip, r3, r5, r3
 80179d0:	089b      	lsrs	r3, r3, #2
 80179d2:	fb0e 1313 	mls	r3, lr, r3, r1
 80179d6:	4592      	cmp	sl, r2
 80179d8:	eb04 0002 	add.w	r0, r4, r2
 80179dc:	b2da      	uxtb	r2, r3
 80179de:	f43f af04 	beq.w	80177ea <uxr_read_framed_msg+0x82>
 80179e2:	7883      	ldrb	r3, [r0, #2]
 80179e4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80179e8:	2b7e      	cmp	r3, #126	; 0x7e
 80179ea:	d1ed      	bne.n	80179c8 <uxr_read_framed_msg+0x260>
 80179ec:	2301      	movs	r3, #1
 80179ee:	7023      	strb	r3, [r4, #0]
 80179f0:	e6cb      	b.n	801778a <uxr_read_framed_msg+0x22>
 80179f2:	f100 0c01 	add.w	ip, r0, #1
 80179f6:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80179fa:	fba5 8202 	umull	r8, r2, r5, r2
 80179fe:	0892      	lsrs	r2, r2, #2
 8017a00:	fb01 c212 	mls	r2, r1, r2, ip
 8017a04:	eb04 0c02 	add.w	ip, r4, r2
 8017a08:	b2d2      	uxtb	r2, r2
 8017a0a:	4592      	cmp	sl, r2
 8017a0c:	f100 0002 	add.w	r0, r0, #2
 8017a10:	f43f af47 	beq.w	80178a2 <uxr_read_framed_msg+0x13a>
 8017a14:	0842      	lsrs	r2, r0, #1
 8017a16:	f89c a002 	ldrb.w	sl, [ip, #2]
 8017a1a:	fba5 8202 	umull	r8, r2, r5, r2
 8017a1e:	0892      	lsrs	r2, r2, #2
 8017a20:	fb01 0012 	mls	r0, r1, r2, r0
 8017a24:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8017a28:	f08a 0c20 	eor.w	ip, sl, #32
 8017a2c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8017a30:	f47f af11 	bne.w	8017856 <uxr_read_framed_msg+0xee>
 8017a34:	459e      	cmp	lr, r3
 8017a36:	ee17 8a90 	vmov	r8, s15
 8017a3a:	f43f af37 	beq.w	80178ac <uxr_read_framed_msg+0x144>
 8017a3e:	2301      	movs	r3, #1
 8017a40:	7023      	strb	r3, [r4, #0]
 8017a42:	e6a2      	b.n	801778a <uxr_read_framed_msg+0x22>
 8017a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a46:	9300      	str	r3, [sp, #0]
 8017a48:	2301      	movs	r3, #1
 8017a4a:	9301      	str	r3, [sp, #4]
 8017a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a4e:	464a      	mov	r2, r9
 8017a50:	4641      	mov	r1, r8
 8017a52:	4620      	mov	r0, r4
 8017a54:	f7ff fe06 	bl	8017664 <uxr_framing_read_transport>
 8017a58:	2800      	cmp	r0, #0
 8017a5a:	f43f aec6 	beq.w	80177ea <uxr_read_framed_msg+0x82>
 8017a5e:	7823      	ldrb	r3, [r4, #0]
 8017a60:	e693      	b.n	801778a <uxr_read_framed_msg+0x22>
 8017a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a64:	9300      	str	r3, [sp, #0]
 8017a66:	2302      	movs	r3, #2
 8017a68:	e7ef      	b.n	8017a4a <uxr_read_framed_msg+0x2e2>
 8017a6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a6c:	9300      	str	r3, [sp, #0]
 8017a6e:	2304      	movs	r3, #4
 8017a70:	9301      	str	r3, [sp, #4]
 8017a72:	464a      	mov	r2, r9
 8017a74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a76:	4641      	mov	r1, r8
 8017a78:	4620      	mov	r0, r4
 8017a7a:	f7ff fdf3 	bl	8017664 <uxr_framing_read_transport>
 8017a7e:	2800      	cmp	r0, #0
 8017a80:	d1ed      	bne.n	8017a5e <uxr_read_framed_msg+0x2f6>
 8017a82:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8017a86:	2b7e      	cmp	r3, #126	; 0x7e
 8017a88:	d0e9      	beq.n	8017a5e <uxr_read_framed_msg+0x2f6>
 8017a8a:	e6ae      	b.n	80177ea <uxr_read_framed_msg+0x82>
 8017a8c:	30c30c31 	.word	0x30c30c31
 8017a90:	0801a6d0 	.word	0x0801a6d0
 8017a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a96:	9300      	str	r3, [sp, #0]
 8017a98:	2305      	movs	r3, #5
 8017a9a:	9301      	str	r3, [sp, #4]
 8017a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a9e:	f7ff fde1 	bl	8017664 <uxr_framing_read_transport>
 8017aa2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017aa6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017aaa:	429a      	cmp	r2, r3
 8017aac:	f43f ae9d 	beq.w	80177ea <uxr_read_framed_msg+0x82>
 8017ab0:	e668      	b.n	8017784 <uxr_read_framed_msg+0x1c>
 8017ab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ab4:	9300      	str	r3, [sp, #0]
 8017ab6:	2303      	movs	r3, #3
 8017ab8:	e7c7      	b.n	8017a4a <uxr_read_framed_msg+0x2e2>
 8017aba:	2305      	movs	r3, #5
 8017abc:	7023      	strb	r3, [r4, #0]
 8017abe:	e664      	b.n	801778a <uxr_read_framed_msg+0x22>
 8017ac0:	ee17 8a90 	vmov	r8, s15
 8017ac4:	f43f aef2 	beq.w	80178ac <uxr_read_framed_msg+0x144>
 8017ac8:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8017acc:	d08e      	beq.n	80179ec <uxr_read_framed_msg+0x284>
 8017ace:	ebae 0303 	sub.w	r3, lr, r3
 8017ad2:	3302      	adds	r3, #2
 8017ad4:	9301      	str	r3, [sp, #4]
 8017ad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ad8:	9300      	str	r3, [sp, #0]
 8017ada:	e7b7      	b.n	8017a4c <uxr_read_framed_msg+0x2e4>
 8017adc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017ade:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8017ae2:	7013      	strb	r3, [r2, #0]
 8017ae4:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8017ae6:	b003      	add	sp, #12
 8017ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aec:	f103 0c01 	add.w	ip, r3, #1
 8017af0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017af4:	fba5 0202 	umull	r0, r2, r5, r2
 8017af8:	0892      	lsrs	r2, r2, #2
 8017afa:	202a      	movs	r0, #42	; 0x2a
 8017afc:	fb00 c212 	mls	r2, r0, r2, ip
 8017b00:	fa5f fc82 	uxtb.w	ip, r2
 8017b04:	4561      	cmp	r1, ip
 8017b06:	d09d      	beq.n	8017a44 <uxr_read_framed_msg+0x2dc>
 8017b08:	3302      	adds	r3, #2
 8017b0a:	4422      	add	r2, r4
 8017b0c:	0859      	lsrs	r1, r3, #1
 8017b0e:	7892      	ldrb	r2, [r2, #2]
 8017b10:	fba5 c101 	umull	ip, r1, r5, r1
 8017b14:	0889      	lsrs	r1, r1, #2
 8017b16:	fb00 3311 	mls	r3, r0, r1, r3
 8017b1a:	2a7e      	cmp	r2, #126	; 0x7e
 8017b1c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017b20:	f000 80aa 	beq.w	8017c78 <uxr_read_framed_msg+0x510>
 8017b24:	f082 0220 	eor.w	r2, r2, #32
 8017b28:	e654      	b.n	80177d4 <uxr_read_framed_msg+0x6c>
 8017b2a:	1c58      	adds	r0, r3, #1
 8017b2c:	0842      	lsrs	r2, r0, #1
 8017b2e:	fba5 c202 	umull	ip, r2, r5, r2
 8017b32:	0892      	lsrs	r2, r2, #2
 8017b34:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8017b38:	fb0c 0212 	mls	r2, ip, r2, r0
 8017b3c:	b2d0      	uxtb	r0, r2
 8017b3e:	4281      	cmp	r1, r0
 8017b40:	d08f      	beq.n	8017a62 <uxr_read_framed_msg+0x2fa>
 8017b42:	4422      	add	r2, r4
 8017b44:	3302      	adds	r3, #2
 8017b46:	7890      	ldrb	r0, [r2, #2]
 8017b48:	085a      	lsrs	r2, r3, #1
 8017b4a:	fba5 1202 	umull	r1, r2, r5, r2
 8017b4e:	0892      	lsrs	r2, r2, #2
 8017b50:	fb0c 3312 	mls	r3, ip, r2, r3
 8017b54:	287e      	cmp	r0, #126	; 0x7e
 8017b56:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017b5a:	d07d      	beq.n	8017c58 <uxr_read_framed_msg+0x4f0>
 8017b5c:	f080 0020 	eor.w	r0, r0, #32
 8017b60:	e660      	b.n	8017824 <uxr_read_framed_msg+0xbc>
 8017b62:	1c59      	adds	r1, r3, #1
 8017b64:	084a      	lsrs	r2, r1, #1
 8017b66:	fba5 c202 	umull	ip, r2, r5, r2
 8017b6a:	0892      	lsrs	r2, r2, #2
 8017b6c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8017b70:	fb0c 1212 	mls	r2, ip, r2, r1
 8017b74:	b2d1      	uxtb	r1, r2
 8017b76:	4288      	cmp	r0, r1
 8017b78:	f43f af64 	beq.w	8017a44 <uxr_read_framed_msg+0x2dc>
 8017b7c:	4422      	add	r2, r4
 8017b7e:	3302      	adds	r3, #2
 8017b80:	7891      	ldrb	r1, [r2, #2]
 8017b82:	085a      	lsrs	r2, r3, #1
 8017b84:	fba5 0202 	umull	r0, r2, r5, r2
 8017b88:	0892      	lsrs	r2, r2, #2
 8017b8a:	fb0c 3312 	mls	r3, ip, r2, r3
 8017b8e:	297e      	cmp	r1, #126	; 0x7e
 8017b90:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017b94:	d070      	beq.n	8017c78 <uxr_read_framed_msg+0x510>
 8017b96:	f081 0120 	eor.w	r1, r1, #32
 8017b9a:	e6a3      	b.n	80178e4 <uxr_read_framed_msg+0x17c>
 8017b9c:	f103 0c01 	add.w	ip, r3, #1
 8017ba0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017ba4:	fba5 0202 	umull	r0, r2, r5, r2
 8017ba8:	0892      	lsrs	r2, r2, #2
 8017baa:	202a      	movs	r0, #42	; 0x2a
 8017bac:	fb00 c212 	mls	r2, r0, r2, ip
 8017bb0:	fa5f fc82 	uxtb.w	ip, r2
 8017bb4:	4561      	cmp	r1, ip
 8017bb6:	f43f af58 	beq.w	8017a6a <uxr_read_framed_msg+0x302>
 8017bba:	4422      	add	r2, r4
 8017bbc:	3302      	adds	r3, #2
 8017bbe:	7891      	ldrb	r1, [r2, #2]
 8017bc0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8017bc4:	085a      	lsrs	r2, r3, #1
 8017bc6:	fba5 c202 	umull	ip, r2, r5, r2
 8017bca:	0892      	lsrs	r2, r2, #2
 8017bcc:	fb00 3312 	mls	r3, r0, r2, r3
 8017bd0:	297e      	cmp	r1, #126	; 0x7e
 8017bd2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017bd6:	f43f af48 	beq.w	8017a6a <uxr_read_framed_msg+0x302>
 8017bda:	f081 0120 	eor.w	r1, r1, #32
 8017bde:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8017be2:	e6e8      	b.n	80179b6 <uxr_read_framed_msg+0x24e>
 8017be4:	1c58      	adds	r0, r3, #1
 8017be6:	0842      	lsrs	r2, r0, #1
 8017be8:	fba5 c202 	umull	ip, r2, r5, r2
 8017bec:	0892      	lsrs	r2, r2, #2
 8017bee:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8017bf2:	fb0c 0212 	mls	r2, ip, r2, r0
 8017bf6:	b2d0      	uxtb	r0, r2
 8017bf8:	4281      	cmp	r1, r0
 8017bfa:	f43f af32 	beq.w	8017a62 <uxr_read_framed_msg+0x2fa>
 8017bfe:	4422      	add	r2, r4
 8017c00:	3302      	adds	r3, #2
 8017c02:	7890      	ldrb	r0, [r2, #2]
 8017c04:	085a      	lsrs	r2, r3, #1
 8017c06:	fba5 1202 	umull	r1, r2, r5, r2
 8017c0a:	0892      	lsrs	r2, r2, #2
 8017c0c:	fb0c 3312 	mls	r3, ip, r2, r3
 8017c10:	287e      	cmp	r0, #126	; 0x7e
 8017c12:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017c16:	d01f      	beq.n	8017c58 <uxr_read_framed_msg+0x4f0>
 8017c18:	f080 0020 	eor.w	r0, r0, #32
 8017c1c:	e68b      	b.n	8017936 <uxr_read_framed_msg+0x1ce>
 8017c1e:	1c51      	adds	r1, r2, #1
 8017c20:	084b      	lsrs	r3, r1, #1
 8017c22:	fba5 c303 	umull	ip, r3, r5, r3
 8017c26:	089b      	lsrs	r3, r3, #2
 8017c28:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8017c2c:	fb0c 1313 	mls	r3, ip, r3, r1
 8017c30:	b2d9      	uxtb	r1, r3
 8017c32:	4288      	cmp	r0, r1
 8017c34:	f43f af3d 	beq.w	8017ab2 <uxr_read_framed_msg+0x34a>
 8017c38:	3202      	adds	r2, #2
 8017c3a:	4423      	add	r3, r4
 8017c3c:	0850      	lsrs	r0, r2, #1
 8017c3e:	789b      	ldrb	r3, [r3, #2]
 8017c40:	fba5 1000 	umull	r1, r0, r5, r0
 8017c44:	0880      	lsrs	r0, r0, #2
 8017c46:	fb0c 2210 	mls	r2, ip, r0, r2
 8017c4a:	2b7e      	cmp	r3, #126	; 0x7e
 8017c4c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8017c50:	d016      	beq.n	8017c80 <uxr_read_framed_msg+0x518>
 8017c52:	f083 0120 	eor.w	r1, r3, #32
 8017c56:	e68b      	b.n	8017970 <uxr_read_framed_msg+0x208>
 8017c58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c5a:	9300      	str	r3, [sp, #0]
 8017c5c:	2302      	movs	r3, #2
 8017c5e:	9301      	str	r3, [sp, #4]
 8017c60:	464a      	mov	r2, r9
 8017c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c64:	4641      	mov	r1, r8
 8017c66:	4620      	mov	r0, r4
 8017c68:	f7ff fcfc 	bl	8017664 <uxr_framing_read_transport>
 8017c6c:	2800      	cmp	r0, #0
 8017c6e:	f47f aef6 	bne.w	8017a5e <uxr_read_framed_msg+0x2f6>
 8017c72:	2301      	movs	r3, #1
 8017c74:	7023      	strb	r3, [r4, #0]
 8017c76:	e588      	b.n	801778a <uxr_read_framed_msg+0x22>
 8017c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c7a:	9300      	str	r3, [sp, #0]
 8017c7c:	2301      	movs	r3, #1
 8017c7e:	e7ee      	b.n	8017c5e <uxr_read_framed_msg+0x4f6>
 8017c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c82:	9300      	str	r3, [sp, #0]
 8017c84:	2303      	movs	r3, #3
 8017c86:	e7ea      	b.n	8017c5e <uxr_read_framed_msg+0x4f6>
 8017c88:	ee17 8a90 	vmov	r8, s15
 8017c8c:	e6ae      	b.n	80179ec <uxr_read_framed_msg+0x284>
 8017c8e:	bf00      	nop

08017c90 <rcl_get_default_domain_id>:
 8017c90:	b530      	push	{r4, r5, lr}
 8017c92:	b083      	sub	sp, #12
 8017c94:	2300      	movs	r3, #0
 8017c96:	9300      	str	r3, [sp, #0]
 8017c98:	b1d0      	cbz	r0, 8017cd0 <rcl_get_default_domain_id+0x40>
 8017c9a:	4604      	mov	r4, r0
 8017c9c:	4669      	mov	r1, sp
 8017c9e:	4815      	ldr	r0, [pc, #84]	; (8017cf4 <rcl_get_default_domain_id+0x64>)
 8017ca0:	f7fd f93a 	bl	8014f18 <rcutils_get_env>
 8017ca4:	4602      	mov	r2, r0
 8017ca6:	b110      	cbz	r0, 8017cae <rcl_get_default_domain_id+0x1e>
 8017ca8:	2001      	movs	r0, #1
 8017caa:	b003      	add	sp, #12
 8017cac:	bd30      	pop	{r4, r5, pc}
 8017cae:	9b00      	ldr	r3, [sp, #0]
 8017cb0:	b18b      	cbz	r3, 8017cd6 <rcl_get_default_domain_id+0x46>
 8017cb2:	7818      	ldrb	r0, [r3, #0]
 8017cb4:	2800      	cmp	r0, #0
 8017cb6:	d0f8      	beq.n	8017caa <rcl_get_default_domain_id+0x1a>
 8017cb8:	a901      	add	r1, sp, #4
 8017cba:	4618      	mov	r0, r3
 8017cbc:	9201      	str	r2, [sp, #4]
 8017cbe:	f001 f90f 	bl	8018ee0 <strtoul>
 8017cc2:	4605      	mov	r5, r0
 8017cc4:	b150      	cbz	r0, 8017cdc <rcl_get_default_domain_id+0x4c>
 8017cc6:	1c43      	adds	r3, r0, #1
 8017cc8:	d00d      	beq.n	8017ce6 <rcl_get_default_domain_id+0x56>
 8017cca:	6025      	str	r5, [r4, #0]
 8017ccc:	2000      	movs	r0, #0
 8017cce:	e7ec      	b.n	8017caa <rcl_get_default_domain_id+0x1a>
 8017cd0:	200b      	movs	r0, #11
 8017cd2:	b003      	add	sp, #12
 8017cd4:	bd30      	pop	{r4, r5, pc}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	b003      	add	sp, #12
 8017cda:	bd30      	pop	{r4, r5, pc}
 8017cdc:	9b01      	ldr	r3, [sp, #4]
 8017cde:	781b      	ldrb	r3, [r3, #0]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d0f2      	beq.n	8017cca <rcl_get_default_domain_id+0x3a>
 8017ce4:	e7e0      	b.n	8017ca8 <rcl_get_default_domain_id+0x18>
 8017ce6:	f000 fc45 	bl	8018574 <__errno>
 8017cea:	6803      	ldr	r3, [r0, #0]
 8017cec:	2b22      	cmp	r3, #34	; 0x22
 8017cee:	d1ec      	bne.n	8017cca <rcl_get_default_domain_id+0x3a>
 8017cf0:	e7da      	b.n	8017ca8 <rcl_get_default_domain_id+0x18>
 8017cf2:	bf00      	nop
 8017cf4:	0801a8d0 	.word	0x0801a8d0

08017cf8 <rcl_expand_topic_name>:
 8017cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cfc:	b08b      	sub	sp, #44	; 0x2c
 8017cfe:	9306      	str	r3, [sp, #24]
 8017d00:	2800      	cmp	r0, #0
 8017d02:	f000 80ad 	beq.w	8017e60 <rcl_expand_topic_name+0x168>
 8017d06:	460e      	mov	r6, r1
 8017d08:	2900      	cmp	r1, #0
 8017d0a:	f000 80a9 	beq.w	8017e60 <rcl_expand_topic_name+0x168>
 8017d0e:	4617      	mov	r7, r2
 8017d10:	2a00      	cmp	r2, #0
 8017d12:	f000 80a5 	beq.w	8017e60 <rcl_expand_topic_name+0x168>
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	f000 80a2 	beq.w	8017e60 <rcl_expand_topic_name+0x168>
 8017d1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	f000 809e 	beq.w	8017e60 <rcl_expand_topic_name+0x168>
 8017d24:	2200      	movs	r2, #0
 8017d26:	a909      	add	r1, sp, #36	; 0x24
 8017d28:	4680      	mov	r8, r0
 8017d2a:	f000 f9f5 	bl	8018118 <rcl_validate_topic_name>
 8017d2e:	4604      	mov	r4, r0
 8017d30:	2800      	cmp	r0, #0
 8017d32:	f040 8096 	bne.w	8017e62 <rcl_expand_topic_name+0x16a>
 8017d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	f040 809a 	bne.w	8017e72 <rcl_expand_topic_name+0x17a>
 8017d3e:	4602      	mov	r2, r0
 8017d40:	a909      	add	r1, sp, #36	; 0x24
 8017d42:	4630      	mov	r0, r6
 8017d44:	f7fd fcea 	bl	801571c <rmw_validate_node_name>
 8017d48:	2800      	cmp	r0, #0
 8017d4a:	f040 808e 	bne.w	8017e6a <rcl_expand_topic_name+0x172>
 8017d4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d50:	2a00      	cmp	r2, #0
 8017d52:	f040 8093 	bne.w	8017e7c <rcl_expand_topic_name+0x184>
 8017d56:	a909      	add	r1, sp, #36	; 0x24
 8017d58:	4638      	mov	r0, r7
 8017d5a:	f7fd fcc1 	bl	80156e0 <rmw_validate_namespace>
 8017d5e:	2800      	cmp	r0, #0
 8017d60:	f040 8083 	bne.w	8017e6a <rcl_expand_topic_name+0x172>
 8017d64:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017d66:	2c00      	cmp	r4, #0
 8017d68:	f040 80ed 	bne.w	8017f46 <rcl_expand_topic_name+0x24e>
 8017d6c:	217b      	movs	r1, #123	; 0x7b
 8017d6e:	4640      	mov	r0, r8
 8017d70:	f001 f805 	bl	8018d7e <strchr>
 8017d74:	f898 3000 	ldrb.w	r3, [r8]
 8017d78:	2b2f      	cmp	r3, #47	; 0x2f
 8017d7a:	4605      	mov	r5, r0
 8017d7c:	f000 809e 	beq.w	8017ebc <rcl_expand_topic_name+0x1c4>
 8017d80:	2b7e      	cmp	r3, #126	; 0x7e
 8017d82:	f040 80a2 	bne.w	8017eca <rcl_expand_topic_name+0x1d2>
 8017d86:	4638      	mov	r0, r7
 8017d88:	f7e8 fa2c 	bl	80001e4 <strlen>
 8017d8c:	4a82      	ldr	r2, [pc, #520]	; (8017f98 <rcl_expand_topic_name+0x2a0>)
 8017d8e:	4b83      	ldr	r3, [pc, #524]	; (8017f9c <rcl_expand_topic_name+0x2a4>)
 8017d90:	2801      	cmp	r0, #1
 8017d92:	bf18      	it	ne
 8017d94:	4613      	movne	r3, r2
 8017d96:	9302      	str	r3, [sp, #8]
 8017d98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017d9a:	9300      	str	r3, [sp, #0]
 8017d9c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8017da0:	f108 0301 	add.w	r3, r8, #1
 8017da4:	9305      	str	r3, [sp, #20]
 8017da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017daa:	9301      	str	r3, [sp, #4]
 8017dac:	ab14      	add	r3, sp, #80	; 0x50
 8017dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017db0:	f7fd f8da 	bl	8014f68 <rcutils_format_string_limit>
 8017db4:	4682      	mov	sl, r0
 8017db6:	2800      	cmp	r0, #0
 8017db8:	f000 80c7 	beq.w	8017f4a <rcl_expand_topic_name+0x252>
 8017dbc:	2d00      	cmp	r5, #0
 8017dbe:	f000 80a2 	beq.w	8017f06 <rcl_expand_topic_name+0x20e>
 8017dc2:	217b      	movs	r1, #123	; 0x7b
 8017dc4:	f000 ffdb 	bl	8018d7e <strchr>
 8017dc8:	46d1      	mov	r9, sl
 8017dca:	4605      	mov	r5, r0
 8017dcc:	9407      	str	r4, [sp, #28]
 8017dce:	46d3      	mov	fp, sl
 8017dd0:	464c      	mov	r4, r9
 8017dd2:	2d00      	cmp	r5, #0
 8017dd4:	f000 80be 	beq.w	8017f54 <rcl_expand_topic_name+0x25c>
 8017dd8:	217d      	movs	r1, #125	; 0x7d
 8017dda:	4620      	mov	r0, r4
 8017ddc:	f000 ffcf 	bl	8018d7e <strchr>
 8017de0:	eba0 0905 	sub.w	r9, r0, r5
 8017de4:	f109 0a01 	add.w	sl, r9, #1
 8017de8:	486d      	ldr	r0, [pc, #436]	; (8017fa0 <rcl_expand_topic_name+0x2a8>)
 8017dea:	4652      	mov	r2, sl
 8017dec:	4629      	mov	r1, r5
 8017dee:	f000 ffdb 	bl	8018da8 <strncmp>
 8017df2:	2800      	cmp	r0, #0
 8017df4:	d067      	beq.n	8017ec6 <rcl_expand_topic_name+0x1ce>
 8017df6:	486b      	ldr	r0, [pc, #428]	; (8017fa4 <rcl_expand_topic_name+0x2ac>)
 8017df8:	4652      	mov	r2, sl
 8017dfa:	4629      	mov	r1, r5
 8017dfc:	f000 ffd4 	bl	8018da8 <strncmp>
 8017e00:	b130      	cbz	r0, 8017e10 <rcl_expand_topic_name+0x118>
 8017e02:	4869      	ldr	r0, [pc, #420]	; (8017fa8 <rcl_expand_topic_name+0x2b0>)
 8017e04:	4652      	mov	r2, sl
 8017e06:	4629      	mov	r1, r5
 8017e08:	f000 ffce 	bl	8018da8 <strncmp>
 8017e0c:	2800      	cmp	r0, #0
 8017e0e:	d137      	bne.n	8017e80 <rcl_expand_topic_name+0x188>
 8017e10:	46b9      	mov	r9, r7
 8017e12:	ab16      	add	r3, sp, #88	; 0x58
 8017e14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017e18:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017e1c:	ab14      	add	r3, sp, #80	; 0x50
 8017e1e:	4628      	mov	r0, r5
 8017e20:	cb0c      	ldmia	r3, {r2, r3}
 8017e22:	4651      	mov	r1, sl
 8017e24:	f7fd f9dc 	bl	80151e0 <rcutils_strndup>
 8017e28:	4605      	mov	r5, r0
 8017e2a:	2800      	cmp	r0, #0
 8017e2c:	f000 809c 	beq.w	8017f68 <rcl_expand_topic_name+0x270>
 8017e30:	464a      	mov	r2, r9
 8017e32:	4620      	mov	r0, r4
 8017e34:	ab14      	add	r3, sp, #80	; 0x50
 8017e36:	4629      	mov	r1, r5
 8017e38:	f7fd f8d0 	bl	8014fdc <rcutils_repl_str>
 8017e3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e40:	4604      	mov	r4, r0
 8017e42:	4628      	mov	r0, r5
 8017e44:	4798      	blx	r3
 8017e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e48:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017e4a:	4658      	mov	r0, fp
 8017e4c:	4798      	blx	r3
 8017e4e:	2c00      	cmp	r4, #0
 8017e50:	d07b      	beq.n	8017f4a <rcl_expand_topic_name+0x252>
 8017e52:	217b      	movs	r1, #123	; 0x7b
 8017e54:	4620      	mov	r0, r4
 8017e56:	f000 ff92 	bl	8018d7e <strchr>
 8017e5a:	46a3      	mov	fp, r4
 8017e5c:	4605      	mov	r5, r0
 8017e5e:	e7b8      	b.n	8017dd2 <rcl_expand_topic_name+0xda>
 8017e60:	240b      	movs	r4, #11
 8017e62:	4620      	mov	r0, r4
 8017e64:	b00b      	add	sp, #44	; 0x2c
 8017e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e6a:	f7fc f935 	bl	80140d8 <rcl_convert_rmw_ret_to_rcl_ret>
 8017e6e:	4604      	mov	r4, r0
 8017e70:	e7f7      	b.n	8017e62 <rcl_expand_topic_name+0x16a>
 8017e72:	2467      	movs	r4, #103	; 0x67
 8017e74:	4620      	mov	r0, r4
 8017e76:	b00b      	add	sp, #44	; 0x2c
 8017e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e7c:	24c9      	movs	r4, #201	; 0xc9
 8017e7e:	e7f0      	b.n	8017e62 <rcl_expand_topic_name+0x16a>
 8017e80:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8017e84:	9806      	ldr	r0, [sp, #24]
 8017e86:	1c69      	adds	r1, r5, #1
 8017e88:	f7fd fac4 	bl	8015414 <rcutils_string_map_getn>
 8017e8c:	4681      	mov	r9, r0
 8017e8e:	2800      	cmp	r0, #0
 8017e90:	d1bf      	bne.n	8017e12 <rcl_expand_topic_name+0x11a>
 8017e92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017e94:	aa16      	add	r2, sp, #88	; 0x58
 8017e96:	6018      	str	r0, [r3, #0]
 8017e98:	ca07      	ldmia	r2, {r0, r1, r2}
 8017e9a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017e9e:	ab14      	add	r3, sp, #80	; 0x50
 8017ea0:	cb0c      	ldmia	r3, {r2, r3}
 8017ea2:	4651      	mov	r1, sl
 8017ea4:	4628      	mov	r0, r5
 8017ea6:	f7fd f99b 	bl	80151e0 <rcutils_strndup>
 8017eaa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017eac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017eae:	4798      	blx	r3
 8017eb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017eb2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017eb4:	4658      	mov	r0, fp
 8017eb6:	2469      	movs	r4, #105	; 0x69
 8017eb8:	4798      	blx	r3
 8017eba:	e7d2      	b.n	8017e62 <rcl_expand_topic_name+0x16a>
 8017ebc:	2800      	cmp	r0, #0
 8017ebe:	d05b      	beq.n	8017f78 <rcl_expand_topic_name+0x280>
 8017ec0:	46c1      	mov	r9, r8
 8017ec2:	46a2      	mov	sl, r4
 8017ec4:	e782      	b.n	8017dcc <rcl_expand_topic_name+0xd4>
 8017ec6:	46b1      	mov	r9, r6
 8017ec8:	e7a3      	b.n	8017e12 <rcl_expand_topic_name+0x11a>
 8017eca:	2800      	cmp	r0, #0
 8017ecc:	d1f8      	bne.n	8017ec0 <rcl_expand_topic_name+0x1c8>
 8017ece:	4638      	mov	r0, r7
 8017ed0:	f7e8 f988 	bl	80001e4 <strlen>
 8017ed4:	4a35      	ldr	r2, [pc, #212]	; (8017fac <rcl_expand_topic_name+0x2b4>)
 8017ed6:	4b36      	ldr	r3, [pc, #216]	; (8017fb0 <rcl_expand_topic_name+0x2b8>)
 8017ed8:	f8cd 8010 	str.w	r8, [sp, #16]
 8017edc:	2801      	cmp	r0, #1
 8017ede:	bf18      	it	ne
 8017ee0:	4613      	movne	r3, r2
 8017ee2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8017ee6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017eea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017eec:	9703      	str	r7, [sp, #12]
 8017eee:	9200      	str	r2, [sp, #0]
 8017ef0:	ab14      	add	r3, sp, #80	; 0x50
 8017ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017ef4:	f7fd f838 	bl	8014f68 <rcutils_format_string_limit>
 8017ef8:	4682      	mov	sl, r0
 8017efa:	4653      	mov	r3, sl
 8017efc:	b32b      	cbz	r3, 8017f4a <rcl_expand_topic_name+0x252>
 8017efe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017f00:	f8c3 a000 	str.w	sl, [r3]
 8017f04:	e7ad      	b.n	8017e62 <rcl_expand_topic_name+0x16a>
 8017f06:	f89a 3000 	ldrb.w	r3, [sl]
 8017f0a:	2b2f      	cmp	r3, #47	; 0x2f
 8017f0c:	d0f7      	beq.n	8017efe <rcl_expand_topic_name+0x206>
 8017f0e:	4638      	mov	r0, r7
 8017f10:	f7e8 f968 	bl	80001e4 <strlen>
 8017f14:	4a25      	ldr	r2, [pc, #148]	; (8017fac <rcl_expand_topic_name+0x2b4>)
 8017f16:	4b26      	ldr	r3, [pc, #152]	; (8017fb0 <rcl_expand_topic_name+0x2b8>)
 8017f18:	f8cd a010 	str.w	sl, [sp, #16]
 8017f1c:	2801      	cmp	r0, #1
 8017f1e:	bf18      	it	ne
 8017f20:	4613      	movne	r3, r2
 8017f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8017f26:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017f2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017f2c:	9703      	str	r7, [sp, #12]
 8017f2e:	9200      	str	r2, [sp, #0]
 8017f30:	ab14      	add	r3, sp, #80	; 0x50
 8017f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017f34:	f7fd f818 	bl	8014f68 <rcutils_format_string_limit>
 8017f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017f3c:	4605      	mov	r5, r0
 8017f3e:	4650      	mov	r0, sl
 8017f40:	4798      	blx	r3
 8017f42:	46aa      	mov	sl, r5
 8017f44:	e7d9      	b.n	8017efa <rcl_expand_topic_name+0x202>
 8017f46:	24ca      	movs	r4, #202	; 0xca
 8017f48:	e78b      	b.n	8017e62 <rcl_expand_topic_name+0x16a>
 8017f4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	6013      	str	r3, [r2, #0]
 8017f50:	240a      	movs	r4, #10
 8017f52:	e786      	b.n	8017e62 <rcl_expand_topic_name+0x16a>
 8017f54:	465b      	mov	r3, fp
 8017f56:	9c07      	ldr	r4, [sp, #28]
 8017f58:	46da      	mov	sl, fp
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d1d3      	bne.n	8017f06 <rcl_expand_topic_name+0x20e>
 8017f5e:	f898 3000 	ldrb.w	r3, [r8]
 8017f62:	2b2f      	cmp	r3, #47	; 0x2f
 8017f64:	d0cb      	beq.n	8017efe <rcl_expand_topic_name+0x206>
 8017f66:	e7b2      	b.n	8017ece <rcl_expand_topic_name+0x1d6>
 8017f68:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 8017f6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f6e:	6015      	str	r5, [r2, #0]
 8017f70:	4658      	mov	r0, fp
 8017f72:	4798      	blx	r3
 8017f74:	240a      	movs	r4, #10
 8017f76:	e774      	b.n	8017e62 <rcl_expand_topic_name+0x16a>
 8017f78:	ab17      	add	r3, sp, #92	; 0x5c
 8017f7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017f7e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017f82:	ab14      	add	r3, sp, #80	; 0x50
 8017f84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017f86:	4640      	mov	r0, r8
 8017f88:	f7fd f908 	bl	801519c <rcutils_strdup>
 8017f8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017f8e:	2800      	cmp	r0, #0
 8017f90:	6018      	str	r0, [r3, #0]
 8017f92:	bf08      	it	eq
 8017f94:	240a      	moveq	r4, #10
 8017f96:	e764      	b.n	8017e62 <rcl_expand_topic_name+0x16a>
 8017f98:	0801a8e0 	.word	0x0801a8e0
 8017f9c:	0801a0c8 	.word	0x0801a0c8
 8017fa0:	0801a8e8 	.word	0x0801a8e8
 8017fa4:	0801a8f0 	.word	0x0801a8f0
 8017fa8:	0801a8f8 	.word	0x0801a8f8
 8017fac:	0801a25c 	.word	0x0801a25c
 8017fb0:	0801a0d8 	.word	0x0801a0d8

08017fb4 <rcl_get_default_topic_name_substitutions>:
 8017fb4:	2800      	cmp	r0, #0
 8017fb6:	bf0c      	ite	eq
 8017fb8:	200b      	moveq	r0, #11
 8017fba:	2000      	movne	r0, #0
 8017fbc:	4770      	bx	lr
 8017fbe:	bf00      	nop

08017fc0 <rcl_get_zero_initialized_guard_condition>:
 8017fc0:	4a03      	ldr	r2, [pc, #12]	; (8017fd0 <rcl_get_zero_initialized_guard_condition+0x10>)
 8017fc2:	4603      	mov	r3, r0
 8017fc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017fc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8017fcc:	4618      	mov	r0, r3
 8017fce:	4770      	bx	lr
 8017fd0:	0801a904 	.word	0x0801a904

08017fd4 <rcl_guard_condition_init_from_rmw>:
 8017fd4:	b082      	sub	sp, #8
 8017fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fda:	b086      	sub	sp, #24
 8017fdc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017fe0:	4604      	mov	r4, r0
 8017fe2:	f84c 3f04 	str.w	r3, [ip, #4]!
 8017fe6:	460e      	mov	r6, r1
 8017fe8:	4617      	mov	r7, r2
 8017fea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017fee:	f10d 0e04 	add.w	lr, sp, #4
 8017ff2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017ff6:	f8dc 3000 	ldr.w	r3, [ip]
 8017ffa:	f8ce 3000 	str.w	r3, [lr]
 8017ffe:	a801      	add	r0, sp, #4
 8018000:	f7f7 fe7a 	bl	800fcf8 <rcutils_allocator_is_valid>
 8018004:	b350      	cbz	r0, 801805c <rcl_guard_condition_init_from_rmw+0x88>
 8018006:	b34c      	cbz	r4, 801805c <rcl_guard_condition_init_from_rmw+0x88>
 8018008:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801800c:	f1b8 0f00 	cmp.w	r8, #0
 8018010:	d11e      	bne.n	8018050 <rcl_guard_condition_init_from_rmw+0x7c>
 8018012:	b31f      	cbz	r7, 801805c <rcl_guard_condition_init_from_rmw+0x88>
 8018014:	4638      	mov	r0, r7
 8018016:	f7fc f87d 	bl	8014114 <rcl_context_is_valid>
 801801a:	b328      	cbz	r0, 8018068 <rcl_guard_condition_init_from_rmw+0x94>
 801801c:	9b01      	ldr	r3, [sp, #4]
 801801e:	9905      	ldr	r1, [sp, #20]
 8018020:	201c      	movs	r0, #28
 8018022:	4798      	blx	r3
 8018024:	4605      	mov	r5, r0
 8018026:	6060      	str	r0, [r4, #4]
 8018028:	b358      	cbz	r0, 8018082 <rcl_guard_condition_init_from_rmw+0xae>
 801802a:	b1fe      	cbz	r6, 801806c <rcl_guard_condition_init_from_rmw+0x98>
 801802c:	6006      	str	r6, [r0, #0]
 801802e:	f880 8004 	strb.w	r8, [r0, #4]
 8018032:	ac01      	add	r4, sp, #4
 8018034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018036:	f105 0c08 	add.w	ip, r5, #8
 801803a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801803e:	6823      	ldr	r3, [r4, #0]
 8018040:	f8cc 3000 	str.w	r3, [ip]
 8018044:	2000      	movs	r0, #0
 8018046:	b006      	add	sp, #24
 8018048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801804c:	b002      	add	sp, #8
 801804e:	4770      	bx	lr
 8018050:	2064      	movs	r0, #100	; 0x64
 8018052:	b006      	add	sp, #24
 8018054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018058:	b002      	add	sp, #8
 801805a:	4770      	bx	lr
 801805c:	200b      	movs	r0, #11
 801805e:	b006      	add	sp, #24
 8018060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018064:	b002      	add	sp, #8
 8018066:	4770      	bx	lr
 8018068:	2065      	movs	r0, #101	; 0x65
 801806a:	e7f2      	b.n	8018052 <rcl_guard_condition_init_from_rmw+0x7e>
 801806c:	6838      	ldr	r0, [r7, #0]
 801806e:	3028      	adds	r0, #40	; 0x28
 8018070:	f000 fa50 	bl	8018514 <rmw_create_guard_condition>
 8018074:	6028      	str	r0, [r5, #0]
 8018076:	6865      	ldr	r5, [r4, #4]
 8018078:	682e      	ldr	r6, [r5, #0]
 801807a:	b126      	cbz	r6, 8018086 <rcl_guard_condition_init_from_rmw+0xb2>
 801807c:	2301      	movs	r3, #1
 801807e:	712b      	strb	r3, [r5, #4]
 8018080:	e7d7      	b.n	8018032 <rcl_guard_condition_init_from_rmw+0x5e>
 8018082:	200a      	movs	r0, #10
 8018084:	e7e5      	b.n	8018052 <rcl_guard_condition_init_from_rmw+0x7e>
 8018086:	4628      	mov	r0, r5
 8018088:	9b02      	ldr	r3, [sp, #8]
 801808a:	9905      	ldr	r1, [sp, #20]
 801808c:	4798      	blx	r3
 801808e:	6066      	str	r6, [r4, #4]
 8018090:	2001      	movs	r0, #1
 8018092:	e7de      	b.n	8018052 <rcl_guard_condition_init_from_rmw+0x7e>

08018094 <rcl_guard_condition_fini>:
 8018094:	b570      	push	{r4, r5, r6, lr}
 8018096:	b082      	sub	sp, #8
 8018098:	b1f0      	cbz	r0, 80180d8 <rcl_guard_condition_fini+0x44>
 801809a:	6843      	ldr	r3, [r0, #4]
 801809c:	4604      	mov	r4, r0
 801809e:	b163      	cbz	r3, 80180ba <rcl_guard_condition_fini+0x26>
 80180a0:	6818      	ldr	r0, [r3, #0]
 80180a2:	68de      	ldr	r6, [r3, #12]
 80180a4:	6999      	ldr	r1, [r3, #24]
 80180a6:	b160      	cbz	r0, 80180c2 <rcl_guard_condition_fini+0x2e>
 80180a8:	791d      	ldrb	r5, [r3, #4]
 80180aa:	b965      	cbnz	r5, 80180c6 <rcl_guard_condition_fini+0x32>
 80180ac:	4618      	mov	r0, r3
 80180ae:	47b0      	blx	r6
 80180b0:	2300      	movs	r3, #0
 80180b2:	4628      	mov	r0, r5
 80180b4:	6063      	str	r3, [r4, #4]
 80180b6:	b002      	add	sp, #8
 80180b8:	bd70      	pop	{r4, r5, r6, pc}
 80180ba:	461d      	mov	r5, r3
 80180bc:	4628      	mov	r0, r5
 80180be:	b002      	add	sp, #8
 80180c0:	bd70      	pop	{r4, r5, r6, pc}
 80180c2:	4605      	mov	r5, r0
 80180c4:	e7f2      	b.n	80180ac <rcl_guard_condition_fini+0x18>
 80180c6:	9101      	str	r1, [sp, #4]
 80180c8:	f000 fa38 	bl	801853c <rmw_destroy_guard_condition>
 80180cc:	1e05      	subs	r5, r0, #0
 80180ce:	6863      	ldr	r3, [r4, #4]
 80180d0:	9901      	ldr	r1, [sp, #4]
 80180d2:	bf18      	it	ne
 80180d4:	2501      	movne	r5, #1
 80180d6:	e7e9      	b.n	80180ac <rcl_guard_condition_fini+0x18>
 80180d8:	250b      	movs	r5, #11
 80180da:	4628      	mov	r0, r5
 80180dc:	b002      	add	sp, #8
 80180de:	bd70      	pop	{r4, r5, r6, pc}

080180e0 <rcl_guard_condition_get_default_options>:
 80180e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180e2:	b087      	sub	sp, #28
 80180e4:	4606      	mov	r6, r0
 80180e6:	4668      	mov	r0, sp
 80180e8:	f7f7 fdf8 	bl	800fcdc <rcutils_get_default_allocator>
 80180ec:	4b09      	ldr	r3, [pc, #36]	; (8018114 <rcl_guard_condition_get_default_options+0x34>)
 80180ee:	46ee      	mov	lr, sp
 80180f0:	469c      	mov	ip, r3
 80180f2:	461d      	mov	r5, r3
 80180f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80180f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80180fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80180fe:	4634      	mov	r4, r6
 8018100:	f8de 7000 	ldr.w	r7, [lr]
 8018104:	f8cc 7000 	str.w	r7, [ip]
 8018108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801810a:	4630      	mov	r0, r6
 801810c:	6027      	str	r7, [r4, #0]
 801810e:	b007      	add	sp, #28
 8018110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018112:	bf00      	nop
 8018114:	20012d0c 	.word	0x20012d0c

08018118 <rcl_validate_topic_name>:
 8018118:	2800      	cmp	r0, #0
 801811a:	d07a      	beq.n	8018212 <rcl_validate_topic_name+0xfa>
 801811c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018120:	460e      	mov	r6, r1
 8018122:	2900      	cmp	r1, #0
 8018124:	d07c      	beq.n	8018220 <rcl_validate_topic_name+0x108>
 8018126:	4617      	mov	r7, r2
 8018128:	4605      	mov	r5, r0
 801812a:	f7e8 f85b 	bl	80001e4 <strlen>
 801812e:	b1b0      	cbz	r0, 801815e <rcl_validate_topic_name+0x46>
 8018130:	f895 9000 	ldrb.w	r9, [r5]
 8018134:	f8df c180 	ldr.w	ip, [pc, #384]	; 80182b8 <rcl_validate_topic_name+0x1a0>
 8018138:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801813c:	f013 0304 	ands.w	r3, r3, #4
 8018140:	d169      	bne.n	8018216 <rcl_validate_topic_name+0xfe>
 8018142:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8018146:	f815 2008 	ldrb.w	r2, [r5, r8]
 801814a:	2a2f      	cmp	r2, #47	; 0x2f
 801814c:	d10e      	bne.n	801816c <rcl_validate_topic_name+0x54>
 801814e:	2202      	movs	r2, #2
 8018150:	6032      	str	r2, [r6, #0]
 8018152:	b36f      	cbz	r7, 80181b0 <rcl_validate_topic_name+0x98>
 8018154:	f8c7 8000 	str.w	r8, [r7]
 8018158:	4618      	mov	r0, r3
 801815a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801815e:	2301      	movs	r3, #1
 8018160:	6033      	str	r3, [r6, #0]
 8018162:	b32f      	cbz	r7, 80181b0 <rcl_validate_topic_name+0x98>
 8018164:	2000      	movs	r0, #0
 8018166:	6038      	str	r0, [r7, #0]
 8018168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801816c:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8018170:	461c      	mov	r4, r3
 8018172:	4619      	mov	r1, r3
 8018174:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8018178:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801817c:	f1be 0f09 	cmp.w	lr, #9
 8018180:	d919      	bls.n	80181b6 <rcl_validate_topic_name+0x9e>
 8018182:	f022 0e20 	bic.w	lr, r2, #32
 8018186:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 801818a:	f1be 0f19 	cmp.w	lr, #25
 801818e:	d912      	bls.n	80181b6 <rcl_validate_topic_name+0x9e>
 8018190:	2a5f      	cmp	r2, #95	; 0x5f
 8018192:	d019      	beq.n	80181c8 <rcl_validate_topic_name+0xb0>
 8018194:	2a2f      	cmp	r2, #47	; 0x2f
 8018196:	d051      	beq.n	801823c <rcl_validate_topic_name+0x124>
 8018198:	2a7e      	cmp	r2, #126	; 0x7e
 801819a:	d048      	beq.n	801822e <rcl_validate_topic_name+0x116>
 801819c:	2a7b      	cmp	r2, #123	; 0x7b
 801819e:	d054      	beq.n	801824a <rcl_validate_topic_name+0x132>
 80181a0:	2a7d      	cmp	r2, #125	; 0x7d
 80181a2:	d161      	bne.n	8018268 <rcl_validate_topic_name+0x150>
 80181a4:	2c00      	cmp	r4, #0
 80181a6:	d155      	bne.n	8018254 <rcl_validate_topic_name+0x13c>
 80181a8:	2305      	movs	r3, #5
 80181aa:	6033      	str	r3, [r6, #0]
 80181ac:	b107      	cbz	r7, 80181b0 <rcl_validate_topic_name+0x98>
 80181ae:	6039      	str	r1, [r7, #0]
 80181b0:	2000      	movs	r0, #0
 80181b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181b6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80181ba:	0752      	lsls	r2, r2, #29
 80181bc:	d504      	bpl.n	80181c8 <rcl_validate_topic_name+0xb0>
 80181be:	b11c      	cbz	r4, 80181c8 <rcl_validate_topic_name+0xb0>
 80181c0:	b111      	cbz	r1, 80181c8 <rcl_validate_topic_name+0xb0>
 80181c2:	1e4a      	subs	r2, r1, #1
 80181c4:	429a      	cmp	r2, r3
 80181c6:	d02d      	beq.n	8018224 <rcl_validate_topic_name+0x10c>
 80181c8:	3101      	adds	r1, #1
 80181ca:	4288      	cmp	r0, r1
 80181cc:	d1d2      	bne.n	8018174 <rcl_validate_topic_name+0x5c>
 80181ce:	2c00      	cmp	r4, #0
 80181d0:	d145      	bne.n	801825e <rcl_validate_topic_name+0x146>
 80181d2:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 80181d6:	d04f      	beq.n	8018278 <rcl_validate_topic_name+0x160>
 80181d8:	4620      	mov	r0, r4
 80181da:	2301      	movs	r3, #1
 80181dc:	e006      	b.n	80181ec <rcl_validate_topic_name+0xd4>
 80181de:	428b      	cmp	r3, r1
 80181e0:	f105 0501 	add.w	r5, r5, #1
 80181e4:	f103 0201 	add.w	r2, r3, #1
 80181e8:	d236      	bcs.n	8018258 <rcl_validate_topic_name+0x140>
 80181ea:	4613      	mov	r3, r2
 80181ec:	4580      	cmp	r8, r0
 80181ee:	f100 0001 	add.w	r0, r0, #1
 80181f2:	d0f4      	beq.n	80181de <rcl_validate_topic_name+0xc6>
 80181f4:	782a      	ldrb	r2, [r5, #0]
 80181f6:	2a2f      	cmp	r2, #47	; 0x2f
 80181f8:	d1f1      	bne.n	80181de <rcl_validate_topic_name+0xc6>
 80181fa:	786a      	ldrb	r2, [r5, #1]
 80181fc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018200:	0754      	lsls	r4, r2, #29
 8018202:	d5ec      	bpl.n	80181de <rcl_validate_topic_name+0xc6>
 8018204:	2204      	movs	r2, #4
 8018206:	6032      	str	r2, [r6, #0]
 8018208:	2f00      	cmp	r7, #0
 801820a:	d0d1      	beq.n	80181b0 <rcl_validate_topic_name+0x98>
 801820c:	603b      	str	r3, [r7, #0]
 801820e:	2000      	movs	r0, #0
 8018210:	e7aa      	b.n	8018168 <rcl_validate_topic_name+0x50>
 8018212:	200b      	movs	r0, #11
 8018214:	4770      	bx	lr
 8018216:	2304      	movs	r3, #4
 8018218:	6033      	str	r3, [r6, #0]
 801821a:	2f00      	cmp	r7, #0
 801821c:	d1a2      	bne.n	8018164 <rcl_validate_topic_name+0x4c>
 801821e:	e7c7      	b.n	80181b0 <rcl_validate_topic_name+0x98>
 8018220:	200b      	movs	r0, #11
 8018222:	e7a1      	b.n	8018168 <rcl_validate_topic_name+0x50>
 8018224:	2309      	movs	r3, #9
 8018226:	6033      	str	r3, [r6, #0]
 8018228:	2f00      	cmp	r7, #0
 801822a:	d1c0      	bne.n	80181ae <rcl_validate_topic_name+0x96>
 801822c:	e7c0      	b.n	80181b0 <rcl_validate_topic_name+0x98>
 801822e:	2900      	cmp	r1, #0
 8018230:	d0ca      	beq.n	80181c8 <rcl_validate_topic_name+0xb0>
 8018232:	2306      	movs	r3, #6
 8018234:	6033      	str	r3, [r6, #0]
 8018236:	2f00      	cmp	r7, #0
 8018238:	d1b9      	bne.n	80181ae <rcl_validate_topic_name+0x96>
 801823a:	e7b9      	b.n	80181b0 <rcl_validate_topic_name+0x98>
 801823c:	2c00      	cmp	r4, #0
 801823e:	d0c3      	beq.n	80181c8 <rcl_validate_topic_name+0xb0>
 8018240:	2308      	movs	r3, #8
 8018242:	6033      	str	r3, [r6, #0]
 8018244:	2f00      	cmp	r7, #0
 8018246:	d1b2      	bne.n	80181ae <rcl_validate_topic_name+0x96>
 8018248:	e7b2      	b.n	80181b0 <rcl_validate_topic_name+0x98>
 801824a:	2c00      	cmp	r4, #0
 801824c:	d1f8      	bne.n	8018240 <rcl_validate_topic_name+0x128>
 801824e:	460b      	mov	r3, r1
 8018250:	2401      	movs	r4, #1
 8018252:	e7b9      	b.n	80181c8 <rcl_validate_topic_name+0xb0>
 8018254:	2400      	movs	r4, #0
 8018256:	e7b7      	b.n	80181c8 <rcl_validate_topic_name+0xb0>
 8018258:	2000      	movs	r0, #0
 801825a:	6030      	str	r0, [r6, #0]
 801825c:	e784      	b.n	8018168 <rcl_validate_topic_name+0x50>
 801825e:	2205      	movs	r2, #5
 8018260:	6032      	str	r2, [r6, #0]
 8018262:	2f00      	cmp	r7, #0
 8018264:	d1d2      	bne.n	801820c <rcl_validate_topic_name+0xf4>
 8018266:	e7a3      	b.n	80181b0 <rcl_validate_topic_name+0x98>
 8018268:	2c00      	cmp	r4, #0
 801826a:	bf14      	ite	ne
 801826c:	2308      	movne	r3, #8
 801826e:	2303      	moveq	r3, #3
 8018270:	6033      	str	r3, [r6, #0]
 8018272:	2f00      	cmp	r7, #0
 8018274:	d19b      	bne.n	80181ae <rcl_validate_topic_name+0x96>
 8018276:	e79b      	b.n	80181b0 <rcl_validate_topic_name+0x98>
 8018278:	2301      	movs	r3, #1
 801827a:	e00a      	b.n	8018292 <rcl_validate_topic_name+0x17a>
 801827c:	2c01      	cmp	r4, #1
 801827e:	d013      	beq.n	80182a8 <rcl_validate_topic_name+0x190>
 8018280:	4299      	cmp	r1, r3
 8018282:	f104 0401 	add.w	r4, r4, #1
 8018286:	f105 0501 	add.w	r5, r5, #1
 801828a:	f103 0201 	add.w	r2, r3, #1
 801828e:	d9e3      	bls.n	8018258 <rcl_validate_topic_name+0x140>
 8018290:	4613      	mov	r3, r2
 8018292:	45a0      	cmp	r8, r4
 8018294:	d0f4      	beq.n	8018280 <rcl_validate_topic_name+0x168>
 8018296:	782a      	ldrb	r2, [r5, #0]
 8018298:	2a2f      	cmp	r2, #47	; 0x2f
 801829a:	d1ef      	bne.n	801827c <rcl_validate_topic_name+0x164>
 801829c:	786a      	ldrb	r2, [r5, #1]
 801829e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80182a2:	0752      	lsls	r2, r2, #29
 80182a4:	d5ec      	bpl.n	8018280 <rcl_validate_topic_name+0x168>
 80182a6:	e7ad      	b.n	8018204 <rcl_validate_topic_name+0xec>
 80182a8:	2307      	movs	r3, #7
 80182aa:	6033      	str	r3, [r6, #0]
 80182ac:	2f00      	cmp	r7, #0
 80182ae:	f43f af7f 	beq.w	80181b0 <rcl_validate_topic_name+0x98>
 80182b2:	603c      	str	r4, [r7, #0]
 80182b4:	2000      	movs	r0, #0
 80182b6:	e757      	b.n	8018168 <rcl_validate_topic_name+0x50>
 80182b8:	0801a90d 	.word	0x0801a90d

080182bc <on_status>:
 80182bc:	b082      	sub	sp, #8
 80182be:	b002      	add	sp, #8
 80182c0:	4770      	bx	lr
 80182c2:	bf00      	nop

080182c4 <on_topic>:
 80182c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182c8:	4a22      	ldr	r2, [pc, #136]	; (8018354 <on_topic+0x90>)
 80182ca:	b094      	sub	sp, #80	; 0x50
 80182cc:	6812      	ldr	r2, [r2, #0]
 80182ce:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80182d0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80182d4:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 80182d8:	b3c2      	cbz	r2, 801834c <on_topic+0x88>
 80182da:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80182de:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80182e2:	e001      	b.n	80182e8 <on_topic+0x24>
 80182e4:	6852      	ldr	r2, [r2, #4]
 80182e6:	b38a      	cbz	r2, 801834c <on_topic+0x88>
 80182e8:	6894      	ldr	r4, [r2, #8]
 80182ea:	8aa3      	ldrh	r3, [r4, #20]
 80182ec:	428b      	cmp	r3, r1
 80182ee:	d1f9      	bne.n	80182e4 <on_topic+0x20>
 80182f0:	7da3      	ldrb	r3, [r4, #22]
 80182f2:	4283      	cmp	r3, r0
 80182f4:	d1f6      	bne.n	80182e4 <on_topic+0x20>
 80182f6:	2248      	movs	r2, #72	; 0x48
 80182f8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80182fc:	4668      	mov	r0, sp
 80182fe:	f000 fab5 	bl	801886c <memcpy>
 8018302:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8018306:	cb0c      	ldmia	r3, {r2, r3}
 8018308:	4620      	mov	r0, r4
 801830a:	f7f8 f8c9 	bl	80104a0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801830e:	4607      	mov	r7, r0
 8018310:	b1e0      	cbz	r0, 801834c <on_topic+0x88>
 8018312:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018316:	4632      	mov	r2, r6
 8018318:	4628      	mov	r0, r5
 801831a:	f108 0110 	add.w	r1, r8, #16
 801831e:	f7fe f843 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8018322:	b930      	cbnz	r0, 8018332 <on_topic+0x6e>
 8018324:	480c      	ldr	r0, [pc, #48]	; (8018358 <on_topic+0x94>)
 8018326:	4639      	mov	r1, r7
 8018328:	b014      	add	sp, #80	; 0x50
 801832a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801832e:	f7fd ba63 	b.w	80157f8 <put_memory>
 8018332:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8018336:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 801833a:	f7fd ff2b 	bl	8016194 <rmw_uros_epoch_nanos>
 801833e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8018342:	2305      	movs	r3, #5
 8018344:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018348:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801834c:	b014      	add	sp, #80	; 0x50
 801834e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018352:	bf00      	nop
 8018354:	20012bdc 	.word	0x20012bdc
 8018358:	20012bcc 	.word	0x20012bcc

0801835c <on_request>:
 801835c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018360:	4823      	ldr	r0, [pc, #140]	; (80183f0 <on_request+0x94>)
 8018362:	b094      	sub	sp, #80	; 0x50
 8018364:	6800      	ldr	r0, [r0, #0]
 8018366:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8018368:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801836c:	9113      	str	r1, [sp, #76]	; 0x4c
 801836e:	2800      	cmp	r0, #0
 8018370:	d03b      	beq.n	80183ea <on_request+0x8e>
 8018372:	461d      	mov	r5, r3
 8018374:	e001      	b.n	801837a <on_request+0x1e>
 8018376:	6840      	ldr	r0, [r0, #4]
 8018378:	b3b8      	cbz	r0, 80183ea <on_request+0x8e>
 801837a:	6884      	ldr	r4, [r0, #8]
 801837c:	8b21      	ldrh	r1, [r4, #24]
 801837e:	4291      	cmp	r1, r2
 8018380:	d1f9      	bne.n	8018376 <on_request+0x1a>
 8018382:	2248      	movs	r2, #72	; 0x48
 8018384:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018388:	4668      	mov	r0, sp
 801838a:	f000 fa6f 	bl	801886c <memcpy>
 801838e:	f104 0320 	add.w	r3, r4, #32
 8018392:	cb0c      	ldmia	r3, {r2, r3}
 8018394:	4620      	mov	r0, r4
 8018396:	f7f8 f883 	bl	80104a0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801839a:	4680      	mov	r8, r0
 801839c:	b328      	cbz	r0, 80183ea <on_request+0x8e>
 801839e:	4638      	mov	r0, r7
 80183a0:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80183a4:	4632      	mov	r2, r6
 80183a6:	f107 0110 	add.w	r1, r7, #16
 80183aa:	f7fd fffd 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 80183ae:	b930      	cbnz	r0, 80183be <on_request+0x62>
 80183b0:	4810      	ldr	r0, [pc, #64]	; (80183f4 <on_request+0x98>)
 80183b2:	4641      	mov	r1, r8
 80183b4:	b014      	add	sp, #80	; 0x50
 80183b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183ba:	f7fd ba1d 	b.w	80157f8 <put_memory>
 80183be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183c0:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 80183c4:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 80183c8:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 80183cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80183d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80183d4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80183d8:	f7fd fedc 	bl	8016194 <rmw_uros_epoch_nanos>
 80183dc:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80183e0:	2303      	movs	r3, #3
 80183e2:	e942 0102 	strd	r0, r1, [r2, #-8]
 80183e6:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 80183ea:	b014      	add	sp, #80	; 0x50
 80183ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183f0:	20012bac 	.word	0x20012bac
 80183f4:	20012bcc 	.word	0x20012bcc

080183f8 <on_reply>:
 80183f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183fc:	4821      	ldr	r0, [pc, #132]	; (8018484 <on_reply+0x8c>)
 80183fe:	b094      	sub	sp, #80	; 0x50
 8018400:	6800      	ldr	r0, [r0, #0]
 8018402:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8018404:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8018408:	9113      	str	r1, [sp, #76]	; 0x4c
 801840a:	b3b8      	cbz	r0, 801847c <on_reply+0x84>
 801840c:	461d      	mov	r5, r3
 801840e:	e001      	b.n	8018414 <on_reply+0x1c>
 8018410:	6840      	ldr	r0, [r0, #4]
 8018412:	b398      	cbz	r0, 801847c <on_reply+0x84>
 8018414:	6884      	ldr	r4, [r0, #8]
 8018416:	8b21      	ldrh	r1, [r4, #24]
 8018418:	4291      	cmp	r1, r2
 801841a:	d1f9      	bne.n	8018410 <on_reply+0x18>
 801841c:	2248      	movs	r2, #72	; 0x48
 801841e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018422:	4668      	mov	r0, sp
 8018424:	f000 fa22 	bl	801886c <memcpy>
 8018428:	f104 0320 	add.w	r3, r4, #32
 801842c:	cb0c      	ldmia	r3, {r2, r3}
 801842e:	4620      	mov	r0, r4
 8018430:	f7f8 f836 	bl	80104a0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018434:	4680      	mov	r8, r0
 8018436:	b308      	cbz	r0, 801847c <on_reply+0x84>
 8018438:	4638      	mov	r0, r7
 801843a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801843e:	4632      	mov	r2, r6
 8018440:	f107 0110 	add.w	r1, r7, #16
 8018444:	f7fd ffb0 	bl	80163a8 <ucdr_deserialize_array_uint8_t>
 8018448:	b930      	cbnz	r0, 8018458 <on_reply+0x60>
 801844a:	480f      	ldr	r0, [pc, #60]	; (8018488 <on_reply+0x90>)
 801844c:	4641      	mov	r1, r8
 801844e:	b014      	add	sp, #80	; 0x50
 8018450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018454:	f7fd b9d0 	b.w	80157f8 <put_memory>
 8018458:	2200      	movs	r2, #0
 801845a:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 801845e:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8018462:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8018466:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 801846a:	f7fd fe93 	bl	8016194 <rmw_uros_epoch_nanos>
 801846e:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8018472:	2304      	movs	r3, #4
 8018474:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018478:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801847c:	b014      	add	sp, #80	; 0x50
 801847e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018482:	bf00      	nop
 8018484:	2000e2c0 	.word	0x2000e2c0
 8018488:	20012bcc 	.word	0x20012bcc

0801848c <rmw_destroy_client>:
 801848c:	b570      	push	{r4, r5, r6, lr}
 801848e:	b128      	cbz	r0, 801849c <rmw_destroy_client+0x10>
 8018490:	4604      	mov	r4, r0
 8018492:	6800      	ldr	r0, [r0, #0]
 8018494:	460d      	mov	r5, r1
 8018496:	f7f8 f8d3 	bl	8010640 <is_uxrce_rmw_identifier_valid>
 801849a:	b910      	cbnz	r0, 80184a2 <rmw_destroy_client+0x16>
 801849c:	2401      	movs	r4, #1
 801849e:	4620      	mov	r0, r4
 80184a0:	bd70      	pop	{r4, r5, r6, pc}
 80184a2:	6863      	ldr	r3, [r4, #4]
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d0f9      	beq.n	801849c <rmw_destroy_client+0x10>
 80184a8:	2d00      	cmp	r5, #0
 80184aa:	d0f7      	beq.n	801849c <rmw_destroy_client+0x10>
 80184ac:	6828      	ldr	r0, [r5, #0]
 80184ae:	f7f8 f8c7 	bl	8010640 <is_uxrce_rmw_identifier_valid>
 80184b2:	2800      	cmp	r0, #0
 80184b4:	d0f2      	beq.n	801849c <rmw_destroy_client+0x10>
 80184b6:	686e      	ldr	r6, [r5, #4]
 80184b8:	2e00      	cmp	r6, #0
 80184ba:	d0ef      	beq.n	801849c <rmw_destroy_client+0x10>
 80184bc:	6864      	ldr	r4, [r4, #4]
 80184be:	6932      	ldr	r2, [r6, #16]
 80184c0:	6920      	ldr	r0, [r4, #16]
 80184c2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80184c6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80184ca:	6819      	ldr	r1, [r3, #0]
 80184cc:	f7fe fe38 	bl	8017140 <uxr_buffer_cancel_data>
 80184d0:	4602      	mov	r2, r0
 80184d2:	6920      	ldr	r0, [r4, #16]
 80184d4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80184d8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80184dc:	f7f8 f830 	bl	8010540 <run_xrce_session>
 80184e0:	6920      	ldr	r0, [r4, #16]
 80184e2:	6932      	ldr	r2, [r6, #16]
 80184e4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80184e8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80184ec:	6819      	ldr	r1, [r3, #0]
 80184ee:	f7f9 f963 	bl	80117b8 <uxr_buffer_delete_entity>
 80184f2:	4602      	mov	r2, r0
 80184f4:	6920      	ldr	r0, [r4, #16]
 80184f6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80184fa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80184fe:	f7f8 f81f 	bl	8010540 <run_xrce_session>
 8018502:	2800      	cmp	r0, #0
 8018504:	4628      	mov	r0, r5
 8018506:	bf14      	ite	ne
 8018508:	2400      	movne	r4, #0
 801850a:	2402      	moveq	r4, #2
 801850c:	f7f7 ffa6 	bl	801045c <rmw_uxrce_fini_client_memory>
 8018510:	e7c5      	b.n	801849e <rmw_destroy_client+0x12>
 8018512:	bf00      	nop

08018514 <rmw_create_guard_condition>:
 8018514:	b538      	push	{r3, r4, r5, lr}
 8018516:	4605      	mov	r5, r0
 8018518:	4807      	ldr	r0, [pc, #28]	; (8018538 <rmw_create_guard_condition+0x24>)
 801851a:	f7fd f95d 	bl	80157d8 <get_memory>
 801851e:	b148      	cbz	r0, 8018534 <rmw_create_guard_condition+0x20>
 8018520:	6884      	ldr	r4, [r0, #8]
 8018522:	2300      	movs	r3, #0
 8018524:	7423      	strb	r3, [r4, #16]
 8018526:	61e5      	str	r5, [r4, #28]
 8018528:	f7fd f97a 	bl	8015820 <rmw_get_implementation_identifier>
 801852c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8018530:	f104 0014 	add.w	r0, r4, #20
 8018534:	bd38      	pop	{r3, r4, r5, pc}
 8018536:	bf00      	nop
 8018538:	20012b6c 	.word	0x20012b6c

0801853c <rmw_destroy_guard_condition>:
 801853c:	b508      	push	{r3, lr}
 801853e:	4b08      	ldr	r3, [pc, #32]	; (8018560 <rmw_destroy_guard_condition+0x24>)
 8018540:	6819      	ldr	r1, [r3, #0]
 8018542:	b911      	cbnz	r1, 801854a <rmw_destroy_guard_condition+0xe>
 8018544:	e00a      	b.n	801855c <rmw_destroy_guard_condition+0x20>
 8018546:	6849      	ldr	r1, [r1, #4]
 8018548:	b141      	cbz	r1, 801855c <rmw_destroy_guard_condition+0x20>
 801854a:	688b      	ldr	r3, [r1, #8]
 801854c:	3314      	adds	r3, #20
 801854e:	4298      	cmp	r0, r3
 8018550:	d1f9      	bne.n	8018546 <rmw_destroy_guard_condition+0xa>
 8018552:	4803      	ldr	r0, [pc, #12]	; (8018560 <rmw_destroy_guard_condition+0x24>)
 8018554:	f7fd f950 	bl	80157f8 <put_memory>
 8018558:	2000      	movs	r0, #0
 801855a:	bd08      	pop	{r3, pc}
 801855c:	2001      	movs	r0, #1
 801855e:	bd08      	pop	{r3, pc}
 8018560:	20012b6c 	.word	0x20012b6c

08018564 <calloc>:
 8018564:	4b02      	ldr	r3, [pc, #8]	; (8018570 <calloc+0xc>)
 8018566:	460a      	mov	r2, r1
 8018568:	4601      	mov	r1, r0
 801856a:	6818      	ldr	r0, [r3, #0]
 801856c:	f000 b994 	b.w	8018898 <_calloc_r>
 8018570:	200001a4 	.word	0x200001a4

08018574 <__errno>:
 8018574:	4b01      	ldr	r3, [pc, #4]	; (801857c <__errno+0x8>)
 8018576:	6818      	ldr	r0, [r3, #0]
 8018578:	4770      	bx	lr
 801857a:	bf00      	nop
 801857c:	200001a4 	.word	0x200001a4

08018580 <std>:
 8018580:	2300      	movs	r3, #0
 8018582:	b510      	push	{r4, lr}
 8018584:	4604      	mov	r4, r0
 8018586:	e9c0 3300 	strd	r3, r3, [r0]
 801858a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801858e:	6083      	str	r3, [r0, #8]
 8018590:	8181      	strh	r1, [r0, #12]
 8018592:	6643      	str	r3, [r0, #100]	; 0x64
 8018594:	81c2      	strh	r2, [r0, #14]
 8018596:	6183      	str	r3, [r0, #24]
 8018598:	4619      	mov	r1, r3
 801859a:	2208      	movs	r2, #8
 801859c:	305c      	adds	r0, #92	; 0x5c
 801859e:	f000 f973 	bl	8018888 <memset>
 80185a2:	4b05      	ldr	r3, [pc, #20]	; (80185b8 <std+0x38>)
 80185a4:	6263      	str	r3, [r4, #36]	; 0x24
 80185a6:	4b05      	ldr	r3, [pc, #20]	; (80185bc <std+0x3c>)
 80185a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80185aa:	4b05      	ldr	r3, [pc, #20]	; (80185c0 <std+0x40>)
 80185ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80185ae:	4b05      	ldr	r3, [pc, #20]	; (80185c4 <std+0x44>)
 80185b0:	6224      	str	r4, [r4, #32]
 80185b2:	6323      	str	r3, [r4, #48]	; 0x30
 80185b4:	bd10      	pop	{r4, pc}
 80185b6:	bf00      	nop
 80185b8:	08018cf9 	.word	0x08018cf9
 80185bc:	08018d1b 	.word	0x08018d1b
 80185c0:	08018d53 	.word	0x08018d53
 80185c4:	08018d77 	.word	0x08018d77

080185c8 <_cleanup_r>:
 80185c8:	4901      	ldr	r1, [pc, #4]	; (80185d0 <_cleanup_r+0x8>)
 80185ca:	f000 b8af 	b.w	801872c <_fwalk_reent>
 80185ce:	bf00      	nop
 80185d0:	0801910d 	.word	0x0801910d

080185d4 <__sfmoreglue>:
 80185d4:	b570      	push	{r4, r5, r6, lr}
 80185d6:	2268      	movs	r2, #104	; 0x68
 80185d8:	1e4d      	subs	r5, r1, #1
 80185da:	4355      	muls	r5, r2
 80185dc:	460e      	mov	r6, r1
 80185de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80185e2:	f000 f9db 	bl	801899c <_malloc_r>
 80185e6:	4604      	mov	r4, r0
 80185e8:	b140      	cbz	r0, 80185fc <__sfmoreglue+0x28>
 80185ea:	2100      	movs	r1, #0
 80185ec:	e9c0 1600 	strd	r1, r6, [r0]
 80185f0:	300c      	adds	r0, #12
 80185f2:	60a0      	str	r0, [r4, #8]
 80185f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80185f8:	f000 f946 	bl	8018888 <memset>
 80185fc:	4620      	mov	r0, r4
 80185fe:	bd70      	pop	{r4, r5, r6, pc}

08018600 <__sfp_lock_acquire>:
 8018600:	4801      	ldr	r0, [pc, #4]	; (8018608 <__sfp_lock_acquire+0x8>)
 8018602:	f000 b920 	b.w	8018846 <__retarget_lock_acquire_recursive>
 8018606:	bf00      	nop
 8018608:	20012d22 	.word	0x20012d22

0801860c <__sfp_lock_release>:
 801860c:	4801      	ldr	r0, [pc, #4]	; (8018614 <__sfp_lock_release+0x8>)
 801860e:	f000 b91b 	b.w	8018848 <__retarget_lock_release_recursive>
 8018612:	bf00      	nop
 8018614:	20012d22 	.word	0x20012d22

08018618 <__sinit_lock_acquire>:
 8018618:	4801      	ldr	r0, [pc, #4]	; (8018620 <__sinit_lock_acquire+0x8>)
 801861a:	f000 b914 	b.w	8018846 <__retarget_lock_acquire_recursive>
 801861e:	bf00      	nop
 8018620:	20012d23 	.word	0x20012d23

08018624 <__sinit_lock_release>:
 8018624:	4801      	ldr	r0, [pc, #4]	; (801862c <__sinit_lock_release+0x8>)
 8018626:	f000 b90f 	b.w	8018848 <__retarget_lock_release_recursive>
 801862a:	bf00      	nop
 801862c:	20012d23 	.word	0x20012d23

08018630 <__sinit>:
 8018630:	b510      	push	{r4, lr}
 8018632:	4604      	mov	r4, r0
 8018634:	f7ff fff0 	bl	8018618 <__sinit_lock_acquire>
 8018638:	69a3      	ldr	r3, [r4, #24]
 801863a:	b11b      	cbz	r3, 8018644 <__sinit+0x14>
 801863c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018640:	f7ff bff0 	b.w	8018624 <__sinit_lock_release>
 8018644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018648:	6523      	str	r3, [r4, #80]	; 0x50
 801864a:	4b13      	ldr	r3, [pc, #76]	; (8018698 <__sinit+0x68>)
 801864c:	4a13      	ldr	r2, [pc, #76]	; (801869c <__sinit+0x6c>)
 801864e:	681b      	ldr	r3, [r3, #0]
 8018650:	62a2      	str	r2, [r4, #40]	; 0x28
 8018652:	42a3      	cmp	r3, r4
 8018654:	bf04      	itt	eq
 8018656:	2301      	moveq	r3, #1
 8018658:	61a3      	streq	r3, [r4, #24]
 801865a:	4620      	mov	r0, r4
 801865c:	f000 f820 	bl	80186a0 <__sfp>
 8018660:	6060      	str	r0, [r4, #4]
 8018662:	4620      	mov	r0, r4
 8018664:	f000 f81c 	bl	80186a0 <__sfp>
 8018668:	60a0      	str	r0, [r4, #8]
 801866a:	4620      	mov	r0, r4
 801866c:	f000 f818 	bl	80186a0 <__sfp>
 8018670:	2200      	movs	r2, #0
 8018672:	60e0      	str	r0, [r4, #12]
 8018674:	2104      	movs	r1, #4
 8018676:	6860      	ldr	r0, [r4, #4]
 8018678:	f7ff ff82 	bl	8018580 <std>
 801867c:	68a0      	ldr	r0, [r4, #8]
 801867e:	2201      	movs	r2, #1
 8018680:	2109      	movs	r1, #9
 8018682:	f7ff ff7d 	bl	8018580 <std>
 8018686:	68e0      	ldr	r0, [r4, #12]
 8018688:	2202      	movs	r2, #2
 801868a:	2112      	movs	r1, #18
 801868c:	f7ff ff78 	bl	8018580 <std>
 8018690:	2301      	movs	r3, #1
 8018692:	61a3      	str	r3, [r4, #24]
 8018694:	e7d2      	b.n	801863c <__sinit+0xc>
 8018696:	bf00      	nop
 8018698:	0801aa70 	.word	0x0801aa70
 801869c:	080185c9 	.word	0x080185c9

080186a0 <__sfp>:
 80186a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186a2:	4607      	mov	r7, r0
 80186a4:	f7ff ffac 	bl	8018600 <__sfp_lock_acquire>
 80186a8:	4b1e      	ldr	r3, [pc, #120]	; (8018724 <__sfp+0x84>)
 80186aa:	681e      	ldr	r6, [r3, #0]
 80186ac:	69b3      	ldr	r3, [r6, #24]
 80186ae:	b913      	cbnz	r3, 80186b6 <__sfp+0x16>
 80186b0:	4630      	mov	r0, r6
 80186b2:	f7ff ffbd 	bl	8018630 <__sinit>
 80186b6:	3648      	adds	r6, #72	; 0x48
 80186b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80186bc:	3b01      	subs	r3, #1
 80186be:	d503      	bpl.n	80186c8 <__sfp+0x28>
 80186c0:	6833      	ldr	r3, [r6, #0]
 80186c2:	b30b      	cbz	r3, 8018708 <__sfp+0x68>
 80186c4:	6836      	ldr	r6, [r6, #0]
 80186c6:	e7f7      	b.n	80186b8 <__sfp+0x18>
 80186c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80186cc:	b9d5      	cbnz	r5, 8018704 <__sfp+0x64>
 80186ce:	4b16      	ldr	r3, [pc, #88]	; (8018728 <__sfp+0x88>)
 80186d0:	60e3      	str	r3, [r4, #12]
 80186d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80186d6:	6665      	str	r5, [r4, #100]	; 0x64
 80186d8:	f000 f8b4 	bl	8018844 <__retarget_lock_init_recursive>
 80186dc:	f7ff ff96 	bl	801860c <__sfp_lock_release>
 80186e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80186e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80186e8:	6025      	str	r5, [r4, #0]
 80186ea:	61a5      	str	r5, [r4, #24]
 80186ec:	2208      	movs	r2, #8
 80186ee:	4629      	mov	r1, r5
 80186f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80186f4:	f000 f8c8 	bl	8018888 <memset>
 80186f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80186fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018700:	4620      	mov	r0, r4
 8018702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018704:	3468      	adds	r4, #104	; 0x68
 8018706:	e7d9      	b.n	80186bc <__sfp+0x1c>
 8018708:	2104      	movs	r1, #4
 801870a:	4638      	mov	r0, r7
 801870c:	f7ff ff62 	bl	80185d4 <__sfmoreglue>
 8018710:	4604      	mov	r4, r0
 8018712:	6030      	str	r0, [r6, #0]
 8018714:	2800      	cmp	r0, #0
 8018716:	d1d5      	bne.n	80186c4 <__sfp+0x24>
 8018718:	f7ff ff78 	bl	801860c <__sfp_lock_release>
 801871c:	230c      	movs	r3, #12
 801871e:	603b      	str	r3, [r7, #0]
 8018720:	e7ee      	b.n	8018700 <__sfp+0x60>
 8018722:	bf00      	nop
 8018724:	0801aa70 	.word	0x0801aa70
 8018728:	ffff0001 	.word	0xffff0001

0801872c <_fwalk_reent>:
 801872c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018730:	4606      	mov	r6, r0
 8018732:	4688      	mov	r8, r1
 8018734:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018738:	2700      	movs	r7, #0
 801873a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801873e:	f1b9 0901 	subs.w	r9, r9, #1
 8018742:	d505      	bpl.n	8018750 <_fwalk_reent+0x24>
 8018744:	6824      	ldr	r4, [r4, #0]
 8018746:	2c00      	cmp	r4, #0
 8018748:	d1f7      	bne.n	801873a <_fwalk_reent+0xe>
 801874a:	4638      	mov	r0, r7
 801874c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018750:	89ab      	ldrh	r3, [r5, #12]
 8018752:	2b01      	cmp	r3, #1
 8018754:	d907      	bls.n	8018766 <_fwalk_reent+0x3a>
 8018756:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801875a:	3301      	adds	r3, #1
 801875c:	d003      	beq.n	8018766 <_fwalk_reent+0x3a>
 801875e:	4629      	mov	r1, r5
 8018760:	4630      	mov	r0, r6
 8018762:	47c0      	blx	r8
 8018764:	4307      	orrs	r7, r0
 8018766:	3568      	adds	r5, #104	; 0x68
 8018768:	e7e9      	b.n	801873e <_fwalk_reent+0x12>
	...

0801876c <getenv>:
 801876c:	b507      	push	{r0, r1, r2, lr}
 801876e:	4b04      	ldr	r3, [pc, #16]	; (8018780 <getenv+0x14>)
 8018770:	4601      	mov	r1, r0
 8018772:	aa01      	add	r2, sp, #4
 8018774:	6818      	ldr	r0, [r3, #0]
 8018776:	f000 f805 	bl	8018784 <_findenv_r>
 801877a:	b003      	add	sp, #12
 801877c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018780:	200001a4 	.word	0x200001a4

08018784 <_findenv_r>:
 8018784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018788:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80187f8 <_findenv_r+0x74>
 801878c:	4607      	mov	r7, r0
 801878e:	4689      	mov	r9, r1
 8018790:	4616      	mov	r6, r2
 8018792:	f000 fc29 	bl	8018fe8 <__env_lock>
 8018796:	f8da 4000 	ldr.w	r4, [sl]
 801879a:	b134      	cbz	r4, 80187aa <_findenv_r+0x26>
 801879c:	464b      	mov	r3, r9
 801879e:	4698      	mov	r8, r3
 80187a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80187a4:	b13a      	cbz	r2, 80187b6 <_findenv_r+0x32>
 80187a6:	2a3d      	cmp	r2, #61	; 0x3d
 80187a8:	d1f9      	bne.n	801879e <_findenv_r+0x1a>
 80187aa:	4638      	mov	r0, r7
 80187ac:	f000 fc22 	bl	8018ff4 <__env_unlock>
 80187b0:	2000      	movs	r0, #0
 80187b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187b6:	eba8 0809 	sub.w	r8, r8, r9
 80187ba:	46a3      	mov	fp, r4
 80187bc:	f854 0b04 	ldr.w	r0, [r4], #4
 80187c0:	2800      	cmp	r0, #0
 80187c2:	d0f2      	beq.n	80187aa <_findenv_r+0x26>
 80187c4:	4642      	mov	r2, r8
 80187c6:	4649      	mov	r1, r9
 80187c8:	f000 faee 	bl	8018da8 <strncmp>
 80187cc:	2800      	cmp	r0, #0
 80187ce:	d1f4      	bne.n	80187ba <_findenv_r+0x36>
 80187d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80187d4:	eb03 0508 	add.w	r5, r3, r8
 80187d8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80187dc:	2b3d      	cmp	r3, #61	; 0x3d
 80187de:	d1ec      	bne.n	80187ba <_findenv_r+0x36>
 80187e0:	f8da 3000 	ldr.w	r3, [sl]
 80187e4:	ebab 0303 	sub.w	r3, fp, r3
 80187e8:	109b      	asrs	r3, r3, #2
 80187ea:	4638      	mov	r0, r7
 80187ec:	6033      	str	r3, [r6, #0]
 80187ee:	f000 fc01 	bl	8018ff4 <__env_unlock>
 80187f2:	1c68      	adds	r0, r5, #1
 80187f4:	e7dd      	b.n	80187b2 <_findenv_r+0x2e>
 80187f6:	bf00      	nop
 80187f8:	20000000 	.word	0x20000000

080187fc <__libc_init_array>:
 80187fc:	b570      	push	{r4, r5, r6, lr}
 80187fe:	4d0d      	ldr	r5, [pc, #52]	; (8018834 <__libc_init_array+0x38>)
 8018800:	4c0d      	ldr	r4, [pc, #52]	; (8018838 <__libc_init_array+0x3c>)
 8018802:	1b64      	subs	r4, r4, r5
 8018804:	10a4      	asrs	r4, r4, #2
 8018806:	2600      	movs	r6, #0
 8018808:	42a6      	cmp	r6, r4
 801880a:	d109      	bne.n	8018820 <__libc_init_array+0x24>
 801880c:	4d0b      	ldr	r5, [pc, #44]	; (801883c <__libc_init_array+0x40>)
 801880e:	4c0c      	ldr	r4, [pc, #48]	; (8018840 <__libc_init_array+0x44>)
 8018810:	f001 fb26 	bl	8019e60 <_init>
 8018814:	1b64      	subs	r4, r4, r5
 8018816:	10a4      	asrs	r4, r4, #2
 8018818:	2600      	movs	r6, #0
 801881a:	42a6      	cmp	r6, r4
 801881c:	d105      	bne.n	801882a <__libc_init_array+0x2e>
 801881e:	bd70      	pop	{r4, r5, r6, pc}
 8018820:	f855 3b04 	ldr.w	r3, [r5], #4
 8018824:	4798      	blx	r3
 8018826:	3601      	adds	r6, #1
 8018828:	e7ee      	b.n	8018808 <__libc_init_array+0xc>
 801882a:	f855 3b04 	ldr.w	r3, [r5], #4
 801882e:	4798      	blx	r3
 8018830:	3601      	adds	r6, #1
 8018832:	e7f2      	b.n	801881a <__libc_init_array+0x1e>
 8018834:	0801ab60 	.word	0x0801ab60
 8018838:	0801ab60 	.word	0x0801ab60
 801883c:	0801ab60 	.word	0x0801ab60
 8018840:	0801ab68 	.word	0x0801ab68

08018844 <__retarget_lock_init_recursive>:
 8018844:	4770      	bx	lr

08018846 <__retarget_lock_acquire_recursive>:
 8018846:	4770      	bx	lr

08018848 <__retarget_lock_release_recursive>:
 8018848:	4770      	bx	lr
	...

0801884c <malloc>:
 801884c:	4b02      	ldr	r3, [pc, #8]	; (8018858 <malloc+0xc>)
 801884e:	4601      	mov	r1, r0
 8018850:	6818      	ldr	r0, [r3, #0]
 8018852:	f000 b8a3 	b.w	801899c <_malloc_r>
 8018856:	bf00      	nop
 8018858:	200001a4 	.word	0x200001a4

0801885c <free>:
 801885c:	4b02      	ldr	r3, [pc, #8]	; (8018868 <free+0xc>)
 801885e:	4601      	mov	r1, r0
 8018860:	6818      	ldr	r0, [r3, #0]
 8018862:	f000 b82f 	b.w	80188c4 <_free_r>
 8018866:	bf00      	nop
 8018868:	200001a4 	.word	0x200001a4

0801886c <memcpy>:
 801886c:	440a      	add	r2, r1
 801886e:	4291      	cmp	r1, r2
 8018870:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018874:	d100      	bne.n	8018878 <memcpy+0xc>
 8018876:	4770      	bx	lr
 8018878:	b510      	push	{r4, lr}
 801887a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801887e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018882:	4291      	cmp	r1, r2
 8018884:	d1f9      	bne.n	801887a <memcpy+0xe>
 8018886:	bd10      	pop	{r4, pc}

08018888 <memset>:
 8018888:	4402      	add	r2, r0
 801888a:	4603      	mov	r3, r0
 801888c:	4293      	cmp	r3, r2
 801888e:	d100      	bne.n	8018892 <memset+0xa>
 8018890:	4770      	bx	lr
 8018892:	f803 1b01 	strb.w	r1, [r3], #1
 8018896:	e7f9      	b.n	801888c <memset+0x4>

08018898 <_calloc_r>:
 8018898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801889a:	fba1 2402 	umull	r2, r4, r1, r2
 801889e:	b94c      	cbnz	r4, 80188b4 <_calloc_r+0x1c>
 80188a0:	4611      	mov	r1, r2
 80188a2:	9201      	str	r2, [sp, #4]
 80188a4:	f000 f87a 	bl	801899c <_malloc_r>
 80188a8:	9a01      	ldr	r2, [sp, #4]
 80188aa:	4605      	mov	r5, r0
 80188ac:	b930      	cbnz	r0, 80188bc <_calloc_r+0x24>
 80188ae:	4628      	mov	r0, r5
 80188b0:	b003      	add	sp, #12
 80188b2:	bd30      	pop	{r4, r5, pc}
 80188b4:	220c      	movs	r2, #12
 80188b6:	6002      	str	r2, [r0, #0]
 80188b8:	2500      	movs	r5, #0
 80188ba:	e7f8      	b.n	80188ae <_calloc_r+0x16>
 80188bc:	4621      	mov	r1, r4
 80188be:	f7ff ffe3 	bl	8018888 <memset>
 80188c2:	e7f4      	b.n	80188ae <_calloc_r+0x16>

080188c4 <_free_r>:
 80188c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188c6:	2900      	cmp	r1, #0
 80188c8:	d044      	beq.n	8018954 <_free_r+0x90>
 80188ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188ce:	9001      	str	r0, [sp, #4]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	f1a1 0404 	sub.w	r4, r1, #4
 80188d6:	bfb8      	it	lt
 80188d8:	18e4      	addlt	r4, r4, r3
 80188da:	f000 fc77 	bl	80191cc <__malloc_lock>
 80188de:	4a1e      	ldr	r2, [pc, #120]	; (8018958 <_free_r+0x94>)
 80188e0:	9801      	ldr	r0, [sp, #4]
 80188e2:	6813      	ldr	r3, [r2, #0]
 80188e4:	b933      	cbnz	r3, 80188f4 <_free_r+0x30>
 80188e6:	6063      	str	r3, [r4, #4]
 80188e8:	6014      	str	r4, [r2, #0]
 80188ea:	b003      	add	sp, #12
 80188ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80188f0:	f000 bc72 	b.w	80191d8 <__malloc_unlock>
 80188f4:	42a3      	cmp	r3, r4
 80188f6:	d908      	bls.n	801890a <_free_r+0x46>
 80188f8:	6825      	ldr	r5, [r4, #0]
 80188fa:	1961      	adds	r1, r4, r5
 80188fc:	428b      	cmp	r3, r1
 80188fe:	bf01      	itttt	eq
 8018900:	6819      	ldreq	r1, [r3, #0]
 8018902:	685b      	ldreq	r3, [r3, #4]
 8018904:	1949      	addeq	r1, r1, r5
 8018906:	6021      	streq	r1, [r4, #0]
 8018908:	e7ed      	b.n	80188e6 <_free_r+0x22>
 801890a:	461a      	mov	r2, r3
 801890c:	685b      	ldr	r3, [r3, #4]
 801890e:	b10b      	cbz	r3, 8018914 <_free_r+0x50>
 8018910:	42a3      	cmp	r3, r4
 8018912:	d9fa      	bls.n	801890a <_free_r+0x46>
 8018914:	6811      	ldr	r1, [r2, #0]
 8018916:	1855      	adds	r5, r2, r1
 8018918:	42a5      	cmp	r5, r4
 801891a:	d10b      	bne.n	8018934 <_free_r+0x70>
 801891c:	6824      	ldr	r4, [r4, #0]
 801891e:	4421      	add	r1, r4
 8018920:	1854      	adds	r4, r2, r1
 8018922:	42a3      	cmp	r3, r4
 8018924:	6011      	str	r1, [r2, #0]
 8018926:	d1e0      	bne.n	80188ea <_free_r+0x26>
 8018928:	681c      	ldr	r4, [r3, #0]
 801892a:	685b      	ldr	r3, [r3, #4]
 801892c:	6053      	str	r3, [r2, #4]
 801892e:	4421      	add	r1, r4
 8018930:	6011      	str	r1, [r2, #0]
 8018932:	e7da      	b.n	80188ea <_free_r+0x26>
 8018934:	d902      	bls.n	801893c <_free_r+0x78>
 8018936:	230c      	movs	r3, #12
 8018938:	6003      	str	r3, [r0, #0]
 801893a:	e7d6      	b.n	80188ea <_free_r+0x26>
 801893c:	6825      	ldr	r5, [r4, #0]
 801893e:	1961      	adds	r1, r4, r5
 8018940:	428b      	cmp	r3, r1
 8018942:	bf04      	itt	eq
 8018944:	6819      	ldreq	r1, [r3, #0]
 8018946:	685b      	ldreq	r3, [r3, #4]
 8018948:	6063      	str	r3, [r4, #4]
 801894a:	bf04      	itt	eq
 801894c:	1949      	addeq	r1, r1, r5
 801894e:	6021      	streq	r1, [r4, #0]
 8018950:	6054      	str	r4, [r2, #4]
 8018952:	e7ca      	b.n	80188ea <_free_r+0x26>
 8018954:	b003      	add	sp, #12
 8018956:	bd30      	pop	{r4, r5, pc}
 8018958:	20012d24 	.word	0x20012d24

0801895c <sbrk_aligned>:
 801895c:	b570      	push	{r4, r5, r6, lr}
 801895e:	4e0e      	ldr	r6, [pc, #56]	; (8018998 <sbrk_aligned+0x3c>)
 8018960:	460c      	mov	r4, r1
 8018962:	6831      	ldr	r1, [r6, #0]
 8018964:	4605      	mov	r5, r0
 8018966:	b911      	cbnz	r1, 801896e <sbrk_aligned+0x12>
 8018968:	f000 f982 	bl	8018c70 <_sbrk_r>
 801896c:	6030      	str	r0, [r6, #0]
 801896e:	4621      	mov	r1, r4
 8018970:	4628      	mov	r0, r5
 8018972:	f000 f97d 	bl	8018c70 <_sbrk_r>
 8018976:	1c43      	adds	r3, r0, #1
 8018978:	d00a      	beq.n	8018990 <sbrk_aligned+0x34>
 801897a:	1cc4      	adds	r4, r0, #3
 801897c:	f024 0403 	bic.w	r4, r4, #3
 8018980:	42a0      	cmp	r0, r4
 8018982:	d007      	beq.n	8018994 <sbrk_aligned+0x38>
 8018984:	1a21      	subs	r1, r4, r0
 8018986:	4628      	mov	r0, r5
 8018988:	f000 f972 	bl	8018c70 <_sbrk_r>
 801898c:	3001      	adds	r0, #1
 801898e:	d101      	bne.n	8018994 <sbrk_aligned+0x38>
 8018990:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018994:	4620      	mov	r0, r4
 8018996:	bd70      	pop	{r4, r5, r6, pc}
 8018998:	20012d28 	.word	0x20012d28

0801899c <_malloc_r>:
 801899c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189a0:	1ccd      	adds	r5, r1, #3
 80189a2:	f025 0503 	bic.w	r5, r5, #3
 80189a6:	3508      	adds	r5, #8
 80189a8:	2d0c      	cmp	r5, #12
 80189aa:	bf38      	it	cc
 80189ac:	250c      	movcc	r5, #12
 80189ae:	2d00      	cmp	r5, #0
 80189b0:	4607      	mov	r7, r0
 80189b2:	db01      	blt.n	80189b8 <_malloc_r+0x1c>
 80189b4:	42a9      	cmp	r1, r5
 80189b6:	d905      	bls.n	80189c4 <_malloc_r+0x28>
 80189b8:	230c      	movs	r3, #12
 80189ba:	603b      	str	r3, [r7, #0]
 80189bc:	2600      	movs	r6, #0
 80189be:	4630      	mov	r0, r6
 80189c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189c4:	4e2e      	ldr	r6, [pc, #184]	; (8018a80 <_malloc_r+0xe4>)
 80189c6:	f000 fc01 	bl	80191cc <__malloc_lock>
 80189ca:	6833      	ldr	r3, [r6, #0]
 80189cc:	461c      	mov	r4, r3
 80189ce:	bb34      	cbnz	r4, 8018a1e <_malloc_r+0x82>
 80189d0:	4629      	mov	r1, r5
 80189d2:	4638      	mov	r0, r7
 80189d4:	f7ff ffc2 	bl	801895c <sbrk_aligned>
 80189d8:	1c43      	adds	r3, r0, #1
 80189da:	4604      	mov	r4, r0
 80189dc:	d14d      	bne.n	8018a7a <_malloc_r+0xde>
 80189de:	6834      	ldr	r4, [r6, #0]
 80189e0:	4626      	mov	r6, r4
 80189e2:	2e00      	cmp	r6, #0
 80189e4:	d140      	bne.n	8018a68 <_malloc_r+0xcc>
 80189e6:	6823      	ldr	r3, [r4, #0]
 80189e8:	4631      	mov	r1, r6
 80189ea:	4638      	mov	r0, r7
 80189ec:	eb04 0803 	add.w	r8, r4, r3
 80189f0:	f000 f93e 	bl	8018c70 <_sbrk_r>
 80189f4:	4580      	cmp	r8, r0
 80189f6:	d13a      	bne.n	8018a6e <_malloc_r+0xd2>
 80189f8:	6821      	ldr	r1, [r4, #0]
 80189fa:	3503      	adds	r5, #3
 80189fc:	1a6d      	subs	r5, r5, r1
 80189fe:	f025 0503 	bic.w	r5, r5, #3
 8018a02:	3508      	adds	r5, #8
 8018a04:	2d0c      	cmp	r5, #12
 8018a06:	bf38      	it	cc
 8018a08:	250c      	movcc	r5, #12
 8018a0a:	4629      	mov	r1, r5
 8018a0c:	4638      	mov	r0, r7
 8018a0e:	f7ff ffa5 	bl	801895c <sbrk_aligned>
 8018a12:	3001      	adds	r0, #1
 8018a14:	d02b      	beq.n	8018a6e <_malloc_r+0xd2>
 8018a16:	6823      	ldr	r3, [r4, #0]
 8018a18:	442b      	add	r3, r5
 8018a1a:	6023      	str	r3, [r4, #0]
 8018a1c:	e00e      	b.n	8018a3c <_malloc_r+0xa0>
 8018a1e:	6822      	ldr	r2, [r4, #0]
 8018a20:	1b52      	subs	r2, r2, r5
 8018a22:	d41e      	bmi.n	8018a62 <_malloc_r+0xc6>
 8018a24:	2a0b      	cmp	r2, #11
 8018a26:	d916      	bls.n	8018a56 <_malloc_r+0xba>
 8018a28:	1961      	adds	r1, r4, r5
 8018a2a:	42a3      	cmp	r3, r4
 8018a2c:	6025      	str	r5, [r4, #0]
 8018a2e:	bf18      	it	ne
 8018a30:	6059      	strne	r1, [r3, #4]
 8018a32:	6863      	ldr	r3, [r4, #4]
 8018a34:	bf08      	it	eq
 8018a36:	6031      	streq	r1, [r6, #0]
 8018a38:	5162      	str	r2, [r4, r5]
 8018a3a:	604b      	str	r3, [r1, #4]
 8018a3c:	4638      	mov	r0, r7
 8018a3e:	f104 060b 	add.w	r6, r4, #11
 8018a42:	f000 fbc9 	bl	80191d8 <__malloc_unlock>
 8018a46:	f026 0607 	bic.w	r6, r6, #7
 8018a4a:	1d23      	adds	r3, r4, #4
 8018a4c:	1af2      	subs	r2, r6, r3
 8018a4e:	d0b6      	beq.n	80189be <_malloc_r+0x22>
 8018a50:	1b9b      	subs	r3, r3, r6
 8018a52:	50a3      	str	r3, [r4, r2]
 8018a54:	e7b3      	b.n	80189be <_malloc_r+0x22>
 8018a56:	6862      	ldr	r2, [r4, #4]
 8018a58:	42a3      	cmp	r3, r4
 8018a5a:	bf0c      	ite	eq
 8018a5c:	6032      	streq	r2, [r6, #0]
 8018a5e:	605a      	strne	r2, [r3, #4]
 8018a60:	e7ec      	b.n	8018a3c <_malloc_r+0xa0>
 8018a62:	4623      	mov	r3, r4
 8018a64:	6864      	ldr	r4, [r4, #4]
 8018a66:	e7b2      	b.n	80189ce <_malloc_r+0x32>
 8018a68:	4634      	mov	r4, r6
 8018a6a:	6876      	ldr	r6, [r6, #4]
 8018a6c:	e7b9      	b.n	80189e2 <_malloc_r+0x46>
 8018a6e:	230c      	movs	r3, #12
 8018a70:	603b      	str	r3, [r7, #0]
 8018a72:	4638      	mov	r0, r7
 8018a74:	f000 fbb0 	bl	80191d8 <__malloc_unlock>
 8018a78:	e7a1      	b.n	80189be <_malloc_r+0x22>
 8018a7a:	6025      	str	r5, [r4, #0]
 8018a7c:	e7de      	b.n	8018a3c <_malloc_r+0xa0>
 8018a7e:	bf00      	nop
 8018a80:	20012d24 	.word	0x20012d24

08018a84 <iprintf>:
 8018a84:	b40f      	push	{r0, r1, r2, r3}
 8018a86:	4b0a      	ldr	r3, [pc, #40]	; (8018ab0 <iprintf+0x2c>)
 8018a88:	b513      	push	{r0, r1, r4, lr}
 8018a8a:	681c      	ldr	r4, [r3, #0]
 8018a8c:	b124      	cbz	r4, 8018a98 <iprintf+0x14>
 8018a8e:	69a3      	ldr	r3, [r4, #24]
 8018a90:	b913      	cbnz	r3, 8018a98 <iprintf+0x14>
 8018a92:	4620      	mov	r0, r4
 8018a94:	f7ff fdcc 	bl	8018630 <__sinit>
 8018a98:	ab05      	add	r3, sp, #20
 8018a9a:	9a04      	ldr	r2, [sp, #16]
 8018a9c:	68a1      	ldr	r1, [r4, #8]
 8018a9e:	9301      	str	r3, [sp, #4]
 8018aa0:	4620      	mov	r0, r4
 8018aa2:	f000 fd53 	bl	801954c <_vfiprintf_r>
 8018aa6:	b002      	add	sp, #8
 8018aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018aac:	b004      	add	sp, #16
 8018aae:	4770      	bx	lr
 8018ab0:	200001a4 	.word	0x200001a4

08018ab4 <srand>:
 8018ab4:	b538      	push	{r3, r4, r5, lr}
 8018ab6:	4b10      	ldr	r3, [pc, #64]	; (8018af8 <srand+0x44>)
 8018ab8:	681d      	ldr	r5, [r3, #0]
 8018aba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8018abc:	4604      	mov	r4, r0
 8018abe:	b9b3      	cbnz	r3, 8018aee <srand+0x3a>
 8018ac0:	2018      	movs	r0, #24
 8018ac2:	f7ff fec3 	bl	801884c <malloc>
 8018ac6:	4602      	mov	r2, r0
 8018ac8:	63a8      	str	r0, [r5, #56]	; 0x38
 8018aca:	b920      	cbnz	r0, 8018ad6 <srand+0x22>
 8018acc:	4b0b      	ldr	r3, [pc, #44]	; (8018afc <srand+0x48>)
 8018ace:	480c      	ldr	r0, [pc, #48]	; (8018b00 <srand+0x4c>)
 8018ad0:	2142      	movs	r1, #66	; 0x42
 8018ad2:	f000 fa5b 	bl	8018f8c <__assert_func>
 8018ad6:	490b      	ldr	r1, [pc, #44]	; (8018b04 <srand+0x50>)
 8018ad8:	4b0b      	ldr	r3, [pc, #44]	; (8018b08 <srand+0x54>)
 8018ada:	e9c0 1300 	strd	r1, r3, [r0]
 8018ade:	4b0b      	ldr	r3, [pc, #44]	; (8018b0c <srand+0x58>)
 8018ae0:	6083      	str	r3, [r0, #8]
 8018ae2:	230b      	movs	r3, #11
 8018ae4:	8183      	strh	r3, [r0, #12]
 8018ae6:	2100      	movs	r1, #0
 8018ae8:	2001      	movs	r0, #1
 8018aea:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018aee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8018af0:	2200      	movs	r2, #0
 8018af2:	611c      	str	r4, [r3, #16]
 8018af4:	615a      	str	r2, [r3, #20]
 8018af6:	bd38      	pop	{r3, r4, r5, pc}
 8018af8:	200001a4 	.word	0x200001a4
 8018afc:	0801aa74 	.word	0x0801aa74
 8018b00:	0801aa8b 	.word	0x0801aa8b
 8018b04:	abcd330e 	.word	0xabcd330e
 8018b08:	e66d1234 	.word	0xe66d1234
 8018b0c:	0005deec 	.word	0x0005deec

08018b10 <rand>:
 8018b10:	4b16      	ldr	r3, [pc, #88]	; (8018b6c <rand+0x5c>)
 8018b12:	b510      	push	{r4, lr}
 8018b14:	681c      	ldr	r4, [r3, #0]
 8018b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018b18:	b9b3      	cbnz	r3, 8018b48 <rand+0x38>
 8018b1a:	2018      	movs	r0, #24
 8018b1c:	f7ff fe96 	bl	801884c <malloc>
 8018b20:	63a0      	str	r0, [r4, #56]	; 0x38
 8018b22:	b928      	cbnz	r0, 8018b30 <rand+0x20>
 8018b24:	4602      	mov	r2, r0
 8018b26:	4b12      	ldr	r3, [pc, #72]	; (8018b70 <rand+0x60>)
 8018b28:	4812      	ldr	r0, [pc, #72]	; (8018b74 <rand+0x64>)
 8018b2a:	214e      	movs	r1, #78	; 0x4e
 8018b2c:	f000 fa2e 	bl	8018f8c <__assert_func>
 8018b30:	4a11      	ldr	r2, [pc, #68]	; (8018b78 <rand+0x68>)
 8018b32:	4b12      	ldr	r3, [pc, #72]	; (8018b7c <rand+0x6c>)
 8018b34:	e9c0 2300 	strd	r2, r3, [r0]
 8018b38:	4b11      	ldr	r3, [pc, #68]	; (8018b80 <rand+0x70>)
 8018b3a:	6083      	str	r3, [r0, #8]
 8018b3c:	230b      	movs	r3, #11
 8018b3e:	8183      	strh	r3, [r0, #12]
 8018b40:	2201      	movs	r2, #1
 8018b42:	2300      	movs	r3, #0
 8018b44:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018b48:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8018b4a:	4a0e      	ldr	r2, [pc, #56]	; (8018b84 <rand+0x74>)
 8018b4c:	6920      	ldr	r0, [r4, #16]
 8018b4e:	6963      	ldr	r3, [r4, #20]
 8018b50:	490d      	ldr	r1, [pc, #52]	; (8018b88 <rand+0x78>)
 8018b52:	4342      	muls	r2, r0
 8018b54:	fb01 2203 	mla	r2, r1, r3, r2
 8018b58:	fba0 0101 	umull	r0, r1, r0, r1
 8018b5c:	1c43      	adds	r3, r0, #1
 8018b5e:	eb42 0001 	adc.w	r0, r2, r1
 8018b62:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8018b66:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018b6a:	bd10      	pop	{r4, pc}
 8018b6c:	200001a4 	.word	0x200001a4
 8018b70:	0801aa74 	.word	0x0801aa74
 8018b74:	0801aa8b 	.word	0x0801aa8b
 8018b78:	abcd330e 	.word	0xabcd330e
 8018b7c:	e66d1234 	.word	0xe66d1234
 8018b80:	0005deec 	.word	0x0005deec
 8018b84:	5851f42d 	.word	0x5851f42d
 8018b88:	4c957f2d 	.word	0x4c957f2d

08018b8c <realloc>:
 8018b8c:	4b02      	ldr	r3, [pc, #8]	; (8018b98 <realloc+0xc>)
 8018b8e:	460a      	mov	r2, r1
 8018b90:	4601      	mov	r1, r0
 8018b92:	6818      	ldr	r0, [r3, #0]
 8018b94:	f000 bb26 	b.w	80191e4 <_realloc_r>
 8018b98:	200001a4 	.word	0x200001a4

08018b9c <cleanup_glue>:
 8018b9c:	b538      	push	{r3, r4, r5, lr}
 8018b9e:	460c      	mov	r4, r1
 8018ba0:	6809      	ldr	r1, [r1, #0]
 8018ba2:	4605      	mov	r5, r0
 8018ba4:	b109      	cbz	r1, 8018baa <cleanup_glue+0xe>
 8018ba6:	f7ff fff9 	bl	8018b9c <cleanup_glue>
 8018baa:	4621      	mov	r1, r4
 8018bac:	4628      	mov	r0, r5
 8018bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018bb2:	f7ff be87 	b.w	80188c4 <_free_r>
	...

08018bb8 <_reclaim_reent>:
 8018bb8:	4b2c      	ldr	r3, [pc, #176]	; (8018c6c <_reclaim_reent+0xb4>)
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	4283      	cmp	r3, r0
 8018bbe:	b570      	push	{r4, r5, r6, lr}
 8018bc0:	4604      	mov	r4, r0
 8018bc2:	d051      	beq.n	8018c68 <_reclaim_reent+0xb0>
 8018bc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018bc6:	b143      	cbz	r3, 8018bda <_reclaim_reent+0x22>
 8018bc8:	68db      	ldr	r3, [r3, #12]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d14a      	bne.n	8018c64 <_reclaim_reent+0xac>
 8018bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018bd0:	6819      	ldr	r1, [r3, #0]
 8018bd2:	b111      	cbz	r1, 8018bda <_reclaim_reent+0x22>
 8018bd4:	4620      	mov	r0, r4
 8018bd6:	f7ff fe75 	bl	80188c4 <_free_r>
 8018bda:	6961      	ldr	r1, [r4, #20]
 8018bdc:	b111      	cbz	r1, 8018be4 <_reclaim_reent+0x2c>
 8018bde:	4620      	mov	r0, r4
 8018be0:	f7ff fe70 	bl	80188c4 <_free_r>
 8018be4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018be6:	b111      	cbz	r1, 8018bee <_reclaim_reent+0x36>
 8018be8:	4620      	mov	r0, r4
 8018bea:	f7ff fe6b 	bl	80188c4 <_free_r>
 8018bee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018bf0:	b111      	cbz	r1, 8018bf8 <_reclaim_reent+0x40>
 8018bf2:	4620      	mov	r0, r4
 8018bf4:	f7ff fe66 	bl	80188c4 <_free_r>
 8018bf8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8018bfa:	b111      	cbz	r1, 8018c02 <_reclaim_reent+0x4a>
 8018bfc:	4620      	mov	r0, r4
 8018bfe:	f7ff fe61 	bl	80188c4 <_free_r>
 8018c02:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018c04:	b111      	cbz	r1, 8018c0c <_reclaim_reent+0x54>
 8018c06:	4620      	mov	r0, r4
 8018c08:	f7ff fe5c 	bl	80188c4 <_free_r>
 8018c0c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8018c0e:	b111      	cbz	r1, 8018c16 <_reclaim_reent+0x5e>
 8018c10:	4620      	mov	r0, r4
 8018c12:	f7ff fe57 	bl	80188c4 <_free_r>
 8018c16:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018c18:	b111      	cbz	r1, 8018c20 <_reclaim_reent+0x68>
 8018c1a:	4620      	mov	r0, r4
 8018c1c:	f7ff fe52 	bl	80188c4 <_free_r>
 8018c20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c22:	b111      	cbz	r1, 8018c2a <_reclaim_reent+0x72>
 8018c24:	4620      	mov	r0, r4
 8018c26:	f7ff fe4d 	bl	80188c4 <_free_r>
 8018c2a:	69a3      	ldr	r3, [r4, #24]
 8018c2c:	b1e3      	cbz	r3, 8018c68 <_reclaim_reent+0xb0>
 8018c2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018c30:	4620      	mov	r0, r4
 8018c32:	4798      	blx	r3
 8018c34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018c36:	b1b9      	cbz	r1, 8018c68 <_reclaim_reent+0xb0>
 8018c38:	4620      	mov	r0, r4
 8018c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c3e:	f7ff bfad 	b.w	8018b9c <cleanup_glue>
 8018c42:	5949      	ldr	r1, [r1, r5]
 8018c44:	b941      	cbnz	r1, 8018c58 <_reclaim_reent+0xa0>
 8018c46:	3504      	adds	r5, #4
 8018c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c4a:	2d80      	cmp	r5, #128	; 0x80
 8018c4c:	68d9      	ldr	r1, [r3, #12]
 8018c4e:	d1f8      	bne.n	8018c42 <_reclaim_reent+0x8a>
 8018c50:	4620      	mov	r0, r4
 8018c52:	f7ff fe37 	bl	80188c4 <_free_r>
 8018c56:	e7ba      	b.n	8018bce <_reclaim_reent+0x16>
 8018c58:	680e      	ldr	r6, [r1, #0]
 8018c5a:	4620      	mov	r0, r4
 8018c5c:	f7ff fe32 	bl	80188c4 <_free_r>
 8018c60:	4631      	mov	r1, r6
 8018c62:	e7ef      	b.n	8018c44 <_reclaim_reent+0x8c>
 8018c64:	2500      	movs	r5, #0
 8018c66:	e7ef      	b.n	8018c48 <_reclaim_reent+0x90>
 8018c68:	bd70      	pop	{r4, r5, r6, pc}
 8018c6a:	bf00      	nop
 8018c6c:	200001a4 	.word	0x200001a4

08018c70 <_sbrk_r>:
 8018c70:	b538      	push	{r3, r4, r5, lr}
 8018c72:	4d06      	ldr	r5, [pc, #24]	; (8018c8c <_sbrk_r+0x1c>)
 8018c74:	2300      	movs	r3, #0
 8018c76:	4604      	mov	r4, r0
 8018c78:	4608      	mov	r0, r1
 8018c7a:	602b      	str	r3, [r5, #0]
 8018c7c:	f7e9 f882 	bl	8001d84 <_sbrk>
 8018c80:	1c43      	adds	r3, r0, #1
 8018c82:	d102      	bne.n	8018c8a <_sbrk_r+0x1a>
 8018c84:	682b      	ldr	r3, [r5, #0]
 8018c86:	b103      	cbz	r3, 8018c8a <_sbrk_r+0x1a>
 8018c88:	6023      	str	r3, [r4, #0]
 8018c8a:	bd38      	pop	{r3, r4, r5, pc}
 8018c8c:	20012d2c 	.word	0x20012d2c

08018c90 <sniprintf>:
 8018c90:	b40c      	push	{r2, r3}
 8018c92:	b530      	push	{r4, r5, lr}
 8018c94:	4b17      	ldr	r3, [pc, #92]	; (8018cf4 <sniprintf+0x64>)
 8018c96:	1e0c      	subs	r4, r1, #0
 8018c98:	681d      	ldr	r5, [r3, #0]
 8018c9a:	b09d      	sub	sp, #116	; 0x74
 8018c9c:	da08      	bge.n	8018cb0 <sniprintf+0x20>
 8018c9e:	238b      	movs	r3, #139	; 0x8b
 8018ca0:	602b      	str	r3, [r5, #0]
 8018ca2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018ca6:	b01d      	add	sp, #116	; 0x74
 8018ca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018cac:	b002      	add	sp, #8
 8018cae:	4770      	bx	lr
 8018cb0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018cb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018cb8:	bf14      	ite	ne
 8018cba:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8018cbe:	4623      	moveq	r3, r4
 8018cc0:	9304      	str	r3, [sp, #16]
 8018cc2:	9307      	str	r3, [sp, #28]
 8018cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018cc8:	9002      	str	r0, [sp, #8]
 8018cca:	9006      	str	r0, [sp, #24]
 8018ccc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018cd0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018cd2:	ab21      	add	r3, sp, #132	; 0x84
 8018cd4:	a902      	add	r1, sp, #8
 8018cd6:	4628      	mov	r0, r5
 8018cd8:	9301      	str	r3, [sp, #4]
 8018cda:	f000 fb0d 	bl	80192f8 <_svfiprintf_r>
 8018cde:	1c43      	adds	r3, r0, #1
 8018ce0:	bfbc      	itt	lt
 8018ce2:	238b      	movlt	r3, #139	; 0x8b
 8018ce4:	602b      	strlt	r3, [r5, #0]
 8018ce6:	2c00      	cmp	r4, #0
 8018ce8:	d0dd      	beq.n	8018ca6 <sniprintf+0x16>
 8018cea:	9b02      	ldr	r3, [sp, #8]
 8018cec:	2200      	movs	r2, #0
 8018cee:	701a      	strb	r2, [r3, #0]
 8018cf0:	e7d9      	b.n	8018ca6 <sniprintf+0x16>
 8018cf2:	bf00      	nop
 8018cf4:	200001a4 	.word	0x200001a4

08018cf8 <__sread>:
 8018cf8:	b510      	push	{r4, lr}
 8018cfa:	460c      	mov	r4, r1
 8018cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d00:	f000 fee8 	bl	8019ad4 <_read_r>
 8018d04:	2800      	cmp	r0, #0
 8018d06:	bfab      	itete	ge
 8018d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8018d0c:	181b      	addge	r3, r3, r0
 8018d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018d12:	bfac      	ite	ge
 8018d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8018d16:	81a3      	strhlt	r3, [r4, #12]
 8018d18:	bd10      	pop	{r4, pc}

08018d1a <__swrite>:
 8018d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d1e:	461f      	mov	r7, r3
 8018d20:	898b      	ldrh	r3, [r1, #12]
 8018d22:	05db      	lsls	r3, r3, #23
 8018d24:	4605      	mov	r5, r0
 8018d26:	460c      	mov	r4, r1
 8018d28:	4616      	mov	r6, r2
 8018d2a:	d505      	bpl.n	8018d38 <__swrite+0x1e>
 8018d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d30:	2302      	movs	r3, #2
 8018d32:	2200      	movs	r2, #0
 8018d34:	f000 fa38 	bl	80191a8 <_lseek_r>
 8018d38:	89a3      	ldrh	r3, [r4, #12]
 8018d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018d42:	81a3      	strh	r3, [r4, #12]
 8018d44:	4632      	mov	r2, r6
 8018d46:	463b      	mov	r3, r7
 8018d48:	4628      	mov	r0, r5
 8018d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d4e:	f000 b90b 	b.w	8018f68 <_write_r>

08018d52 <__sseek>:
 8018d52:	b510      	push	{r4, lr}
 8018d54:	460c      	mov	r4, r1
 8018d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d5a:	f000 fa25 	bl	80191a8 <_lseek_r>
 8018d5e:	1c43      	adds	r3, r0, #1
 8018d60:	89a3      	ldrh	r3, [r4, #12]
 8018d62:	bf15      	itete	ne
 8018d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8018d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018d6e:	81a3      	strheq	r3, [r4, #12]
 8018d70:	bf18      	it	ne
 8018d72:	81a3      	strhne	r3, [r4, #12]
 8018d74:	bd10      	pop	{r4, pc}

08018d76 <__sclose>:
 8018d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d7a:	f000 b925 	b.w	8018fc8 <_close_r>

08018d7e <strchr>:
 8018d7e:	b2c9      	uxtb	r1, r1
 8018d80:	4603      	mov	r3, r0
 8018d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d86:	b11a      	cbz	r2, 8018d90 <strchr+0x12>
 8018d88:	428a      	cmp	r2, r1
 8018d8a:	d1f9      	bne.n	8018d80 <strchr+0x2>
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	4770      	bx	lr
 8018d90:	2900      	cmp	r1, #0
 8018d92:	bf18      	it	ne
 8018d94:	2300      	movne	r3, #0
 8018d96:	e7f9      	b.n	8018d8c <strchr+0xe>

08018d98 <strcpy>:
 8018d98:	4603      	mov	r3, r0
 8018d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018d9e:	f803 2b01 	strb.w	r2, [r3], #1
 8018da2:	2a00      	cmp	r2, #0
 8018da4:	d1f9      	bne.n	8018d9a <strcpy+0x2>
 8018da6:	4770      	bx	lr

08018da8 <strncmp>:
 8018da8:	b510      	push	{r4, lr}
 8018daa:	b17a      	cbz	r2, 8018dcc <strncmp+0x24>
 8018dac:	4603      	mov	r3, r0
 8018dae:	3901      	subs	r1, #1
 8018db0:	1884      	adds	r4, r0, r2
 8018db2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018db6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018dba:	4290      	cmp	r0, r2
 8018dbc:	d101      	bne.n	8018dc2 <strncmp+0x1a>
 8018dbe:	42a3      	cmp	r3, r4
 8018dc0:	d101      	bne.n	8018dc6 <strncmp+0x1e>
 8018dc2:	1a80      	subs	r0, r0, r2
 8018dc4:	bd10      	pop	{r4, pc}
 8018dc6:	2800      	cmp	r0, #0
 8018dc8:	d1f3      	bne.n	8018db2 <strncmp+0xa>
 8018dca:	e7fa      	b.n	8018dc2 <strncmp+0x1a>
 8018dcc:	4610      	mov	r0, r2
 8018dce:	e7f9      	b.n	8018dc4 <strncmp+0x1c>

08018dd0 <strstr>:
 8018dd0:	780a      	ldrb	r2, [r1, #0]
 8018dd2:	b570      	push	{r4, r5, r6, lr}
 8018dd4:	b96a      	cbnz	r2, 8018df2 <strstr+0x22>
 8018dd6:	bd70      	pop	{r4, r5, r6, pc}
 8018dd8:	429a      	cmp	r2, r3
 8018dda:	d109      	bne.n	8018df0 <strstr+0x20>
 8018ddc:	460c      	mov	r4, r1
 8018dde:	4605      	mov	r5, r0
 8018de0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d0f6      	beq.n	8018dd6 <strstr+0x6>
 8018de8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8018dec:	429e      	cmp	r6, r3
 8018dee:	d0f7      	beq.n	8018de0 <strstr+0x10>
 8018df0:	3001      	adds	r0, #1
 8018df2:	7803      	ldrb	r3, [r0, #0]
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d1ef      	bne.n	8018dd8 <strstr+0x8>
 8018df8:	4618      	mov	r0, r3
 8018dfa:	e7ec      	b.n	8018dd6 <strstr+0x6>

08018dfc <_strtoul_l.constprop.0>:
 8018dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e00:	4f36      	ldr	r7, [pc, #216]	; (8018edc <_strtoul_l.constprop.0+0xe0>)
 8018e02:	4686      	mov	lr, r0
 8018e04:	460d      	mov	r5, r1
 8018e06:	4628      	mov	r0, r5
 8018e08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018e0c:	5de6      	ldrb	r6, [r4, r7]
 8018e0e:	f016 0608 	ands.w	r6, r6, #8
 8018e12:	d1f8      	bne.n	8018e06 <_strtoul_l.constprop.0+0xa>
 8018e14:	2c2d      	cmp	r4, #45	; 0x2d
 8018e16:	d12f      	bne.n	8018e78 <_strtoul_l.constprop.0+0x7c>
 8018e18:	782c      	ldrb	r4, [r5, #0]
 8018e1a:	2601      	movs	r6, #1
 8018e1c:	1c85      	adds	r5, r0, #2
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d057      	beq.n	8018ed2 <_strtoul_l.constprop.0+0xd6>
 8018e22:	2b10      	cmp	r3, #16
 8018e24:	d109      	bne.n	8018e3a <_strtoul_l.constprop.0+0x3e>
 8018e26:	2c30      	cmp	r4, #48	; 0x30
 8018e28:	d107      	bne.n	8018e3a <_strtoul_l.constprop.0+0x3e>
 8018e2a:	7828      	ldrb	r0, [r5, #0]
 8018e2c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8018e30:	2858      	cmp	r0, #88	; 0x58
 8018e32:	d149      	bne.n	8018ec8 <_strtoul_l.constprop.0+0xcc>
 8018e34:	786c      	ldrb	r4, [r5, #1]
 8018e36:	2310      	movs	r3, #16
 8018e38:	3502      	adds	r5, #2
 8018e3a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8018e3e:	2700      	movs	r7, #0
 8018e40:	fbb8 f8f3 	udiv	r8, r8, r3
 8018e44:	fb03 f908 	mul.w	r9, r3, r8
 8018e48:	ea6f 0909 	mvn.w	r9, r9
 8018e4c:	4638      	mov	r0, r7
 8018e4e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018e52:	f1bc 0f09 	cmp.w	ip, #9
 8018e56:	d814      	bhi.n	8018e82 <_strtoul_l.constprop.0+0x86>
 8018e58:	4664      	mov	r4, ip
 8018e5a:	42a3      	cmp	r3, r4
 8018e5c:	dd22      	ble.n	8018ea4 <_strtoul_l.constprop.0+0xa8>
 8018e5e:	2f00      	cmp	r7, #0
 8018e60:	db1d      	blt.n	8018e9e <_strtoul_l.constprop.0+0xa2>
 8018e62:	4580      	cmp	r8, r0
 8018e64:	d31b      	bcc.n	8018e9e <_strtoul_l.constprop.0+0xa2>
 8018e66:	d101      	bne.n	8018e6c <_strtoul_l.constprop.0+0x70>
 8018e68:	45a1      	cmp	r9, r4
 8018e6a:	db18      	blt.n	8018e9e <_strtoul_l.constprop.0+0xa2>
 8018e6c:	fb00 4003 	mla	r0, r0, r3, r4
 8018e70:	2701      	movs	r7, #1
 8018e72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018e76:	e7ea      	b.n	8018e4e <_strtoul_l.constprop.0+0x52>
 8018e78:	2c2b      	cmp	r4, #43	; 0x2b
 8018e7a:	bf04      	itt	eq
 8018e7c:	782c      	ldrbeq	r4, [r5, #0]
 8018e7e:	1c85      	addeq	r5, r0, #2
 8018e80:	e7cd      	b.n	8018e1e <_strtoul_l.constprop.0+0x22>
 8018e82:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018e86:	f1bc 0f19 	cmp.w	ip, #25
 8018e8a:	d801      	bhi.n	8018e90 <_strtoul_l.constprop.0+0x94>
 8018e8c:	3c37      	subs	r4, #55	; 0x37
 8018e8e:	e7e4      	b.n	8018e5a <_strtoul_l.constprop.0+0x5e>
 8018e90:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018e94:	f1bc 0f19 	cmp.w	ip, #25
 8018e98:	d804      	bhi.n	8018ea4 <_strtoul_l.constprop.0+0xa8>
 8018e9a:	3c57      	subs	r4, #87	; 0x57
 8018e9c:	e7dd      	b.n	8018e5a <_strtoul_l.constprop.0+0x5e>
 8018e9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018ea2:	e7e6      	b.n	8018e72 <_strtoul_l.constprop.0+0x76>
 8018ea4:	2f00      	cmp	r7, #0
 8018ea6:	da07      	bge.n	8018eb8 <_strtoul_l.constprop.0+0xbc>
 8018ea8:	2322      	movs	r3, #34	; 0x22
 8018eaa:	f8ce 3000 	str.w	r3, [lr]
 8018eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018eb2:	b932      	cbnz	r2, 8018ec2 <_strtoul_l.constprop.0+0xc6>
 8018eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018eb8:	b106      	cbz	r6, 8018ebc <_strtoul_l.constprop.0+0xc0>
 8018eba:	4240      	negs	r0, r0
 8018ebc:	2a00      	cmp	r2, #0
 8018ebe:	d0f9      	beq.n	8018eb4 <_strtoul_l.constprop.0+0xb8>
 8018ec0:	b107      	cbz	r7, 8018ec4 <_strtoul_l.constprop.0+0xc8>
 8018ec2:	1e69      	subs	r1, r5, #1
 8018ec4:	6011      	str	r1, [r2, #0]
 8018ec6:	e7f5      	b.n	8018eb4 <_strtoul_l.constprop.0+0xb8>
 8018ec8:	2430      	movs	r4, #48	; 0x30
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d1b5      	bne.n	8018e3a <_strtoul_l.constprop.0+0x3e>
 8018ece:	2308      	movs	r3, #8
 8018ed0:	e7b3      	b.n	8018e3a <_strtoul_l.constprop.0+0x3e>
 8018ed2:	2c30      	cmp	r4, #48	; 0x30
 8018ed4:	d0a9      	beq.n	8018e2a <_strtoul_l.constprop.0+0x2e>
 8018ed6:	230a      	movs	r3, #10
 8018ed8:	e7af      	b.n	8018e3a <_strtoul_l.constprop.0+0x3e>
 8018eda:	bf00      	nop
 8018edc:	0801a90d 	.word	0x0801a90d

08018ee0 <strtoul>:
 8018ee0:	4613      	mov	r3, r2
 8018ee2:	460a      	mov	r2, r1
 8018ee4:	4601      	mov	r1, r0
 8018ee6:	4802      	ldr	r0, [pc, #8]	; (8018ef0 <strtoul+0x10>)
 8018ee8:	6800      	ldr	r0, [r0, #0]
 8018eea:	f7ff bf87 	b.w	8018dfc <_strtoul_l.constprop.0>
 8018eee:	bf00      	nop
 8018ef0:	200001a4 	.word	0x200001a4

08018ef4 <_vsniprintf_r>:
 8018ef4:	b530      	push	{r4, r5, lr}
 8018ef6:	4614      	mov	r4, r2
 8018ef8:	2c00      	cmp	r4, #0
 8018efa:	b09b      	sub	sp, #108	; 0x6c
 8018efc:	4605      	mov	r5, r0
 8018efe:	461a      	mov	r2, r3
 8018f00:	da05      	bge.n	8018f0e <_vsniprintf_r+0x1a>
 8018f02:	238b      	movs	r3, #139	; 0x8b
 8018f04:	6003      	str	r3, [r0, #0]
 8018f06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f0a:	b01b      	add	sp, #108	; 0x6c
 8018f0c:	bd30      	pop	{r4, r5, pc}
 8018f0e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018f12:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018f16:	bf14      	ite	ne
 8018f18:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8018f1c:	4623      	moveq	r3, r4
 8018f1e:	9302      	str	r3, [sp, #8]
 8018f20:	9305      	str	r3, [sp, #20]
 8018f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f26:	9100      	str	r1, [sp, #0]
 8018f28:	9104      	str	r1, [sp, #16]
 8018f2a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018f2e:	4669      	mov	r1, sp
 8018f30:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018f32:	f000 f9e1 	bl	80192f8 <_svfiprintf_r>
 8018f36:	1c43      	adds	r3, r0, #1
 8018f38:	bfbc      	itt	lt
 8018f3a:	238b      	movlt	r3, #139	; 0x8b
 8018f3c:	602b      	strlt	r3, [r5, #0]
 8018f3e:	2c00      	cmp	r4, #0
 8018f40:	d0e3      	beq.n	8018f0a <_vsniprintf_r+0x16>
 8018f42:	9b00      	ldr	r3, [sp, #0]
 8018f44:	2200      	movs	r2, #0
 8018f46:	701a      	strb	r2, [r3, #0]
 8018f48:	e7df      	b.n	8018f0a <_vsniprintf_r+0x16>
	...

08018f4c <vsniprintf>:
 8018f4c:	b507      	push	{r0, r1, r2, lr}
 8018f4e:	9300      	str	r3, [sp, #0]
 8018f50:	4613      	mov	r3, r2
 8018f52:	460a      	mov	r2, r1
 8018f54:	4601      	mov	r1, r0
 8018f56:	4803      	ldr	r0, [pc, #12]	; (8018f64 <vsniprintf+0x18>)
 8018f58:	6800      	ldr	r0, [r0, #0]
 8018f5a:	f7ff ffcb 	bl	8018ef4 <_vsniprintf_r>
 8018f5e:	b003      	add	sp, #12
 8018f60:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f64:	200001a4 	.word	0x200001a4

08018f68 <_write_r>:
 8018f68:	b538      	push	{r3, r4, r5, lr}
 8018f6a:	4d07      	ldr	r5, [pc, #28]	; (8018f88 <_write_r+0x20>)
 8018f6c:	4604      	mov	r4, r0
 8018f6e:	4608      	mov	r0, r1
 8018f70:	4611      	mov	r1, r2
 8018f72:	2200      	movs	r2, #0
 8018f74:	602a      	str	r2, [r5, #0]
 8018f76:	461a      	mov	r2, r3
 8018f78:	f7e8 fee7 	bl	8001d4a <_write>
 8018f7c:	1c43      	adds	r3, r0, #1
 8018f7e:	d102      	bne.n	8018f86 <_write_r+0x1e>
 8018f80:	682b      	ldr	r3, [r5, #0]
 8018f82:	b103      	cbz	r3, 8018f86 <_write_r+0x1e>
 8018f84:	6023      	str	r3, [r4, #0]
 8018f86:	bd38      	pop	{r3, r4, r5, pc}
 8018f88:	20012d2c 	.word	0x20012d2c

08018f8c <__assert_func>:
 8018f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018f8e:	4614      	mov	r4, r2
 8018f90:	461a      	mov	r2, r3
 8018f92:	4b09      	ldr	r3, [pc, #36]	; (8018fb8 <__assert_func+0x2c>)
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	4605      	mov	r5, r0
 8018f98:	68d8      	ldr	r0, [r3, #12]
 8018f9a:	b14c      	cbz	r4, 8018fb0 <__assert_func+0x24>
 8018f9c:	4b07      	ldr	r3, [pc, #28]	; (8018fbc <__assert_func+0x30>)
 8018f9e:	9100      	str	r1, [sp, #0]
 8018fa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018fa4:	4906      	ldr	r1, [pc, #24]	; (8018fc0 <__assert_func+0x34>)
 8018fa6:	462b      	mov	r3, r5
 8018fa8:	f000 f8ec 	bl	8019184 <fiprintf>
 8018fac:	f000 fe64 	bl	8019c78 <abort>
 8018fb0:	4b04      	ldr	r3, [pc, #16]	; (8018fc4 <__assert_func+0x38>)
 8018fb2:	461c      	mov	r4, r3
 8018fb4:	e7f3      	b.n	8018f9e <__assert_func+0x12>
 8018fb6:	bf00      	nop
 8018fb8:	200001a4 	.word	0x200001a4
 8018fbc:	0801aae6 	.word	0x0801aae6
 8018fc0:	0801aaf3 	.word	0x0801aaf3
 8018fc4:	0801ab21 	.word	0x0801ab21

08018fc8 <_close_r>:
 8018fc8:	b538      	push	{r3, r4, r5, lr}
 8018fca:	4d06      	ldr	r5, [pc, #24]	; (8018fe4 <_close_r+0x1c>)
 8018fcc:	2300      	movs	r3, #0
 8018fce:	4604      	mov	r4, r0
 8018fd0:	4608      	mov	r0, r1
 8018fd2:	602b      	str	r3, [r5, #0]
 8018fd4:	f7e8 ff0c 	bl	8001df0 <_close>
 8018fd8:	1c43      	adds	r3, r0, #1
 8018fda:	d102      	bne.n	8018fe2 <_close_r+0x1a>
 8018fdc:	682b      	ldr	r3, [r5, #0]
 8018fde:	b103      	cbz	r3, 8018fe2 <_close_r+0x1a>
 8018fe0:	6023      	str	r3, [r4, #0]
 8018fe2:	bd38      	pop	{r3, r4, r5, pc}
 8018fe4:	20012d2c 	.word	0x20012d2c

08018fe8 <__env_lock>:
 8018fe8:	4801      	ldr	r0, [pc, #4]	; (8018ff0 <__env_lock+0x8>)
 8018fea:	f7ff bc2c 	b.w	8018846 <__retarget_lock_acquire_recursive>
 8018fee:	bf00      	nop
 8018ff0:	20012d20 	.word	0x20012d20

08018ff4 <__env_unlock>:
 8018ff4:	4801      	ldr	r0, [pc, #4]	; (8018ffc <__env_unlock+0x8>)
 8018ff6:	f7ff bc27 	b.w	8018848 <__retarget_lock_release_recursive>
 8018ffa:	bf00      	nop
 8018ffc:	20012d20 	.word	0x20012d20

08019000 <__sflush_r>:
 8019000:	898a      	ldrh	r2, [r1, #12]
 8019002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019006:	4605      	mov	r5, r0
 8019008:	0710      	lsls	r0, r2, #28
 801900a:	460c      	mov	r4, r1
 801900c:	d458      	bmi.n	80190c0 <__sflush_r+0xc0>
 801900e:	684b      	ldr	r3, [r1, #4]
 8019010:	2b00      	cmp	r3, #0
 8019012:	dc05      	bgt.n	8019020 <__sflush_r+0x20>
 8019014:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019016:	2b00      	cmp	r3, #0
 8019018:	dc02      	bgt.n	8019020 <__sflush_r+0x20>
 801901a:	2000      	movs	r0, #0
 801901c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019022:	2e00      	cmp	r6, #0
 8019024:	d0f9      	beq.n	801901a <__sflush_r+0x1a>
 8019026:	2300      	movs	r3, #0
 8019028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801902c:	682f      	ldr	r7, [r5, #0]
 801902e:	602b      	str	r3, [r5, #0]
 8019030:	d032      	beq.n	8019098 <__sflush_r+0x98>
 8019032:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019034:	89a3      	ldrh	r3, [r4, #12]
 8019036:	075a      	lsls	r2, r3, #29
 8019038:	d505      	bpl.n	8019046 <__sflush_r+0x46>
 801903a:	6863      	ldr	r3, [r4, #4]
 801903c:	1ac0      	subs	r0, r0, r3
 801903e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019040:	b10b      	cbz	r3, 8019046 <__sflush_r+0x46>
 8019042:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019044:	1ac0      	subs	r0, r0, r3
 8019046:	2300      	movs	r3, #0
 8019048:	4602      	mov	r2, r0
 801904a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801904c:	6a21      	ldr	r1, [r4, #32]
 801904e:	4628      	mov	r0, r5
 8019050:	47b0      	blx	r6
 8019052:	1c43      	adds	r3, r0, #1
 8019054:	89a3      	ldrh	r3, [r4, #12]
 8019056:	d106      	bne.n	8019066 <__sflush_r+0x66>
 8019058:	6829      	ldr	r1, [r5, #0]
 801905a:	291d      	cmp	r1, #29
 801905c:	d82c      	bhi.n	80190b8 <__sflush_r+0xb8>
 801905e:	4a2a      	ldr	r2, [pc, #168]	; (8019108 <__sflush_r+0x108>)
 8019060:	40ca      	lsrs	r2, r1
 8019062:	07d6      	lsls	r6, r2, #31
 8019064:	d528      	bpl.n	80190b8 <__sflush_r+0xb8>
 8019066:	2200      	movs	r2, #0
 8019068:	6062      	str	r2, [r4, #4]
 801906a:	04d9      	lsls	r1, r3, #19
 801906c:	6922      	ldr	r2, [r4, #16]
 801906e:	6022      	str	r2, [r4, #0]
 8019070:	d504      	bpl.n	801907c <__sflush_r+0x7c>
 8019072:	1c42      	adds	r2, r0, #1
 8019074:	d101      	bne.n	801907a <__sflush_r+0x7a>
 8019076:	682b      	ldr	r3, [r5, #0]
 8019078:	b903      	cbnz	r3, 801907c <__sflush_r+0x7c>
 801907a:	6560      	str	r0, [r4, #84]	; 0x54
 801907c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801907e:	602f      	str	r7, [r5, #0]
 8019080:	2900      	cmp	r1, #0
 8019082:	d0ca      	beq.n	801901a <__sflush_r+0x1a>
 8019084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019088:	4299      	cmp	r1, r3
 801908a:	d002      	beq.n	8019092 <__sflush_r+0x92>
 801908c:	4628      	mov	r0, r5
 801908e:	f7ff fc19 	bl	80188c4 <_free_r>
 8019092:	2000      	movs	r0, #0
 8019094:	6360      	str	r0, [r4, #52]	; 0x34
 8019096:	e7c1      	b.n	801901c <__sflush_r+0x1c>
 8019098:	6a21      	ldr	r1, [r4, #32]
 801909a:	2301      	movs	r3, #1
 801909c:	4628      	mov	r0, r5
 801909e:	47b0      	blx	r6
 80190a0:	1c41      	adds	r1, r0, #1
 80190a2:	d1c7      	bne.n	8019034 <__sflush_r+0x34>
 80190a4:	682b      	ldr	r3, [r5, #0]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d0c4      	beq.n	8019034 <__sflush_r+0x34>
 80190aa:	2b1d      	cmp	r3, #29
 80190ac:	d001      	beq.n	80190b2 <__sflush_r+0xb2>
 80190ae:	2b16      	cmp	r3, #22
 80190b0:	d101      	bne.n	80190b6 <__sflush_r+0xb6>
 80190b2:	602f      	str	r7, [r5, #0]
 80190b4:	e7b1      	b.n	801901a <__sflush_r+0x1a>
 80190b6:	89a3      	ldrh	r3, [r4, #12]
 80190b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190bc:	81a3      	strh	r3, [r4, #12]
 80190be:	e7ad      	b.n	801901c <__sflush_r+0x1c>
 80190c0:	690f      	ldr	r7, [r1, #16]
 80190c2:	2f00      	cmp	r7, #0
 80190c4:	d0a9      	beq.n	801901a <__sflush_r+0x1a>
 80190c6:	0793      	lsls	r3, r2, #30
 80190c8:	680e      	ldr	r6, [r1, #0]
 80190ca:	bf08      	it	eq
 80190cc:	694b      	ldreq	r3, [r1, #20]
 80190ce:	600f      	str	r7, [r1, #0]
 80190d0:	bf18      	it	ne
 80190d2:	2300      	movne	r3, #0
 80190d4:	eba6 0807 	sub.w	r8, r6, r7
 80190d8:	608b      	str	r3, [r1, #8]
 80190da:	f1b8 0f00 	cmp.w	r8, #0
 80190de:	dd9c      	ble.n	801901a <__sflush_r+0x1a>
 80190e0:	6a21      	ldr	r1, [r4, #32]
 80190e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80190e4:	4643      	mov	r3, r8
 80190e6:	463a      	mov	r2, r7
 80190e8:	4628      	mov	r0, r5
 80190ea:	47b0      	blx	r6
 80190ec:	2800      	cmp	r0, #0
 80190ee:	dc06      	bgt.n	80190fe <__sflush_r+0xfe>
 80190f0:	89a3      	ldrh	r3, [r4, #12]
 80190f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190f6:	81a3      	strh	r3, [r4, #12]
 80190f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190fc:	e78e      	b.n	801901c <__sflush_r+0x1c>
 80190fe:	4407      	add	r7, r0
 8019100:	eba8 0800 	sub.w	r8, r8, r0
 8019104:	e7e9      	b.n	80190da <__sflush_r+0xda>
 8019106:	bf00      	nop
 8019108:	20400001 	.word	0x20400001

0801910c <_fflush_r>:
 801910c:	b538      	push	{r3, r4, r5, lr}
 801910e:	690b      	ldr	r3, [r1, #16]
 8019110:	4605      	mov	r5, r0
 8019112:	460c      	mov	r4, r1
 8019114:	b913      	cbnz	r3, 801911c <_fflush_r+0x10>
 8019116:	2500      	movs	r5, #0
 8019118:	4628      	mov	r0, r5
 801911a:	bd38      	pop	{r3, r4, r5, pc}
 801911c:	b118      	cbz	r0, 8019126 <_fflush_r+0x1a>
 801911e:	6983      	ldr	r3, [r0, #24]
 8019120:	b90b      	cbnz	r3, 8019126 <_fflush_r+0x1a>
 8019122:	f7ff fa85 	bl	8018630 <__sinit>
 8019126:	4b14      	ldr	r3, [pc, #80]	; (8019178 <_fflush_r+0x6c>)
 8019128:	429c      	cmp	r4, r3
 801912a:	d11b      	bne.n	8019164 <_fflush_r+0x58>
 801912c:	686c      	ldr	r4, [r5, #4]
 801912e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019132:	2b00      	cmp	r3, #0
 8019134:	d0ef      	beq.n	8019116 <_fflush_r+0xa>
 8019136:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019138:	07d0      	lsls	r0, r2, #31
 801913a:	d404      	bmi.n	8019146 <_fflush_r+0x3a>
 801913c:	0599      	lsls	r1, r3, #22
 801913e:	d402      	bmi.n	8019146 <_fflush_r+0x3a>
 8019140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019142:	f7ff fb80 	bl	8018846 <__retarget_lock_acquire_recursive>
 8019146:	4628      	mov	r0, r5
 8019148:	4621      	mov	r1, r4
 801914a:	f7ff ff59 	bl	8019000 <__sflush_r>
 801914e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019150:	07da      	lsls	r2, r3, #31
 8019152:	4605      	mov	r5, r0
 8019154:	d4e0      	bmi.n	8019118 <_fflush_r+0xc>
 8019156:	89a3      	ldrh	r3, [r4, #12]
 8019158:	059b      	lsls	r3, r3, #22
 801915a:	d4dd      	bmi.n	8019118 <_fflush_r+0xc>
 801915c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801915e:	f7ff fb73 	bl	8018848 <__retarget_lock_release_recursive>
 8019162:	e7d9      	b.n	8019118 <_fflush_r+0xc>
 8019164:	4b05      	ldr	r3, [pc, #20]	; (801917c <_fflush_r+0x70>)
 8019166:	429c      	cmp	r4, r3
 8019168:	d101      	bne.n	801916e <_fflush_r+0x62>
 801916a:	68ac      	ldr	r4, [r5, #8]
 801916c:	e7df      	b.n	801912e <_fflush_r+0x22>
 801916e:	4b04      	ldr	r3, [pc, #16]	; (8019180 <_fflush_r+0x74>)
 8019170:	429c      	cmp	r4, r3
 8019172:	bf08      	it	eq
 8019174:	68ec      	ldreq	r4, [r5, #12]
 8019176:	e7da      	b.n	801912e <_fflush_r+0x22>
 8019178:	0801aa30 	.word	0x0801aa30
 801917c:	0801aa50 	.word	0x0801aa50
 8019180:	0801aa10 	.word	0x0801aa10

08019184 <fiprintf>:
 8019184:	b40e      	push	{r1, r2, r3}
 8019186:	b503      	push	{r0, r1, lr}
 8019188:	4601      	mov	r1, r0
 801918a:	ab03      	add	r3, sp, #12
 801918c:	4805      	ldr	r0, [pc, #20]	; (80191a4 <fiprintf+0x20>)
 801918e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019192:	6800      	ldr	r0, [r0, #0]
 8019194:	9301      	str	r3, [sp, #4]
 8019196:	f000 f9d9 	bl	801954c <_vfiprintf_r>
 801919a:	b002      	add	sp, #8
 801919c:	f85d eb04 	ldr.w	lr, [sp], #4
 80191a0:	b003      	add	sp, #12
 80191a2:	4770      	bx	lr
 80191a4:	200001a4 	.word	0x200001a4

080191a8 <_lseek_r>:
 80191a8:	b538      	push	{r3, r4, r5, lr}
 80191aa:	4d07      	ldr	r5, [pc, #28]	; (80191c8 <_lseek_r+0x20>)
 80191ac:	4604      	mov	r4, r0
 80191ae:	4608      	mov	r0, r1
 80191b0:	4611      	mov	r1, r2
 80191b2:	2200      	movs	r2, #0
 80191b4:	602a      	str	r2, [r5, #0]
 80191b6:	461a      	mov	r2, r3
 80191b8:	f7e8 fe41 	bl	8001e3e <_lseek>
 80191bc:	1c43      	adds	r3, r0, #1
 80191be:	d102      	bne.n	80191c6 <_lseek_r+0x1e>
 80191c0:	682b      	ldr	r3, [r5, #0]
 80191c2:	b103      	cbz	r3, 80191c6 <_lseek_r+0x1e>
 80191c4:	6023      	str	r3, [r4, #0]
 80191c6:	bd38      	pop	{r3, r4, r5, pc}
 80191c8:	20012d2c 	.word	0x20012d2c

080191cc <__malloc_lock>:
 80191cc:	4801      	ldr	r0, [pc, #4]	; (80191d4 <__malloc_lock+0x8>)
 80191ce:	f7ff bb3a 	b.w	8018846 <__retarget_lock_acquire_recursive>
 80191d2:	bf00      	nop
 80191d4:	20012d21 	.word	0x20012d21

080191d8 <__malloc_unlock>:
 80191d8:	4801      	ldr	r0, [pc, #4]	; (80191e0 <__malloc_unlock+0x8>)
 80191da:	f7ff bb35 	b.w	8018848 <__retarget_lock_release_recursive>
 80191de:	bf00      	nop
 80191e0:	20012d21 	.word	0x20012d21

080191e4 <_realloc_r>:
 80191e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191e8:	4680      	mov	r8, r0
 80191ea:	4614      	mov	r4, r2
 80191ec:	460e      	mov	r6, r1
 80191ee:	b921      	cbnz	r1, 80191fa <_realloc_r+0x16>
 80191f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191f4:	4611      	mov	r1, r2
 80191f6:	f7ff bbd1 	b.w	801899c <_malloc_r>
 80191fa:	b92a      	cbnz	r2, 8019208 <_realloc_r+0x24>
 80191fc:	f7ff fb62 	bl	80188c4 <_free_r>
 8019200:	4625      	mov	r5, r4
 8019202:	4628      	mov	r0, r5
 8019204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019208:	f000 fdbc 	bl	8019d84 <_malloc_usable_size_r>
 801920c:	4284      	cmp	r4, r0
 801920e:	4607      	mov	r7, r0
 8019210:	d802      	bhi.n	8019218 <_realloc_r+0x34>
 8019212:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019216:	d812      	bhi.n	801923e <_realloc_r+0x5a>
 8019218:	4621      	mov	r1, r4
 801921a:	4640      	mov	r0, r8
 801921c:	f7ff fbbe 	bl	801899c <_malloc_r>
 8019220:	4605      	mov	r5, r0
 8019222:	2800      	cmp	r0, #0
 8019224:	d0ed      	beq.n	8019202 <_realloc_r+0x1e>
 8019226:	42bc      	cmp	r4, r7
 8019228:	4622      	mov	r2, r4
 801922a:	4631      	mov	r1, r6
 801922c:	bf28      	it	cs
 801922e:	463a      	movcs	r2, r7
 8019230:	f7ff fb1c 	bl	801886c <memcpy>
 8019234:	4631      	mov	r1, r6
 8019236:	4640      	mov	r0, r8
 8019238:	f7ff fb44 	bl	80188c4 <_free_r>
 801923c:	e7e1      	b.n	8019202 <_realloc_r+0x1e>
 801923e:	4635      	mov	r5, r6
 8019240:	e7df      	b.n	8019202 <_realloc_r+0x1e>

08019242 <__ssputs_r>:
 8019242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019246:	688e      	ldr	r6, [r1, #8]
 8019248:	429e      	cmp	r6, r3
 801924a:	4682      	mov	sl, r0
 801924c:	460c      	mov	r4, r1
 801924e:	4690      	mov	r8, r2
 8019250:	461f      	mov	r7, r3
 8019252:	d838      	bhi.n	80192c6 <__ssputs_r+0x84>
 8019254:	898a      	ldrh	r2, [r1, #12]
 8019256:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801925a:	d032      	beq.n	80192c2 <__ssputs_r+0x80>
 801925c:	6825      	ldr	r5, [r4, #0]
 801925e:	6909      	ldr	r1, [r1, #16]
 8019260:	eba5 0901 	sub.w	r9, r5, r1
 8019264:	6965      	ldr	r5, [r4, #20]
 8019266:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801926a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801926e:	3301      	adds	r3, #1
 8019270:	444b      	add	r3, r9
 8019272:	106d      	asrs	r5, r5, #1
 8019274:	429d      	cmp	r5, r3
 8019276:	bf38      	it	cc
 8019278:	461d      	movcc	r5, r3
 801927a:	0553      	lsls	r3, r2, #21
 801927c:	d531      	bpl.n	80192e2 <__ssputs_r+0xa0>
 801927e:	4629      	mov	r1, r5
 8019280:	f7ff fb8c 	bl	801899c <_malloc_r>
 8019284:	4606      	mov	r6, r0
 8019286:	b950      	cbnz	r0, 801929e <__ssputs_r+0x5c>
 8019288:	230c      	movs	r3, #12
 801928a:	f8ca 3000 	str.w	r3, [sl]
 801928e:	89a3      	ldrh	r3, [r4, #12]
 8019290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019294:	81a3      	strh	r3, [r4, #12]
 8019296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801929a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801929e:	6921      	ldr	r1, [r4, #16]
 80192a0:	464a      	mov	r2, r9
 80192a2:	f7ff fae3 	bl	801886c <memcpy>
 80192a6:	89a3      	ldrh	r3, [r4, #12]
 80192a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80192ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80192b0:	81a3      	strh	r3, [r4, #12]
 80192b2:	6126      	str	r6, [r4, #16]
 80192b4:	6165      	str	r5, [r4, #20]
 80192b6:	444e      	add	r6, r9
 80192b8:	eba5 0509 	sub.w	r5, r5, r9
 80192bc:	6026      	str	r6, [r4, #0]
 80192be:	60a5      	str	r5, [r4, #8]
 80192c0:	463e      	mov	r6, r7
 80192c2:	42be      	cmp	r6, r7
 80192c4:	d900      	bls.n	80192c8 <__ssputs_r+0x86>
 80192c6:	463e      	mov	r6, r7
 80192c8:	6820      	ldr	r0, [r4, #0]
 80192ca:	4632      	mov	r2, r6
 80192cc:	4641      	mov	r1, r8
 80192ce:	f000 fd3f 	bl	8019d50 <memmove>
 80192d2:	68a3      	ldr	r3, [r4, #8]
 80192d4:	1b9b      	subs	r3, r3, r6
 80192d6:	60a3      	str	r3, [r4, #8]
 80192d8:	6823      	ldr	r3, [r4, #0]
 80192da:	4433      	add	r3, r6
 80192dc:	6023      	str	r3, [r4, #0]
 80192de:	2000      	movs	r0, #0
 80192e0:	e7db      	b.n	801929a <__ssputs_r+0x58>
 80192e2:	462a      	mov	r2, r5
 80192e4:	f7ff ff7e 	bl	80191e4 <_realloc_r>
 80192e8:	4606      	mov	r6, r0
 80192ea:	2800      	cmp	r0, #0
 80192ec:	d1e1      	bne.n	80192b2 <__ssputs_r+0x70>
 80192ee:	6921      	ldr	r1, [r4, #16]
 80192f0:	4650      	mov	r0, sl
 80192f2:	f7ff fae7 	bl	80188c4 <_free_r>
 80192f6:	e7c7      	b.n	8019288 <__ssputs_r+0x46>

080192f8 <_svfiprintf_r>:
 80192f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192fc:	4698      	mov	r8, r3
 80192fe:	898b      	ldrh	r3, [r1, #12]
 8019300:	061b      	lsls	r3, r3, #24
 8019302:	b09d      	sub	sp, #116	; 0x74
 8019304:	4607      	mov	r7, r0
 8019306:	460d      	mov	r5, r1
 8019308:	4614      	mov	r4, r2
 801930a:	d50e      	bpl.n	801932a <_svfiprintf_r+0x32>
 801930c:	690b      	ldr	r3, [r1, #16]
 801930e:	b963      	cbnz	r3, 801932a <_svfiprintf_r+0x32>
 8019310:	2140      	movs	r1, #64	; 0x40
 8019312:	f7ff fb43 	bl	801899c <_malloc_r>
 8019316:	6028      	str	r0, [r5, #0]
 8019318:	6128      	str	r0, [r5, #16]
 801931a:	b920      	cbnz	r0, 8019326 <_svfiprintf_r+0x2e>
 801931c:	230c      	movs	r3, #12
 801931e:	603b      	str	r3, [r7, #0]
 8019320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019324:	e0d1      	b.n	80194ca <_svfiprintf_r+0x1d2>
 8019326:	2340      	movs	r3, #64	; 0x40
 8019328:	616b      	str	r3, [r5, #20]
 801932a:	2300      	movs	r3, #0
 801932c:	9309      	str	r3, [sp, #36]	; 0x24
 801932e:	2320      	movs	r3, #32
 8019330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019334:	f8cd 800c 	str.w	r8, [sp, #12]
 8019338:	2330      	movs	r3, #48	; 0x30
 801933a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80194e4 <_svfiprintf_r+0x1ec>
 801933e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019342:	f04f 0901 	mov.w	r9, #1
 8019346:	4623      	mov	r3, r4
 8019348:	469a      	mov	sl, r3
 801934a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801934e:	b10a      	cbz	r2, 8019354 <_svfiprintf_r+0x5c>
 8019350:	2a25      	cmp	r2, #37	; 0x25
 8019352:	d1f9      	bne.n	8019348 <_svfiprintf_r+0x50>
 8019354:	ebba 0b04 	subs.w	fp, sl, r4
 8019358:	d00b      	beq.n	8019372 <_svfiprintf_r+0x7a>
 801935a:	465b      	mov	r3, fp
 801935c:	4622      	mov	r2, r4
 801935e:	4629      	mov	r1, r5
 8019360:	4638      	mov	r0, r7
 8019362:	f7ff ff6e 	bl	8019242 <__ssputs_r>
 8019366:	3001      	adds	r0, #1
 8019368:	f000 80aa 	beq.w	80194c0 <_svfiprintf_r+0x1c8>
 801936c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801936e:	445a      	add	r2, fp
 8019370:	9209      	str	r2, [sp, #36]	; 0x24
 8019372:	f89a 3000 	ldrb.w	r3, [sl]
 8019376:	2b00      	cmp	r3, #0
 8019378:	f000 80a2 	beq.w	80194c0 <_svfiprintf_r+0x1c8>
 801937c:	2300      	movs	r3, #0
 801937e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019386:	f10a 0a01 	add.w	sl, sl, #1
 801938a:	9304      	str	r3, [sp, #16]
 801938c:	9307      	str	r3, [sp, #28]
 801938e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019392:	931a      	str	r3, [sp, #104]	; 0x68
 8019394:	4654      	mov	r4, sl
 8019396:	2205      	movs	r2, #5
 8019398:	f814 1b01 	ldrb.w	r1, [r4], #1
 801939c:	4851      	ldr	r0, [pc, #324]	; (80194e4 <_svfiprintf_r+0x1ec>)
 801939e:	f7e6 ff2f 	bl	8000200 <memchr>
 80193a2:	9a04      	ldr	r2, [sp, #16]
 80193a4:	b9d8      	cbnz	r0, 80193de <_svfiprintf_r+0xe6>
 80193a6:	06d0      	lsls	r0, r2, #27
 80193a8:	bf44      	itt	mi
 80193aa:	2320      	movmi	r3, #32
 80193ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80193b0:	0711      	lsls	r1, r2, #28
 80193b2:	bf44      	itt	mi
 80193b4:	232b      	movmi	r3, #43	; 0x2b
 80193b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80193ba:	f89a 3000 	ldrb.w	r3, [sl]
 80193be:	2b2a      	cmp	r3, #42	; 0x2a
 80193c0:	d015      	beq.n	80193ee <_svfiprintf_r+0xf6>
 80193c2:	9a07      	ldr	r2, [sp, #28]
 80193c4:	4654      	mov	r4, sl
 80193c6:	2000      	movs	r0, #0
 80193c8:	f04f 0c0a 	mov.w	ip, #10
 80193cc:	4621      	mov	r1, r4
 80193ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80193d2:	3b30      	subs	r3, #48	; 0x30
 80193d4:	2b09      	cmp	r3, #9
 80193d6:	d94e      	bls.n	8019476 <_svfiprintf_r+0x17e>
 80193d8:	b1b0      	cbz	r0, 8019408 <_svfiprintf_r+0x110>
 80193da:	9207      	str	r2, [sp, #28]
 80193dc:	e014      	b.n	8019408 <_svfiprintf_r+0x110>
 80193de:	eba0 0308 	sub.w	r3, r0, r8
 80193e2:	fa09 f303 	lsl.w	r3, r9, r3
 80193e6:	4313      	orrs	r3, r2
 80193e8:	9304      	str	r3, [sp, #16]
 80193ea:	46a2      	mov	sl, r4
 80193ec:	e7d2      	b.n	8019394 <_svfiprintf_r+0x9c>
 80193ee:	9b03      	ldr	r3, [sp, #12]
 80193f0:	1d19      	adds	r1, r3, #4
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	9103      	str	r1, [sp, #12]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	bfbb      	ittet	lt
 80193fa:	425b      	neglt	r3, r3
 80193fc:	f042 0202 	orrlt.w	r2, r2, #2
 8019400:	9307      	strge	r3, [sp, #28]
 8019402:	9307      	strlt	r3, [sp, #28]
 8019404:	bfb8      	it	lt
 8019406:	9204      	strlt	r2, [sp, #16]
 8019408:	7823      	ldrb	r3, [r4, #0]
 801940a:	2b2e      	cmp	r3, #46	; 0x2e
 801940c:	d10c      	bne.n	8019428 <_svfiprintf_r+0x130>
 801940e:	7863      	ldrb	r3, [r4, #1]
 8019410:	2b2a      	cmp	r3, #42	; 0x2a
 8019412:	d135      	bne.n	8019480 <_svfiprintf_r+0x188>
 8019414:	9b03      	ldr	r3, [sp, #12]
 8019416:	1d1a      	adds	r2, r3, #4
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	9203      	str	r2, [sp, #12]
 801941c:	2b00      	cmp	r3, #0
 801941e:	bfb8      	it	lt
 8019420:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019424:	3402      	adds	r4, #2
 8019426:	9305      	str	r3, [sp, #20]
 8019428:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80194f4 <_svfiprintf_r+0x1fc>
 801942c:	7821      	ldrb	r1, [r4, #0]
 801942e:	2203      	movs	r2, #3
 8019430:	4650      	mov	r0, sl
 8019432:	f7e6 fee5 	bl	8000200 <memchr>
 8019436:	b140      	cbz	r0, 801944a <_svfiprintf_r+0x152>
 8019438:	2340      	movs	r3, #64	; 0x40
 801943a:	eba0 000a 	sub.w	r0, r0, sl
 801943e:	fa03 f000 	lsl.w	r0, r3, r0
 8019442:	9b04      	ldr	r3, [sp, #16]
 8019444:	4303      	orrs	r3, r0
 8019446:	3401      	adds	r4, #1
 8019448:	9304      	str	r3, [sp, #16]
 801944a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801944e:	4826      	ldr	r0, [pc, #152]	; (80194e8 <_svfiprintf_r+0x1f0>)
 8019450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019454:	2206      	movs	r2, #6
 8019456:	f7e6 fed3 	bl	8000200 <memchr>
 801945a:	2800      	cmp	r0, #0
 801945c:	d038      	beq.n	80194d0 <_svfiprintf_r+0x1d8>
 801945e:	4b23      	ldr	r3, [pc, #140]	; (80194ec <_svfiprintf_r+0x1f4>)
 8019460:	bb1b      	cbnz	r3, 80194aa <_svfiprintf_r+0x1b2>
 8019462:	9b03      	ldr	r3, [sp, #12]
 8019464:	3307      	adds	r3, #7
 8019466:	f023 0307 	bic.w	r3, r3, #7
 801946a:	3308      	adds	r3, #8
 801946c:	9303      	str	r3, [sp, #12]
 801946e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019470:	4433      	add	r3, r6
 8019472:	9309      	str	r3, [sp, #36]	; 0x24
 8019474:	e767      	b.n	8019346 <_svfiprintf_r+0x4e>
 8019476:	fb0c 3202 	mla	r2, ip, r2, r3
 801947a:	460c      	mov	r4, r1
 801947c:	2001      	movs	r0, #1
 801947e:	e7a5      	b.n	80193cc <_svfiprintf_r+0xd4>
 8019480:	2300      	movs	r3, #0
 8019482:	3401      	adds	r4, #1
 8019484:	9305      	str	r3, [sp, #20]
 8019486:	4619      	mov	r1, r3
 8019488:	f04f 0c0a 	mov.w	ip, #10
 801948c:	4620      	mov	r0, r4
 801948e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019492:	3a30      	subs	r2, #48	; 0x30
 8019494:	2a09      	cmp	r2, #9
 8019496:	d903      	bls.n	80194a0 <_svfiprintf_r+0x1a8>
 8019498:	2b00      	cmp	r3, #0
 801949a:	d0c5      	beq.n	8019428 <_svfiprintf_r+0x130>
 801949c:	9105      	str	r1, [sp, #20]
 801949e:	e7c3      	b.n	8019428 <_svfiprintf_r+0x130>
 80194a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80194a4:	4604      	mov	r4, r0
 80194a6:	2301      	movs	r3, #1
 80194a8:	e7f0      	b.n	801948c <_svfiprintf_r+0x194>
 80194aa:	ab03      	add	r3, sp, #12
 80194ac:	9300      	str	r3, [sp, #0]
 80194ae:	462a      	mov	r2, r5
 80194b0:	4b0f      	ldr	r3, [pc, #60]	; (80194f0 <_svfiprintf_r+0x1f8>)
 80194b2:	a904      	add	r1, sp, #16
 80194b4:	4638      	mov	r0, r7
 80194b6:	f3af 8000 	nop.w
 80194ba:	1c42      	adds	r2, r0, #1
 80194bc:	4606      	mov	r6, r0
 80194be:	d1d6      	bne.n	801946e <_svfiprintf_r+0x176>
 80194c0:	89ab      	ldrh	r3, [r5, #12]
 80194c2:	065b      	lsls	r3, r3, #25
 80194c4:	f53f af2c 	bmi.w	8019320 <_svfiprintf_r+0x28>
 80194c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80194ca:	b01d      	add	sp, #116	; 0x74
 80194cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194d0:	ab03      	add	r3, sp, #12
 80194d2:	9300      	str	r3, [sp, #0]
 80194d4:	462a      	mov	r2, r5
 80194d6:	4b06      	ldr	r3, [pc, #24]	; (80194f0 <_svfiprintf_r+0x1f8>)
 80194d8:	a904      	add	r1, sp, #16
 80194da:	4638      	mov	r0, r7
 80194dc:	f000 f9d4 	bl	8019888 <_printf_i>
 80194e0:	e7eb      	b.n	80194ba <_svfiprintf_r+0x1c2>
 80194e2:	bf00      	nop
 80194e4:	0801ab22 	.word	0x0801ab22
 80194e8:	0801ab2c 	.word	0x0801ab2c
 80194ec:	00000000 	.word	0x00000000
 80194f0:	08019243 	.word	0x08019243
 80194f4:	0801ab28 	.word	0x0801ab28

080194f8 <__sfputc_r>:
 80194f8:	6893      	ldr	r3, [r2, #8]
 80194fa:	3b01      	subs	r3, #1
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	b410      	push	{r4}
 8019500:	6093      	str	r3, [r2, #8]
 8019502:	da08      	bge.n	8019516 <__sfputc_r+0x1e>
 8019504:	6994      	ldr	r4, [r2, #24]
 8019506:	42a3      	cmp	r3, r4
 8019508:	db01      	blt.n	801950e <__sfputc_r+0x16>
 801950a:	290a      	cmp	r1, #10
 801950c:	d103      	bne.n	8019516 <__sfputc_r+0x1e>
 801950e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019512:	f000 baf1 	b.w	8019af8 <__swbuf_r>
 8019516:	6813      	ldr	r3, [r2, #0]
 8019518:	1c58      	adds	r0, r3, #1
 801951a:	6010      	str	r0, [r2, #0]
 801951c:	7019      	strb	r1, [r3, #0]
 801951e:	4608      	mov	r0, r1
 8019520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019524:	4770      	bx	lr

08019526 <__sfputs_r>:
 8019526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019528:	4606      	mov	r6, r0
 801952a:	460f      	mov	r7, r1
 801952c:	4614      	mov	r4, r2
 801952e:	18d5      	adds	r5, r2, r3
 8019530:	42ac      	cmp	r4, r5
 8019532:	d101      	bne.n	8019538 <__sfputs_r+0x12>
 8019534:	2000      	movs	r0, #0
 8019536:	e007      	b.n	8019548 <__sfputs_r+0x22>
 8019538:	f814 1b01 	ldrb.w	r1, [r4], #1
 801953c:	463a      	mov	r2, r7
 801953e:	4630      	mov	r0, r6
 8019540:	f7ff ffda 	bl	80194f8 <__sfputc_r>
 8019544:	1c43      	adds	r3, r0, #1
 8019546:	d1f3      	bne.n	8019530 <__sfputs_r+0xa>
 8019548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801954c <_vfiprintf_r>:
 801954c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019550:	460d      	mov	r5, r1
 8019552:	b09d      	sub	sp, #116	; 0x74
 8019554:	4614      	mov	r4, r2
 8019556:	4698      	mov	r8, r3
 8019558:	4606      	mov	r6, r0
 801955a:	b118      	cbz	r0, 8019564 <_vfiprintf_r+0x18>
 801955c:	6983      	ldr	r3, [r0, #24]
 801955e:	b90b      	cbnz	r3, 8019564 <_vfiprintf_r+0x18>
 8019560:	f7ff f866 	bl	8018630 <__sinit>
 8019564:	4b89      	ldr	r3, [pc, #548]	; (801978c <_vfiprintf_r+0x240>)
 8019566:	429d      	cmp	r5, r3
 8019568:	d11b      	bne.n	80195a2 <_vfiprintf_r+0x56>
 801956a:	6875      	ldr	r5, [r6, #4]
 801956c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801956e:	07d9      	lsls	r1, r3, #31
 8019570:	d405      	bmi.n	801957e <_vfiprintf_r+0x32>
 8019572:	89ab      	ldrh	r3, [r5, #12]
 8019574:	059a      	lsls	r2, r3, #22
 8019576:	d402      	bmi.n	801957e <_vfiprintf_r+0x32>
 8019578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801957a:	f7ff f964 	bl	8018846 <__retarget_lock_acquire_recursive>
 801957e:	89ab      	ldrh	r3, [r5, #12]
 8019580:	071b      	lsls	r3, r3, #28
 8019582:	d501      	bpl.n	8019588 <_vfiprintf_r+0x3c>
 8019584:	692b      	ldr	r3, [r5, #16]
 8019586:	b9eb      	cbnz	r3, 80195c4 <_vfiprintf_r+0x78>
 8019588:	4629      	mov	r1, r5
 801958a:	4630      	mov	r0, r6
 801958c:	f000 fb06 	bl	8019b9c <__swsetup_r>
 8019590:	b1c0      	cbz	r0, 80195c4 <_vfiprintf_r+0x78>
 8019592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019594:	07dc      	lsls	r4, r3, #31
 8019596:	d50e      	bpl.n	80195b6 <_vfiprintf_r+0x6a>
 8019598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801959c:	b01d      	add	sp, #116	; 0x74
 801959e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195a2:	4b7b      	ldr	r3, [pc, #492]	; (8019790 <_vfiprintf_r+0x244>)
 80195a4:	429d      	cmp	r5, r3
 80195a6:	d101      	bne.n	80195ac <_vfiprintf_r+0x60>
 80195a8:	68b5      	ldr	r5, [r6, #8]
 80195aa:	e7df      	b.n	801956c <_vfiprintf_r+0x20>
 80195ac:	4b79      	ldr	r3, [pc, #484]	; (8019794 <_vfiprintf_r+0x248>)
 80195ae:	429d      	cmp	r5, r3
 80195b0:	bf08      	it	eq
 80195b2:	68f5      	ldreq	r5, [r6, #12]
 80195b4:	e7da      	b.n	801956c <_vfiprintf_r+0x20>
 80195b6:	89ab      	ldrh	r3, [r5, #12]
 80195b8:	0598      	lsls	r0, r3, #22
 80195ba:	d4ed      	bmi.n	8019598 <_vfiprintf_r+0x4c>
 80195bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80195be:	f7ff f943 	bl	8018848 <__retarget_lock_release_recursive>
 80195c2:	e7e9      	b.n	8019598 <_vfiprintf_r+0x4c>
 80195c4:	2300      	movs	r3, #0
 80195c6:	9309      	str	r3, [sp, #36]	; 0x24
 80195c8:	2320      	movs	r3, #32
 80195ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80195ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80195d2:	2330      	movs	r3, #48	; 0x30
 80195d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019798 <_vfiprintf_r+0x24c>
 80195d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80195dc:	f04f 0901 	mov.w	r9, #1
 80195e0:	4623      	mov	r3, r4
 80195e2:	469a      	mov	sl, r3
 80195e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80195e8:	b10a      	cbz	r2, 80195ee <_vfiprintf_r+0xa2>
 80195ea:	2a25      	cmp	r2, #37	; 0x25
 80195ec:	d1f9      	bne.n	80195e2 <_vfiprintf_r+0x96>
 80195ee:	ebba 0b04 	subs.w	fp, sl, r4
 80195f2:	d00b      	beq.n	801960c <_vfiprintf_r+0xc0>
 80195f4:	465b      	mov	r3, fp
 80195f6:	4622      	mov	r2, r4
 80195f8:	4629      	mov	r1, r5
 80195fa:	4630      	mov	r0, r6
 80195fc:	f7ff ff93 	bl	8019526 <__sfputs_r>
 8019600:	3001      	adds	r0, #1
 8019602:	f000 80aa 	beq.w	801975a <_vfiprintf_r+0x20e>
 8019606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019608:	445a      	add	r2, fp
 801960a:	9209      	str	r2, [sp, #36]	; 0x24
 801960c:	f89a 3000 	ldrb.w	r3, [sl]
 8019610:	2b00      	cmp	r3, #0
 8019612:	f000 80a2 	beq.w	801975a <_vfiprintf_r+0x20e>
 8019616:	2300      	movs	r3, #0
 8019618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801961c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019620:	f10a 0a01 	add.w	sl, sl, #1
 8019624:	9304      	str	r3, [sp, #16]
 8019626:	9307      	str	r3, [sp, #28]
 8019628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801962c:	931a      	str	r3, [sp, #104]	; 0x68
 801962e:	4654      	mov	r4, sl
 8019630:	2205      	movs	r2, #5
 8019632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019636:	4858      	ldr	r0, [pc, #352]	; (8019798 <_vfiprintf_r+0x24c>)
 8019638:	f7e6 fde2 	bl	8000200 <memchr>
 801963c:	9a04      	ldr	r2, [sp, #16]
 801963e:	b9d8      	cbnz	r0, 8019678 <_vfiprintf_r+0x12c>
 8019640:	06d1      	lsls	r1, r2, #27
 8019642:	bf44      	itt	mi
 8019644:	2320      	movmi	r3, #32
 8019646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801964a:	0713      	lsls	r3, r2, #28
 801964c:	bf44      	itt	mi
 801964e:	232b      	movmi	r3, #43	; 0x2b
 8019650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019654:	f89a 3000 	ldrb.w	r3, [sl]
 8019658:	2b2a      	cmp	r3, #42	; 0x2a
 801965a:	d015      	beq.n	8019688 <_vfiprintf_r+0x13c>
 801965c:	9a07      	ldr	r2, [sp, #28]
 801965e:	4654      	mov	r4, sl
 8019660:	2000      	movs	r0, #0
 8019662:	f04f 0c0a 	mov.w	ip, #10
 8019666:	4621      	mov	r1, r4
 8019668:	f811 3b01 	ldrb.w	r3, [r1], #1
 801966c:	3b30      	subs	r3, #48	; 0x30
 801966e:	2b09      	cmp	r3, #9
 8019670:	d94e      	bls.n	8019710 <_vfiprintf_r+0x1c4>
 8019672:	b1b0      	cbz	r0, 80196a2 <_vfiprintf_r+0x156>
 8019674:	9207      	str	r2, [sp, #28]
 8019676:	e014      	b.n	80196a2 <_vfiprintf_r+0x156>
 8019678:	eba0 0308 	sub.w	r3, r0, r8
 801967c:	fa09 f303 	lsl.w	r3, r9, r3
 8019680:	4313      	orrs	r3, r2
 8019682:	9304      	str	r3, [sp, #16]
 8019684:	46a2      	mov	sl, r4
 8019686:	e7d2      	b.n	801962e <_vfiprintf_r+0xe2>
 8019688:	9b03      	ldr	r3, [sp, #12]
 801968a:	1d19      	adds	r1, r3, #4
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	9103      	str	r1, [sp, #12]
 8019690:	2b00      	cmp	r3, #0
 8019692:	bfbb      	ittet	lt
 8019694:	425b      	neglt	r3, r3
 8019696:	f042 0202 	orrlt.w	r2, r2, #2
 801969a:	9307      	strge	r3, [sp, #28]
 801969c:	9307      	strlt	r3, [sp, #28]
 801969e:	bfb8      	it	lt
 80196a0:	9204      	strlt	r2, [sp, #16]
 80196a2:	7823      	ldrb	r3, [r4, #0]
 80196a4:	2b2e      	cmp	r3, #46	; 0x2e
 80196a6:	d10c      	bne.n	80196c2 <_vfiprintf_r+0x176>
 80196a8:	7863      	ldrb	r3, [r4, #1]
 80196aa:	2b2a      	cmp	r3, #42	; 0x2a
 80196ac:	d135      	bne.n	801971a <_vfiprintf_r+0x1ce>
 80196ae:	9b03      	ldr	r3, [sp, #12]
 80196b0:	1d1a      	adds	r2, r3, #4
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	9203      	str	r2, [sp, #12]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	bfb8      	it	lt
 80196ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80196be:	3402      	adds	r4, #2
 80196c0:	9305      	str	r3, [sp, #20]
 80196c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80197a8 <_vfiprintf_r+0x25c>
 80196c6:	7821      	ldrb	r1, [r4, #0]
 80196c8:	2203      	movs	r2, #3
 80196ca:	4650      	mov	r0, sl
 80196cc:	f7e6 fd98 	bl	8000200 <memchr>
 80196d0:	b140      	cbz	r0, 80196e4 <_vfiprintf_r+0x198>
 80196d2:	2340      	movs	r3, #64	; 0x40
 80196d4:	eba0 000a 	sub.w	r0, r0, sl
 80196d8:	fa03 f000 	lsl.w	r0, r3, r0
 80196dc:	9b04      	ldr	r3, [sp, #16]
 80196de:	4303      	orrs	r3, r0
 80196e0:	3401      	adds	r4, #1
 80196e2:	9304      	str	r3, [sp, #16]
 80196e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196e8:	482c      	ldr	r0, [pc, #176]	; (801979c <_vfiprintf_r+0x250>)
 80196ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80196ee:	2206      	movs	r2, #6
 80196f0:	f7e6 fd86 	bl	8000200 <memchr>
 80196f4:	2800      	cmp	r0, #0
 80196f6:	d03f      	beq.n	8019778 <_vfiprintf_r+0x22c>
 80196f8:	4b29      	ldr	r3, [pc, #164]	; (80197a0 <_vfiprintf_r+0x254>)
 80196fa:	bb1b      	cbnz	r3, 8019744 <_vfiprintf_r+0x1f8>
 80196fc:	9b03      	ldr	r3, [sp, #12]
 80196fe:	3307      	adds	r3, #7
 8019700:	f023 0307 	bic.w	r3, r3, #7
 8019704:	3308      	adds	r3, #8
 8019706:	9303      	str	r3, [sp, #12]
 8019708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801970a:	443b      	add	r3, r7
 801970c:	9309      	str	r3, [sp, #36]	; 0x24
 801970e:	e767      	b.n	80195e0 <_vfiprintf_r+0x94>
 8019710:	fb0c 3202 	mla	r2, ip, r2, r3
 8019714:	460c      	mov	r4, r1
 8019716:	2001      	movs	r0, #1
 8019718:	e7a5      	b.n	8019666 <_vfiprintf_r+0x11a>
 801971a:	2300      	movs	r3, #0
 801971c:	3401      	adds	r4, #1
 801971e:	9305      	str	r3, [sp, #20]
 8019720:	4619      	mov	r1, r3
 8019722:	f04f 0c0a 	mov.w	ip, #10
 8019726:	4620      	mov	r0, r4
 8019728:	f810 2b01 	ldrb.w	r2, [r0], #1
 801972c:	3a30      	subs	r2, #48	; 0x30
 801972e:	2a09      	cmp	r2, #9
 8019730:	d903      	bls.n	801973a <_vfiprintf_r+0x1ee>
 8019732:	2b00      	cmp	r3, #0
 8019734:	d0c5      	beq.n	80196c2 <_vfiprintf_r+0x176>
 8019736:	9105      	str	r1, [sp, #20]
 8019738:	e7c3      	b.n	80196c2 <_vfiprintf_r+0x176>
 801973a:	fb0c 2101 	mla	r1, ip, r1, r2
 801973e:	4604      	mov	r4, r0
 8019740:	2301      	movs	r3, #1
 8019742:	e7f0      	b.n	8019726 <_vfiprintf_r+0x1da>
 8019744:	ab03      	add	r3, sp, #12
 8019746:	9300      	str	r3, [sp, #0]
 8019748:	462a      	mov	r2, r5
 801974a:	4b16      	ldr	r3, [pc, #88]	; (80197a4 <_vfiprintf_r+0x258>)
 801974c:	a904      	add	r1, sp, #16
 801974e:	4630      	mov	r0, r6
 8019750:	f3af 8000 	nop.w
 8019754:	4607      	mov	r7, r0
 8019756:	1c78      	adds	r0, r7, #1
 8019758:	d1d6      	bne.n	8019708 <_vfiprintf_r+0x1bc>
 801975a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801975c:	07d9      	lsls	r1, r3, #31
 801975e:	d405      	bmi.n	801976c <_vfiprintf_r+0x220>
 8019760:	89ab      	ldrh	r3, [r5, #12]
 8019762:	059a      	lsls	r2, r3, #22
 8019764:	d402      	bmi.n	801976c <_vfiprintf_r+0x220>
 8019766:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019768:	f7ff f86e 	bl	8018848 <__retarget_lock_release_recursive>
 801976c:	89ab      	ldrh	r3, [r5, #12]
 801976e:	065b      	lsls	r3, r3, #25
 8019770:	f53f af12 	bmi.w	8019598 <_vfiprintf_r+0x4c>
 8019774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019776:	e711      	b.n	801959c <_vfiprintf_r+0x50>
 8019778:	ab03      	add	r3, sp, #12
 801977a:	9300      	str	r3, [sp, #0]
 801977c:	462a      	mov	r2, r5
 801977e:	4b09      	ldr	r3, [pc, #36]	; (80197a4 <_vfiprintf_r+0x258>)
 8019780:	a904      	add	r1, sp, #16
 8019782:	4630      	mov	r0, r6
 8019784:	f000 f880 	bl	8019888 <_printf_i>
 8019788:	e7e4      	b.n	8019754 <_vfiprintf_r+0x208>
 801978a:	bf00      	nop
 801978c:	0801aa30 	.word	0x0801aa30
 8019790:	0801aa50 	.word	0x0801aa50
 8019794:	0801aa10 	.word	0x0801aa10
 8019798:	0801ab22 	.word	0x0801ab22
 801979c:	0801ab2c 	.word	0x0801ab2c
 80197a0:	00000000 	.word	0x00000000
 80197a4:	08019527 	.word	0x08019527
 80197a8:	0801ab28 	.word	0x0801ab28

080197ac <_printf_common>:
 80197ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197b0:	4616      	mov	r6, r2
 80197b2:	4699      	mov	r9, r3
 80197b4:	688a      	ldr	r2, [r1, #8]
 80197b6:	690b      	ldr	r3, [r1, #16]
 80197b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80197bc:	4293      	cmp	r3, r2
 80197be:	bfb8      	it	lt
 80197c0:	4613      	movlt	r3, r2
 80197c2:	6033      	str	r3, [r6, #0]
 80197c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80197c8:	4607      	mov	r7, r0
 80197ca:	460c      	mov	r4, r1
 80197cc:	b10a      	cbz	r2, 80197d2 <_printf_common+0x26>
 80197ce:	3301      	adds	r3, #1
 80197d0:	6033      	str	r3, [r6, #0]
 80197d2:	6823      	ldr	r3, [r4, #0]
 80197d4:	0699      	lsls	r1, r3, #26
 80197d6:	bf42      	ittt	mi
 80197d8:	6833      	ldrmi	r3, [r6, #0]
 80197da:	3302      	addmi	r3, #2
 80197dc:	6033      	strmi	r3, [r6, #0]
 80197de:	6825      	ldr	r5, [r4, #0]
 80197e0:	f015 0506 	ands.w	r5, r5, #6
 80197e4:	d106      	bne.n	80197f4 <_printf_common+0x48>
 80197e6:	f104 0a19 	add.w	sl, r4, #25
 80197ea:	68e3      	ldr	r3, [r4, #12]
 80197ec:	6832      	ldr	r2, [r6, #0]
 80197ee:	1a9b      	subs	r3, r3, r2
 80197f0:	42ab      	cmp	r3, r5
 80197f2:	dc26      	bgt.n	8019842 <_printf_common+0x96>
 80197f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80197f8:	1e13      	subs	r3, r2, #0
 80197fa:	6822      	ldr	r2, [r4, #0]
 80197fc:	bf18      	it	ne
 80197fe:	2301      	movne	r3, #1
 8019800:	0692      	lsls	r2, r2, #26
 8019802:	d42b      	bmi.n	801985c <_printf_common+0xb0>
 8019804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019808:	4649      	mov	r1, r9
 801980a:	4638      	mov	r0, r7
 801980c:	47c0      	blx	r8
 801980e:	3001      	adds	r0, #1
 8019810:	d01e      	beq.n	8019850 <_printf_common+0xa4>
 8019812:	6823      	ldr	r3, [r4, #0]
 8019814:	68e5      	ldr	r5, [r4, #12]
 8019816:	6832      	ldr	r2, [r6, #0]
 8019818:	f003 0306 	and.w	r3, r3, #6
 801981c:	2b04      	cmp	r3, #4
 801981e:	bf08      	it	eq
 8019820:	1aad      	subeq	r5, r5, r2
 8019822:	68a3      	ldr	r3, [r4, #8]
 8019824:	6922      	ldr	r2, [r4, #16]
 8019826:	bf0c      	ite	eq
 8019828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801982c:	2500      	movne	r5, #0
 801982e:	4293      	cmp	r3, r2
 8019830:	bfc4      	itt	gt
 8019832:	1a9b      	subgt	r3, r3, r2
 8019834:	18ed      	addgt	r5, r5, r3
 8019836:	2600      	movs	r6, #0
 8019838:	341a      	adds	r4, #26
 801983a:	42b5      	cmp	r5, r6
 801983c:	d11a      	bne.n	8019874 <_printf_common+0xc8>
 801983e:	2000      	movs	r0, #0
 8019840:	e008      	b.n	8019854 <_printf_common+0xa8>
 8019842:	2301      	movs	r3, #1
 8019844:	4652      	mov	r2, sl
 8019846:	4649      	mov	r1, r9
 8019848:	4638      	mov	r0, r7
 801984a:	47c0      	blx	r8
 801984c:	3001      	adds	r0, #1
 801984e:	d103      	bne.n	8019858 <_printf_common+0xac>
 8019850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019858:	3501      	adds	r5, #1
 801985a:	e7c6      	b.n	80197ea <_printf_common+0x3e>
 801985c:	18e1      	adds	r1, r4, r3
 801985e:	1c5a      	adds	r2, r3, #1
 8019860:	2030      	movs	r0, #48	; 0x30
 8019862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019866:	4422      	add	r2, r4
 8019868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801986c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019870:	3302      	adds	r3, #2
 8019872:	e7c7      	b.n	8019804 <_printf_common+0x58>
 8019874:	2301      	movs	r3, #1
 8019876:	4622      	mov	r2, r4
 8019878:	4649      	mov	r1, r9
 801987a:	4638      	mov	r0, r7
 801987c:	47c0      	blx	r8
 801987e:	3001      	adds	r0, #1
 8019880:	d0e6      	beq.n	8019850 <_printf_common+0xa4>
 8019882:	3601      	adds	r6, #1
 8019884:	e7d9      	b.n	801983a <_printf_common+0x8e>
	...

08019888 <_printf_i>:
 8019888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801988c:	7e0f      	ldrb	r7, [r1, #24]
 801988e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019890:	2f78      	cmp	r7, #120	; 0x78
 8019892:	4691      	mov	r9, r2
 8019894:	4680      	mov	r8, r0
 8019896:	460c      	mov	r4, r1
 8019898:	469a      	mov	sl, r3
 801989a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801989e:	d807      	bhi.n	80198b0 <_printf_i+0x28>
 80198a0:	2f62      	cmp	r7, #98	; 0x62
 80198a2:	d80a      	bhi.n	80198ba <_printf_i+0x32>
 80198a4:	2f00      	cmp	r7, #0
 80198a6:	f000 80d8 	beq.w	8019a5a <_printf_i+0x1d2>
 80198aa:	2f58      	cmp	r7, #88	; 0x58
 80198ac:	f000 80a3 	beq.w	80199f6 <_printf_i+0x16e>
 80198b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80198b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80198b8:	e03a      	b.n	8019930 <_printf_i+0xa8>
 80198ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80198be:	2b15      	cmp	r3, #21
 80198c0:	d8f6      	bhi.n	80198b0 <_printf_i+0x28>
 80198c2:	a101      	add	r1, pc, #4	; (adr r1, 80198c8 <_printf_i+0x40>)
 80198c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80198c8:	08019921 	.word	0x08019921
 80198cc:	08019935 	.word	0x08019935
 80198d0:	080198b1 	.word	0x080198b1
 80198d4:	080198b1 	.word	0x080198b1
 80198d8:	080198b1 	.word	0x080198b1
 80198dc:	080198b1 	.word	0x080198b1
 80198e0:	08019935 	.word	0x08019935
 80198e4:	080198b1 	.word	0x080198b1
 80198e8:	080198b1 	.word	0x080198b1
 80198ec:	080198b1 	.word	0x080198b1
 80198f0:	080198b1 	.word	0x080198b1
 80198f4:	08019a41 	.word	0x08019a41
 80198f8:	08019965 	.word	0x08019965
 80198fc:	08019a23 	.word	0x08019a23
 8019900:	080198b1 	.word	0x080198b1
 8019904:	080198b1 	.word	0x080198b1
 8019908:	08019a63 	.word	0x08019a63
 801990c:	080198b1 	.word	0x080198b1
 8019910:	08019965 	.word	0x08019965
 8019914:	080198b1 	.word	0x080198b1
 8019918:	080198b1 	.word	0x080198b1
 801991c:	08019a2b 	.word	0x08019a2b
 8019920:	682b      	ldr	r3, [r5, #0]
 8019922:	1d1a      	adds	r2, r3, #4
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	602a      	str	r2, [r5, #0]
 8019928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801992c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019930:	2301      	movs	r3, #1
 8019932:	e0a3      	b.n	8019a7c <_printf_i+0x1f4>
 8019934:	6820      	ldr	r0, [r4, #0]
 8019936:	6829      	ldr	r1, [r5, #0]
 8019938:	0606      	lsls	r6, r0, #24
 801993a:	f101 0304 	add.w	r3, r1, #4
 801993e:	d50a      	bpl.n	8019956 <_printf_i+0xce>
 8019940:	680e      	ldr	r6, [r1, #0]
 8019942:	602b      	str	r3, [r5, #0]
 8019944:	2e00      	cmp	r6, #0
 8019946:	da03      	bge.n	8019950 <_printf_i+0xc8>
 8019948:	232d      	movs	r3, #45	; 0x2d
 801994a:	4276      	negs	r6, r6
 801994c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019950:	485e      	ldr	r0, [pc, #376]	; (8019acc <_printf_i+0x244>)
 8019952:	230a      	movs	r3, #10
 8019954:	e019      	b.n	801998a <_printf_i+0x102>
 8019956:	680e      	ldr	r6, [r1, #0]
 8019958:	602b      	str	r3, [r5, #0]
 801995a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801995e:	bf18      	it	ne
 8019960:	b236      	sxthne	r6, r6
 8019962:	e7ef      	b.n	8019944 <_printf_i+0xbc>
 8019964:	682b      	ldr	r3, [r5, #0]
 8019966:	6820      	ldr	r0, [r4, #0]
 8019968:	1d19      	adds	r1, r3, #4
 801996a:	6029      	str	r1, [r5, #0]
 801996c:	0601      	lsls	r1, r0, #24
 801996e:	d501      	bpl.n	8019974 <_printf_i+0xec>
 8019970:	681e      	ldr	r6, [r3, #0]
 8019972:	e002      	b.n	801997a <_printf_i+0xf2>
 8019974:	0646      	lsls	r6, r0, #25
 8019976:	d5fb      	bpl.n	8019970 <_printf_i+0xe8>
 8019978:	881e      	ldrh	r6, [r3, #0]
 801997a:	4854      	ldr	r0, [pc, #336]	; (8019acc <_printf_i+0x244>)
 801997c:	2f6f      	cmp	r7, #111	; 0x6f
 801997e:	bf0c      	ite	eq
 8019980:	2308      	moveq	r3, #8
 8019982:	230a      	movne	r3, #10
 8019984:	2100      	movs	r1, #0
 8019986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801998a:	6865      	ldr	r5, [r4, #4]
 801998c:	60a5      	str	r5, [r4, #8]
 801998e:	2d00      	cmp	r5, #0
 8019990:	bfa2      	ittt	ge
 8019992:	6821      	ldrge	r1, [r4, #0]
 8019994:	f021 0104 	bicge.w	r1, r1, #4
 8019998:	6021      	strge	r1, [r4, #0]
 801999a:	b90e      	cbnz	r6, 80199a0 <_printf_i+0x118>
 801999c:	2d00      	cmp	r5, #0
 801999e:	d04d      	beq.n	8019a3c <_printf_i+0x1b4>
 80199a0:	4615      	mov	r5, r2
 80199a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80199a6:	fb03 6711 	mls	r7, r3, r1, r6
 80199aa:	5dc7      	ldrb	r7, [r0, r7]
 80199ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80199b0:	4637      	mov	r7, r6
 80199b2:	42bb      	cmp	r3, r7
 80199b4:	460e      	mov	r6, r1
 80199b6:	d9f4      	bls.n	80199a2 <_printf_i+0x11a>
 80199b8:	2b08      	cmp	r3, #8
 80199ba:	d10b      	bne.n	80199d4 <_printf_i+0x14c>
 80199bc:	6823      	ldr	r3, [r4, #0]
 80199be:	07de      	lsls	r6, r3, #31
 80199c0:	d508      	bpl.n	80199d4 <_printf_i+0x14c>
 80199c2:	6923      	ldr	r3, [r4, #16]
 80199c4:	6861      	ldr	r1, [r4, #4]
 80199c6:	4299      	cmp	r1, r3
 80199c8:	bfde      	ittt	le
 80199ca:	2330      	movle	r3, #48	; 0x30
 80199cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80199d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80199d4:	1b52      	subs	r2, r2, r5
 80199d6:	6122      	str	r2, [r4, #16]
 80199d8:	f8cd a000 	str.w	sl, [sp]
 80199dc:	464b      	mov	r3, r9
 80199de:	aa03      	add	r2, sp, #12
 80199e0:	4621      	mov	r1, r4
 80199e2:	4640      	mov	r0, r8
 80199e4:	f7ff fee2 	bl	80197ac <_printf_common>
 80199e8:	3001      	adds	r0, #1
 80199ea:	d14c      	bne.n	8019a86 <_printf_i+0x1fe>
 80199ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80199f0:	b004      	add	sp, #16
 80199f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199f6:	4835      	ldr	r0, [pc, #212]	; (8019acc <_printf_i+0x244>)
 80199f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80199fc:	6829      	ldr	r1, [r5, #0]
 80199fe:	6823      	ldr	r3, [r4, #0]
 8019a00:	f851 6b04 	ldr.w	r6, [r1], #4
 8019a04:	6029      	str	r1, [r5, #0]
 8019a06:	061d      	lsls	r5, r3, #24
 8019a08:	d514      	bpl.n	8019a34 <_printf_i+0x1ac>
 8019a0a:	07df      	lsls	r7, r3, #31
 8019a0c:	bf44      	itt	mi
 8019a0e:	f043 0320 	orrmi.w	r3, r3, #32
 8019a12:	6023      	strmi	r3, [r4, #0]
 8019a14:	b91e      	cbnz	r6, 8019a1e <_printf_i+0x196>
 8019a16:	6823      	ldr	r3, [r4, #0]
 8019a18:	f023 0320 	bic.w	r3, r3, #32
 8019a1c:	6023      	str	r3, [r4, #0]
 8019a1e:	2310      	movs	r3, #16
 8019a20:	e7b0      	b.n	8019984 <_printf_i+0xfc>
 8019a22:	6823      	ldr	r3, [r4, #0]
 8019a24:	f043 0320 	orr.w	r3, r3, #32
 8019a28:	6023      	str	r3, [r4, #0]
 8019a2a:	2378      	movs	r3, #120	; 0x78
 8019a2c:	4828      	ldr	r0, [pc, #160]	; (8019ad0 <_printf_i+0x248>)
 8019a2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019a32:	e7e3      	b.n	80199fc <_printf_i+0x174>
 8019a34:	0659      	lsls	r1, r3, #25
 8019a36:	bf48      	it	mi
 8019a38:	b2b6      	uxthmi	r6, r6
 8019a3a:	e7e6      	b.n	8019a0a <_printf_i+0x182>
 8019a3c:	4615      	mov	r5, r2
 8019a3e:	e7bb      	b.n	80199b8 <_printf_i+0x130>
 8019a40:	682b      	ldr	r3, [r5, #0]
 8019a42:	6826      	ldr	r6, [r4, #0]
 8019a44:	6961      	ldr	r1, [r4, #20]
 8019a46:	1d18      	adds	r0, r3, #4
 8019a48:	6028      	str	r0, [r5, #0]
 8019a4a:	0635      	lsls	r5, r6, #24
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	d501      	bpl.n	8019a54 <_printf_i+0x1cc>
 8019a50:	6019      	str	r1, [r3, #0]
 8019a52:	e002      	b.n	8019a5a <_printf_i+0x1d2>
 8019a54:	0670      	lsls	r0, r6, #25
 8019a56:	d5fb      	bpl.n	8019a50 <_printf_i+0x1c8>
 8019a58:	8019      	strh	r1, [r3, #0]
 8019a5a:	2300      	movs	r3, #0
 8019a5c:	6123      	str	r3, [r4, #16]
 8019a5e:	4615      	mov	r5, r2
 8019a60:	e7ba      	b.n	80199d8 <_printf_i+0x150>
 8019a62:	682b      	ldr	r3, [r5, #0]
 8019a64:	1d1a      	adds	r2, r3, #4
 8019a66:	602a      	str	r2, [r5, #0]
 8019a68:	681d      	ldr	r5, [r3, #0]
 8019a6a:	6862      	ldr	r2, [r4, #4]
 8019a6c:	2100      	movs	r1, #0
 8019a6e:	4628      	mov	r0, r5
 8019a70:	f7e6 fbc6 	bl	8000200 <memchr>
 8019a74:	b108      	cbz	r0, 8019a7a <_printf_i+0x1f2>
 8019a76:	1b40      	subs	r0, r0, r5
 8019a78:	6060      	str	r0, [r4, #4]
 8019a7a:	6863      	ldr	r3, [r4, #4]
 8019a7c:	6123      	str	r3, [r4, #16]
 8019a7e:	2300      	movs	r3, #0
 8019a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a84:	e7a8      	b.n	80199d8 <_printf_i+0x150>
 8019a86:	6923      	ldr	r3, [r4, #16]
 8019a88:	462a      	mov	r2, r5
 8019a8a:	4649      	mov	r1, r9
 8019a8c:	4640      	mov	r0, r8
 8019a8e:	47d0      	blx	sl
 8019a90:	3001      	adds	r0, #1
 8019a92:	d0ab      	beq.n	80199ec <_printf_i+0x164>
 8019a94:	6823      	ldr	r3, [r4, #0]
 8019a96:	079b      	lsls	r3, r3, #30
 8019a98:	d413      	bmi.n	8019ac2 <_printf_i+0x23a>
 8019a9a:	68e0      	ldr	r0, [r4, #12]
 8019a9c:	9b03      	ldr	r3, [sp, #12]
 8019a9e:	4298      	cmp	r0, r3
 8019aa0:	bfb8      	it	lt
 8019aa2:	4618      	movlt	r0, r3
 8019aa4:	e7a4      	b.n	80199f0 <_printf_i+0x168>
 8019aa6:	2301      	movs	r3, #1
 8019aa8:	4632      	mov	r2, r6
 8019aaa:	4649      	mov	r1, r9
 8019aac:	4640      	mov	r0, r8
 8019aae:	47d0      	blx	sl
 8019ab0:	3001      	adds	r0, #1
 8019ab2:	d09b      	beq.n	80199ec <_printf_i+0x164>
 8019ab4:	3501      	adds	r5, #1
 8019ab6:	68e3      	ldr	r3, [r4, #12]
 8019ab8:	9903      	ldr	r1, [sp, #12]
 8019aba:	1a5b      	subs	r3, r3, r1
 8019abc:	42ab      	cmp	r3, r5
 8019abe:	dcf2      	bgt.n	8019aa6 <_printf_i+0x21e>
 8019ac0:	e7eb      	b.n	8019a9a <_printf_i+0x212>
 8019ac2:	2500      	movs	r5, #0
 8019ac4:	f104 0619 	add.w	r6, r4, #25
 8019ac8:	e7f5      	b.n	8019ab6 <_printf_i+0x22e>
 8019aca:	bf00      	nop
 8019acc:	0801ab33 	.word	0x0801ab33
 8019ad0:	0801ab44 	.word	0x0801ab44

08019ad4 <_read_r>:
 8019ad4:	b538      	push	{r3, r4, r5, lr}
 8019ad6:	4d07      	ldr	r5, [pc, #28]	; (8019af4 <_read_r+0x20>)
 8019ad8:	4604      	mov	r4, r0
 8019ada:	4608      	mov	r0, r1
 8019adc:	4611      	mov	r1, r2
 8019ade:	2200      	movs	r2, #0
 8019ae0:	602a      	str	r2, [r5, #0]
 8019ae2:	461a      	mov	r2, r3
 8019ae4:	f7e8 f914 	bl	8001d10 <_read>
 8019ae8:	1c43      	adds	r3, r0, #1
 8019aea:	d102      	bne.n	8019af2 <_read_r+0x1e>
 8019aec:	682b      	ldr	r3, [r5, #0]
 8019aee:	b103      	cbz	r3, 8019af2 <_read_r+0x1e>
 8019af0:	6023      	str	r3, [r4, #0]
 8019af2:	bd38      	pop	{r3, r4, r5, pc}
 8019af4:	20012d2c 	.word	0x20012d2c

08019af8 <__swbuf_r>:
 8019af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019afa:	460e      	mov	r6, r1
 8019afc:	4614      	mov	r4, r2
 8019afe:	4605      	mov	r5, r0
 8019b00:	b118      	cbz	r0, 8019b0a <__swbuf_r+0x12>
 8019b02:	6983      	ldr	r3, [r0, #24]
 8019b04:	b90b      	cbnz	r3, 8019b0a <__swbuf_r+0x12>
 8019b06:	f7fe fd93 	bl	8018630 <__sinit>
 8019b0a:	4b21      	ldr	r3, [pc, #132]	; (8019b90 <__swbuf_r+0x98>)
 8019b0c:	429c      	cmp	r4, r3
 8019b0e:	d12b      	bne.n	8019b68 <__swbuf_r+0x70>
 8019b10:	686c      	ldr	r4, [r5, #4]
 8019b12:	69a3      	ldr	r3, [r4, #24]
 8019b14:	60a3      	str	r3, [r4, #8]
 8019b16:	89a3      	ldrh	r3, [r4, #12]
 8019b18:	071a      	lsls	r2, r3, #28
 8019b1a:	d52f      	bpl.n	8019b7c <__swbuf_r+0x84>
 8019b1c:	6923      	ldr	r3, [r4, #16]
 8019b1e:	b36b      	cbz	r3, 8019b7c <__swbuf_r+0x84>
 8019b20:	6923      	ldr	r3, [r4, #16]
 8019b22:	6820      	ldr	r0, [r4, #0]
 8019b24:	1ac0      	subs	r0, r0, r3
 8019b26:	6963      	ldr	r3, [r4, #20]
 8019b28:	b2f6      	uxtb	r6, r6
 8019b2a:	4283      	cmp	r3, r0
 8019b2c:	4637      	mov	r7, r6
 8019b2e:	dc04      	bgt.n	8019b3a <__swbuf_r+0x42>
 8019b30:	4621      	mov	r1, r4
 8019b32:	4628      	mov	r0, r5
 8019b34:	f7ff faea 	bl	801910c <_fflush_r>
 8019b38:	bb30      	cbnz	r0, 8019b88 <__swbuf_r+0x90>
 8019b3a:	68a3      	ldr	r3, [r4, #8]
 8019b3c:	3b01      	subs	r3, #1
 8019b3e:	60a3      	str	r3, [r4, #8]
 8019b40:	6823      	ldr	r3, [r4, #0]
 8019b42:	1c5a      	adds	r2, r3, #1
 8019b44:	6022      	str	r2, [r4, #0]
 8019b46:	701e      	strb	r6, [r3, #0]
 8019b48:	6963      	ldr	r3, [r4, #20]
 8019b4a:	3001      	adds	r0, #1
 8019b4c:	4283      	cmp	r3, r0
 8019b4e:	d004      	beq.n	8019b5a <__swbuf_r+0x62>
 8019b50:	89a3      	ldrh	r3, [r4, #12]
 8019b52:	07db      	lsls	r3, r3, #31
 8019b54:	d506      	bpl.n	8019b64 <__swbuf_r+0x6c>
 8019b56:	2e0a      	cmp	r6, #10
 8019b58:	d104      	bne.n	8019b64 <__swbuf_r+0x6c>
 8019b5a:	4621      	mov	r1, r4
 8019b5c:	4628      	mov	r0, r5
 8019b5e:	f7ff fad5 	bl	801910c <_fflush_r>
 8019b62:	b988      	cbnz	r0, 8019b88 <__swbuf_r+0x90>
 8019b64:	4638      	mov	r0, r7
 8019b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b68:	4b0a      	ldr	r3, [pc, #40]	; (8019b94 <__swbuf_r+0x9c>)
 8019b6a:	429c      	cmp	r4, r3
 8019b6c:	d101      	bne.n	8019b72 <__swbuf_r+0x7a>
 8019b6e:	68ac      	ldr	r4, [r5, #8]
 8019b70:	e7cf      	b.n	8019b12 <__swbuf_r+0x1a>
 8019b72:	4b09      	ldr	r3, [pc, #36]	; (8019b98 <__swbuf_r+0xa0>)
 8019b74:	429c      	cmp	r4, r3
 8019b76:	bf08      	it	eq
 8019b78:	68ec      	ldreq	r4, [r5, #12]
 8019b7a:	e7ca      	b.n	8019b12 <__swbuf_r+0x1a>
 8019b7c:	4621      	mov	r1, r4
 8019b7e:	4628      	mov	r0, r5
 8019b80:	f000 f80c 	bl	8019b9c <__swsetup_r>
 8019b84:	2800      	cmp	r0, #0
 8019b86:	d0cb      	beq.n	8019b20 <__swbuf_r+0x28>
 8019b88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019b8c:	e7ea      	b.n	8019b64 <__swbuf_r+0x6c>
 8019b8e:	bf00      	nop
 8019b90:	0801aa30 	.word	0x0801aa30
 8019b94:	0801aa50 	.word	0x0801aa50
 8019b98:	0801aa10 	.word	0x0801aa10

08019b9c <__swsetup_r>:
 8019b9c:	4b32      	ldr	r3, [pc, #200]	; (8019c68 <__swsetup_r+0xcc>)
 8019b9e:	b570      	push	{r4, r5, r6, lr}
 8019ba0:	681d      	ldr	r5, [r3, #0]
 8019ba2:	4606      	mov	r6, r0
 8019ba4:	460c      	mov	r4, r1
 8019ba6:	b125      	cbz	r5, 8019bb2 <__swsetup_r+0x16>
 8019ba8:	69ab      	ldr	r3, [r5, #24]
 8019baa:	b913      	cbnz	r3, 8019bb2 <__swsetup_r+0x16>
 8019bac:	4628      	mov	r0, r5
 8019bae:	f7fe fd3f 	bl	8018630 <__sinit>
 8019bb2:	4b2e      	ldr	r3, [pc, #184]	; (8019c6c <__swsetup_r+0xd0>)
 8019bb4:	429c      	cmp	r4, r3
 8019bb6:	d10f      	bne.n	8019bd8 <__swsetup_r+0x3c>
 8019bb8:	686c      	ldr	r4, [r5, #4]
 8019bba:	89a3      	ldrh	r3, [r4, #12]
 8019bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019bc0:	0719      	lsls	r1, r3, #28
 8019bc2:	d42c      	bmi.n	8019c1e <__swsetup_r+0x82>
 8019bc4:	06dd      	lsls	r5, r3, #27
 8019bc6:	d411      	bmi.n	8019bec <__swsetup_r+0x50>
 8019bc8:	2309      	movs	r3, #9
 8019bca:	6033      	str	r3, [r6, #0]
 8019bcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019bd0:	81a3      	strh	r3, [r4, #12]
 8019bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019bd6:	e03e      	b.n	8019c56 <__swsetup_r+0xba>
 8019bd8:	4b25      	ldr	r3, [pc, #148]	; (8019c70 <__swsetup_r+0xd4>)
 8019bda:	429c      	cmp	r4, r3
 8019bdc:	d101      	bne.n	8019be2 <__swsetup_r+0x46>
 8019bde:	68ac      	ldr	r4, [r5, #8]
 8019be0:	e7eb      	b.n	8019bba <__swsetup_r+0x1e>
 8019be2:	4b24      	ldr	r3, [pc, #144]	; (8019c74 <__swsetup_r+0xd8>)
 8019be4:	429c      	cmp	r4, r3
 8019be6:	bf08      	it	eq
 8019be8:	68ec      	ldreq	r4, [r5, #12]
 8019bea:	e7e6      	b.n	8019bba <__swsetup_r+0x1e>
 8019bec:	0758      	lsls	r0, r3, #29
 8019bee:	d512      	bpl.n	8019c16 <__swsetup_r+0x7a>
 8019bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019bf2:	b141      	cbz	r1, 8019c06 <__swsetup_r+0x6a>
 8019bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019bf8:	4299      	cmp	r1, r3
 8019bfa:	d002      	beq.n	8019c02 <__swsetup_r+0x66>
 8019bfc:	4630      	mov	r0, r6
 8019bfe:	f7fe fe61 	bl	80188c4 <_free_r>
 8019c02:	2300      	movs	r3, #0
 8019c04:	6363      	str	r3, [r4, #52]	; 0x34
 8019c06:	89a3      	ldrh	r3, [r4, #12]
 8019c08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019c0c:	81a3      	strh	r3, [r4, #12]
 8019c0e:	2300      	movs	r3, #0
 8019c10:	6063      	str	r3, [r4, #4]
 8019c12:	6923      	ldr	r3, [r4, #16]
 8019c14:	6023      	str	r3, [r4, #0]
 8019c16:	89a3      	ldrh	r3, [r4, #12]
 8019c18:	f043 0308 	orr.w	r3, r3, #8
 8019c1c:	81a3      	strh	r3, [r4, #12]
 8019c1e:	6923      	ldr	r3, [r4, #16]
 8019c20:	b94b      	cbnz	r3, 8019c36 <__swsetup_r+0x9a>
 8019c22:	89a3      	ldrh	r3, [r4, #12]
 8019c24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019c2c:	d003      	beq.n	8019c36 <__swsetup_r+0x9a>
 8019c2e:	4621      	mov	r1, r4
 8019c30:	4630      	mov	r0, r6
 8019c32:	f000 f84d 	bl	8019cd0 <__smakebuf_r>
 8019c36:	89a0      	ldrh	r0, [r4, #12]
 8019c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019c3c:	f010 0301 	ands.w	r3, r0, #1
 8019c40:	d00a      	beq.n	8019c58 <__swsetup_r+0xbc>
 8019c42:	2300      	movs	r3, #0
 8019c44:	60a3      	str	r3, [r4, #8]
 8019c46:	6963      	ldr	r3, [r4, #20]
 8019c48:	425b      	negs	r3, r3
 8019c4a:	61a3      	str	r3, [r4, #24]
 8019c4c:	6923      	ldr	r3, [r4, #16]
 8019c4e:	b943      	cbnz	r3, 8019c62 <__swsetup_r+0xc6>
 8019c50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019c54:	d1ba      	bne.n	8019bcc <__swsetup_r+0x30>
 8019c56:	bd70      	pop	{r4, r5, r6, pc}
 8019c58:	0781      	lsls	r1, r0, #30
 8019c5a:	bf58      	it	pl
 8019c5c:	6963      	ldrpl	r3, [r4, #20]
 8019c5e:	60a3      	str	r3, [r4, #8]
 8019c60:	e7f4      	b.n	8019c4c <__swsetup_r+0xb0>
 8019c62:	2000      	movs	r0, #0
 8019c64:	e7f7      	b.n	8019c56 <__swsetup_r+0xba>
 8019c66:	bf00      	nop
 8019c68:	200001a4 	.word	0x200001a4
 8019c6c:	0801aa30 	.word	0x0801aa30
 8019c70:	0801aa50 	.word	0x0801aa50
 8019c74:	0801aa10 	.word	0x0801aa10

08019c78 <abort>:
 8019c78:	b508      	push	{r3, lr}
 8019c7a:	2006      	movs	r0, #6
 8019c7c:	f000 f8b2 	bl	8019de4 <raise>
 8019c80:	2001      	movs	r0, #1
 8019c82:	f7e8 f83b 	bl	8001cfc <_exit>

08019c86 <__swhatbuf_r>:
 8019c86:	b570      	push	{r4, r5, r6, lr}
 8019c88:	460e      	mov	r6, r1
 8019c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c8e:	2900      	cmp	r1, #0
 8019c90:	b096      	sub	sp, #88	; 0x58
 8019c92:	4614      	mov	r4, r2
 8019c94:	461d      	mov	r5, r3
 8019c96:	da08      	bge.n	8019caa <__swhatbuf_r+0x24>
 8019c98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019c9c:	2200      	movs	r2, #0
 8019c9e:	602a      	str	r2, [r5, #0]
 8019ca0:	061a      	lsls	r2, r3, #24
 8019ca2:	d410      	bmi.n	8019cc6 <__swhatbuf_r+0x40>
 8019ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019ca8:	e00e      	b.n	8019cc8 <__swhatbuf_r+0x42>
 8019caa:	466a      	mov	r2, sp
 8019cac:	f000 f8b6 	bl	8019e1c <_fstat_r>
 8019cb0:	2800      	cmp	r0, #0
 8019cb2:	dbf1      	blt.n	8019c98 <__swhatbuf_r+0x12>
 8019cb4:	9a01      	ldr	r2, [sp, #4]
 8019cb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019cba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019cbe:	425a      	negs	r2, r3
 8019cc0:	415a      	adcs	r2, r3
 8019cc2:	602a      	str	r2, [r5, #0]
 8019cc4:	e7ee      	b.n	8019ca4 <__swhatbuf_r+0x1e>
 8019cc6:	2340      	movs	r3, #64	; 0x40
 8019cc8:	2000      	movs	r0, #0
 8019cca:	6023      	str	r3, [r4, #0]
 8019ccc:	b016      	add	sp, #88	; 0x58
 8019cce:	bd70      	pop	{r4, r5, r6, pc}

08019cd0 <__smakebuf_r>:
 8019cd0:	898b      	ldrh	r3, [r1, #12]
 8019cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019cd4:	079d      	lsls	r5, r3, #30
 8019cd6:	4606      	mov	r6, r0
 8019cd8:	460c      	mov	r4, r1
 8019cda:	d507      	bpl.n	8019cec <__smakebuf_r+0x1c>
 8019cdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019ce0:	6023      	str	r3, [r4, #0]
 8019ce2:	6123      	str	r3, [r4, #16]
 8019ce4:	2301      	movs	r3, #1
 8019ce6:	6163      	str	r3, [r4, #20]
 8019ce8:	b002      	add	sp, #8
 8019cea:	bd70      	pop	{r4, r5, r6, pc}
 8019cec:	ab01      	add	r3, sp, #4
 8019cee:	466a      	mov	r2, sp
 8019cf0:	f7ff ffc9 	bl	8019c86 <__swhatbuf_r>
 8019cf4:	9900      	ldr	r1, [sp, #0]
 8019cf6:	4605      	mov	r5, r0
 8019cf8:	4630      	mov	r0, r6
 8019cfa:	f7fe fe4f 	bl	801899c <_malloc_r>
 8019cfe:	b948      	cbnz	r0, 8019d14 <__smakebuf_r+0x44>
 8019d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d04:	059a      	lsls	r2, r3, #22
 8019d06:	d4ef      	bmi.n	8019ce8 <__smakebuf_r+0x18>
 8019d08:	f023 0303 	bic.w	r3, r3, #3
 8019d0c:	f043 0302 	orr.w	r3, r3, #2
 8019d10:	81a3      	strh	r3, [r4, #12]
 8019d12:	e7e3      	b.n	8019cdc <__smakebuf_r+0xc>
 8019d14:	4b0d      	ldr	r3, [pc, #52]	; (8019d4c <__smakebuf_r+0x7c>)
 8019d16:	62b3      	str	r3, [r6, #40]	; 0x28
 8019d18:	89a3      	ldrh	r3, [r4, #12]
 8019d1a:	6020      	str	r0, [r4, #0]
 8019d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d20:	81a3      	strh	r3, [r4, #12]
 8019d22:	9b00      	ldr	r3, [sp, #0]
 8019d24:	6163      	str	r3, [r4, #20]
 8019d26:	9b01      	ldr	r3, [sp, #4]
 8019d28:	6120      	str	r0, [r4, #16]
 8019d2a:	b15b      	cbz	r3, 8019d44 <__smakebuf_r+0x74>
 8019d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019d30:	4630      	mov	r0, r6
 8019d32:	f000 f885 	bl	8019e40 <_isatty_r>
 8019d36:	b128      	cbz	r0, 8019d44 <__smakebuf_r+0x74>
 8019d38:	89a3      	ldrh	r3, [r4, #12]
 8019d3a:	f023 0303 	bic.w	r3, r3, #3
 8019d3e:	f043 0301 	orr.w	r3, r3, #1
 8019d42:	81a3      	strh	r3, [r4, #12]
 8019d44:	89a0      	ldrh	r0, [r4, #12]
 8019d46:	4305      	orrs	r5, r0
 8019d48:	81a5      	strh	r5, [r4, #12]
 8019d4a:	e7cd      	b.n	8019ce8 <__smakebuf_r+0x18>
 8019d4c:	080185c9 	.word	0x080185c9

08019d50 <memmove>:
 8019d50:	4288      	cmp	r0, r1
 8019d52:	b510      	push	{r4, lr}
 8019d54:	eb01 0402 	add.w	r4, r1, r2
 8019d58:	d902      	bls.n	8019d60 <memmove+0x10>
 8019d5a:	4284      	cmp	r4, r0
 8019d5c:	4623      	mov	r3, r4
 8019d5e:	d807      	bhi.n	8019d70 <memmove+0x20>
 8019d60:	1e43      	subs	r3, r0, #1
 8019d62:	42a1      	cmp	r1, r4
 8019d64:	d008      	beq.n	8019d78 <memmove+0x28>
 8019d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019d6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019d6e:	e7f8      	b.n	8019d62 <memmove+0x12>
 8019d70:	4402      	add	r2, r0
 8019d72:	4601      	mov	r1, r0
 8019d74:	428a      	cmp	r2, r1
 8019d76:	d100      	bne.n	8019d7a <memmove+0x2a>
 8019d78:	bd10      	pop	{r4, pc}
 8019d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019d7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019d82:	e7f7      	b.n	8019d74 <memmove+0x24>

08019d84 <_malloc_usable_size_r>:
 8019d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d88:	1f18      	subs	r0, r3, #4
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	bfbc      	itt	lt
 8019d8e:	580b      	ldrlt	r3, [r1, r0]
 8019d90:	18c0      	addlt	r0, r0, r3
 8019d92:	4770      	bx	lr

08019d94 <_raise_r>:
 8019d94:	291f      	cmp	r1, #31
 8019d96:	b538      	push	{r3, r4, r5, lr}
 8019d98:	4604      	mov	r4, r0
 8019d9a:	460d      	mov	r5, r1
 8019d9c:	d904      	bls.n	8019da8 <_raise_r+0x14>
 8019d9e:	2316      	movs	r3, #22
 8019da0:	6003      	str	r3, [r0, #0]
 8019da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019da6:	bd38      	pop	{r3, r4, r5, pc}
 8019da8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019daa:	b112      	cbz	r2, 8019db2 <_raise_r+0x1e>
 8019dac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019db0:	b94b      	cbnz	r3, 8019dc6 <_raise_r+0x32>
 8019db2:	4620      	mov	r0, r4
 8019db4:	f000 f830 	bl	8019e18 <_getpid_r>
 8019db8:	462a      	mov	r2, r5
 8019dba:	4601      	mov	r1, r0
 8019dbc:	4620      	mov	r0, r4
 8019dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019dc2:	f000 b817 	b.w	8019df4 <_kill_r>
 8019dc6:	2b01      	cmp	r3, #1
 8019dc8:	d00a      	beq.n	8019de0 <_raise_r+0x4c>
 8019dca:	1c59      	adds	r1, r3, #1
 8019dcc:	d103      	bne.n	8019dd6 <_raise_r+0x42>
 8019dce:	2316      	movs	r3, #22
 8019dd0:	6003      	str	r3, [r0, #0]
 8019dd2:	2001      	movs	r0, #1
 8019dd4:	e7e7      	b.n	8019da6 <_raise_r+0x12>
 8019dd6:	2400      	movs	r4, #0
 8019dd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019ddc:	4628      	mov	r0, r5
 8019dde:	4798      	blx	r3
 8019de0:	2000      	movs	r0, #0
 8019de2:	e7e0      	b.n	8019da6 <_raise_r+0x12>

08019de4 <raise>:
 8019de4:	4b02      	ldr	r3, [pc, #8]	; (8019df0 <raise+0xc>)
 8019de6:	4601      	mov	r1, r0
 8019de8:	6818      	ldr	r0, [r3, #0]
 8019dea:	f7ff bfd3 	b.w	8019d94 <_raise_r>
 8019dee:	bf00      	nop
 8019df0:	200001a4 	.word	0x200001a4

08019df4 <_kill_r>:
 8019df4:	b538      	push	{r3, r4, r5, lr}
 8019df6:	4d07      	ldr	r5, [pc, #28]	; (8019e14 <_kill_r+0x20>)
 8019df8:	2300      	movs	r3, #0
 8019dfa:	4604      	mov	r4, r0
 8019dfc:	4608      	mov	r0, r1
 8019dfe:	4611      	mov	r1, r2
 8019e00:	602b      	str	r3, [r5, #0]
 8019e02:	f7e7 ff6b 	bl	8001cdc <_kill>
 8019e06:	1c43      	adds	r3, r0, #1
 8019e08:	d102      	bne.n	8019e10 <_kill_r+0x1c>
 8019e0a:	682b      	ldr	r3, [r5, #0]
 8019e0c:	b103      	cbz	r3, 8019e10 <_kill_r+0x1c>
 8019e0e:	6023      	str	r3, [r4, #0]
 8019e10:	bd38      	pop	{r3, r4, r5, pc}
 8019e12:	bf00      	nop
 8019e14:	20012d2c 	.word	0x20012d2c

08019e18 <_getpid_r>:
 8019e18:	f7e7 bf58 	b.w	8001ccc <_getpid>

08019e1c <_fstat_r>:
 8019e1c:	b538      	push	{r3, r4, r5, lr}
 8019e1e:	4d07      	ldr	r5, [pc, #28]	; (8019e3c <_fstat_r+0x20>)
 8019e20:	2300      	movs	r3, #0
 8019e22:	4604      	mov	r4, r0
 8019e24:	4608      	mov	r0, r1
 8019e26:	4611      	mov	r1, r2
 8019e28:	602b      	str	r3, [r5, #0]
 8019e2a:	f7e7 ffed 	bl	8001e08 <_fstat>
 8019e2e:	1c43      	adds	r3, r0, #1
 8019e30:	d102      	bne.n	8019e38 <_fstat_r+0x1c>
 8019e32:	682b      	ldr	r3, [r5, #0]
 8019e34:	b103      	cbz	r3, 8019e38 <_fstat_r+0x1c>
 8019e36:	6023      	str	r3, [r4, #0]
 8019e38:	bd38      	pop	{r3, r4, r5, pc}
 8019e3a:	bf00      	nop
 8019e3c:	20012d2c 	.word	0x20012d2c

08019e40 <_isatty_r>:
 8019e40:	b538      	push	{r3, r4, r5, lr}
 8019e42:	4d06      	ldr	r5, [pc, #24]	; (8019e5c <_isatty_r+0x1c>)
 8019e44:	2300      	movs	r3, #0
 8019e46:	4604      	mov	r4, r0
 8019e48:	4608      	mov	r0, r1
 8019e4a:	602b      	str	r3, [r5, #0]
 8019e4c:	f7e7 ffec 	bl	8001e28 <_isatty>
 8019e50:	1c43      	adds	r3, r0, #1
 8019e52:	d102      	bne.n	8019e5a <_isatty_r+0x1a>
 8019e54:	682b      	ldr	r3, [r5, #0]
 8019e56:	b103      	cbz	r3, 8019e5a <_isatty_r+0x1a>
 8019e58:	6023      	str	r3, [r4, #0]
 8019e5a:	bd38      	pop	{r3, r4, r5, pc}
 8019e5c:	20012d2c 	.word	0x20012d2c

08019e60 <_init>:
 8019e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e62:	bf00      	nop
 8019e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e66:	bc08      	pop	{r3}
 8019e68:	469e      	mov	lr, r3
 8019e6a:	4770      	bx	lr

08019e6c <_fini>:
 8019e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e6e:	bf00      	nop
 8019e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e72:	bc08      	pop	{r3}
 8019e74:	469e      	mov	lr, r3
 8019e76:	4770      	bx	lr
